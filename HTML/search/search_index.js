var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Project Documentation","text":""},{"location":"index.html#project-description","title":"Project Description","text":"<p>CardDemo is a comprehensive mainframe application designed to showcase AWS and partner technologies for mainframe migration and modernization use-cases.</p>"},{"location":"index.html#summary","title":"Summary","text":"<p>CardDemo simulates a credit card processing system with complete functionality for account management, transaction processing, user administration, and reporting. The application demonstrates various mainframe technologies and patterns to serve as a test bed for migration strategies, modernization approaches, service enablement, and performance testing. It includes both online (CICS) and batch components that work together to provide a complete business solution.</p>"},{"location":"index.html#technologies","title":"Technologies","text":"<ul> <li>COBOL</li> <li>CICS (Customer Information Control System)</li> <li>JCL (Job Control Language)</li> <li>VSAM (Virtual Storage Access Method)</li> <li>IBM Language Environment</li> <li>Batch processing</li> <li>Transient Data Queues (TDQ)</li> </ul>"},{"location":"index.html#dependencies","title":"Dependencies","text":"<ul> <li>VSAM Files:</li> <li>CUSTFILE (Customer information)</li> <li>ACCTFILE/ACCTDAT (Account data)</li> <li>CARDFILE/CARDDAT (Credit card information)</li> <li>TRANSACT (Transaction records)</li> <li>CXACAIX (Account cross-reference)</li> <li>USRSEC (User security information)</li> <li>XREFFILE (Card-to-account cross-reference)</li> <li>TRANTYPE (Transaction type definitions)</li> <li>TRANCATG (Transaction category definitions)</li> <li>DISCGRP (Disclosure group/interest rate information)</li> <li>Batch Jobs:</li> <li>POSTTRAN (Transaction posting)</li> <li>INTCALC (Interest calculation)</li> <li>TRANREPT (Transaction reporting)</li> <li>COMBTRAN (Transaction processing)</li> <li>Utilities:</li> <li>CSUTLDTC (Date validation utility)</li> </ul>"},{"location":"index.html#starting-points","title":"Starting Points","text":"<ul> <li>Online Entry Points:</li> <li>COSGN00C: Sign-on screen and authentication</li> <li>COMEN01C: Main menu for regular users</li> <li>COADM01C: Administrative menu</li> <li>Key Batch Processes:</li> <li>CBTRN01C: Daily transaction validation</li> <li>CBTRN02C: Transaction posting to accounts</li> <li>CBACT04C: Interest calculation</li> <li>CBTRN03C: Transaction reporting</li> <li>Core Business Functions:</li> <li>COTRN00C/COTRN01C: Transaction viewing</li> <li>COTRN02C: Transaction entry</li> <li>COBIL00C: Bill payment</li> <li>COACTVWC: Account viewing</li> <li>COCRDLIC: Credit card listing</li> </ul>"},{"location":"index.html#architecture","title":"Architecture","text":"<p>CardDemo follows a traditional mainframe architecture with separation between online and batch components. The online system is built on CICS with screen-based navigation between related functions, while batch processes handle periodic tasks like transaction posting and interest calculation.</p> <p>The application uses a modular design with clear separation of concerns: - User interface components (CO programs) handle screen interactions - Batch programs (CB programs) process data in bulk - Utility components (CS* programs) provide shared functionality - Data is stored in VSAM files with indexed access for online lookups</p> <p>The system maintains data integrity through proper file handling, transaction management, and validation routines. It demonstrates typical mainframe patterns including master file updates, transaction processing, reporting, and administrative functions. The application uses a communication area (commarea) to maintain context between screens and implements role-based access control for administrative functions.</p>"},{"location":"CBACT01C.html","title":"CBACT01C","text":""},{"location":"CBACT01C.html#overview","title":"Overview","text":"<p>This batch COBOL program (CBACT01C) reads and displays account data from an indexed VSAM file. It sequentially processes account records from the ACCTFILE, displaying detailed account information for each record including account ID, status, balance, credit limits, and dates. The program includes comprehensive error handling for file operations, with specific routines for opening, reading, and closing the file. If any file operation errors occur, the program displays the error status and terminates with an abend. The program is part of the CardDemo application, which demonstrates AWS and partner technologies for mainframe migration and modernization scenarios.</p>"},{"location":"CBACT01C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>CBACT01C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"CBACT01C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant Main as Main Program\n    participant OpenFile as 0000-ACCTFILE-OPEN\n    participant GetNext as 1000-ACCTFILE-GET-NEXT\n    participant Display as 1100-DISPLAY-ACCT-RECORD\n    participant CloseFile as 9000-ACCTFILE-CLOSE\n    participant IOStatus as 9910-DISPLAY-IO-STATUS\n    participant Abend as 9999-ABEND-PROGRAM\n    participant VSAM as ACCTFILE (VSAM File)\n\n    Main-&gt;&gt;OpenFile: Call to open file\n    activate OpenFile\n    OpenFile-&gt;&gt;VSAM: OPEN INPUT ACCTFILE-FILE\n    alt File opened successfully\n        VSAM--&gt;&gt;OpenFile: Status = '00'\n        OpenFile--&gt;&gt;Main: Return (APPL-RESULT = 0)\n    else File open error\n        VSAM--&gt;&gt;OpenFile: Error status\n        OpenFile-&gt;&gt;IOStatus: PERFORM 9910-DISPLAY-IO-STATUS\n        OpenFile-&gt;&gt;Abend: PERFORM 9999-ABEND-PROGRAM\n        Abend--&gt;&gt;Main: Program terminates\n    end\n    deactivate OpenFile\n\n    loop Until END-OF-FILE = 'Y'\n        Main-&gt;&gt;GetNext: Call to read next record\n        activate GetNext\n        GetNext-&gt;&gt;VSAM: READ ACCTFILE-FILE\n        alt Read successful\n            VSAM--&gt;&gt;GetNext: Status = '00'\n            GetNext-&gt;&gt;Display: PERFORM 1100-DISPLAY-ACCT-RECORD\n            activate Display\n            Display--&gt;&gt;GetNext: Return after displaying record\n            deactivate Display\n            GetNext--&gt;&gt;Main: Continue processing\n        else End of file\n            VSAM--&gt;&gt;GetNext: Status = '10'\n            GetNext--&gt;&gt;Main: Set END-OF-FILE = 'Y'\n        else Read error\n            VSAM--&gt;&gt;GetNext: Error status\n            GetNext-&gt;&gt;IOStatus: PERFORM 9910-DISPLAY-IO-STATUS\n            GetNext-&gt;&gt;Abend: PERFORM 9999-ABEND-PROGRAM\n            Abend--&gt;&gt;Main: Program terminates\n        end\n        deactivate GetNext\n    end\n\n    Main-&gt;&gt;CloseFile: Call to close file\n    activate CloseFile\n    CloseFile-&gt;&gt;VSAM: CLOSE ACCTFILE-FILE\n    alt File closed successfully\n        VSAM--&gt;&gt;CloseFile: Status = '00'\n        CloseFile--&gt;&gt;Main: Return (APPL-RESULT = 0)\n    else File close error\n        VSAM--&gt;&gt;CloseFile: Error status\n        CloseFile-&gt;&gt;IOStatus: PERFORM 9910-DISPLAY-IO-STATUS\n        CloseFile-&gt;&gt;Abend: PERFORM 9999-ABEND-PROGRAM\n        Abend--&gt;&gt;Main: Program terminates\n    end\n    deactivate CloseFile</code></pre>"},{"location":"CBACT01C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CVACT01Y</code></li> </ul>"},{"location":"CBACT01C.html#environment-division","title":"Environment Division","text":""},{"location":"CBACT01C.html#input-output-section","title":"INPUT-OUTPUT SECTION","text":"<p>This environment section defines the file control parameters for ACCTFILE-FILE, which is the indexed VSAM file containing account records. The file is configured for sequential access mode, using FD-ACCT-ID as the record key. File operations status will be tracked through the ACCTFILE-STATUS field, allowing the program to implement error handling for file operations. The file is externally assigned to the ACCTFILE DD name, which would be defined in the JCL that executes this program.</p> Code <pre><code>FILE-CONTROL.                                                            \n           SELECT ACCTFILE-FILE ASSIGN TO ACCTFILE                              \n                  ORGANIZATION IS INDEXED                                       \n                  ACCESS MODE  IS SEQUENTIAL                                    \n                  RECORD KEY   IS FD-ACCT-ID                                    \n                  FILE STATUS  IS ACCTFILE-STATUS.                              \n      *\n</code></pre>"},{"location":"CBACT01C.html#data-division","title":"Data Division","text":""},{"location":"CBACT01C.html#file-section","title":"FILE SECTION","text":"<p>This section defines the file structure for ACCTFILE-FILE, which contains account records being processed by the program. Each record consists of two fields: an 11-digit numeric account identifier (FD-ACCT-ID) and a 289-character data portion (FD-ACCT-DATA) that holds the remaining account information. This structure allows the program to access the account ID separately from the rest of the account data when reading records from the VSAM file.</p> Code <pre><code>FD  ACCTFILE-FILE.                                                       \n       01  FD-ACCTFILE-REC.                                                     \n           05 FD-ACCT-ID                        PIC 9(11).                      \n           05 FD-ACCT-DATA                      PIC X(289).\n</code></pre>"},{"location":"CBACT01C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage Section defines the data structures used for file status tracking and error handling in the CBACT01C program. It includes the CVACT01Y copybook, file status fields for the ACCTFILE (ACCTFILE-STATUS), and general I/O status tracking variables. The section contains binary fields for status code conversion, application result codes with condition names for success (APPL-AOK) and end-of-file (APPL-EOF) states, an END-OF-FILE flag, and fields for storing abend codes and timing information. These variables support the program's file operations and error handling capabilities when processing account records.</p> Code <pre><code>*****************************************************************         \n       COPY CVACT01Y.                                                           \n       01  ACCTFILE-STATUS.                                                     \n           05  ACCTFILE-STAT1      PIC X.                                       \n           05  ACCTFILE-STAT2      PIC X.                                       \n\n       01  IO-STATUS.                                                           \n           05  IO-STAT1            PIC X.                                       \n           05  IO-STAT2            PIC X.                                       \n       01  TWO-BYTES-BINARY        PIC 9(4) BINARY.                             \n       01  TWO-BYTES-ALPHA         REDEFINES TWO-BYTES-BINARY.                  \n           05  TWO-BYTES-LEFT      PIC X.                                       \n           05  TWO-BYTES-RIGHT     PIC X.                                       \n       01  IO-STATUS-04.                                                        \n           05  IO-STATUS-0401      PIC 9   VALUE 0.                             \n           05  IO-STATUS-0403      PIC 999 VALUE 0.                             \n\n       01  APPL-RESULT             PIC S9(9)   COMP.                            \n           88  APPL-AOK            VALUE 0.                                     \n           88  APPL-EOF            VALUE 16.                                    \n\n       01  END-OF-FILE             PIC X(01)    VALUE 'N'.                      \n       01  ABCODE                  PIC S9(9) BINARY.                            \n       01  TIMING                  PIC S9(9) BINARY.                            \n\n      *****************************************************************\n</code></pre>"},{"location":"CBACT01C.html#procedure-division","title":"Procedure Division","text":""},{"location":"CBACT01C.html#1000-acctfile-get-next","title":"1000-ACCTFILE-GET-NEXT","text":"<p>This paragraph handles the sequential reading of account records from the ACCTFILE. It reads the next record into the ACCOUNT-RECORD structure and processes the result based on the file status. If the read is successful (status '00'), it sets APPL-RESULT to 0 and displays the account record by calling the 1100-DISPLAY-ACCT-RECORD paragraph. If the end of file is reached (status '10'), it sets APPL-RESULT to 16. For any other file status, it sets APPL-RESULT to 12, indicating an error. The paragraph then evaluates APPL-RESULT: if processing is successful, it continues; if end-of-file is detected, it sets the END-OF-FILE flag to 'Y'; for any other error, it displays an error message, shows the file status via 9910-DISPLAY-IO-STATUS, and terminates the program by calling 9999-ABEND-PROGRAM.</p> Code <pre><code>READ ACCTFILE-FILE INTO ACCOUNT-RECORD.                              \n           IF  ACCTFILE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n               PERFORM 1100-DISPLAY-ACCT-RECORD                                 \n           ELSE                                                                 \n               IF  ACCTFILE-STATUS = '10'                                       \n                   MOVE 16 TO APPL-RESULT                                       \n               ELSE                                                             \n                   MOVE 12 TO APPL-RESULT                                       \n               END-IF                                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               IF  APPL-EOF                                                     \n                   MOVE 'Y' TO END-OF-FILE                                      \n               ELSE                                                             \n                   DISPLAY 'ERROR READING ACCOUNT FILE'                         \n                   MOVE ACCTFILE-STATUS TO IO-STATUS                            \n                   PERFORM 9910-DISPLAY-IO-STATUS                               \n                   PERFORM 9999-ABEND-PROGRAM                                   \n               END-IF                                                           \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT01C.html#1100-display-acct-record","title":"1100-DISPLAY-ACCT-RECORD","text":"<p>This paragraph displays the details of an account record to the console output. It formats and prints all key account information including the account ID, active status, current balance, credit limits (both regular and cash), important dates (open date, expiration date, reissue date), current cycle credit and debit amounts, and the account group ID. After displaying all fields, it prints a separator line of dashes and exits the paragraph. This routine is used for data verification and debugging purposes when processing account records.</p> Code <pre><code>DISPLAY 'ACCT-ID                 :'   ACCT-ID                        \n           DISPLAY 'ACCT-ACTIVE-STATUS      :'   ACCT-ACTIVE-STATUS             \n           DISPLAY 'ACCT-CURR-BAL           :'   ACCT-CURR-BAL                  \n           DISPLAY 'ACCT-CREDIT-LIMIT       :'   ACCT-CREDIT-LIMIT              \n           DISPLAY 'ACCT-CASH-CREDIT-LIMIT  :'   ACCT-CASH-CREDIT-LIMIT         \n           DISPLAY 'ACCT-OPEN-DATE          :'   ACCT-OPEN-DATE                 \n           DISPLAY 'ACCT-EXPIRAION-DATE     :'   ACCT-EXPIRAION-DATE            \n           DISPLAY 'ACCT-REISSUE-DATE       :'   ACCT-REISSUE-DATE              \n           DISPLAY 'ACCT-CURR-CYC-CREDIT    :'   ACCT-CURR-CYC-CREDIT           \n           DISPLAY 'ACCT-CURR-CYC-DEBIT     :'   ACCT-CURR-CYC-DEBIT            \n           DISPLAY 'ACCT-GROUP-ID           :'   ACCT-GROUP-ID                  \n           DISPLAY '-------------------------------------------------'          \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT01C.html#0000-acctfile-open","title":"0000-ACCTFILE-OPEN","text":"<p>This paragraph handles the opening of the ACCTFILE-FILE for input processing. It initializes APPL-RESULT to 8, attempts to open the file, and then sets APPL-RESULT to 0 if successful or 12 if unsuccessful. If the operation fails (APPL-AOK is not true), it displays an error message, captures the file status code, calls a routine to display the I/O status details, and then terminates the program with an abend. The paragraph includes proper error handling to ensure file access issues are clearly reported before program termination.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN INPUT ACCTFILE-FILE                                             \n           IF  ACCTFILE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING ACCTFILE'                                 \n               MOVE ACCTFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT01C.html#9000-acctfile-close","title":"9000-ACCTFILE-CLOSE","text":"<p>This paragraph handles the closing of the ACCTFILE-FILE and includes error handling logic. It first sets APPL-RESULT to 8, then attempts to close the file. If the operation is successful (status code '00'), it resets APPL-RESULT to zero; otherwise, it sets APPL-RESULT to 12 to indicate an error. When an error occurs, the paragraph displays an error message, captures the file status code, calls a routine to display the I/O status details, and then terminates the program with an abend. This ensures proper resource cleanup and provides meaningful error information when file closing operations fail.</p> Code <pre><code>ADD 8 TO ZERO GIVING APPL-RESULT.                                    \n           CLOSE ACCTFILE-FILE                                                  \n           IF  ACCTFILE-STATUS = '00'                                           \n               SUBTRACT APPL-RESULT FROM APPL-RESULT                            \n           ELSE                                                                 \n               ADD 12 TO ZERO GIVING APPL-RESULT                                \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING ACCOUNT FILE'                             \n               MOVE ACCTFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.\n</code></pre>"},{"location":"CBACT01C.html#9999-abend-program","title":"9999-ABEND-PROGRAM","text":"<p>This paragraph handles program termination when a critical error occurs. It displays an \"ABENDING PROGRAM\" message, resets the TIMING variable to zero, sets the abend code to 999, and then calls the Language Environment service 'CEE3ABD' to abnormally terminate the program. This provides a controlled way to end execution when unrecoverable errors are encountered, ensuring the program doesn't continue processing with invalid data or states.</p> Code <pre><code>DISPLAY 'ABENDING PROGRAM'                                           \n           MOVE 0 TO TIMING                                                     \n           MOVE 999 TO ABCODE                                                   \n           CALL 'CEE3ABD'.                                                      \n\n      *****************************************************************\n</code></pre>"},{"location":"CBACT01C.html#9910-display-io-status","title":"9910-DISPLAY-IO-STATUS","text":"<p>This paragraph handles the formatting and display of file I/O status codes for error reporting. When an I/O error occurs, it processes the status code differently based on whether it's numeric or if the first digit is '9' (indicating a serious error). For these special cases, it preserves the first digit and converts the second digit to a 4-digit display format. For standard numeric status codes, it formats them as a 4-digit code with leading zeros. The formatted status code is then displayed with a descriptive message to help with troubleshooting file operations. This standardized error reporting ensures consistent and clear communication of file operation issues.</p> Code <pre><code>IF  IO-STATUS NOT NUMERIC                                            \n           OR  IO-STAT1 = '9'                                                   \n               MOVE IO-STAT1 TO IO-STATUS-04(1:1)                               \n               MOVE 0        TO TWO-BYTES-BINARY                                \n               MOVE IO-STAT2 TO TWO-BYTES-RIGHT                                 \n               MOVE TWO-BYTES-BINARY TO IO-STATUS-0403                          \n               DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04                      \n           ELSE                                                                 \n               MOVE '0000' TO IO-STATUS-04                                      \n               MOVE IO-STATUS TO IO-STATUS-04(3:2)                              \n               DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04                      \n           END-IF                                                               \n           EXIT.                                                                \n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:31 CDT\n      *\n</code></pre>"},{"location":"CBACT02C.html","title":"CBACT02C","text":""},{"location":"CBACT02C.html#overview","title":"Overview","text":"<p>This batch program reads card data from an indexed VSAM file and displays each record. It sequentially processes the CARDFILE, which contains credit card information, and prints the contents to standard output. The program includes comprehensive error handling for file operations (open, read, close) with detailed status code reporting. It incorporates standard file processing patterns with status checking after each operation and will terminate with a controlled abend if any errors occur. The program is part of the CardDemo application suite designed to showcase AWS mainframe migration capabilities.</p>"},{"location":"CBACT02C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>CBACT02C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"CBACT02C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant Main as Main Program\n    participant Open as 0000-CARDFILE-OPEN\n    participant Read as 1000-CARDFILE-GET-NEXT\n    participant Close as 9000-CARDFILE-CLOSE\n    participant Status as 9910-DISPLAY-IO-STATUS\n    participant Abend as 9999-ABEND-PROGRAM\n    participant VSAM as CARDFILE-FILE (VSAM)\n\n    Main-&gt;&gt;Open: Perform file open\n    Open-&gt;&gt;VSAM: OPEN INPUT\n    VSAM--&gt;&gt;Open: Return status\n\n    alt File open successful\n        Open--&gt;&gt;Main: Continue processing\n\n        loop Until END-OF-FILE = 'Y'\n            Main-&gt;&gt;Read: Perform read next record\n            Read-&gt;&gt;VSAM: READ INTO CARD-RECORD\n            VSAM--&gt;&gt;Read: Return status\n\n            alt Read successful (status '00')\n                Read--&gt;&gt;Main: APPL-RESULT = 0\n            else End of file (status '10')\n                Read-&gt;&gt;Read: Set END-OF-FILE = 'Y'\n                Read--&gt;&gt;Main: APPL-RESULT = 16\n            else Read error\n                Read-&gt;&gt;Status: PERFORM 9910-DISPLAY-IO-STATUS\n                Status-&gt;&gt;Status: Format and display status code\n                Status--&gt;&gt;Read: Return\n                Read-&gt;&gt;Abend: PERFORM 9999-ABEND-PROGRAM\n                Abend-&gt;&gt;Abend: Display message\n                Abend-&gt;&gt;Abend: Call CEE3ABD\n                Note over Abend: Program terminates\n            end\n        end\n\n        Main-&gt;&gt;Close: Perform file close\n        Close-&gt;&gt;VSAM: CLOSE\n        VSAM--&gt;&gt;Close: Return status\n\n        alt Close successful\n            Close--&gt;&gt;Main: Continue processing\n        else Close error\n            Close-&gt;&gt;Status: PERFORM 9910-DISPLAY-IO-STATUS\n            Status-&gt;&gt;Status: Format and display status code\n            Status--&gt;&gt;Close: Return\n            Close-&gt;&gt;Abend: PERFORM 9999-ABEND-PROGRAM\n            Abend-&gt;&gt;Abend: Display message\n            Abend-&gt;&gt;Abend: Call CEE3ABD\n            Note over Abend: Program terminates\n        end\n\n    else File open error\n        Open-&gt;&gt;Status: PERFORM 9910-DISPLAY-IO-STATUS\n        Status-&gt;&gt;Status: Format and display status code\n        Status--&gt;&gt;Open: Return\n        Open-&gt;&gt;Abend: PERFORM 9999-ABEND-PROGRAM\n        Abend-&gt;&gt;Abend: Display message\n        Abend-&gt;&gt;Abend: Call CEE3ABD\n        Note over Abend: Program terminates\n    end</code></pre>"},{"location":"CBACT02C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CVACT02Y</code></li> </ul>"},{"location":"CBACT02C.html#environment-division","title":"Environment Division","text":""},{"location":"CBACT02C.html#input-output-section","title":"INPUT-OUTPUT SECTION","text":"<p>This section configures the CARDFILE-FILE as an indexed VSAM file with sequential access mode. It assigns the file to the external name CARDFILE, defines FD-CARD-NUM as the primary key field, and establishes CARDFILE-STATUS as the file status variable for error handling. The file will be processed sequentially, allowing the program to read through all card records in order.</p> Code <pre><code>FILE-CONTROL.                                                            \n           SELECT CARDFILE-FILE ASSIGN TO   CARDFILE                            \n                  ORGANIZATION IS INDEXED                                       \n                  ACCESS MODE  IS SEQUENTIAL                                    \n                  RECORD KEY   IS FD-CARD-NUM                                   \n                  FILE STATUS  IS CARDFILE-STATUS.                              \n      *\n</code></pre>"},{"location":"CBACT02C.html#data-division","title":"Data Division","text":""},{"location":"CBACT02C.html#file-section","title":"FILE SECTION","text":"<p>This section defines the file structure for CARDFILE-FILE, which contains credit card records. The record layout consists of two fields: a 16-character card number field (FD-CARD-NUM) and a 134-character field for additional card data (FD-CARD-DATA). This structure is used to read credit card information from the indexed VSAM file that the program processes.</p> Code <pre><code>FD  CARDFILE-FILE.                                                       \n       01  FD-CARDFILE-REC.                                                     \n           05 FD-CARD-NUM                       PIC X(16).                      \n           05 FD-CARD-DATA                      PIC X(134).\n</code></pre>"},{"location":"CBACT02C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage section defines the data structures used for file status tracking and error handling in the CBACT02C program. It includes file status variables for CARDFILE operations, binary-to-character conversion fields, and program control flags. The section incorporates the CVACT02Y copybook and defines status codes for tracking file operations with detailed error reporting capabilities. Key elements include the APPL-RESULT field with condition names for normal processing and end-of-file conditions, an END-OF-FILE flag, and fields for storing abend codes and timing information. These structures support the program's primary function of reading and displaying card data while providing robust error handling.</p> Code <pre><code>*****************************************************************         \n       COPY CVACT02Y.                                                           \n       01  CARDFILE-STATUS.                                                     \n           05  CARDFILE-STAT1      PIC X.                                       \n           05  CARDFILE-STAT2      PIC X.                                       \n\n       01  IO-STATUS.                                                           \n           05  IO-STAT1            PIC X.                                       \n           05  IO-STAT2            PIC X.                                       \n       01  TWO-BYTES-BINARY        PIC 9(4) BINARY.                             \n       01  TWO-BYTES-ALPHA         REDEFINES TWO-BYTES-BINARY.                  \n           05  TWO-BYTES-LEFT      PIC X.                                       \n           05  TWO-BYTES-RIGHT     PIC X.                                       \n       01  IO-STATUS-04.                                                        \n           05  IO-STATUS-0401      PIC 9   VALUE 0.                             \n           05  IO-STATUS-0403      PIC 999 VALUE 0.                             \n\n       01  APPL-RESULT             PIC S9(9)   COMP.                            \n           88  APPL-AOK            VALUE 0.                                     \n           88  APPL-EOF            VALUE 16.                                    \n\n       01  END-OF-FILE             PIC X(01)    VALUE 'N'.                      \n       01  ABCODE                  PIC S9(9) BINARY.                            \n       01  TIMING                  PIC S9(9) BINARY.                            \n\n      *****************************************************************\n</code></pre>"},{"location":"CBACT02C.html#procedure-division","title":"Procedure Division","text":""},{"location":"CBACT02C.html#1000-cardfile-get-next","title":"1000-CARDFILE-GET-NEXT","text":"<p>This paragraph handles the sequential reading of records from the CARDFILE-FILE and processes the result based on file status codes. It reads a record into CARD-RECORD and sets APPL-RESULT to 0 for successful reads (status '00'), 16 for end-of-file conditions (status '10'), or 12 for other errors. When a record is successfully read, processing continues. When end-of-file is reached, it sets END-OF-FILE to 'Y'. For any other file errors, it displays an error message, captures the file status code, calls procedures to display the status details (9910-DISPLAY-IO-STATUS) and terminates the program with a controlled abend (9999-ABEND-PROGRAM). This paragraph implements standard error handling for sequential file reading operations within the CardDemo application.</p> Code <pre><code>READ CARDFILE-FILE INTO CARD-RECORD.                                 \n           IF  CARDFILE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n      *        DISPLAY CARD-RECORD                                              \n           ELSE                                                                 \n               IF  CARDFILE-STATUS = '10'                                       \n                   MOVE 16 TO APPL-RESULT                                       \n               ELSE                                                             \n                   MOVE 12 TO APPL-RESULT                                       \n               END-IF                                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               IF  APPL-EOF                                                     \n                   MOVE 'Y' TO END-OF-FILE                                      \n               ELSE                                                             \n                   DISPLAY 'ERROR READING CARDFILE'                             \n                   MOVE CARDFILE-STATUS TO IO-STATUS                            \n                   PERFORM 9910-DISPLAY-IO-STATUS                               \n                   PERFORM 9999-ABEND-PROGRAM                                   \n               END-IF                                                           \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT02C.html#0000-cardfile-open","title":"0000-CARDFILE-OPEN","text":"<p>This paragraph handles the opening of the CARDFILE-FILE for input processing. It initializes APPL-RESULT to 8, attempts to open the file, and then sets APPL-RESULT to 0 if successful or 12 if unsuccessful based on the CARDFILE-STATUS. If the operation fails (when APPL-AOK is not true), it displays an error message, captures the file status code, calls a routine to display the I/O status details, and then terminates the program with a controlled abend. The paragraph implements standard error handling for file opening operations with appropriate status reporting.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN INPUT CARDFILE-FILE                                             \n           IF  CARDFILE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING CARDFILE'                                 \n               MOVE CARDFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT02C.html#9000-cardfile-close","title":"9000-CARDFILE-CLOSE","text":"<p>This paragraph handles the closing of the CARDFILE-FILE and implements error handling for the operation. It first sets APPL-RESULT to 8, then attempts to close the file. If the operation is successful (status code '00'), it resets APPL-RESULT to zero, indicating normal processing. If the close operation fails, it sets APPL-RESULT to 12, indicating an error. When an error occurs, the paragraph displays an error message, captures the file status code, calls a routine to display the I/O status details, and then terminates the program with a controlled abend. This ensures proper resource cleanup and provides diagnostic information when file closing operations fail.</p> Code <pre><code>ADD 8 TO ZERO GIVING APPL-RESULT.                                    \n           CLOSE CARDFILE-FILE                                                  \n           IF  CARDFILE-STATUS = '00'                                           \n               SUBTRACT APPL-RESULT FROM APPL-RESULT                            \n           ELSE                                                                 \n               ADD 12 TO ZERO GIVING APPL-RESULT                                \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING CARDFILE'                                 \n               MOVE CARDFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.\n</code></pre>"},{"location":"CBACT02C.html#9999-abend-program","title":"9999-ABEND-PROGRAM","text":"<p>This paragraph handles program termination with a controlled abend. When called, it displays an \"ABENDING PROGRAM\" message, resets the TIMING variable to zero, sets the abend code to 999, and then invokes the Language Environment service 'CEE3ABD' to abnormally terminate the program. This is likely used as part of the error handling strategy when unrecoverable errors are encountered during file processing.</p> Code <pre><code>DISPLAY 'ABENDING PROGRAM'                                           \n           MOVE 0 TO TIMING                                                     \n           MOVE 999 TO ABCODE                                                   \n           CALL 'CEE3ABD'.                                                      \n\n      *****************************************************************\n</code></pre>"},{"location":"CBACT02C.html#9910-display-io-status","title":"9910-DISPLAY-IO-STATUS","text":"<p>This paragraph handles the formatting and display of file I/O status codes for error reporting. It performs special processing for extended file status codes (when the first byte is '9' or the status is non-numeric), converting the second byte to a proper display format. For standard status codes, it formats them with leading zeros. In both cases, it displays the formatted status code with a descriptive message. This standardized error handling routine ensures consistent reporting of file operation results throughout the program, which aids in troubleshooting file access issues.</p> Code <pre><code>IF  IO-STATUS NOT NUMERIC                                            \n           OR  IO-STAT1 = '9'                                                   \n               MOVE IO-STAT1 TO IO-STATUS-04(1:1)                               \n               MOVE 0        TO TWO-BYTES-BINARY                                \n               MOVE IO-STAT2 TO TWO-BYTES-RIGHT                                 \n               MOVE TWO-BYTES-BINARY TO IO-STATUS-0403                          \n               DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04                      \n           ELSE                                                                 \n               MOVE '0000' TO IO-STATUS-04                                      \n               MOVE IO-STATUS TO IO-STATUS-04(3:2)                              \n               DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04                      \n           END-IF                                                               \n           EXIT.                                                                \n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:31 CDT\n      *\n</code></pre>"},{"location":"CBACT03C.html","title":"CBACT03C","text":""},{"location":"CBACT03C.html#overview","title":"Overview","text":"<p>This batch COBOL program (CBACT03C) reads and displays account cross-reference data from an indexed VSAM file. It sequentially processes records from the XREFFILE, displaying each record's content until the end of file is reached. The program includes comprehensive error handling for file operations (open, read, close) with detailed status code reporting and program termination via CEE3ABD in case of errors. It's part of the CardDemo application, which demonstrates AWS and partner technologies for mainframe migration and modernization use cases.</p>"},{"location":"CBACT03C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>CBACT03C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"CBACT03C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CVACT03Y</code></li> </ul>"},{"location":"CBACT03C.html#environment-division","title":"Environment Division","text":""},{"location":"CBACT03C.html#input-output-section","title":"INPUT-OUTPUT SECTION","text":"<p>This section defines the file control parameters for the XREFFILE-FILE, which is an indexed VSAM file containing account cross-reference data. The file is configured for sequential access mode with FD-XREF-CARD-NUM as the record key. The program tracks file operation status through the XREFFILE-STATUS field, which is used for error handling during file operations.</p> Code <pre><code>FILE-CONTROL.                                                            \n           SELECT XREFFILE-FILE ASSIGN TO   XREFFILE                            \n                  ORGANIZATION IS INDEXED                                       \n                  ACCESS MODE  IS SEQUENTIAL                                    \n                  RECORD KEY   IS FD-XREF-CARD-NUM                              \n                  FILE STATUS  IS XREFFILE-STATUS.                              \n      *\n</code></pre>"},{"location":"CBACT03C.html#data-division","title":"Data Division","text":""},{"location":"CBACT03C.html#file-section","title":"FILE SECTION","text":"<p>This section defines the file structure for the XREFFILE, which contains account cross-reference data. The record layout consists of two fields: a 16-character card number field (FD-XREF-CARD-NUM) and a 34-character data field (FD-XREF-DATA). This structure is used by the program to read and process account cross-reference information from the indexed VSAM file.</p> Code <pre><code>FD  XREFFILE-FILE.                                                       \n       01  FD-XREFFILE-REC.                                                     \n           05 FD-XREF-CARD-NUM                  PIC X(16).                      \n           05 FD-XREF-DATA                      PIC X(34).\n</code></pre>"},{"location":"CBACT03C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage Section defines the data structures used for file status tracking and error handling in the CBACT03C program. It includes the CVACT03Y copybook, file status fields for the XREFFILE (XREFFILE-STATUS), general I/O status tracking variables, and binary-to-character conversion fields. The section also contains program control variables including APPL-RESULT with condition names for normal processing (APPL-AOK) and end-of-file conditions (APPL-EOF), an END-OF-FILE flag, an ABCODE field for abnormal termination, and a TIMING field. These structures support the program's primary function of reading and displaying account cross-reference data with robust error handling.</p> Code <pre><code>*****************************************************************         \n       COPY CVACT03Y.                                                           \n       01  XREFFILE-STATUS.                                                     \n           05  XREFFILE-STAT1      PIC X.                                       \n           05  XREFFILE-STAT2      PIC X.                                       \n\n       01  IO-STATUS.                                                           \n           05  IO-STAT1            PIC X.                                       \n           05  IO-STAT2            PIC X.                                       \n       01  TWO-BYTES-BINARY        PIC 9(4) BINARY.                             \n       01  TWO-BYTES-ALPHA         REDEFINES TWO-BYTES-BINARY.                  \n           05  TWO-BYTES-LEFT      PIC X.                                       \n           05  TWO-BYTES-RIGHT     PIC X.                                       \n       01  IO-STATUS-04.                                                        \n           05  IO-STATUS-0401      PIC 9   VALUE 0.                             \n           05  IO-STATUS-0403      PIC 999 VALUE 0.                             \n\n       01  APPL-RESULT             PIC S9(9)   COMP.                            \n           88  APPL-AOK            VALUE 0.                                     \n           88  APPL-EOF            VALUE 16.                                    \n\n       01  END-OF-FILE             PIC X(01)    VALUE 'N'.                      \n       01  ABCODE                  PIC S9(9) BINARY.                            \n       01  TIMING                  PIC S9(9) BINARY.                            \n\n      *****************************************************************\n</code></pre>"},{"location":"CBACT03C.html#procedure-division","title":"Procedure Division","text":""},{"location":"CBACT03C.html#1000-xreffile-get-next","title":"1000-XREFFILE-GET-NEXT","text":"<p>This paragraph handles the sequential reading of records from the XREFFILE. It reads a record into CARD-XREF-RECORD and processes the result based on the file status. When a record is successfully read (status '00'), it sets APPL-RESULT to 0 and displays the record. For end-of-file condition (status '10'), it sets APPL-RESULT to 16. Any other status is treated as an error with APPL-RESULT set to 12. The paragraph then evaluates APPL-RESULT: if processing was successful, it continues; if end-of-file was reached, it sets END-OF-FILE flag to 'Y'; for any other error, it displays an error message, captures the file status, calls routines to display the status details and abnormally terminate the program.</p> Code <pre><code>READ XREFFILE-FILE INTO CARD-XREF-RECORD.                            \n           IF  XREFFILE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n               DISPLAY CARD-XREF-RECORD                                         \n           ELSE                                                                 \n               IF  XREFFILE-STATUS = '10'                                       \n                   MOVE 16 TO APPL-RESULT                                       \n               ELSE                                                             \n                   MOVE 12 TO APPL-RESULT                                       \n               END-IF                                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               IF  APPL-EOF                                                     \n                   MOVE 'Y' TO END-OF-FILE                                      \n               ELSE                                                             \n                   DISPLAY 'ERROR READING XREFFILE'                             \n                   MOVE XREFFILE-STATUS TO IO-STATUS                            \n                   PERFORM 9910-DISPLAY-IO-STATUS                               \n                   PERFORM 9999-ABEND-PROGRAM                                   \n               END-IF                                                           \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT03C.html#0000-xreffile-open","title":"0000-XREFFILE-OPEN","text":"<p>This paragraph handles the opening of the XREFFILE-FILE for input processing. It initializes APPL-RESULT to 8, attempts to open the file, and then sets APPL-RESULT to 0 if successful or 12 if unsuccessful. If the operation fails (APPL-AOK is false), it displays an error message, captures the file status code, calls procedures to display the I/O status details (9910-DISPLAY-IO-STATUS) and then terminates the program abnormally (9999-ABEND-PROGRAM). This represents standard error handling for file opening operations in the CardDemo application.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN INPUT XREFFILE-FILE                                             \n           IF  XREFFILE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING XREFFILE'                                 \n               MOVE XREFFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT03C.html#9000-xreffile-close","title":"9000-XREFFILE-CLOSE","text":"<p>This paragraph handles the closing of the XREFFILE-FILE and implements error handling for this operation. It initially sets APPL-RESULT to 8, then attempts to close the file. If the operation is successful (status code '00'), it resets APPL-RESULT to zero; otherwise, it sets APPL-RESULT to 12 to indicate an error. When an error occurs, the paragraph displays an error message, captures the file status code, calls a routine to display the I/O status details, and then terminates the program abnormally. The EXIT statement marks the end of the paragraph.</p> Code <pre><code>ADD 8 TO ZERO GIVING APPL-RESULT.                                    \n           CLOSE XREFFILE-FILE                                                  \n           IF  XREFFILE-STATUS = '00'                                           \n               SUBTRACT APPL-RESULT FROM APPL-RESULT                            \n           ELSE                                                                 \n               ADD 12 TO ZERO GIVING APPL-RESULT                                \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING XREFFILE'                                 \n               MOVE XREFFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.\n</code></pre>"},{"location":"CBACT03C.html#9999-abend-program","title":"9999-ABEND-PROGRAM","text":"<p>This paragraph handles abnormal program termination by displaying an \"ABENDING PROGRAM\" message, resetting the TIMING variable to zero, setting the abend code to 999, and then calling the Language Environment service 'CEE3ABD' to force an immediate program termination. This is part of the error handling mechanism that ensures the program terminates in a controlled manner when critical errors are encountered.</p> Code <pre><code>DISPLAY 'ABENDING PROGRAM'                                           \n           MOVE 0 TO TIMING                                                     \n           MOVE 999 TO ABCODE                                                   \n           CALL 'CEE3ABD'.                                                      \n\n      *****************************************************************\n</code></pre>"},{"location":"CBACT03C.html#9910-display-io-status","title":"9910-DISPLAY-IO-STATUS","text":"<p>This paragraph formats and displays file status codes for error reporting. It handles two types of status codes: extended file status codes (when the first byte is '9' or non-numeric) and standard file status codes. For extended status codes, it preserves the first byte and converts the second byte to a binary value for proper display. For standard codes, it formats them with leading zeros. The formatted status code is then displayed with the prefix \"FILE STATUS IS: NNNN\" where NNNN is the actual status code. This provides consistent error reporting throughout the program, helping with debugging file operation issues.</p> Code <pre><code>IF  IO-STATUS NOT NUMERIC                                            \n           OR  IO-STAT1 = '9'                                                   \n               MOVE IO-STAT1 TO IO-STATUS-04(1:1)                               \n               MOVE 0        TO TWO-BYTES-BINARY                                \n               MOVE IO-STAT2 TO TWO-BYTES-RIGHT                                 \n               MOVE TWO-BYTES-BINARY TO IO-STATUS-0403                          \n               DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04                      \n           ELSE                                                                 \n               MOVE '0000' TO IO-STATUS-04                                      \n               MOVE IO-STATUS TO IO-STATUS-04(3:2)                              \n               DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04                      \n           END-IF                                                               \n           EXIT.                                                                \n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:31 CDT\n      *\n</code></pre>"},{"location":"CBACT04C.html","title":"CBACT04C","text":""},{"location":"CBACT04C.html#overview","title":"Overview","text":"<p>This program, CBACT04C, is a batch COBOL application that calculates interest for credit card accounts. It processes transaction category balances and applies appropriate interest rates based on account groups and transaction types. The program reads account balances from an indexed file, retrieves interest rates from a disclosure group file, calculates monthly interest, updates account balances, and generates interest transaction records.</p> <p>The program works by sequentially reading transaction category balance records, looking up the associated account and card information, determining the applicable interest rate from a disclosure group file, calculating interest based on that rate, and then writing transaction records for the interest charges. It also updates the account master records with the new balances that include the calculated interest.</p> <p>Key features include the ability to fall back to default interest rates when specific rates aren't found, handling of multiple transaction categories per account, and proper maintenance of running totals for interest calculations. The program includes comprehensive error handling for file operations and maintains transaction audit trails by generating detailed transaction records for all interest charges.</p>"},{"location":"CBACT04C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>CBACT04C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"CBACT04C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant Main as Main Program\n    participant TCatBal as Transaction Category Balance File\n    participant XRef as Cross Reference File\n    participant DiscGrp as Disclosure Group File\n    participant Acct as Account File\n    participant Trans as Transaction File\n\n    Main-&gt;&gt;TCatBal: 0000-TCATBALF-OPEN\n    Main-&gt;&gt;XRef: 0100-XREFFILE-OPEN\n    Main-&gt;&gt;DiscGrp: 0200-DISCGRP-OPEN\n    Main-&gt;&gt;Acct: 0300-ACCTFILE-OPEN\n    Main-&gt;&gt;Trans: 0400-TRANFILE-OPEN\n\n    loop Until END-OF-FILE = 'Y'\n        Main-&gt;&gt;TCatBal: 1000-TCATBALF-GET-NEXT\n        alt Not EOF\n            Main-&gt;&gt;Acct: 1100-GET-ACCT-DATA (using FD-ACCT-ID)\n            Main-&gt;&gt;XRef: 1110-GET-XREF-DATA (using FD-XREF-ACCT-ID)\n            Main-&gt;&gt;DiscGrp: 1200-GET-INTEREST-RATE\n\n            alt Disclosure Group Not Found\n                Main-&gt;&gt;DiscGrp: 1200-A-GET-DEFAULT-INT-RATE\n            end\n\n            Main-&gt;&gt;Main: 1300-COMPUTE-INTEREST\n            Main-&gt;&gt;Trans: 1300-B-WRITE-TX\n            Main-&gt;&gt;Acct: 1050-UPDATE-ACCOUNT\n        end\n    end\n\n    Main-&gt;&gt;TCatBal: 9000-TCATBALF-CLOSE\n    Main-&gt;&gt;XRef: 9100-XREFFILE-CLOSE\n    Main-&gt;&gt;DiscGrp: 9200-DISCGRP-CLOSE\n    Main-&gt;&gt;Acct: 9300-ACCTFILE-CLOSE\n    Main-&gt;&gt;Trans: 9400-TRANFILE-CLOSE</code></pre>"},{"location":"CBACT04C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CVACT01Y</code></li> <li><code>CVTRA05Y</code></li> <li><code>CVTRA01Y</code></li> <li><code>CVACT03Y</code></li> <li><code>CVTRA02Y</code></li> </ul>"},{"location":"CBACT04C.html#environment-division","title":"Environment Division","text":""},{"location":"CBACT04C.html#input-output-section","title":"INPUT-OUTPUT SECTION","text":"<p>This INPUT-OUTPUT SECTION defines the five key files used by the interest calculation program. It includes: 1) TCATBAL-FILE, an indexed file accessed sequentially that contains transaction category balances; 2) XREF-FILE, an indexed file accessed randomly by card number or account ID to cross-reference cards to accounts; 3) ACCOUNT-FILE, an indexed file accessed randomly by account ID to retrieve account information; 4) DISCGRP-FILE, an indexed file accessed randomly to retrieve disclosure group information containing interest rates; and 5) TRANSACT-FILE, a sequential output file where interest transaction records are written. Each file definition includes its organization, access mode, key fields, and associated file status variables for error handling.</p> Code <pre><code>FILE-CONTROL.                                                            \n           SELECT TCATBAL-FILE ASSIGN TO TCATBALF                               \n                  ORGANIZATION IS INDEXED                                       \n                  ACCESS MODE  IS SEQUENTIAL                                    \n                  RECORD KEY   IS FD-TRAN-CAT-KEY                               \n                  FILE STATUS  IS TCATBALF-STATUS.                              \n\n           SELECT XREF-FILE ASSIGN TO   XREFFILE                                \n                  ORGANIZATION IS INDEXED                                       \n                  ACCESS MODE  IS RANDOM                                        \n                  RECORD KEY   IS FD-XREF-CARD-NUM                              \n                  ALTERNATE RECORD KEY IS FD-XREF-ACCT-ID                       \n                  FILE STATUS  IS XREFFILE-STATUS.                              \n\n           SELECT ACCOUNT-FILE ASSIGN TO ACCTFILE                               \n                  ORGANIZATION IS INDEXED                                       \n                  ACCESS MODE  IS RANDOM                                        \n                  RECORD KEY   IS FD-ACCT-ID                                    \n                  FILE STATUS  IS ACCTFILE-STATUS.                              \n\n           SELECT DISCGRP-FILE ASSIGN TO DISCGRP                                \n                  ORGANIZATION IS INDEXED                                       \n                  ACCESS MODE  IS RANDOM                                        \n                  RECORD KEY   IS FD-DISCGRP-KEY                                \n                  FILE STATUS  IS DISCGRP-STATUS.                               \n\n           SELECT TRANSACT-FILE ASSIGN TO TRANSACT                              \n                  ORGANIZATION IS SEQUENTIAL                                    \n                  ACCESS MODE  IS SEQUENTIAL                                    \n                  FILE STATUS  IS TRANFILE-STATUS.                              \n\n      *\n</code></pre>"},{"location":"CBACT04C.html#data-division","title":"Data Division","text":""},{"location":"CBACT04C.html#file-section","title":"FILE SECTION","text":"<p>This File Section defines the file structures used by the CBACT04C program for interest calculation processing. It includes five key files:</p> <ol> <li> <p>TCATBAL-FILE: Contains transaction category balance records with a composite key consisting of account ID, transaction type code, and transaction category code, followed by transaction category data.</p> </li> <li> <p>XREF-FILE: A cross-reference file that maps credit card numbers to customer numbers and account IDs, allowing the program to link transactions to the appropriate accounts.</p> </li> <li> <p>DISCGRP-FILE: Stores disclosure group information with interest rates, keyed by account group ID, transaction type code, and transaction category code. This file provides the interest rates used in calculations.</p> </li> <li> <p>ACCOUNT-FILE: Contains account master records identified by account ID, storing account details and balances that will be updated with calculated interest.</p> </li> <li> <p>TRANSACT-FILE: Used to write interest transaction records generated by the program, with each record containing a transaction ID and associated account data.</p> </li> </ol> <p>These file structures support the program's core functionality of retrieving account balances, looking up applicable interest rates, calculating interest, and recording the resulting transactions.</p> Code <pre><code>FD  TCATBAL-FILE.                                                        \n       01  FD-TRAN-CAT-BAL-RECORD.                                              \n           05 FD-TRAN-CAT-KEY.                                                  \n              10 FD-TRANCAT-ACCT-ID             PIC 9(11).                      \n              10 FD-TRANCAT-TYPE-CD             PIC X(02).                      \n              10 FD-TRANCAT-CD                  PIC 9(04).                      \n           05 FD-FD-TRAN-CAT-DATA               PIC X(33).                      \n\n       FD  XREF-FILE.                                                           \n       01  FD-XREFFILE-REC.                                                     \n           05 FD-XREF-CARD-NUM                  PIC X(16).                      \n           05 FD-XREF-CUST-NUM                  PIC 9(09).                      \n           05 FD-XREF-ACCT-ID                   PIC 9(11).                      \n           05 FD-XREF-FILLER                    PIC X(14).                      \n\n       FD  DISCGRP-FILE.                                                        \n       01  FD-DISCGRP-REC.                                                      \n           05 FD-DISCGRP-KEY.                                                   \n              10 FD-DIS-ACCT-GROUP-ID           PIC X(10).                      \n              10 FD-DIS-TRAN-TYPE-CD            PIC X(02).                      \n              10 FD-DIS-TRAN-CAT-CD             PIC 9(04).                      \n           05 FD-DISCGRP-DATA                   PIC X(34).                      \n\n       FD  ACCOUNT-FILE.                                                        \n       01  FD-ACCTFILE-REC.                                                     \n           05 FD-ACCT-ID                        PIC 9(11).                      \n           05 FD-ACCT-DATA                      PIC X(289).                     \n\n       FD  TRANSACT-FILE.                                                       \n       01  FD-TRANFILE-REC.                                                     \n           05 FD-TRANS-ID                       PIC X(16).                      \n           05 FD-ACCT-DATA                      PIC X(334).\n</code></pre>"},{"location":"CBACT04C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage Section defines the data structures used by the CBACT04C program for interest calculation processing. It includes file status variables for all input/output files (transaction category balances, cross-reference, disclosure group, account master, and transaction files), each with two-byte status fields for error handling. The section incorporates several copybooks (CVTRA01Y, CVACT03Y, CVTRA02Y, CVACT01Y, CVTRA05Y) that likely contain record layouts for the various files processed.</p> <p>The section also defines utility fields for binary-decimal conversion, application result codes with condition names for normal and end-of-file conditions, timestamp handling structures (with both COBOL and DB2 format representations), and program-specific working variables. These working variables include fields to track the last account number processed, monthly and total interest amounts, a first-time processing indicator, record counters, and a transaction ID suffix generator. These elements support the program's core functionality of calculating and recording interest charges for credit card accounts.</p> Code <pre><code>*****************************************************************         \n       COPY CVTRA01Y.                                                           \n       01  TCATBALF-STATUS.                                                     \n           05  TCATBALF-STAT1      PIC X.                                       \n           05  TCATBALF-STAT2      PIC X.                                       \n\n       COPY CVACT03Y.                                                           \n       01  XREFFILE-STATUS.                                                     \n           05  XREFFILE-STAT1      PIC X.                                       \n           05  XREFFILE-STAT2      PIC X.                                       \n\n       COPY CVTRA02Y.                                                           \n       01  DISCGRP-STATUS.                                                      \n           05 DISCGRP-STAT1        PIC X.                                       \n           05 DISCGRP-STAT2        PIC X.                                       \n\n       COPY CVACT01Y.                                                           \n       01  ACCTFILE-STATUS.                                                     \n           05  ACCTFILE-STAT1      PIC X.                                       \n           05  ACCTFILE-STAT2      PIC X.                                       \n\n       COPY CVTRA05Y.                                                           \n       01  TRANFILE-STATUS.                                                     \n           05  TRANFILE-STAT1      PIC X.                                       \n           05  TRANFILE-STAT2      PIC X.                                       \n\n       01  IO-STATUS.                                                           \n           05  IO-STAT1            PIC X.                                       \n           05  IO-STAT2            PIC X.                                       \n       01  TWO-BYTES-BINARY        PIC 9(4) BINARY.                             \n       01  TWO-BYTES-ALPHA         REDEFINES TWO-BYTES-BINARY.                  \n           05  TWO-BYTES-LEFT      PIC X.                                       \n           05  TWO-BYTES-RIGHT     PIC X.                                       \n       01  IO-STATUS-04.                                                        \n           05  IO-STATUS-0401      PIC 9   VALUE 0.                             \n           05  IO-STATUS-0403      PIC 999 VALUE 0.                             \n\n       01  APPL-RESULT             PIC S9(9)   COMP.                            \n           88  APPL-AOK            VALUE 0.                                     \n           88  APPL-EOF            VALUE 16.                                    \n\n       01  END-OF-FILE             PIC X(01)    VALUE 'N'.                      \n       01  ABCODE                  PIC S9(9) BINARY.                            \n       01  TIMING                  PIC S9(9) BINARY.                            \n      * T I M E S T A M P   D B 2  X(26)     EEEE-MM-DD-UU.MM.SS.HH0000         \n       01  COBOL-TS.                                                            \n           05 COB-YYYY                  PIC X(04).                              \n           05 COB-MM                    PIC X(02).                              \n           05 COB-DD                    PIC X(02).                              \n           05 COB-HH                    PIC X(02).                              \n           05 COB-MIN                   PIC X(02).                              \n           05 COB-SS                    PIC X(02).                              \n           05 COB-MIL                   PIC X(02).                              \n           05 COB-REST                  PIC X(05).                              \n       01  DB2-FORMAT-TS                PIC X(26).                              \n       01  FILLER REDEFINES DB2-FORMAT-TS.                                      \n           06 DB2-YYYY                  PIC X(004).                      E      \n           06 DB2-STREEP-1              PIC X.                           -      \n           06 DB2-MM                    PIC X(002).                      M      \n           06 DB2-STREEP-2              PIC X.                           -      \n           06 DB2-DD                    PIC X(002).                      D      \n           06 DB2-STREEP-3              PIC X.                           -      \n           06 DB2-HH                    PIC X(002).                      U      \n           06 DB2-DOT-1                 PIC X.                                  \n           06 DB2-MIN                   PIC X(002).                             \n           06 DB2-DOT-2                 PIC X.                                  \n           06 DB2-SS                    PIC X(002).                             \n           06 DB2-DOT-3                 PIC X.                                  \n           06 DB2-MIL                   PIC 9(002).                             \n           06 DB2-REST                  PIC X(04).                              \n       01 WS-MISC-VARS.                                                         \n           05 WS-LAST-ACCT-NUM          PIC X(11) VALUE SPACES.                 \n           05 WS-MONTHLY-INT            PIC S9(09)V99.                          \n           05 WS-TOTAL-INT              PIC S9(09)V99.                          \n           05 WS-FIRST-TIME             PIC X(01) VALUE 'Y'.                    \n       01 WS-COUNTERS.                                                          \n           05 WS-RECORD-COUNT           PIC 9(09) VALUE 0.                      \n           05 WS-TRANID-SUFFIX          PIC 9(06) VALUE 0.\n</code></pre>"},{"location":"CBACT04C.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This linkage section defines the external parameters passed to the program. It contains a structure named EXTERNAL-PARMS with two fields: PARM-LENGTH, a 4-digit signed computational field that stores the length of the parameter data, and PARM-DATE, a 10-character field that likely contains the processing date for interest calculations. These parameters allow the calling program to specify the date for which interest should be calculated.</p> Code <pre><code>01  EXTERNAL-PARMS.                                                      \n           05  PARM-LENGTH         PIC S9(04) COMP.                             \n           05  PARM-DATE           PIC X(10).                                   \n      *****************************************************************\n</code></pre>"},{"location":"CBACT04C.html#procedure-division","title":"Procedure Division","text":""},{"location":"CBACT04C.html#0000-tcatbalf-open","title":"0000-TCATBALF-OPEN","text":"<p>This paragraph handles the opening of the Transaction Category Balance file for input processing. It sets an initial result code of 8, attempts to open the file, and then sets the result code to 0 if successful or 12 if unsuccessful. If the file opens successfully (APPL-AOK condition), processing continues. Otherwise, the paragraph displays an error message about the failed file open operation, calls a routine to display the specific I/O status code, and then aborts the program execution by calling the program termination routine. This ensures proper error handling when the critical transaction category balance file cannot be accessed.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN INPUT TCATBAL-FILE                                              \n           IF  TCATBALF-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING TRANSACTION CATEGORY BALANCE'             \n               MOVE TCATBALF-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#0100-xreffile-open","title":"0100-XREFFILE-OPEN","text":"<p>This paragraph handles the opening of the cross-reference file (XREF-FILE) used in the interest calculation process. It initializes the application result code to 8, attempts to open the file in input mode, and then sets the result code to 0 if successful or 12 if unsuccessful. If the file fails to open (indicated by APPL-AOK being false), the paragraph displays an error message showing the file status, calls a routine to display detailed I/O status information, and then aborts the program execution. This ensures that the program cannot proceed without proper access to the cross-reference data needed for interest calculations.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN INPUT XREF-FILE                                                 \n           IF  XREFFILE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING CROSS REF FILE'   XREFFILE-STATUS         \n               MOVE XREFFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#0200-discgrp-open","title":"0200-DISCGRP-OPEN","text":"<p>This paragraph handles the opening of the disclosure group file (DISCGRP-FILE) which contains interest rate information. It initializes the application result code to 8, attempts to open the file in INPUT mode, and then sets the result code to 0 if successful or 12 if unsuccessful. If the operation fails (APPL-AOK is false), it displays an error message (though incorrectly referencing \"DALY REJECTS FILE\" instead of the disclosure group file), logs the file status code, and abends the program. This is a critical initialization step as the disclosure group file provides the interest rates needed for the program's core interest calculation functionality.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN INPUT DISCGRP-FILE                                              \n           IF  DISCGRP-STATUS = '00'                                            \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING DALY REJECTS FILE'                        \n               MOVE DISCGRP-STATUS TO IO-STATUS                                 \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#0300-acctfile-open","title":"0300-ACCTFILE-OPEN","text":"<p>This paragraph handles the opening of the Account Master File in I-O (input-output) mode. It sets an initial result code of 8, attempts to open the file, and then sets the result code to 0 if successful or 12 if unsuccessful. If the operation fails (APPL-AOK is false), it displays an error message, calls a routine to display the specific I/O status code, and then abends the program. This is a critical error-handling routine since the Account Master File is essential for the interest calculation process.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN I-O ACCOUNT-FILE                                                \n           IF  ACCTFILE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING ACCOUNT MASTER FILE'                      \n               MOVE ACCTFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#0400-tranfile-open","title":"0400-TRANFILE-OPEN","text":"<p>This paragraph handles the opening of the transaction output file. It initializes the application result code to 8, attempts to open the transaction file in output mode, and then sets the result code to 0 if successful or 12 if unsuccessful. If the operation fails (APPL-AOK is false), it displays an error message, retrieves the file status code, calls procedures to display the I/O status details and abnormally terminate the program. This is part of the program's initialization process and includes error handling to ensure the transaction file is properly available before proceeding with interest calculations.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN OUTPUT TRANSACT-FILE                                            \n           IF  TRANFILE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING TRANSACTION FILE'                         \n               MOVE TRANFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#1000-tcatbalf-get-next","title":"1000-TCATBALF-GET-NEXT","text":"<p>This paragraph reads the next record from the Transaction Category Balance file (TCATBAL-FILE) into the TRAN-CAT-BAL-RECORD structure. It handles three possible outcomes: successful read (status '00'), end-of-file condition (status '10'), or a read error (any other status). For successful reads, processing continues normally. When end-of-file is reached, it sets the END-OF-FILE flag to 'Y'. For any other file status, it displays an error message, calls routines to display the I/O status details, and abends the program. This paragraph is a critical part of the main processing loop that retrieves transaction category balances for interest calculation.</p> Code <pre><code>READ TCATBAL-FILE INTO TRAN-CAT-BAL-RECORD.                          \n           IF  TCATBALF-STATUS  = '00'                                          \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               IF  TCATBALF-STATUS  = '10'                                      \n                   MOVE 16 TO APPL-RESULT                                       \n               ELSE                                                             \n                   MOVE 12 TO APPL-RESULT                                       \n               END-IF                                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               IF  APPL-EOF                                                     \n                   MOVE 'Y' TO END-OF-FILE                                      \n               ELSE                                                             \n                   DISPLAY 'ERROR READING TRANSACTION CATEGORY FILE'            \n                   MOVE TCATBALF-STATUS TO IO-STATUS                            \n                   PERFORM 9910-DISPLAY-IO-STATUS                               \n                   PERFORM 9999-ABEND-PROGRAM                                   \n               END-IF                                                           \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#1050-update-account","title":"1050-UPDATE-ACCOUNT","text":"<p>This paragraph updates the account record with the calculated interest charges. It adds the total interest amount (WS-TOTAL-INT) to the current account balance (ACCT-CURR-BAL) and resets the current cycle credit and debit amounts to zero. The updated account record is then rewritten to the account file. If the rewrite operation is successful (status '00'), processing continues normally. Otherwise, the program displays an error message, shows the I/O status code, and terminates abnormally. This paragraph is crucial for maintaining accurate account balances after interest calculations have been applied.</p> Code <pre><code>* Update the balances in account record to reflect posted trans.          \n           ADD WS-TOTAL-INT  TO ACCT-CURR-BAL                                   \n           MOVE 0 TO ACCT-CURR-CYC-CREDIT                                       \n           MOVE 0 TO ACCT-CURR-CYC-DEBIT                                        \n\n           REWRITE FD-ACCTFILE-REC FROM  ACCOUNT-RECORD                         \n           IF  ACCTFILE-STATUS  = '00'                                          \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR RE-WRITING ACCOUNT FILE'                          \n               MOVE ACCTFILE-STATUS  TO IO-STATUS                               \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#1100-get-acct-data","title":"1100-GET-ACCT-DATA","text":"<p>This paragraph retrieves account data from the ACCOUNT-FILE using the account ID stored in FD-ACCT-ID. It performs error handling by checking the file status after the read operation. If the account is successfully read (status '00'), processing continues normally. If the account is not found or another error occurs, the paragraph displays an error message, logs the file status, and terminates the program through the 9999-ABEND-PROGRAM routine. This is a critical data retrieval step that ensures the program has valid account information before proceeding with interest calculations.</p> Code <pre><code>READ ACCOUNT-FILE INTO ACCOUNT-RECORD                                \n               INVALID KEY                                                      \n                  DISPLAY 'ACCOUNT NOT FOUND: ' FD-ACCT-ID                      \n           END-READ                                                             \n\n           IF  ACCTFILE-STATUS  = '00'                                          \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR READING ACCOUNT FILE'                             \n               MOVE ACCTFILE-STATUS  TO IO-STATUS                               \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#1110-get-xref-data","title":"1110-GET-XREF-DATA","text":"<p>This paragraph retrieves cross-reference data for a credit card account from the XREF-FILE using the account ID as the key. It reads a record into CARD-XREF-RECORD and handles the case when an account is not found by displaying an error message. The paragraph sets APPL-RESULT to 0 for successful reads or 12 for failures. If the read operation fails, it displays an error message, captures the file status code, calls a routine to display the I/O status details, and then aborts the program execution. This cross-reference data is essential for linking account information with the appropriate card details during the interest calculation process.</p> Code <pre><code>READ XREF-FILE INTO CARD-XREF-RECORD                                 \n            KEY IS FD-XREF-ACCT-ID                                              \n               INVALID KEY                                                      \n                  DISPLAY 'ACCOUNT NOT FOUND: ' FD-XREF-ACCT-ID                 \n           END-READ                                                             \n\n           IF  XREFFILE-STATUS   = '00'                                         \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR READING XREF FILE'                                \n               MOVE XREFFILE-STATUS  TO IO-STATUS                               \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#1200-get-interest-rate","title":"1200-GET-INTEREST-RATE","text":"<p>This paragraph retrieves the interest rate from the disclosure group file based on the account group ID. It first attempts to read the record from the DISCGRP-FILE. If the record is found (status '00') or not found (status '23'), it sets APPL-RESULT to 0 indicating normal processing. For any other file status, it sets APPL-RESULT to 12, displays an error message, and abends the program after showing the I/O status. When a specific disclosure group record is not found (status '23'), the paragraph switches to using a default group code by setting FD-DIS-ACCT-GROUP-ID to 'DEFAULT' and calling the 1200-A-GET-DEFAULT-INT-RATE paragraph to retrieve the default interest rate. This ensures the program can continue processing even when specific interest rate information is unavailable.</p> Code <pre><code>READ DISCGRP-FILE INTO DIS-GROUP-RECORD                              \n                INVALID KEY                                                     \n                   DISPLAY 'DISCLOSURE GROUP RECORD MISSING'                    \n                   DISPLAY 'TRY WITH DEFAULT GROUP CODE'                        \n           END-READ.                                                            \n\n           IF  DISCGRP-STATUS  = '00'  OR '23'                                  \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n\n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR READING DISCLOSURE GROUP FILE'                    \n               MOVE DISCGRP-STATUS  TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           IF  DISCGRP-STATUS  = '23'                                           \n               MOVE 'DEFAULT' TO FD-DIS-ACCT-GROUP-ID                           \n               PERFORM 1200-A-GET-DEFAULT-INT-RATE                              \n           END-IF                                                               \n           EXIT.                                                                \n\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#1200-a-get-default-int-rate","title":"1200-A-GET-DEFAULT-INT-RATE","text":"<p>This paragraph retrieves the default interest rate from the disclosure group file. It attempts to read a record from the DISCGRP-FILE into the DIS-GROUP-RECORD structure. If the read operation is successful (status '00'), it sets APPL-RESULT to 0 indicating success. If the read fails, it sets APPL-RESULT to 12 indicating an error. When an error occurs, the paragraph displays an error message about failing to read the default disclosure group, calls a routine to display the I/O status code, and then abends the program. This functionality serves as a fallback mechanism when specific interest rates cannot be found for an account.</p> Code <pre><code>READ DISCGRP-FILE INTO DIS-GROUP-RECORD                              \n\n           IF  DISCGRP-STATUS  = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n\n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR READING DEFAULT DISCLOSURE GROUP'                 \n               MOVE DISCGRP-STATUS  TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#1300-compute-interest","title":"1300-COMPUTE-INTEREST","text":"<p>This paragraph calculates the monthly interest for a credit card account based on the transaction category balance and the applicable interest rate. It divides the interest rate by 1200 (converting the annual percentage rate to a monthly decimal rate) and multiplies it by the balance to determine the interest amount. The calculated interest is then added to a running total (WS-TOTAL-INT) to track the cumulative interest across all processed transactions. After calculation, it calls the 1300-B-WRITE-TX paragraph to generate a transaction record for the interest charge.</p> Code <pre><code>COMPUTE WS-MONTHLY-INT                                               \n            = ( TRAN-CAT-BAL * DIS-INT-RATE) / 1200                             \n\n           ADD WS-MONTHLY-INT  TO WS-TOTAL-INT                                  \n           PERFORM 1300-B-WRITE-TX.                                             \n\n           EXIT.                                                                \n\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#1300-b-write-tx","title":"1300-B-WRITE-TX","text":"<p>This paragraph generates and writes interest transaction records to the transaction file. It first creates a unique transaction ID by concatenating the parameter date with an incremented suffix counter. The paragraph then populates the transaction record with specific values for an interest charge, including setting the transaction type code to '01', category code to '05', and source to 'System'. It constructs a description that includes the account ID, assigns the calculated monthly interest amount, sets the card number from cross-reference data, and obtains a timestamp for both the original and processing timestamps. After writing the record to the transaction file, it performs error handling to verify the write operation was successful, displaying an error message and aborting the program if the write fails. This ensures each interest calculation is properly recorded as a transaction in the system with appropriate audit information.</p> Code <pre><code>ADD 1 TO WS-TRANID-SUFFIX                                            \n\n           STRING PARM-DATE,                                                    \n                  WS-TRANID-SUFFIX                                              \n             DELIMITED BY SIZE                                                  \n             INTO TRAN-ID                                                       \n           END-STRING.                                                          \n\n           MOVE '01'                 TO TRAN-TYPE-CD                            \n           MOVE '05'                 TO TRAN-CAT-CD                             \n           MOVE 'System'             TO TRAN-SOURCE                             \n           STRING 'Int. for a/c ' ,                                             \n                  ACCT-ID                                                       \n                  DELIMITED BY SIZE                                             \n            INTO TRAN-DESC                                                      \n           END-STRING                                                           \n           MOVE WS-MONTHLY-INT       TO TRAN-AMT                                \n           MOVE 0                    TO TRAN-MERCHANT-ID                        \n           MOVE SPACES               TO TRAN-MERCHANT-NAME                      \n           MOVE SPACES               TO TRAN-MERCHANT-CITY                      \n           MOVE SPACES               TO TRAN-MERCHANT-ZIP                       \n           MOVE XREF-CARD-NUM        TO TRAN-CARD-NUM                           \n           PERFORM Z-GET-DB2-FORMAT-TIMESTAMP                                   \n           MOVE DB2-FORMAT-TS        TO TRAN-ORIG-TS                            \n           MOVE DB2-FORMAT-TS        TO TRAN-PROC-TS                            \n\n           WRITE FD-TRANFILE-REC FROM TRAN-RECORD                               \n           IF  TRANFILE-STATUS   = '00'                                         \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n\n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR WRITING TRANSACTION RECORD'                       \n               MOVE TRANFILE-STATUS   TO IO-STATUS                              \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#1400-compute-fees","title":"1400-COMPUTE-FEES","text":"<p>This paragraph is a placeholder for future functionality related to fee computation. It currently contains only an EXIT statement with a comment indicating that the fee calculation logic is yet to be implemented. This suggests that while the program currently handles interest calculations, the capability to compute additional fees has been identified as a requirement but not yet developed.</p> Code <pre><code>* To be implemented                                                       \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#9000-tcatbalf-close","title":"9000-TCATBALF-CLOSE","text":"<p>This paragraph handles the closing of the Transaction Category Balance file (TCATBAL-FILE). It sets an initial result code of 8, attempts to close the file, and then checks the status. If the file closes successfully (status '00'), it sets the result code to 0. If the close operation fails, it sets the result code to 12. When an error occurs, the paragraph displays an error message, captures the file status code, displays the I/O status details, and aborts the program execution. This is part of the program's cleanup and error handling mechanism to ensure proper file closure before program termination.</p> Code <pre><code>MOVE 8 TO  APPL-RESULT.                                              \n           CLOSE TCATBAL-FILE                                                   \n           IF  TCATBALF-STATUS = '00'                                           \n               MOVE 0 TO  APPL-RESULT                                           \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING TRANSACTION BALANCE FILE'                 \n               MOVE TCATBALF-STATUS  TO IO-STATUS                               \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#9100-xreffile-close","title":"9100-XREFFILE-CLOSE","text":"<p>This paragraph handles the closing of the cross-reference file (XREF-FILE) with error handling. It sets an initial result code of 8, attempts to close the file, and then sets the result code to 0 if successful or 12 if unsuccessful. If the close operation fails, the paragraph displays an error message, retrieves the file status code, calls a routine to display the I/O status details, and then aborts the program execution. This ensures proper file closure and appropriate error handling for maintaining data integrity.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           CLOSE XREF-FILE                                                      \n           IF  XREFFILE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING CROSS REF FILE'                           \n               MOVE XREFFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#9200-discgrp-close","title":"9200-DISCGRP-CLOSE","text":"<p>This paragraph handles the closing of the Disclosure Group file, which contains interest rate information used in the credit card interest calculation process. It sets an initial result code of 8, attempts to close the file, and then updates the result code based on the operation's success (0) or failure (12). If the file closes successfully, processing continues; otherwise, the paragraph displays an error message about the Disclosure Group file closure failure, calls a routine to display the specific I/O status code, and then aborts the program execution by calling the program termination routine. This error handling ensures that any file closure issues are properly identified and logged before program termination.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           CLOSE DISCGRP-FILE                                                   \n           IF  DISCGRP-STATUS = '00'                                            \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING DISCLOSURE GROUP FILE'                    \n               MOVE DISCGRP-STATUS TO IO-STATUS                                 \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBACT04C.html#9300-acctfile-close","title":"9300-ACCTFILE-CLOSE","text":"<p>This paragraph handles the closing of the Account File with error handling. It initially sets a result code of 8, attempts to close the file, and then sets the result to 0 if successful or 12 if unsuccessful. If the close operation fails, the paragraph displays an error message, retrieves the file status code, calls a routine to display the I/O status details, and then abends the program. This ensures proper file closure and provides meaningful error information if the operation fails.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           CLOSE ACCOUNT-FILE                                                   \n           IF  ACCTFILE-STATUS  = '00'                                          \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING ACCOUNT FILE'                             \n               MOVE ACCTFILE-STATUS  TO IO-STATUS                               \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.\n</code></pre>"},{"location":"CBACT04C.html#9400-tranfile-close","title":"9400-TRANFILE-CLOSE","text":"<p>This paragraph handles the closing of the transaction file and performs error handling. It sets an initial result code of 8, attempts to close the TRANSACT-FILE, and then sets the result code to 0 if successful or 12 if unsuccessful. If the close operation fails (APPL-AOK is false), it displays an error message, captures the file status code, displays the I/O status details, and aborts the program execution. The paragraph ensures proper file closure and appropriate error handling for transaction file operations.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           CLOSE TRANSACT-FILE                                                  \n           IF  TRANFILE-STATUS  = '00'                                          \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING TRANSACTION FILE'                         \n               MOVE TRANFILE-STATUS  TO IO-STATUS                               \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.\n</code></pre>"},{"location":"CBACT04C.html#z-get-db2-format-timestamp","title":"Z-GET-DB2-FORMAT-TIMESTAMP","text":"<p>This paragraph retrieves the current system date and time and formats it into a DB2-compatible timestamp format. It first obtains the current date using the FUNCTION CURRENT-DATE intrinsic function, then maps individual components (year, month, day, hour, minute, second, millisecond) from the COBOL timestamp structure to the corresponding DB2 timestamp fields. The paragraph adds necessary formatting characters like hyphens and decimal points to create a properly formatted DB2 timestamp, and sets the microsecond portion to zeros. This formatted timestamp is likely used for transaction logging or database operations within the credit card interest calculation process.</p> Code <pre><code>MOVE FUNCTION CURRENT-DATE TO COBOL-TS                               \n           MOVE COB-YYYY TO DB2-YYYY                                            \n           MOVE COB-MM   TO DB2-MM                                              \n           MOVE COB-DD   TO DB2-DD                                              \n           MOVE COB-HH   TO DB2-HH                                              \n           MOVE COB-MIN  TO DB2-MIN                                             \n           MOVE COB-SS   TO DB2-SS                                              \n           MOVE COB-MIL  TO DB2-MIL                                             \n           MOVE '0000'   TO DB2-REST                                            \n           MOVE '-' TO DB2-STREEP-1 DB2-STREEP-2 DB2-STREEP-3                   \n           MOVE '.' TO DB2-DOT-1 DB2-DOT-2 DB2-DOT-3                            \n      *    DISPLAY 'DB2-TIMESTAMP = ' DB2-FORMAT-TS                             \n           EXIT.\n</code></pre>"},{"location":"CBACT04C.html#9999-abend-program","title":"9999-ABEND-PROGRAM","text":"<p>This paragraph handles abnormal program termination by displaying an \"ABENDING PROGRAM\" message, resetting the timing variable to zero, setting an abend code of 999, and then calling the Language Environment service 'CEE3ABD' to force an immediate program abort. This is likely used as a last resort error handling mechanism when the program encounters a critical error that prevents further processing.</p> Code <pre><code>DISPLAY 'ABENDING PROGRAM'                                           \n           MOVE 0 TO TIMING                                                     \n           MOVE 999 TO ABCODE                                                   \n           CALL 'CEE3ABD'.                                                      \n\n      *****************************************************************\n</code></pre>"},{"location":"CBACT04C.html#9910-display-io-status","title":"9910-DISPLAY-IO-STATUS","text":"<p>This paragraph handles the formatting and display of file I/O status codes for error reporting. When an I/O operation encounters an issue, this routine formats the status code for consistent display. It has special handling for extended file status codes (where the first digit is '9'), converting the second byte to a binary value for proper representation. For standard file status codes, it formats them within a 4-character field. In both cases, the formatted status code is displayed with a descriptive prefix. This routine helps with troubleshooting by providing standardized error reporting for file operations throughout the program.</p> Code <pre><code>IF  IO-STATUS NOT NUMERIC                                            \n           OR  IO-STAT1 = '9'                                                   \n               MOVE IO-STAT1 TO IO-STATUS-04(1:1)                               \n               MOVE 0        TO TWO-BYTES-BINARY                                \n               MOVE IO-STAT2 TO TWO-BYTES-RIGHT                                 \n               MOVE TWO-BYTES-BINARY TO IO-STATUS-0403                          \n               DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04                      \n           ELSE                                                                 \n               MOVE '0000' TO IO-STATUS-04                                      \n               MOVE IO-STATUS TO IO-STATUS-04(3:2)                              \n               DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04                      \n           END-IF                                                               \n           EXIT.                                                                \n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:31 CDT\n      *\n</code></pre>"},{"location":"CBCUS01C.html","title":"CBCUS01C","text":""},{"location":"CBCUS01C.html#overview","title":"Overview","text":"<p>This batch COBOL program (CBCUS01C) reads and displays customer data from an indexed VSAM file. It sequentially processes customer records from the CUSTFILE, displaying each record until the end of file is reached. The program includes comprehensive error handling for file operations, with specific routines for opening, reading, and closing the customer file. If any file operation errors occur, the program displays detailed status information and terminates with an abend. The program is part of the CardDemo application, which demonstrates AWS and partner technologies for mainframe migration and modernization use-cases.</p>"},{"location":"CBCUS01C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>CBCUS01C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"CBCUS01C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant Main as Main Program\n    participant Open as 0000-CUSTFILE-OPEN\n    participant Read as 1000-CUSTFILE-GET-NEXT\n    participant Close as 9000-CUSTFILE-CLOSE\n    participant IOStatus as Z-DISPLAY-IO-STATUS\n    participant Abend as Z-ABEND-PROGRAM\n    participant VSAM as CUSTFILE (VSAM File)\n\n    Main-&gt;&gt;Open: Perform CUSTFILE-OPEN\n    activate Open\n    Open-&gt;&gt;VSAM: OPEN INPUT CUSTFILE-FILE\n    VSAM--&gt;&gt;Open: Return status\n\n    alt Status = '00'\n        Open-&gt;&gt;Main: Set APPL-RESULT to 0\n    else Status != '00'\n        Open-&gt;&gt;IOStatus: Perform Z-DISPLAY-IO-STATUS\n        activate IOStatus\n        IOStatus--&gt;&gt;Open: Display formatted status\n        deactivate IOStatus\n        Open-&gt;&gt;Abend: Perform Z-ABEND-PROGRAM\n        activate Abend\n        Abend-&gt;&gt;Abend: Call 'CEE3ABD'\n        deactivate Abend\n    end\n    deactivate Open\n\n    loop Until END-OF-FILE = 'Y'\n        Main-&gt;&gt;Read: Perform CUSTFILE-GET-NEXT\n        activate Read\n        Read-&gt;&gt;VSAM: READ CUSTFILE-FILE\n        VSAM--&gt;&gt;Read: Return record &amp; status\n\n        alt Status = '00'\n            Read-&gt;&gt;Read: Display CUSTOMER-RECORD\n            Read-&gt;&gt;Main: Set APPL-RESULT to 0\n        else Status = '10' (EOF)\n            Read-&gt;&gt;Main: Set APPL-RESULT to 16\n            Read-&gt;&gt;Read: Set END-OF-FILE to 'Y'\n        else Other Status\n            Read-&gt;&gt;IOStatus: Perform Z-DISPLAY-IO-STATUS\n            activate IOStatus\n            IOStatus--&gt;&gt;Read: Display formatted status\n            deactivate IOStatus\n            Read-&gt;&gt;Abend: Perform Z-ABEND-PROGRAM\n            activate Abend\n            Abend-&gt;&gt;Abend: Call 'CEE3ABD'\n            deactivate Abend\n        end\n        deactivate Read\n    end\n\n    Main-&gt;&gt;Close: Perform CUSTFILE-CLOSE\n    activate Close\n    Close-&gt;&gt;VSAM: CLOSE CUSTFILE-FILE\n    VSAM--&gt;&gt;Close: Return status\n\n    alt Status = '00'\n        Close-&gt;&gt;Main: Set APPL-RESULT to 0\n    else Status != '00'\n        Close-&gt;&gt;IOStatus: Perform Z-DISPLAY-IO-STATUS\n        activate IOStatus\n        IOStatus--&gt;&gt;Close: Display formatted status\n        deactivate IOStatus\n        Close-&gt;&gt;Abend: Perform Z-ABEND-PROGRAM\n        activate Abend\n        Abend-&gt;&gt;Abend: Call 'CEE3ABD'\n        deactivate Abend\n    end\n    deactivate Close</code></pre>"},{"location":"CBCUS01C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CVCUS01Y</code></li> </ul>"},{"location":"CBCUS01C.html#environment-division","title":"Environment Division","text":""},{"location":"CBCUS01C.html#input-output-section","title":"INPUT-OUTPUT SECTION","text":"<p>This section defines the file control parameters for the CUSTFILE-FILE, which is the indexed VSAM customer file used by the program. It specifies that the file will be accessed sequentially, uses FD-CUST-ID as the primary key field, and assigns CUSTFILE-STATUS as the file status field for error handling. The file is externally referenced by the CUSTFILE assignment name, allowing the actual file to be defined outside the program.</p> Code <pre><code>FILE-CONTROL.\n           SELECT CUSTFILE-FILE ASSIGN TO   CUSTFILE\n                  ORGANIZATION IS INDEXED\n                  ACCESS MODE  IS SEQUENTIAL\n                  RECORD KEY   IS FD-CUST-ID\n                  FILE STATUS  IS CUSTFILE-STATUS.\n      *\n</code></pre>"},{"location":"CBCUS01C.html#data-division","title":"Data Division","text":""},{"location":"CBCUS01C.html#file-section","title":"FILE SECTION","text":"<p>This section defines the file structure for the CUSTFILE-FILE, which contains customer records. Each record consists of a 9-digit numeric customer ID field (FD-CUST-ID) followed by a 491-character data field (FD-CUST-DATA) that holds the remaining customer information. This structure allows the program to access the customer ID separately from the rest of the customer data when processing records from the indexed VSAM file.</p> Code <pre><code>FD  CUSTFILE-FILE.\n       01  FD-CUSTFILE-REC.\n           05 FD-CUST-ID                        PIC 9(09).\n           05 FD-CUST-DATA                      PIC X(491).\n</code></pre>"},{"location":"CBCUS01C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working-Storage Section defines the data structures used for file status tracking and error handling in the CBCUS01C program. It includes the CVCUS01Y copybook and defines several status fields for monitoring VSAM file operations, including CUSTFILE-STATUS and IO-STATUS. The section contains binary fields for conversion purposes, condition codes for application processing results (with level-88 items for success and end-of-file conditions), and control variables for program flow and error handling. The END-OF-FILE flag tracks file processing completion, while ABCODE stores any abend code if errors occur. These structures support the program's comprehensive error handling capabilities when processing the customer file.</p> Code <pre><code>*****************************************************************\n       COPY CVCUS01Y.\n       01  CUSTFILE-STATUS.\n           05  CUSTFILE-STAT1      PIC X.\n           05  CUSTFILE-STAT2      PIC X.\n\n       01  IO-STATUS.\n           05  IO-STAT1            PIC X.\n           05  IO-STAT2            PIC X.\n       01  TWO-BYTES-BINARY        PIC 9(4) BINARY.\n       01  TWO-BYTES-ALPHA         REDEFINES TWO-BYTES-BINARY.\n           05  TWO-BYTES-LEFT      PIC X.\n           05  TWO-BYTES-RIGHT     PIC X.\n       01  IO-STATUS-04.\n           05  IO-STATUS-0401      PIC 9   VALUE 0.\n           05  IO-STATUS-0403      PIC 999 VALUE 0.\n\n       01  APPL-RESULT             PIC S9(9)   COMP.\n           88  APPL-AOK            VALUE 0.\n           88  APPL-EOF            VALUE 16.\n\n       01  END-OF-FILE             PIC X(01)    VALUE 'N'.\n       01  ABCODE                  PIC S9(9) BINARY.\n       01  TIMING                  PIC S9(9) BINARY. \n\n      *****************************************************************\n</code></pre>"},{"location":"CBCUS01C.html#procedure-division","title":"Procedure Division","text":""},{"location":"CBCUS01C.html#1000-custfile-get-next","title":"1000-CUSTFILE-GET-NEXT","text":"<p>This paragraph handles the sequential reading of customer records from the CUSTFILE. It attempts to read the next record into the CUSTOMER-RECORD structure and processes the result based on the file status. When successful (status '00'), it sets APPL-RESULT to 0 and displays the customer record. If end-of-file is reached (status '10'), it sets APPL-RESULT to 16. For any other status, it sets APPL-RESULT to 12, indicating an error. The paragraph then evaluates APPL-RESULT: if successful, processing continues; if end-of-file is detected, it sets the END-OF-FILE flag to 'Y'; for any other error, it displays an error message, captures the file status, displays the I/O status details, and abends the program.</p> Code <pre><code>READ CUSTFILE-FILE INTO CUSTOMER-RECORD.\n           IF  CUSTFILE-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n               DISPLAY CUSTOMER-RECORD \n           ELSE\n               IF  CUSTFILE-STATUS = '10'\n                   MOVE 16 TO APPL-RESULT\n               ELSE\n                   MOVE 12 TO APPL-RESULT\n               END-IF\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               IF  APPL-EOF\n                   MOVE 'Y' TO END-OF-FILE\n               ELSE\n                   DISPLAY 'ERROR READING CUSTOMER FILE'\n                   MOVE CUSTFILE-STATUS TO IO-STATUS\n                   PERFORM Z-DISPLAY-IO-STATUS\n                   PERFORM Z-ABEND-PROGRAM\n               END-IF\n           END-IF\n           EXIT.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBCUS01C.html#0000-custfile-open","title":"0000-CUSTFILE-OPEN","text":"<p>This paragraph handles the opening of the CUSTFILE-FILE for input processing. It initializes APPL-RESULT to 8, attempts to open the customer file, and then sets APPL-RESULT to 0 if successful or 12 if unsuccessful. If the operation fails (APPL-AOK is false), it displays an error message, captures the file status code, displays the I/O status details through the Z-DISPLAY-IO-STATUS paragraph, and terminates the program abnormally via the Z-ABEND-PROGRAM paragraph. This robust error handling ensures that file access issues are properly identified and reported before proceeding with customer data processing.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.\n           OPEN INPUT CUSTFILE-FILE\n           IF  CUSTFILE-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n           ELSE\n               MOVE 12 TO APPL-RESULT\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               DISPLAY 'ERROR OPENING CUSTFILE'\n               MOVE CUSTFILE-STATUS TO IO-STATUS\n               PERFORM Z-DISPLAY-IO-STATUS\n               PERFORM Z-ABEND-PROGRAM\n           END-IF\n           EXIT.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBCUS01C.html#9000-custfile-close","title":"9000-CUSTFILE-CLOSE","text":"<p>This paragraph handles the closing of the customer file (CUSTFILE-FILE) with comprehensive error handling. It initially sets APPL-RESULT to 8, then attempts to close the file. If the operation is successful (status code '00'), it resets APPL-RESULT to zero; otherwise, it sets APPL-RESULT to 12 indicating an error. When an error occurs, the paragraph displays an error message, captures the file status code, displays the I/O status details through the Z-DISPLAY-IO-STATUS paragraph, and terminates the program abnormally via the Z-ABEND-PROGRAM paragraph. This structured approach ensures proper resource cleanup and clear error reporting when closing the customer file.</p> Code <pre><code>ADD 8 TO ZERO GIVING APPL-RESULT.\n           CLOSE CUSTFILE-FILE\n           IF  CUSTFILE-STATUS = '00'\n               SUBTRACT APPL-RESULT FROM APPL-RESULT\n           ELSE\n               ADD 12 TO ZERO GIVING APPL-RESULT\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               DISPLAY 'ERROR CLOSING CUSTOMER FILE'\n               MOVE CUSTFILE-STATUS TO IO-STATUS\n               PERFORM Z-DISPLAY-IO-STATUS\n               PERFORM Z-ABEND-PROGRAM\n           END-IF\n           EXIT.\n</code></pre>"},{"location":"CBCUS01C.html#z-abend-program","title":"Z-ABEND-PROGRAM","text":"<p>This paragraph handles program termination by forcing an abnormal end (abend) when critical errors occur. It displays an \"ABENDING PROGRAM\" message, resets the timing variable to zero, sets the abend code to 999, and then calls the Language Environment service 'CEE3ABD' to terminate the program. This provides a controlled way to halt execution when unrecoverable errors are encountered.</p> Code <pre><code>DISPLAY 'ABENDING PROGRAM'\n           MOVE 0 TO TIMING\n           MOVE 999 TO ABCODE\n           CALL 'CEE3ABD'.\n\n      *****************************************************************\n</code></pre>"},{"location":"CBCUS01C.html#z-display-io-status","title":"Z-DISPLAY-IO-STATUS","text":"<p>This paragraph handles the formatting and display of file I/O status codes for error reporting. It checks if the I/O status code is non-numeric or has a first digit of '9' (indicating a serious error). For these cases, it preserves the first digit and converts the second digit to a 4-digit display format. For standard numeric status codes, it formats them as a 4-digit code with leading zeros. The formatted status code is then displayed with a descriptive message. This routine provides consistent error reporting for file operations throughout the program, helping with troubleshooting file access issues.</p> Code <pre><code>IF  IO-STATUS NOT NUMERIC\n           OR  IO-STAT1 = '9'\n               MOVE IO-STAT1 TO IO-STATUS-04(1:1)\n               MOVE 0        TO TWO-BYTES-BINARY\n               MOVE IO-STAT2 TO TWO-BYTES-RIGHT\n               MOVE TWO-BYTES-BINARY TO IO-STATUS-0403\n               DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04 \n           ELSE\n               MOVE '0000' TO IO-STATUS-04\n               MOVE IO-STATUS TO IO-STATUS-04(3:2)\n               DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04 \n           END-IF\n           EXIT.\n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:31 CDT\n      *\n</code></pre>"},{"location":"CBTRN01C.html","title":"CBTRN01C","text":""},{"location":"CBTRN01C.html#overview","title":"Overview","text":"<p>This batch COBOL program (CBTRN01C) processes daily credit card transactions by reading records from a daily transaction file and validating them against various reference files. The program verifies card numbers by looking them up in a cross-reference file, which maps card numbers to account IDs and customer IDs. It then attempts to read the corresponding account record to further validate the transaction. The program handles file operations for six different files (daily transaction, customer, cross-reference, card, account, and transaction files), with comprehensive error handling for file operations. Each transaction record is displayed along with validation information, and any validation failures (such as invalid card numbers or missing accounts) are reported. The program is part of the CardDemo application, which showcases AWS and partner technology for mainframe migration and modernization use-cases.</p>"},{"location":"CBTRN01C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>CBTRN01C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"CBTRN01C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant Main as MAIN-PARA\n    participant DailyTran as Daily Transaction File\n    participant XRef as Cross-Reference File\n    participant Acct as Account File\n    participant Cust as Customer File\n    participant Card as Card File\n    participant Tran as Transaction File\n\n    Main-&gt;&gt;DailyTran: 0000-DALYTRAN-OPEN\n    Main-&gt;&gt;Cust: 0100-CUSTFILE-OPEN\n    Main-&gt;&gt;XRef: 0200-XREFFILE-OPEN\n    Main-&gt;&gt;Card: 0300-CARDFILE-OPEN\n    Main-&gt;&gt;Acct: 0400-ACCTFILE-OPEN\n    Main-&gt;&gt;Tran: 0500-TRANFILE-OPEN\n\n    rect rgb(240, 240, 240)\n        Note over Main,Acct: Process transactions until end of file\n        loop Until END-OF-DAILY-TRANS-FILE = 'Y'\n            Main-&gt;&gt;DailyTran: 1000-DALYTRAN-GET-NEXT\n            alt Record read successfully\n                DailyTran--&gt;&gt;Main: Return transaction record\n                Main-&gt;&gt;Main: Display transaction record\n\n                Main-&gt;&gt;XRef: 2000-LOOKUP-XREF (using card number)\n                alt Card number found\n                    XRef--&gt;&gt;Main: Return XREF record (account ID, customer ID)\n                    Main-&gt;&gt;Acct: 3000-READ-ACCOUNT (using account ID)\n                    alt Account found\n                        Acct--&gt;&gt;Main: Return account record\n                    else Account not found\n                        Main-&gt;&gt;Main: Display \"ACCOUNT NOT FOUND\"\n                    end\n                else Card number not found\n                    Main-&gt;&gt;Main: Display \"CARD NUMBER COULD NOT BE VERIFIED\"\n                end\n            else End of file reached\n                DailyTran--&gt;&gt;Main: EOF signal\n                Main-&gt;&gt;Main: Set END-OF-DAILY-TRANS-FILE = 'Y'\n            else Error reading file\n                Main-&gt;&gt;Main: Z-DISPLAY-IO-STATUS\n                Main-&gt;&gt;Main: Z-ABEND-PROGRAM\n            end\n        end\n    end\n\n    Main-&gt;&gt;DailyTran: 9000-DALYTRAN-CLOSE\n    Main-&gt;&gt;Cust: 9100-CUSTFILE-CLOSE\n    Main-&gt;&gt;XRef: 9200-XREFFILE-CLOSE\n    Main-&gt;&gt;Card: 9300-CARDFILE-CLOSE\n    Main-&gt;&gt;Acct: 9400-ACCTFILE-CLOSE\n    Main-&gt;&gt;Tran: 9500-TRANFILE-CLOSE</code></pre>"},{"location":"CBTRN01C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CVACT01Y</code></li> <li><code>CVCUS01Y</code></li> <li><code>CVTRA05Y</code></li> <li><code>CVACT03Y</code></li> <li><code>CVACT02Y</code></li> <li><code>CVTRA06Y</code></li> </ul>"},{"location":"CBTRN01C.html#environment-division","title":"Environment Division","text":""},{"location":"CBTRN01C.html#input-output-section","title":"INPUT-OUTPUT SECTION","text":"<p>This INPUT-OUTPUT SECTION defines six files used by the CBTRN01C program for processing credit card transactions. It includes a sequential DALYTRAN-FILE for daily transactions, and five indexed files accessed in random mode: CUSTOMER-FILE (keyed by customer ID), XREF-FILE (keyed by card number), CARD-FILE (keyed by card number), ACCOUNT-FILE (keyed by account ID), and TRANSACT-FILE (keyed by transaction ID). Each file has an associated file status variable for error handling. The configuration supports the program's core functionality of reading transaction records and validating them against various reference files.</p> Code <pre><code>FILE-CONTROL.\n           SELECT DALYTRAN-FILE ASSIGN TO DALYTRAN\n                  ORGANIZATION IS SEQUENTIAL\n                  ACCESS MODE  IS SEQUENTIAL\n                  FILE STATUS  IS DALYTRAN-STATUS.\n\n           SELECT CUSTOMER-FILE ASSIGN TO   CUSTFILE\n                  ORGANIZATION IS INDEXED\n                  ACCESS MODE  IS RANDOM\n                  RECORD KEY   IS FD-CUST-ID\n                  FILE STATUS  IS CUSTFILE-STATUS.\n\n           SELECT XREF-FILE ASSIGN TO   XREFFILE\n                  ORGANIZATION IS INDEXED\n                  ACCESS MODE  IS RANDOM\n                  RECORD KEY   IS FD-XREF-CARD-NUM\n                  FILE STATUS  IS XREFFILE-STATUS.\n\n           SELECT CARD-FILE ASSIGN TO   CARDFILE\n                  ORGANIZATION IS INDEXED\n                  ACCESS MODE  IS RANDOM\n                  RECORD KEY   IS FD-CARD-NUM\n                  FILE STATUS  IS CARDFILE-STATUS.\n\n           SELECT ACCOUNT-FILE ASSIGN TO   ACCTFILE\n                  ORGANIZATION IS INDEXED\n                  ACCESS MODE  IS RANDOM\n                  RECORD KEY   IS FD-ACCT-ID\n                  FILE STATUS  IS ACCTFILE-STATUS.\n\n           SELECT TRANSACT-FILE ASSIGN TO   TRANFILE\n                  ORGANIZATION IS INDEXED\n                  ACCESS MODE  IS RANDOM\n                  RECORD KEY   IS FD-TRANS-ID\n                  FILE STATUS  IS TRANFILE-STATUS.\n      *\n</code></pre>"},{"location":"CBTRN01C.html#data-division","title":"Data Division","text":""},{"location":"CBTRN01C.html#file-section","title":"FILE SECTION","text":"<p>This File Section defines the file structures used in the CBTRN01C program for processing credit card transactions. It includes six file descriptors (FD) for the various files the program interacts with: DALYTRAN-FILE (daily transaction file), CUSTOMER-FILE (customer records), XREF-FILE (card number cross-reference), CARD-FILE (card details), ACCOUNT-FILE (account information), and TRANSACT-FILE (transaction records). Each file has a defined record structure with key identifier fields (such as card numbers, customer IDs, account IDs, or transaction IDs) followed by data fields that contain the remaining record information. The structure allows the program to read transaction records, validate them against reference data, and process them accordingly.</p> Code <pre><code>FD  DALYTRAN-FILE.\n       01  FD-TRAN-RECORD.\n           05 FD-TRAN-ID                        PIC X(16).\n           05 FD-CUST-DATA                      PIC X(334).\n\n       FD  CUSTOMER-FILE.\n       01  FD-CUSTFILE-REC.\n           05 FD-CUST-ID                        PIC 9(09).\n           05 FD-CUST-DATA                      PIC X(491).\n\n       FD  XREF-FILE.\n       01  FD-XREFFILE-REC.\n           05 FD-XREF-CARD-NUM                  PIC X(16).\n           05 FD-XREF-DATA                      PIC X(34).\n\n       FD  CARD-FILE.\n       01  FD-CARDFILE-REC.\n           05 FD-CARD-NUM                       PIC X(16).\n           05 FD-CARD-DATA                      PIC X(134).\n\n       FD  ACCOUNT-FILE.\n       01  FD-ACCTFILE-REC.\n           05 FD-ACCT-ID                        PIC 9(11).\n           05 FD-ACCT-DATA                      PIC X(289).\n\n       FD  TRANSACT-FILE.\n       01  FD-TRANFILE-REC.\n           05 FD-TRANS-ID                       PIC X(16).\n           05 FD-ACCT-DATA                      PIC X(334).\n</code></pre>"},{"location":"CBTRN01C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage Section defines the data structures used by the CBTRN01C program for processing credit card transactions. It includes status fields for six different files: daily transaction (DALYTRAN), customer (CUSTFILE), cross-reference (XREFFILE), card (CARDFILE), account (ACCTFILE), and transaction (TRANFILE) files. Each file has a status field divided into two parts (STAT1 and STAT2) for detailed error reporting. The section also includes several utility fields for I/O operations, binary data handling, and application control. Key control variables include APPL-RESULT with condition names for normal processing (APPL-AOK) and end-of-file conditions (APPL-EOF), as well as END-OF-DAILY-TRANS-FILE to track file processing status. The section incorporates six copybooks (CVTRA06Y, CVCUS01Y, CVACT03Y, CVACT02Y, CVACT01Y, and CVTRA05Y) which likely contain the record layouts for the various files being processed.</p> Code <pre><code>*****************************************************************\n       COPY CVTRA06Y.\n       01  DALYTRAN-STATUS.\n           05  DALYTRAN-STAT1      PIC X.\n           05  DALYTRAN-STAT2      PIC X.\n\n       COPY CVCUS01Y.\n       01  CUSTFILE-STATUS.\n           05  CUSTFILE-STAT1      PIC X.\n           05  CUSTFILE-STAT2      PIC X.\n\n       COPY CVACT03Y.\n       01  XREFFILE-STATUS.\n           05  XREFFILE-STAT1      PIC X.\n           05  XREFFILE-STAT2      PIC X.\n\n       COPY CVACT02Y.\n       01  CARDFILE-STATUS.\n           05  CARDFILE-STAT1      PIC X.\n           05  CARDFILE-STAT2      PIC X.\n\n       COPY CVACT01Y.\n       01  ACCTFILE-STATUS.\n           05  ACCTFILE-STAT1      PIC X.\n           05  ACCTFILE-STAT2      PIC X.\n\n       COPY CVTRA05Y.\n       01  TRANFILE-STATUS.\n           05  TRANFILE-STAT1      PIC X.\n           05  TRANFILE-STAT2      PIC X.\n\n       01  IO-STATUS.\n           05  IO-STAT1            PIC X.\n           05  IO-STAT2            PIC X.\n\n       01  TWO-BYTES-BINARY        PIC 9(4) BINARY.\n       01  TWO-BYTES-ALPHA         REDEFINES TWO-BYTES-BINARY.\n           05  TWO-BYTES-LEFT      PIC X.\n           05  TWO-BYTES-RIGHT     PIC X.\n\n       01  IO-STATUS-04.\n           05  IO-STATUS-0401      PIC 9   VALUE 0.\n           05  IO-STATUS-0403      PIC 999 VALUE 0.\n\n       01  APPL-RESULT             PIC S9(9)   COMP.\n           88  APPL-AOK            VALUE 0.\n           88  APPL-EOF            VALUE 16.\n\n       01  END-OF-DAILY-TRANS-FILE             PIC X(01)    VALUE 'N'.\n       01  ABCODE                  PIC S9(9) BINARY.\n       01  TIMING                  PIC S9(9) BINARY.\n       01  WS-MISC-VARIABLES.\n           05 WS-XREF-READ-STATUS  PIC 9(04).\n           05 WS-ACCT-READ-STATUS  PIC 9(04).\n\n      *****************************************************************\n</code></pre>"},{"location":"CBTRN01C.html#procedure-division","title":"Procedure Division","text":""},{"location":"CBTRN01C.html#main-para","title":"MAIN-PARA","text":"<p>This paragraph serves as the main control flow for the CBTRN01C program. It begins by opening all required files (daily transaction, customer, cross-reference, card, account, and transaction files) through separate procedures. The core processing occurs in a loop that continues until the end of the daily transaction file is reached. For each transaction record, the program displays the record, looks up the card number in the cross-reference file, and if found, attempts to read the corresponding account record. Error messages are displayed when a card number cannot be verified or when an account is not found. After processing all transactions, the program methodically closes all files in reverse order of opening and terminates execution. The paragraph effectively orchestrates the transaction validation workflow by coordinating the various file operations and lookup procedures.</p> Code <pre><code>DISPLAY 'START OF EXECUTION OF PROGRAM CBTRN01C'.\n           PERFORM 0000-DALYTRAN-OPEN.\n           PERFORM 0100-CUSTFILE-OPEN.\n           PERFORM 0200-XREFFILE-OPEN.\n           PERFORM 0300-CARDFILE-OPEN.\n           PERFORM 0400-ACCTFILE-OPEN.\n           PERFORM 0500-TRANFILE-OPEN.\n\n           PERFORM UNTIL END-OF-DAILY-TRANS-FILE = 'Y'\n               IF  END-OF-DAILY-TRANS-FILE = 'N'\n                   PERFORM 1000-DALYTRAN-GET-NEXT\n                   IF  END-OF-DAILY-TRANS-FILE = 'N'\n                       DISPLAY DALYTRAN-RECORD\n                   END-IF\n                   MOVE 0                 TO WS-XREF-READ-STATUS\n                   MOVE DALYTRAN-CARD-NUM TO XREF-CARD-NUM\n                   PERFORM 2000-LOOKUP-XREF\n                   IF WS-XREF-READ-STATUS = 0\n                     MOVE 0            TO WS-ACCT-READ-STATUS\n                     MOVE XREF-ACCT-ID TO ACCT-ID\n                     PERFORM 3000-READ-ACCOUNT\n                     IF WS-ACCT-READ-STATUS NOT = 0\n                         DISPLAY 'ACCOUNT ' ACCT-ID ' NOT FOUND'\n                     END-IF\n                   ELSE\n                     DISPLAY 'CARD NUMBER ' DALYTRAN-CARD-NUM\n                     ' COULD NOT BE VERIFIED. SKIPPING TRANSACTION ID-'\n                     DALYTRAN-ID\n                   END-IF\n               END-IF\n           END-PERFORM.\n\n           PERFORM 9000-DALYTRAN-CLOSE.\n           PERFORM 9100-CUSTFILE-CLOSE.\n           PERFORM 9200-XREFFILE-CLOSE.\n           PERFORM 9300-CARDFILE-CLOSE.\n           PERFORM 9400-ACCTFILE-CLOSE.\n           PERFORM 9500-TRANFILE-CLOSE.\n\n           DISPLAY 'END OF EXECUTION OF PROGRAM CBTRN01C'.\n\n           GOBACK.\n\n      *****************************************************************\n      * READS FILE                                                    *\n      *****************************************************************\n</code></pre>"},{"location":"CBTRN01C.html#1000-dalytran-get-next","title":"1000-DALYTRAN-GET-NEXT","text":"<p>This paragraph handles the reading of records from the daily transaction file. It reads the next record into the DALYTRAN-RECORD structure and processes the file status. If the read is successful (status '00'), it sets APPL-RESULT to 0 indicating success. If end-of-file is reached (status '10'), it sets APPL-RESULT to 16. For any other status, it sets APPL-RESULT to 12 indicating an error. When successful, processing continues. When end-of-file is encountered, it sets the END-OF-DAILY-TRANS-FILE flag to 'Y'. For any other error, it displays an error message, captures the file status, displays the status details, and abends the program.</p> Code <pre><code>READ DALYTRAN-FILE INTO DALYTRAN-RECORD.\n           IF  DALYTRAN-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n           ELSE\n               IF  DALYTRAN-STATUS = '10'\n                   MOVE 16 TO APPL-RESULT\n               ELSE\n                   MOVE 12 TO APPL-RESULT\n               END-IF\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               IF  APPL-EOF\n                   MOVE 'Y' TO END-OF-DAILY-TRANS-FILE\n               ELSE\n                   DISPLAY 'ERROR READING DAILY TRANSACTION FILE'\n                   MOVE DALYTRAN-STATUS TO IO-STATUS\n                   PERFORM Z-DISPLAY-IO-STATUS\n                   PERFORM Z-ABEND-PROGRAM\n               END-IF\n           END-IF\n           EXIT.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN01C.html#2000-lookup-xref","title":"2000-LOOKUP-XREF","text":"<p>This paragraph performs a lookup operation in the cross-reference file (XREF-FILE) using the card number as the key. It first moves the card number from XREF-CARD-NUM to the file descriptor field FD-XREF-CARD-NUM, then attempts to read the corresponding record into CARD-XREF-RECORD. If the card number is not found (INVALID KEY condition), it displays an error message and sets the status code to 4. If the card number is valid, it displays a success message along with the retrieved card number, account ID, and customer ID from the cross-reference record. This lookup is a critical validation step that determines whether a transaction has a valid card number and retrieves the associated account and customer information needed for further processing.</p> Code <pre><code>MOVE XREF-CARD-NUM TO FD-XREF-CARD-NUM\n           READ XREF-FILE  RECORD INTO CARD-XREF-RECORD\n           KEY IS FD-XREF-CARD-NUM\n                INVALID KEY\n                  DISPLAY 'INVALID CARD NUMBER FOR XREF'\n                  MOVE 4 TO WS-XREF-READ-STATUS\n                NOT INVALID KEY\n                  DISPLAY 'SUCCESSFUL READ OF XREF'\n                  DISPLAY 'CARD NUMBER: ' XREF-CARD-NUM\n                  DISPLAY 'ACCOUNT ID : ' XREF-ACCT-ID\n                  DISPLAY 'CUSTOMER ID: ' XREF-CUST-ID\n           END-READ.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN01C.html#3000-read-account","title":"3000-READ-ACCOUNT","text":"<p>This paragraph reads an account record from the ACCOUNT-FILE using the ACCT-ID as the key. It attempts to retrieve the account information into the ACCOUNT-RECORD structure. If the account number is not found (INVALID KEY condition), it displays an error message and sets WS-ACCT-READ-STATUS to 4 to indicate a failed lookup. If the account is successfully found, it displays a confirmation message. This validation step is part of the transaction processing workflow to ensure that transactions are associated with valid accounts.</p> Code <pre><code>MOVE ACCT-ID TO FD-ACCT-ID\n           READ ACCOUNT-FILE RECORD INTO ACCOUNT-RECORD\n           KEY IS FD-ACCT-ID\n                INVALID KEY\n                  DISPLAY 'INVALID ACCOUNT NUMBER FOUND'\n                  MOVE 4 TO WS-ACCT-READ-STATUS\n                NOT INVALID KEY\n                  DISPLAY 'SUCCESSFUL READ OF ACCOUNT FILE'\n           END-READ.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN01C.html#0000-dalytran-open","title":"0000-DALYTRAN-OPEN","text":"<p>This paragraph handles the opening of the DALYTRAN-FILE (Daily Transaction File) with error handling. It initializes APPL-RESULT to 8, attempts to open the file in INPUT mode, and sets APPL-RESULT to 0 if successful or 12 if unsuccessful. If the operation fails (APPL-AOK is false), it displays an error message, retrieves the file status code, calls procedures to display the I/O status and abnormally terminate the program. This ensures the program doesn't proceed with processing if the critical transaction input file cannot be accessed.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.\n           OPEN INPUT DALYTRAN-FILE\n           IF  DALYTRAN-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n           ELSE\n               MOVE 12 TO APPL-RESULT\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               DISPLAY 'ERROR OPENING DAILY TRANSACTION FILE'\n               MOVE DALYTRAN-STATUS TO IO-STATUS\n               PERFORM Z-DISPLAY-IO-STATUS\n               PERFORM Z-ABEND-PROGRAM\n           END-IF\n           EXIT.\n\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN01C.html#0100-custfile-open","title":"0100-CUSTFILE-OPEN","text":"<p>This paragraph handles the opening of the CUSTOMER-FILE for input processing. It initializes the APPL-RESULT to 8, attempts to open the file, and then checks the operation's success by examining the CUSTFILE-STATUS. If the file opens successfully (status '00'), it sets APPL-RESULT to 0 indicating success. Otherwise, it sets APPL-RESULT to 12 indicating failure. When a failure occurs, the paragraph displays an error message, captures the file status code, calls Z-DISPLAY-IO-STATUS to show detailed error information, and then calls Z-ABEND-PROGRAM to terminate execution. This represents standard file handling with proper error detection and reporting for a critical reference file in the transaction processing workflow.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.\n           OPEN INPUT CUSTOMER-FILE\n           IF  CUSTFILE-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n           ELSE\n               MOVE 12 TO APPL-RESULT\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               DISPLAY 'ERROR OPENING CUSTOMER FILE'\n               MOVE CUSTFILE-STATUS TO IO-STATUS\n               PERFORM Z-DISPLAY-IO-STATUS\n               PERFORM Z-ABEND-PROGRAM\n           END-IF\n           EXIT.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN01C.html#0200-xreffile-open","title":"0200-XREFFILE-OPEN","text":"<p>This paragraph handles the opening of the cross-reference file (XREF-FILE) that maps card numbers to account and customer IDs. It initializes the application result code to 8, attempts to open the file in input mode, and sets the result code to 0 if successful or 12 if unsuccessful. If the file opens successfully (APPL-AOK condition), processing continues. Otherwise, it displays an error message, calls a routine to display the I/O status code, and then abends the program. This is part of the program's initialization process that ensures all required files are available before transaction processing begins.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.\n           OPEN INPUT XREF-FILE\n           IF  XREFFILE-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n           ELSE\n               MOVE 12 TO APPL-RESULT\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               DISPLAY 'ERROR OPENING CROSS REF FILE'\n               MOVE XREFFILE-STATUS TO IO-STATUS\n               PERFORM Z-DISPLAY-IO-STATUS\n               PERFORM Z-ABEND-PROGRAM\n           END-IF\n           EXIT.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN01C.html#0300-cardfile-open","title":"0300-CARDFILE-OPEN","text":"<p>This paragraph handles the opening of the CARD-FILE for input processing. It initializes APPL-RESULT to 8, attempts to open the file, and then checks the operation's success by examining CARDFILE-STATUS. If the file opens successfully (status '00'), APPL-RESULT is set to 0; otherwise, it's set to 12. When an error occurs, the paragraph displays an error message, captures the file status code, calls Z-DISPLAY-IO-STATUS to show detailed error information, and then calls Z-ABEND-PROGRAM to terminate execution. This represents standard file handling with comprehensive error management for a critical reference file in the transaction processing workflow.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.\n           OPEN INPUT CARD-FILE\n           IF  CARDFILE-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n           ELSE\n               MOVE 12 TO APPL-RESULT\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               DISPLAY 'ERROR OPENING CARD FILE'\n               MOVE CARDFILE-STATUS TO IO-STATUS\n               PERFORM Z-DISPLAY-IO-STATUS\n               PERFORM Z-ABEND-PROGRAM\n           END-IF\n           EXIT.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN01C.html#0400-acctfile-open","title":"0400-ACCTFILE-OPEN","text":"<p>This paragraph handles the opening of the Account File for input processing. It sets an initial result code of 8, then attempts to open the file. If the operation is successful (status '00'), it resets the result code to 0; otherwise, it sets a more severe error code of 12. When an error occurs, the paragraph displays an error message, retrieves the file status code, calls a routine to display the I/O status details, and then terminates the program abnormally. This robust error handling ensures that account data is available before proceeding with transaction processing.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.\n           OPEN INPUT ACCOUNT-FILE\n           IF  ACCTFILE-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n           ELSE\n               MOVE 12 TO APPL-RESULT\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               DISPLAY 'ERROR OPENING ACCOUNT FILE'\n               MOVE ACCTFILE-STATUS TO IO-STATUS\n               PERFORM Z-DISPLAY-IO-STATUS\n               PERFORM Z-ABEND-PROGRAM\n           END-IF\n           EXIT.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN01C.html#0500-tranfile-open","title":"0500-TRANFILE-OPEN","text":"<p>This paragraph handles the opening of the transaction input file (TRANSACT-FILE) with error handling. It sets an initial result code of 8, attempts to open the file, and then checks the status. If the file opens successfully (status '00'), it sets the result to 0 (success). If the open operation fails, it sets the result to 12 (error). When an error occurs, the paragraph displays an error message, retrieves the file status code, calls a routine to display the I/O status details, and then terminates the program abnormally by calling the Z-ABEND-PROGRAM paragraph. This robust error handling ensures that file access issues are properly detected and reported before transaction processing begins.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.\n           OPEN INPUT TRANSACT-FILE\n           IF  TRANFILE-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n           ELSE\n               MOVE 12 TO APPL-RESULT\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               DISPLAY 'ERROR OPENING TRANSACTION FILE'\n               MOVE TRANFILE-STATUS TO IO-STATUS\n               PERFORM Z-DISPLAY-IO-STATUS\n               PERFORM Z-ABEND-PROGRAM\n           END-IF\n           EXIT.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN01C.html#9000-dalytran-close","title":"9000-DALYTRAN-CLOSE","text":"<p>This paragraph handles the closing of the daily transaction file (DALYTRAN-FILE) with error handling. It initializes APPL-RESULT to 8, attempts to close the file, and then checks the status code. If the close operation is successful (status '00'), it sets APPL-RESULT to 0; otherwise, it sets it to 12. If the operation was not successful (APPL-AOK is false), it displays an error message, retrieves the file status code, calls routines to display the I/O status and abnormally terminate the program. The paragraph contains an inconsistency where it references CUSTOMER FILE in the error message despite closing the DALYTRAN-FILE, and similarly references CUSTFILE-STATUS instead of DALYTRAN-STATUS.</p> Code <pre><code>ADD 8 TO ZERO GIVING APPL-RESULT.\n           CLOSE DALYTRAN-FILE\n           IF  DALYTRAN-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n           ELSE\n               MOVE 12 TO APPL-RESULT\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               DISPLAY 'ERROR CLOSING CUSTOMER FILE'\n               MOVE CUSTFILE-STATUS TO IO-STATUS\n               PERFORM Z-DISPLAY-IO-STATUS\n               PERFORM Z-ABEND-PROGRAM\n           END-IF\n           EXIT.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN01C.html#9100-custfile-close","title":"9100-CUSTFILE-CLOSE","text":"<p>This paragraph handles the closing of the CUSTOMER-FILE with error handling. It initially sets APPL-RESULT to 8, then attempts to close the file. If the operation is successful (status code '00'), it resets APPL-RESULT to 0; otherwise, it sets it to 12. When an error occurs, the paragraph displays an error message, captures the file status code, calls Z-DISPLAY-IO-STATUS to show detailed error information, and then terminates the program abnormally via Z-ABEND-PROGRAM. This ensures proper resource cleanup and error reporting when closing the customer reference file.</p> Code <pre><code>ADD 8 TO ZERO GIVING APPL-RESULT.\n           CLOSE CUSTOMER-FILE\n           IF  CUSTFILE-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n           ELSE\n               MOVE 12 TO APPL-RESULT\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               DISPLAY 'ERROR CLOSING CUSTOMER FILE'\n               MOVE CUSTFILE-STATUS TO IO-STATUS\n               PERFORM Z-DISPLAY-IO-STATUS\n               PERFORM Z-ABEND-PROGRAM\n           END-IF\n           EXIT.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN01C.html#9200-xreffile-close","title":"9200-XREFFILE-CLOSE","text":"<p>This paragraph handles the closing of the cross-reference file (XREF-FILE) with error handling. It initially sets APPL-RESULT to 8, then attempts to close the file. If the close operation is successful (status code '00'), it resets APPL-RESULT to 0; otherwise, it sets APPL-RESULT to 12 indicating an error. When an error occurs, the paragraph displays an error message, captures the file status code, calls routines to display the I/O status and abnormally terminate the program. This ensures proper resource cleanup and provides meaningful error information if the cross-reference file cannot be closed properly.</p> Code <pre><code>ADD 8 TO ZERO GIVING APPL-RESULT.\n           CLOSE XREF-FILE\n           IF  XREFFILE-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n           ELSE\n               MOVE 12 TO APPL-RESULT\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               DISPLAY 'ERROR CLOSING CROSS REF FILE'\n               MOVE XREFFILE-STATUS TO IO-STATUS\n               PERFORM Z-DISPLAY-IO-STATUS\n               PERFORM Z-ABEND-PROGRAM\n           END-IF\n           EXIT.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN01C.html#9300-cardfile-close","title":"9300-CARDFILE-CLOSE","text":"<p>This paragraph handles the closing of the CARD-FILE with comprehensive error handling. It initially sets APPL-RESULT to 8, then attempts to close the file. If the operation is successful (status code '00'), it resets APPL-RESULT to 0; otherwise, it sets it to 12 indicating an error. When an error occurs, the paragraph displays an error message, captures the file status code, calls Z-DISPLAY-IO-STATUS to show detailed error information, and then terminates the program abnormally via Z-ABEND-PROGRAM. This ensures that any issues with closing the card reference file are properly detected and handled, maintaining data integrity.</p> Code <pre><code>ADD 8 TO ZERO GIVING APPL-RESULT.\n           CLOSE CARD-FILE\n           IF  CARDFILE-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n           ELSE\n               MOVE 12 TO APPL-RESULT\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               DISPLAY 'ERROR CLOSING CARD FILE'\n               MOVE CARDFILE-STATUS TO IO-STATUS\n               PERFORM Z-DISPLAY-IO-STATUS\n               PERFORM Z-ABEND-PROGRAM\n           END-IF\n           EXIT.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN01C.html#9400-acctfile-close","title":"9400-ACCTFILE-CLOSE","text":"<p>This paragraph handles the closing of the ACCOUNT-FILE with comprehensive error handling. It initially sets APPL-RESULT to 8, then attempts to close the account file. If the operation is successful (status code '00'), it resets APPL-RESULT to 0; otherwise, it sets APPL-RESULT to 12 indicating an error. When an error occurs, the paragraph displays an error message, captures the file status code, calls a routine to display the I/O status details, and then terminates the program abnormally through the Z-ABEND-PROGRAM paragraph. This ensures that any file closure issues are properly detected and handled, preventing the program from continuing with potentially corrupted file states.</p> Code <pre><code>ADD 8 TO ZERO GIVING APPL-RESULT.\n           CLOSE ACCOUNT-FILE\n           IF  ACCTFILE-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n           ELSE\n               MOVE 12 TO APPL-RESULT\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               DISPLAY 'ERROR CLOSING ACCOUNT FILE'\n               MOVE ACCTFILE-STATUS TO IO-STATUS\n               PERFORM Z-DISPLAY-IO-STATUS\n               PERFORM Z-ABEND-PROGRAM\n           END-IF\n           EXIT.\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN01C.html#9500-tranfile-close","title":"9500-TRANFILE-CLOSE","text":"<p>This paragraph handles the closing of the transaction file with error handling. It first sets APPL-RESULT to 8, then attempts to close the TRANSACT-FILE. If the operation is successful (status code '00'), it resets APPL-RESULT to 0; otherwise, it sets it to 12 indicating an error. When an error occurs, the paragraph displays an error message, captures the file status code, calls routines to display the I/O status details and abnormally terminate the program. The paragraph is part of the program's comprehensive file operation error handling mechanism.</p> Code <pre><code>ADD 8 TO ZERO GIVING APPL-RESULT.\n           CLOSE TRANSACT-FILE\n           IF  TRANFILE-STATUS = '00'\n               MOVE 0 TO APPL-RESULT\n           ELSE\n               MOVE 12 TO APPL-RESULT\n           END-IF\n           IF  APPL-AOK\n               CONTINUE\n           ELSE\n               DISPLAY 'ERROR CLOSING TRANSACTION FILE'\n               MOVE TRANFILE-STATUS TO IO-STATUS\n               PERFORM Z-DISPLAY-IO-STATUS\n               PERFORM Z-ABEND-PROGRAM\n           END-IF\n           EXIT.\n</code></pre>"},{"location":"CBTRN01C.html#z-abend-program","title":"Z-ABEND-PROGRAM","text":"<p>This paragraph handles abnormal program termination by displaying an \"ABENDING PROGRAM\" message, resetting the TIMING variable to zero, setting an abort code (ABCODE) to 999, and then calling the Language Environment service 'CEE3ABD' to force an immediate program termination. This is used as a last resort error handling mechanism when the program encounters a critical error that prevents further processing.</p> Code <pre><code>DISPLAY 'ABENDING PROGRAM'\n           MOVE 0 TO TIMING\n           MOVE 999 TO ABCODE\n           CALL 'CEE3ABD'.\n\n      *****************************************************************\n</code></pre>"},{"location":"CBTRN01C.html#z-display-io-status","title":"Z-DISPLAY-IO-STATUS","text":"<p>This paragraph handles the display of file I/O status codes in a standardized format. It processes the IO-STATUS field differently based on whether it contains a numeric value or if the first byte indicates a severe error (IO-STAT1 = '9'). For non-numeric status codes or severe errors, it formats the first byte directly and converts the second byte through binary manipulation to create a four-character display format. For standard numeric status codes, it creates a four-character display with leading zeros. The formatted status code is then displayed with a descriptive message. This provides consistent error reporting for file operations throughout the program, helping with debugging and error identification.</p> Code <pre><code>IF  IO-STATUS NOT NUMERIC\n           OR  IO-STAT1 = '9'\n               MOVE IO-STAT1 TO IO-STATUS-04(1:1)\n               MOVE 0        TO TWO-BYTES-BINARY\n               MOVE IO-STAT2 TO TWO-BYTES-RIGHT\n               MOVE TWO-BYTES-BINARY TO IO-STATUS-0403\n               DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04\n           ELSE\n               MOVE '0000' TO IO-STATUS-04\n               MOVE IO-STATUS TO IO-STATUS-04(3:2)\n               DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04\n           END-IF\n           EXIT.\n</code></pre>"},{"location":"CBTRN02C.html","title":"CBTRN02C","text":""},{"location":"CBTRN02C.html#overview","title":"Overview","text":"<p>This batch COBOL program (CBTRN02C) processes daily credit card transactions from a sequential input file and posts them to various account and transaction files. The program reads each transaction record, validates it against account and card reference data, and then updates account balances and transaction category balances accordingly.</p> <p>The program performs several key functions: 1. Validates transactions by checking card numbers against a cross-reference file 2. Verifies account existence, credit limits, and expiration dates 3. Updates account balances (current balance, cycle credits/debits) 4. Updates transaction category balances by account 5. Writes valid transactions to a transaction file 6. Writes rejected transactions to a rejection file with reason codes</p> <p>The validation process includes checks for invalid card numbers, non-existent accounts, over-limit transactions, and expired accounts. For valid transactions, the program updates multiple files to reflect the transaction, including the account master file and a transaction category balance file.</p> <p>The program maintains counters for processed and rejected transactions, and sets a non-zero return code if any transactions are rejected. It includes comprehensive error handling for file operations and displays detailed status information when errors occur.</p>"},{"location":"CBTRN02C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>CBTRN02C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"CBTRN02C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant Main as Main Program\n    participant InputFiles as Input Files\n    participant OutputFiles as Output Files\n    participant Validation as Validation Logic\n    participant Processing as Transaction Processing\n\n    Main-&gt;&gt;InputFiles: 0000-DALYTRAN-OPEN\n    Main-&gt;&gt;OutputFiles: 0100-TRANFILE-OPEN\n    Main-&gt;&gt;InputFiles: 0200-XREFFILE-OPEN\n    Main-&gt;&gt;OutputFiles: 0300-DALYREJS-OPEN\n    Main-&gt;&gt;InputFiles: 0400-ACCTFILE-OPEN\n    Main-&gt;&gt;InputFiles: 0500-TCATBALF-OPEN\n\n    loop Until End-Of-File\n        Main-&gt;&gt;InputFiles: 1000-DALYTRAN-GET-NEXT\n        alt Not End-Of-File\n            Main-&gt;&gt;Validation: 1500-VALIDATE-TRAN\n            Validation-&gt;&gt;InputFiles: 1500-A-LOOKUP-XREF (Card validation)\n            alt Valid Card\n                Validation-&gt;&gt;InputFiles: 1500-B-LOOKUP-ACCT (Account validation)\n                alt Valid Transaction\n                    Main-&gt;&gt;Processing: 2000-POST-TRANSACTION\n                    Processing-&gt;&gt;InputFiles: 2700-UPDATE-TCATBAL\n                    Processing-&gt;&gt;InputFiles: 2700-A-CREATE-TCATBAL-REC/2700-B-UPDATE-TCATBAL-REC\n                    Processing-&gt;&gt;InputFiles: 2800-UPDATE-ACCOUNT-REC\n                    Processing-&gt;&gt;OutputFiles: 2900-WRITE-TRANSACTION-FILE\n                else Invalid Transaction\n                    Main-&gt;&gt;OutputFiles: 2500-WRITE-REJECT-REC\n                end\n            else Invalid Card\n                Main-&gt;&gt;OutputFiles: 2500-WRITE-REJECT-REC\n            end\n        end\n    end\n\n    Main-&gt;&gt;InputFiles: 9000-DALYTRAN-CLOSE\n    Main-&gt;&gt;OutputFiles: 9100-TRANFILE-CLOSE\n    Main-&gt;&gt;InputFiles: 9200-XREFFILE-CLOSE\n    Main-&gt;&gt;OutputFiles: 9300-DALYREJS-CLOSE\n    Main-&gt;&gt;InputFiles: 9400-ACCTFILE-CLOSE\n    Main-&gt;&gt;InputFiles: 9500-TCATBALF-CLOSE</code></pre>"},{"location":"CBTRN02C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CVACT01Y</code></li> <li><code>CVTRA05Y</code></li> <li><code>CVTRA01Y</code></li> <li><code>CVACT03Y</code></li> <li><code>CVTRA06Y</code></li> </ul>"},{"location":"CBTRN02C.html#environment-division","title":"Environment Division","text":""},{"location":"CBTRN02C.html#input-output-section","title":"INPUT-OUTPUT SECTION","text":"<p>This section defines the file assignments and access methods for the transaction processing program. It specifies six files:</p> <ol> <li> <p>DALYTRAN-FILE: A sequential input file containing the daily credit card transactions to be processed.</p> </li> <li> <p>TRANSACT-FILE: An indexed file accessed randomly by transaction ID (FD-TRANS-ID) where valid transactions are written.</p> </li> <li> <p>XREF-FILE: An indexed file accessed randomly by card number (FD-XREF-CARD-NUM) used to validate credit card numbers.</p> </li> <li> <p>DALYREJS-FILE: A sequential output file where rejected transactions are written.</p> </li> <li> <p>ACCOUNT-FILE: An indexed file accessed randomly by account ID (FD-ACCT-ID) containing account master information.</p> </li> <li> <p>TCATBAL-FILE: An indexed file accessed randomly by transaction category key (FD-TRAN-CAT-KEY) used to track transaction balances by category.</p> </li> </ol> <p>Each file definition includes its organization type, access method, key field (for indexed files), and a status field for error handling.</p> Code <pre><code>FILE-CONTROL.                                                            \n           SELECT DALYTRAN-FILE ASSIGN TO DALYTRAN                              \n                  ORGANIZATION IS SEQUENTIAL                                    \n                  ACCESS MODE  IS SEQUENTIAL                                    \n                  FILE STATUS  IS DALYTRAN-STATUS.                              \n\n           SELECT TRANSACT-FILE ASSIGN TO TRANFILE                              \n                  ORGANIZATION IS INDEXED                                       \n                  ACCESS MODE  IS RANDOM                                        \n                  RECORD KEY   IS FD-TRANS-ID                                   \n                  FILE STATUS  IS TRANFILE-STATUS.                              \n\n           SELECT XREF-FILE ASSIGN TO   XREFFILE                                \n                  ORGANIZATION IS INDEXED                                       \n                  ACCESS MODE  IS RANDOM                                        \n                  RECORD KEY   IS FD-XREF-CARD-NUM                              \n                  FILE STATUS  IS XREFFILE-STATUS.                              \n\n           SELECT DALYREJS-FILE ASSIGN TO DALYREJS                              \n                  ORGANIZATION IS SEQUENTIAL                                    \n                  ACCESS MODE  IS SEQUENTIAL                                    \n                  FILE STATUS  IS DALYREJS-STATUS.                              \n\n           SELECT ACCOUNT-FILE ASSIGN TO ACCTFILE                               \n                  ORGANIZATION IS INDEXED                                       \n                  ACCESS MODE  IS RANDOM                                        \n                  RECORD KEY   IS FD-ACCT-ID                                    \n                  FILE STATUS  IS ACCTFILE-STATUS.                              \n\n           SELECT TCATBAL-FILE ASSIGN TO TCATBALF                               \n                  ORGANIZATION IS INDEXED                                       \n                  ACCESS MODE  IS RANDOM                                        \n                  RECORD KEY   IS FD-TRAN-CAT-KEY                               \n                  FILE STATUS  IS TCATBALF-STATUS.                              \n\n      *\n</code></pre>"},{"location":"CBTRN02C.html#data-division","title":"Data Division","text":""},{"location":"CBTRN02C.html#file-section","title":"FILE SECTION","text":"<p>This File Section defines the structure of six key files used in the transaction processing program. It includes:</p> <ol> <li> <p>DALYTRAN-FILE: The input file containing daily credit card transactions with a 16-character transaction ID followed by customer data.</p> </li> <li> <p>TRANSACT-FILE: The output file for valid processed transactions, maintaining a similar structure to the input file.</p> </li> <li> <p>XREF-FILE: A cross-reference file used to validate card numbers against accounts, containing the card number and associated reference data.</p> </li> <li> <p>DALYREJS-FILE: The output file for rejected transactions, which includes both the original transaction record and an 80-character validation message explaining the rejection reason.</p> </li> <li> <p>ACCOUNT-FILE: The master account file containing account information with an 11-digit numeric account ID as the key field.</p> </li> <li> <p>TCATBAL-FILE: A transaction category balance file that tracks balances by account ID, transaction type, and category code, used for categorizing and summarizing transaction activity.</p> </li> </ol> <p>These file definitions support the program's core functions of transaction validation, account updates, and transaction categorization.</p> Code <pre><code>FD  DALYTRAN-FILE.                                                       \n       01  FD-TRAN-RECORD.                                                      \n           05 FD-TRAN-ID                        PIC X(16).                      \n           05 FD-CUST-DATA                      PIC X(334).                     \n\n       FD  TRANSACT-FILE.                                                       \n       01  FD-TRANFILE-REC.                                                     \n           05 FD-TRANS-ID                       PIC X(16).                      \n           05 FD-ACCT-DATA                      PIC X(334).                     \n\n       FD  XREF-FILE.                                                           \n       01  FD-XREFFILE-REC.                                                     \n           05 FD-XREF-CARD-NUM                  PIC X(16).                      \n           05 FD-XREF-DATA                      PIC X(34).                      \n\n       FD  DALYREJS-FILE.                                                       \n       01  FD-REJS-RECORD.                                                      \n           05 FD-REJECT-RECORD                  PIC X(350).                     \n           05 FD-VALIDATION-TRAILER             PIC X(80).                      \n\n       FD  ACCOUNT-FILE.                                                        \n       01  FD-ACCTFILE-REC.                                                     \n           05 FD-ACCT-ID                        PIC 9(11).                      \n           05 FD-ACCT-DATA                      PIC X(289).                     \n\n       FD  TCATBAL-FILE.                                                        \n       01  FD-TRAN-CAT-BAL-RECORD.                                              \n           05 FD-TRAN-CAT-KEY.                                                  \n              10 FD-TRANCAT-ACCT-ID             PIC 9(11).                      \n              10 FD-TRANCAT-TYPE-CD             PIC X(02).                      \n              10 FD-TRANCAT-CD                  PIC 9(04).                      \n           05 FD-FD-TRAN-CAT-DATA               PIC X(33).\n</code></pre>"},{"location":"CBTRN02C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage Section defines the data structures used by the CBTRN02C program for processing credit card transactions. It includes file status variables for all files used in the program (daily transactions, transaction file, cross-reference file, rejection file, account file, and transaction category balance file). The section also contains utility fields for I/O operations, binary conversions, and timestamp formatting.</p> <p>Key components include error handling structures (IO-STATUS fields and APPL-RESULT), timestamp fields for formatting between COBOL and DB2 formats, a REJECT-RECORD structure for storing invalid transactions with their failure reasons, and program counters to track processed and rejected transactions. The WS-FLAGS area includes a flag to determine when transaction category records need to be created.</p> <p>The section incorporates several copybooks (CVTRA06Y, CVTRA05Y, CVACT03Y, CVACT01Y, CVTRA01Y) which likely contain record layouts for the various files processed by the program.</p> Code <pre><code>*****************************************************************         \n       COPY CVTRA06Y.                                                           \n       01  DALYTRAN-STATUS.                                                     \n           05  DALYTRAN-STAT1      PIC X.                                       \n           05  DALYTRAN-STAT2      PIC X.                                       \n\n       COPY CVTRA05Y.                                                           \n       01  TRANFILE-STATUS.                                                     \n           05  TRANFILE-STAT1      PIC X.                                       \n           05  TRANFILE-STAT2      PIC X.                                       \n\n       COPY CVACT03Y.                                                           \n       01  XREFFILE-STATUS.                                                     \n           05  XREFFILE-STAT1      PIC X.                                       \n           05  XREFFILE-STAT2      PIC X.                                       \n\n       01  DALYREJS-STATUS.                                                     \n           05  DALYREJS-STAT1      PIC X.                                       \n           05  DALYREJS-STAT2      PIC X.                                       \n\n       COPY CVACT01Y.                                                           \n       01  ACCTFILE-STATUS.                                                     \n           05  ACCTFILE-STAT1      PIC X.                                       \n           05  ACCTFILE-STAT2      PIC X.                                       \n\n       COPY CVTRA01Y.                                                           \n       01  TCATBALF-STATUS.                                                     \n           05  TCATBALF-STAT1      PIC X.                                       \n           05  TCATBALF-STAT2      PIC X.                                       \n\n       01  IO-STATUS.                                                           \n           05  IO-STAT1            PIC X.                                       \n           05  IO-STAT2            PIC X.                                       \n       01  TWO-BYTES-BINARY        PIC 9(4) BINARY.                             \n       01  TWO-BYTES-ALPHA         REDEFINES TWO-BYTES-BINARY.                  \n           05  TWO-BYTES-LEFT      PIC X.                                       \n           05  TWO-BYTES-RIGHT     PIC X.                                       \n       01  IO-STATUS-04.                                                        \n           05  IO-STATUS-0401      PIC 9   VALUE 0.                             \n           05  IO-STATUS-0403      PIC 999 VALUE 0.                             \n\n       01  APPL-RESULT             PIC S9(9)   COMP.                            \n           88  APPL-AOK            VALUE 0.                                     \n           88  APPL-EOF            VALUE 16.                                    \n\n       01  END-OF-FILE             PIC X(01)    VALUE 'N'.                      \n       01  ABCODE                  PIC S9(9) BINARY.                            \n       01  TIMING                  PIC S9(9) BINARY.                            \n      * T I M E S T A M P   D B 2  X(26)     EEEE-MM-DD-UU.MM.SS.HH0000         \n       01  COBOL-TS.                                                            \n           05 COB-YYYY                  PIC X(04).                              \n           05 COB-MM                    PIC X(02).                              \n           05 COB-DD                    PIC X(02).                              \n           05 COB-HH                    PIC X(02).                              \n           05 COB-MIN                   PIC X(02).                              \n           05 COB-SS                    PIC X(02).                              \n           05 COB-MIL                   PIC X(02).                              \n           05 COB-REST                  PIC X(05).                              \n       01  DB2-FORMAT-TS                PIC X(26).                              \n       01  FILLER REDEFINES DB2-FORMAT-TS.                                      \n           06 DB2-YYYY                  PIC X(004).                      E      \n           06 DB2-STREEP-1              PIC X.                           -      \n           06 DB2-MM                    PIC X(002).                      M      \n           06 DB2-STREEP-2              PIC X.                           -      \n           06 DB2-DD                    PIC X(002).                      D      \n           06 DB2-STREEP-3              PIC X.                           -      \n           06 DB2-HH                    PIC X(002).                      U      \n           06 DB2-DOT-1                 PIC X.                                  \n           06 DB2-MIN                   PIC X(002).                             \n           06 DB2-DOT-2                 PIC X.                                  \n           06 DB2-SS                    PIC X(002).                             \n           06 DB2-DOT-3                 PIC X.                                  \n           06 DB2-MIL                   PIC 9(002).                             \n           06 DB2-REST                  PIC X(04).                              \n\n        01 REJECT-RECORD.                                                       \n           05 REJECT-TRAN-DATA          PIC X(350).                             \n           05 VALIDATION-TRAILER        PIC X(80).                              \n\n        01 WS-VALIDATION-TRAILER.                                               \n           05 WS-VALIDATION-FAIL-REASON      PIC 9(04).                         \n           05 WS-VALIDATION-FAIL-REASON-DESC PIC X(76).                         \n\n        01 WS-COUNTERS.                                                         \n           05 WS-TRANSACTION-COUNT          PIC 9(09) VALUE 0.                  \n           05 WS-REJECT-COUNT               PIC 9(09) VALUE 0.                  \n           05 WS-TEMP-BAL                   PIC S9(09)V99.                      \n\n        01 WS-FLAGS.                                                            \n           05 WS-CREATE-TRANCAT-REC         PIC X(01) VALUE 'N'.                \n\n      *****************************************************************\n</code></pre>"},{"location":"CBTRN02C.html#procedure-division","title":"Procedure Division","text":""},{"location":"CBTRN02C.html#0000-dalytran-open","title":"0000-DALYTRAN-OPEN","text":"<p>This paragraph handles the opening of the DALYTRAN-FILE, which contains the daily credit card transactions to be processed. It initializes APPL-RESULT to 8, attempts to open the input file, and then sets APPL-RESULT to 0 if successful or 12 if unsuccessful. If the file open operation fails (APPL-RESULT not equal to 0), the paragraph displays an error message, captures the file status code, calls a routine to display detailed I/O status information, and then terminates the program abnormally. This is a critical initialization step that ensures the primary input file is available before proceeding with transaction processing.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN INPUT DALYTRAN-FILE                                             \n           IF  DALYTRAN-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING DALYTRAN'                                 \n               MOVE DALYTRAN-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#0100-tranfile-open","title":"0100-TRANFILE-OPEN","text":"<p>This paragraph handles the opening of the transaction output file. It attempts to open the TRANSACT-FILE in OUTPUT mode and then validates the operation's success. If the file opens successfully (status '00'), it sets APPL-RESULT to 0 indicating success. If the open operation fails, it sets APPL-RESULT to 12 indicating an error. When an error occurs, the paragraph displays an error message, captures the file status code, calls a routine to display detailed I/O status information, and then terminates the program abnormally. This is a critical initialization step that ensures the program can write transaction records to the output file before proceeding with transaction processing.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN OUTPUT TRANSACT-FILE                                            \n           IF  TRANFILE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING TRANSACTION FILE'                         \n               MOVE TRANFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#0200-xreffile-open","title":"0200-XREFFILE-OPEN","text":"<p>This paragraph handles the opening of the cross-reference file (XREF-FILE) used to validate card numbers. It initializes the application result code to 8, attempts to open the file in INPUT mode, and then checks the operation's success. If the file opens successfully (status '00'), the result code is set to 0; otherwise, it's set to 12. When an error occurs, the paragraph displays an error message, captures the file status code, calls a routine to display detailed I/O status information, and then aborts the program execution. This is a critical initialization step as the cross-reference file is essential for transaction validation in the main processing logic.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN INPUT XREF-FILE                                                 \n           IF  XREFFILE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING CROSS REF FILE'                           \n               MOVE XREFFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#0300-dalyrejs-open","title":"0300-DALYREJS-OPEN","text":"<p>This paragraph handles the opening of the daily rejects output file (DALYREJS-FILE). It initializes the application result code to 8, attempts to open the file, and then sets the result code to 0 if successful or 12 if unsuccessful. If the file open operation fails, the paragraph displays an error message, calls a routine to display the I/O status details, and then terminates the program abnormally. This is part of the program's error handling for file operations that ensures proper initialization of the rejection file where invalid transactions will be written.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN OUTPUT DALYREJS-FILE                                            \n           IF  DALYREJS-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING DALY REJECTS FILE'                        \n               MOVE DALYREJS-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#0400-acctfile-open","title":"0400-ACCTFILE-OPEN","text":"<p>This paragraph handles the opening of the Account Master file in I-O (input-output) mode. It first sets a default error code of 8, then attempts to open the file. If the operation is successful (status code '00'), it resets the result code to 0; otherwise, it sets a more severe error code of 12. When an error occurs, the paragraph displays an error message, captures the file status code, calls a routine to display detailed I/O status information, and then terminates the program abnormally. This is a critical initialization step that ensures the program has proper access to the account data before proceeding with transaction processing.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN I-O  ACCOUNT-FILE                                               \n           IF  ACCTFILE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING ACCOUNT MASTER FILE'                      \n               MOVE ACCTFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#0500-tcatbalf-open","title":"0500-TCATBALF-OPEN","text":"<p>This paragraph attempts to open the Transaction Category Balance file in I-O (input-output) mode. It sets an initial result code of 8, then attempts the file open operation. If the file opens successfully (status '00'), it resets the result code to 0; otherwise, it sets a more severe error code of 12. If the operation fails, the paragraph displays an error message, shows the specific file status code through the 9910-DISPLAY-IO-STATUS paragraph, and then terminates the program by calling the 9999-ABEND-PROGRAM paragraph. This is a critical file operation as the program needs to update transaction category balances for valid credit card transactions.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN I-O  TCATBAL-FILE                                               \n           IF  TCATBALF-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING TRANSACTION BALANCE FILE'                 \n               MOVE TCATBALF-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#1000-dalytran-get-next","title":"1000-DALYTRAN-GET-NEXT","text":"<p>This paragraph reads the next record from the daily transaction file (DALYTRAN-FILE) and handles any file access errors. It sets APPL-RESULT to 0 for successful reads, 16 for end-of-file conditions, and 12 for other file errors. When a successful read occurs, processing continues normally. When end-of-file is reached, it sets the END-OF-FILE flag to 'Y'. For any other file errors, it displays an error message, captures the file status code, displays detailed I/O status information, and then terminates the program abnormally. This paragraph is a critical part of the transaction processing loop, controlling the sequential reading of input transactions.</p> Code <pre><code>READ DALYTRAN-FILE INTO DALYTRAN-RECORD.                             \n           IF  DALYTRAN-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n      *        DISPLAY DALYTRAN-RECORD                                          \n           ELSE                                                                 \n               IF  DALYTRAN-STATUS = '10'                                       \n                   MOVE 16 TO APPL-RESULT                                       \n               ELSE                                                             \n                   MOVE 12 TO APPL-RESULT                                       \n               END-IF                                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               IF  APPL-EOF                                                     \n                   MOVE 'Y' TO END-OF-FILE                                      \n               ELSE                                                             \n                   DISPLAY 'ERROR READING DALYTRAN FILE'                        \n                   MOVE DALYTRAN-STATUS TO IO-STATUS                            \n                   PERFORM 9910-DISPLAY-IO-STATUS                               \n                   PERFORM 9999-ABEND-PROGRAM                                   \n               END-IF                                                           \n           END-IF                                                               \n           EXIT.\n</code></pre>"},{"location":"CBTRN02C.html#1500-validate-tran","title":"1500-VALIDATE-TRAN","text":"<p>This paragraph orchestrates the transaction validation process by first performing a cross-reference lookup (1500-A-LOOKUP-XREF) to validate the card number. If this initial validation passes (indicated by WS-VALIDATION-FAIL-REASON = 0), it proceeds to look up and validate the account details by calling the 1500-B-LOOKUP-ACCT paragraph. The code includes a comment indicating where additional validation steps could be added in the future. The paragraph serves as a control point for the sequential validation steps required before a transaction can be processed.</p> Code <pre><code>PERFORM 1500-A-LOOKUP-XREF.                                          \n           IF WS-VALIDATION-FAIL-REASON = 0                                     \n              PERFORM 1500-B-LOOKUP-ACCT                                        \n           ELSE                                                                 \n              CONTINUE                                                          \n           END-IF                                                               \n      * ADD MORE VALIDATIONS HERE                                               \n           EXIT.\n</code></pre>"},{"location":"CBTRN02C.html#1500-a-lookup-xref","title":"1500-A-LOOKUP-XREF","text":"<p>This paragraph performs a lookup in the card cross-reference file to validate the card number from the daily transaction record. It reads the XREF-FILE using the card number as the key. If the card number is not found (INVALID KEY), it sets the validation failure reason code to 100 and the description to \"INVALID CARD NUMBER FOUND\". If the card number is found, the program continues processing. This is a critical validation step that ensures transactions are only processed for valid card numbers that exist in the system.</p> Code <pre><code>*    DISPLAY 'CARD NUMBER: ' DALYTRAN-CARD-NUM                            \n           MOVE DALYTRAN-CARD-NUM TO FD-XREF-CARD-NUM                           \n           READ XREF-FILE INTO CARD-XREF-RECORD                                 \n              INVALID KEY                                                       \n                MOVE 100 TO WS-VALIDATION-FAIL-REASON                           \n                MOVE 'INVALID CARD NUMBER FOUND'                                \n                  TO WS-VALIDATION-FAIL-REASON-DESC                             \n              NOT INVALID KEY                                                   \n      *           DISPLAY 'ACCOUNT RECORD FOUND'                                \n                  CONTINUE                                                      \n           END-READ                                                             \n           EXIT.\n</code></pre>"},{"location":"CBTRN02C.html#1500-b-lookup-acct","title":"1500-B-LOOKUP-ACCT","text":"<p>This paragraph performs account validation for a credit card transaction. It reads the account record using the account ID from the cross-reference file and performs several validation checks. First, it verifies the account exists, setting error code 101 if not found. For valid accounts, it calculates a temporary balance by adding the transaction amount to the difference between current cycle credits and debits. It then checks if this new balance would exceed the account's credit limit (error code 102) and verifies the transaction date is not after the account's expiration date (error code 103). Each validation failure sets an appropriate reason code and description for later processing. The paragraph is a critical part of the transaction validation workflow, ensuring transactions are only processed for valid, active accounts with sufficient available credit.</p> Code <pre><code>MOVE XREF-ACCT-ID TO FD-ACCT-ID                                      \n           READ ACCOUNT-FILE INTO ACCOUNT-RECORD                                \n              INVALID KEY                                                       \n                MOVE 101 TO WS-VALIDATION-FAIL-REASON                           \n                MOVE 'ACCOUNT RECORD NOT FOUND'                                 \n                  TO WS-VALIDATION-FAIL-REASON-DESC                             \n              NOT INVALID KEY                                                   \n      *         DISPLAY 'ACCT-CREDIT-LIMIT:' ACCT-CREDIT-LIMIT                  \n      *         DISPLAY 'TRAN-AMT         :' DALYTRAN-AMT                       \n                COMPUTE WS-TEMP-BAL = ACCT-CURR-CYC-CREDIT                      \n                                    - ACCT-CURR-CYC-DEBIT                       \n                                    + DALYTRAN-AMT                              \n\n                IF ACCT-CREDIT-LIMIT &gt;= WS-TEMP-BAL                             \n                  CONTINUE                                                      \n                ELSE                                                            \n                  MOVE 102 TO WS-VALIDATION-FAIL-REASON                         \n                  MOVE 'OVERLIMIT TRANSACTION'                                  \n                    TO WS-VALIDATION-FAIL-REASON-DESC                           \n                END-IF                                                          \n                IF ACCT-EXPIRAION-DATE &gt;= DALYTRAN-ORIG-TS (1:10)               \n                  CONTINUE                                                      \n                ELSE                                                            \n                  MOVE 103 TO WS-VALIDATION-FAIL-REASON                         \n                  MOVE 'TRANSACTION RECEIVED AFTER ACCT EXPIRATION'             \n                    TO WS-VALIDATION-FAIL-REASON-DESC                           \n                END-IF                                                          \n           END-READ                                                             \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#2000-post-transaction","title":"2000-POST-TRANSACTION","text":"<p>This paragraph handles the posting of a valid credit card transaction. It first maps data from the daily transaction record (DALYTRAN) to the transaction record (TRAN) fields, including transaction ID, type code, category code, source, description, amount, merchant details, card number, and original timestamp. It then generates a current timestamp in DB2 format for the transaction processing time. After preparing the transaction record, the paragraph calls three sub-procedures: one to update transaction category balances (2700-UPDATE-TCATBAL), another to update the account record with the new transaction details (2800-UPDATE-ACCOUNT-REC), and finally a procedure to write the completed transaction to the transaction file (2900-WRITE-TRANSACTION-FILE).</p> Code <pre><code>MOVE  DALYTRAN-ID            TO    TRAN-ID                           \n           MOVE  DALYTRAN-TYPE-CD       TO    TRAN-TYPE-CD                      \n           MOVE  DALYTRAN-CAT-CD        TO    TRAN-CAT-CD                       \n           MOVE  DALYTRAN-SOURCE        TO    TRAN-SOURCE                       \n           MOVE  DALYTRAN-DESC          TO    TRAN-DESC                         \n           MOVE  DALYTRAN-AMT           TO    TRAN-AMT                          \n           MOVE  DALYTRAN-MERCHANT-ID   TO    TRAN-MERCHANT-ID                  \n           MOVE  DALYTRAN-MERCHANT-NAME TO    TRAN-MERCHANT-NAME                \n           MOVE  DALYTRAN-MERCHANT-CITY TO    TRAN-MERCHANT-CITY                \n           MOVE  DALYTRAN-MERCHANT-ZIP  TO    TRAN-MERCHANT-ZIP                 \n           MOVE  DALYTRAN-CARD-NUM      TO    TRAN-CARD-NUM                     \n           MOVE  DALYTRAN-ORIG-TS       TO    TRAN-ORIG-TS                      \n           PERFORM Z-GET-DB2-FORMAT-TIMESTAMP                                   \n           MOVE  DB2-FORMAT-TS          TO    TRAN-PROC-TS                      \n\n           PERFORM 2700-UPDATE-TCATBAL                                          \n           PERFORM 2800-UPDATE-ACCOUNT-REC                                      \n           PERFORM 2900-WRITE-TRANSACTION-FILE                                  \n\n           EXIT.\n</code></pre>"},{"location":"CBTRN02C.html#2500-write-reject-rec","title":"2500-WRITE-REJECT-REC","text":"<p>This paragraph handles the writing of rejected transaction records to the rejection file. It copies the original transaction data to the rejection record structure, adds validation trailer information, and attempts to write the record to the rejection file. The paragraph sets a return code of 8 to indicate a rejected transaction. If the write operation fails (status not '00'), it sets a higher return code of 12, displays an error message, shows the I/O status details, and abends the program. This ensures that any file writing failures are properly handled and reported rather than allowing the program to continue with potentially corrupted data.</p> Code <pre><code>MOVE DALYTRAN-RECORD TO REJECT-TRAN-DATA                             \n           MOVE WS-VALIDATION-TRAILER TO VALIDATION-TRAILER                     \n      *     DISPLAY '***' REJECT-RECORD                                         \n           MOVE 8 TO APPL-RESULT                                                \n           WRITE FD-REJS-RECORD FROM REJECT-RECORD                              \n           IF DALYREJS-STATUS = '00'                                            \n               MOVE 0 TO  APPL-RESULT                                           \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR WRITING TO REJECTS FILE'                          \n               MOVE DALYREJS-STATUS  TO IO-STATUS                               \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#2700-update-tcatbal","title":"2700-UPDATE-TCATBAL","text":"<p>This paragraph updates transaction category balances in the TCATBAL file based on the current transaction. It first attempts to read a record using the account ID, transaction type code, and category code as the key. If the record doesn't exist (indicated by an INVALID KEY condition), it sets a flag to create a new record. The paragraph includes error handling for file operations, displaying detailed status information and aborting the program if a read error occurs. Based on whether the record exists or not, it then calls either the 2700-A-CREATE-TCATBAL-REC paragraph to create a new transaction category balance record or the 2700-B-UPDATE-TCATBAL-REC paragraph to update an existing one.</p> Code <pre><code>* Update the balances in transaction balance file.                        \n           MOVE XREF-ACCT-ID TO FD-TRANCAT-ACCT-ID                              \n           MOVE DALYTRAN-TYPE-CD TO FD-TRANCAT-TYPE-CD                          \n           MOVE DALYTRAN-CAT-CD TO FD-TRANCAT-CD                                \n\n           MOVE 'N' TO WS-CREATE-TRANCAT-REC                                    \n           READ TCATBAL-FILE INTO TRAN-CAT-BAL-RECORD                           \n              INVALID KEY                                                       \n                DISPLAY 'TCATBAL record not found for key : '                   \n                   FD-TRAN-CAT-KEY '.. Creating.'                               \n                MOVE 'Y' TO WS-CREATE-TRANCAT-REC                               \n           END-READ.                                                            \n\n           IF  TCATBALF-STATUS = '00'  OR '23'                                  \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR READING TRANSACTION BALANCE FILE'                 \n               MOVE TCATBALF-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF.                                                              \n\n           IF WS-CREATE-TRANCAT-REC = 'Y'                                       \n              PERFORM 2700-A-CREATE-TCATBAL-REC                                 \n           ELSE                                                                 \n              PERFORM 2700-B-UPDATE-TCATBAL-REC                                 \n           END-IF                                                               \n\n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#2700-a-create-tcatbal-rec","title":"2700-A-CREATE-TCATBAL-REC","text":"<p>This paragraph creates and writes a new transaction category balance record. It initializes a new record structure, populates it with account ID from the cross-reference file, transaction type and category codes from the daily transaction record, and adds the transaction amount to the category balance. The record is then written to the transaction category balance file. If the write operation is successful (status '00'), processing continues normally. If the write fails, the program displays an error message, shows the I/O status details by calling the 9910-DISPLAY-IO-STATUS paragraph, and then terminates abnormally by calling the 9999-ABEND-PROGRAM paragraph. This paragraph is part of the transaction processing logic that maintains running balances by transaction category for each account.</p> Code <pre><code>INITIALIZE TRAN-CAT-BAL-RECORD                                       \n           MOVE XREF-ACCT-ID TO TRANCAT-ACCT-ID                                 \n           MOVE DALYTRAN-TYPE-CD TO TRANCAT-TYPE-CD                             \n           MOVE DALYTRAN-CAT-CD TO TRANCAT-CD                                   \n           ADD DALYTRAN-AMT TO TRAN-CAT-BAL                                     \n\n           WRITE FD-TRAN-CAT-BAL-RECORD FROM TRAN-CAT-BAL-RECORD                \n\n           IF  TCATBALF-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR WRITING TRANSACTION BALANCE FILE'                 \n               MOVE TCATBALF-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF.                                                              \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#2700-b-update-tcatbal-rec","title":"2700-B-UPDATE-TCATBAL-REC","text":"<p>This paragraph updates the transaction category balance record by adding the current transaction amount to the existing balance. It then rewrites the updated record back to the transaction category balance file. If the rewrite operation is successful (status code '00'), it sets APPL-RESULT to 0 indicating success. If the rewrite fails, it sets APPL-RESULT to 12, displays an error message, shows the I/O status, and abends the program. This ensures that transaction category balances are accurately maintained and that any file operation failures are immediately detected and handled.</p> Code <pre><code>ADD DALYTRAN-AMT TO TRAN-CAT-BAL                                     \n           REWRITE FD-TRAN-CAT-BAL-RECORD FROM TRAN-CAT-BAL-RECORD              \n\n           IF  TCATBALF-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR REWRITING TRANSACTION BALANCE FILE'               \n               MOVE TCATBALF-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF.                                                              \n\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#2800-update-account-rec","title":"2800-UPDATE-ACCOUNT-REC","text":"<p>This paragraph updates the account record balances to reflect a posted transaction. It adds the transaction amount to the current balance and then, based on whether the transaction is positive (credit) or negative (debit), updates either the current cycle credit or debit total accordingly. After updating the in-memory record, it attempts to rewrite the modified account record back to the account file. If the rewrite operation fails due to an invalid key (account record not found), it sets error code 109 with a descriptive message. This paragraph is a critical part of the transaction processing flow, ensuring account balances are properly maintained after a transaction is validated.</p> Code <pre><code>* Update the balances in account record to reflect posted trans.          \n           ADD DALYTRAN-AMT  TO ACCT-CURR-BAL                                   \n           IF DALYTRAN-AMT &gt;= 0                                                 \n              ADD DALYTRAN-AMT TO ACCT-CURR-CYC-CREDIT                          \n           ELSE                                                                 \n              ADD DALYTRAN-AMT TO ACCT-CURR-CYC-DEBIT                           \n           END-IF                                                               \n\n           REWRITE FD-ACCTFILE-REC FROM  ACCOUNT-RECORD                         \n              INVALID KEY                                                       \n                MOVE 109 TO WS-VALIDATION-FAIL-REASON                           \n                MOVE 'ACCOUNT RECORD NOT FOUND'                                 \n                  TO WS-VALIDATION-FAIL-REASON-DESC                             \n           END-REWRITE.                                                         \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#2900-write-transaction-file","title":"2900-WRITE-TRANSACTION-FILE","text":"<p>This paragraph handles writing transaction records to the transaction file. It attempts to write the TRAN-RECORD to the file and then validates the operation's success. If the write operation is successful (status '00'), it sets APPL-RESULT to 0 indicating success. If the write fails, it sets APPL-RESULT to 12 indicating an error. When an error occurs, the paragraph displays an error message, captures the file status code, displays detailed I/O status information, and then abends the program. This ensures that transaction file write failures are properly handled and reported rather than allowing the program to continue with potentially corrupted data.</p> Code <pre><code>MOVE 8 TO  APPL-RESULT.                                              \n           WRITE FD-TRANFILE-REC FROM TRAN-RECORD                               \n\n           IF  TRANFILE-STATUS = '00'                                           \n               MOVE 0 TO  APPL-RESULT                                           \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR WRITING TO TRANSACTION FILE'                      \n               MOVE TRANFILE-STATUS  TO IO-STATUS                               \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#9000-dalytran-close","title":"9000-DALYTRAN-CLOSE","text":"<p>This paragraph handles the closing of the DALYTRAN-FILE (daily transaction file) with error handling. It initially sets APPL-RESULT to 8, then attempts to close the file. If the close operation is successful (status '00'), it resets APPL-RESULT to 0; otherwise, it sets APPL-RESULT to 12 indicating an error. When an error occurs, the paragraph displays an error message, captures the file status code, calls a routine to display detailed I/O status information, and then abends the program. This ensures proper file closure and appropriate error handling for the daily transaction file processing.</p> Code <pre><code>MOVE 8 TO  APPL-RESULT.                                              \n           CLOSE DALYTRAN-FILE                                                  \n           IF  DALYTRAN-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING DALYTRAN FILE'                            \n               MOVE DALYTRAN-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#9100-tranfile-close","title":"9100-TRANFILE-CLOSE","text":"<p>This paragraph handles the closing of the transaction file (TRANSACT-FILE) with error handling. It initially sets the application result code to 8, then attempts to close the file. If the close operation is successful (status '00'), it resets the result code to 0; otherwise, it sets it to 12. When an error occurs during file closing, the paragraph displays an error message, captures the file status code, calls a routine to display detailed I/O status information, and then abends the program. This ensures proper file handling and provides clear error reporting when transaction file closure fails.</p> Code <pre><code>MOVE 8 TO  APPL-RESULT.                                              \n           CLOSE TRANSACT-FILE                                                  \n           IF  TRANFILE-STATUS = '00'                                           \n               MOVE 0 TO  APPL-RESULT                                           \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING TRANSACTION FILE'                         \n               MOVE TRANFILE-STATUS  TO IO-STATUS                               \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#9200-xreffile-close","title":"9200-XREFFILE-CLOSE","text":"<p>This paragraph handles the closing of the cross-reference file (XREF-FILE) used to validate card numbers. It initially sets the application result code to 8, then attempts to close the file. If the close operation is successful (status '00'), it resets the result code to 0; otherwise, it sets it to 12. When an error occurs during file closing, the paragraph displays an error message, captures the file status code, calls a routine to display detailed I/O status information, and then abends the program. This ensures proper file handling and provides clear error reporting when file closure fails.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           CLOSE XREF-FILE                                                      \n           IF  XREFFILE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING CROSS REF FILE'                           \n               MOVE XREFFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#9300-dalyrejs-close","title":"9300-DALYREJS-CLOSE","text":"<p>This paragraph handles the closing of the daily rejects file (DALYREJS-FILE) and performs error handling. It initially sets APPL-RESULT to 8, then attempts to close the file. If the close operation is successful (status code '00'), it resets APPL-RESULT to 0; otherwise, it sets APPL-RESULT to 12 indicating an error. When an error occurs, the paragraph displays an error message, retrieves the file status code, calls a routine to display the I/O status details, and then aborts the program execution by calling the abend routine. This ensures proper file closure and appropriate error handling for the daily transaction rejection file.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           CLOSE DALYREJS-FILE                                                  \n           IF  DALYREJS-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING DAILY REJECTS FILE'                       \n               MOVE XREFFILE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#9400-acctfile-close","title":"9400-ACCTFILE-CLOSE","text":"<p>This paragraph handles the closing of the Account File with error handling. It initially sets a default error code (8), then attempts to close the file. If the close operation is successful (status '00'), it resets the result code to 0; otherwise, it sets a more severe error code (12). When an error occurs, the paragraph displays an error message, captures the file status code, displays detailed I/O status information, and terminates the program abnormally. This ensures proper file closure and appropriate error handling during program termination.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           CLOSE ACCOUNT-FILE                                                   \n           IF  ACCTFILE-STATUS  = '00'                                          \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING ACCOUNT FILE'                             \n               MOVE ACCTFILE-STATUS  TO IO-STATUS                               \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN02C.html#9500-tcatbalf-close","title":"9500-TCATBALF-CLOSE","text":"<p>This paragraph handles the closing of the Transaction Category Balance File (TCATBAL-FILE). It initially sets an error code (8) in APPL-RESULT, then attempts to close the file. If the close operation is successful (status '00'), it resets APPL-RESULT to 0 indicating success. If the close fails, it sets APPL-RESULT to 12 indicating a more severe error. When an error occurs, the paragraph displays an error message, retrieves the file status code, calls a routine to display the I/O status details, and then abends the program. This ensures proper file handling and provides clear error reporting when file closure problems occur.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           CLOSE TCATBAL-FILE                                                   \n           IF  TCATBALF-STATUS  = '00'                                          \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING TRANSACTION BALANCE FILE'                 \n               MOVE TCATBALF-STATUS  TO IO-STATUS                               \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.\n</code></pre>"},{"location":"CBTRN02C.html#z-get-db2-format-timestamp","title":"Z-GET-DB2-FORMAT-TIMESTAMP","text":"<p>This paragraph retrieves the current system date and time and formats it into a DB2-compatible timestamp format. It uses the FUNCTION CURRENT-DATE to get the current timestamp, then maps individual components (year, month, day, hour, minute, second, millisecond) from the COBOL timestamp structure to a DB2 timestamp format. The paragraph adds necessary formatting characters like hyphens and decimal points to create a properly formatted DB2 timestamp (YYYY-MM-DD-HH.MI.SS.MMMMMM). This timestamp can be used for database operations that require timestamp values, such as recording when transactions were processed.</p> Code <pre><code>MOVE FUNCTION CURRENT-DATE TO COBOL-TS                               \n           MOVE COB-YYYY TO DB2-YYYY                                            \n           MOVE COB-MM   TO DB2-MM                                              \n           MOVE COB-DD   TO DB2-DD                                              \n           MOVE COB-HH   TO DB2-HH                                              \n           MOVE COB-MIN  TO DB2-MIN                                             \n           MOVE COB-SS   TO DB2-SS                                              \n           MOVE COB-MIL  TO DB2-MIL                                             \n           MOVE '0000'   TO DB2-REST                                            \n           MOVE '-' TO DB2-STREEP-1 DB2-STREEP-2 DB2-STREEP-3                   \n           MOVE '.' TO DB2-DOT-1 DB2-DOT-2 DB2-DOT-3                            \n      *    DISPLAY 'DB2-TIMESTAMP = ' DB2-FORMAT-TS                             \n           EXIT.\n</code></pre>"},{"location":"CBTRN02C.html#9999-abend-program","title":"9999-ABEND-PROGRAM","text":"<p>This paragraph handles abnormal program termination by displaying an \"ABENDING PROGRAM\" message, resetting the timing variable to zero, setting an abort code of 999, and then calling the Language Environment service 'CEE3ABD' to force an immediate program abort. This is likely used in critical error situations where the program cannot continue execution and needs to terminate in a controlled manner.</p> Code <pre><code>DISPLAY 'ABENDING PROGRAM'                                           \n           MOVE 0 TO TIMING                                                     \n           MOVE 999 TO ABCODE                                                   \n           CALL 'CEE3ABD'.                                                      \n\n      *****************************************************************\n</code></pre>"},{"location":"CBTRN02C.html#9910-display-io-status","title":"9910-DISPLAY-IO-STATUS","text":"<p>This paragraph handles the display of file I/O status codes in a standardized format. When a file operation error occurs, it formats the status code for display, with special handling for extended file status codes (where the first digit is '9'). For extended status codes, it extracts the first digit and converts the second byte to a binary value for proper display. For standard status codes, it formats them as '00xx' where 'xx' is the two-digit status code. The paragraph ensures consistent error reporting by displaying all file status codes in a 'NNNN' format with the message \"FILE STATUS IS: NNNN\" regardless of whether they are standard or extended codes.</p> Code <pre><code>IF  IO-STATUS NOT NUMERIC                                            \n           OR  IO-STAT1 = '9'                                                   \n               MOVE IO-STAT1 TO IO-STATUS-04(1:1)                               \n               MOVE 0        TO TWO-BYTES-BINARY                                \n               MOVE IO-STAT2 TO TWO-BYTES-RIGHT                                 \n               MOVE TWO-BYTES-BINARY TO IO-STATUS-0403                          \n               DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04                      \n           ELSE                                                                 \n               MOVE '0000' TO IO-STATUS-04                                      \n               MOVE IO-STATUS TO IO-STATUS-04(3:2)                              \n               DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04                      \n           END-IF                                                               \n           EXIT.                                                                \n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:32 CDT\n      *\n</code></pre>"},{"location":"CBTRN03C.html","title":"CBTRN03C","text":""},{"location":"CBTRN03C.html#overview","title":"Overview","text":"<p>This batch COBOL program (CBTRN03C) generates a transaction detail report for the CardDemo application. The program reads transaction records from a sequential file and filters them based on a date range specified in a parameter file. For each transaction within the date range, it looks up additional information from three indexed files: a card cross-reference file to get account information, a transaction type file for transaction descriptions, and a transaction category file for category descriptions. The program organizes the report by card number, calculating and displaying page totals, account totals, and grand totals for transaction amounts. The report includes transaction details such as transaction ID, account ID, transaction type, category, source, and amount. Error handling is implemented throughout the program to manage file access issues and invalid data conditions.</p>"},{"location":"CBTRN03C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>CBTRN03C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"CBTRN03C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant Main as Main Program\n    participant DateParm as Date Parameters File\n    participant TranFile as Transaction File\n    participant XrefFile as Card Cross-Reference File\n    participant TypeFile as Transaction Type File\n    participant CatgFile as Transaction Category File\n    participant ReptFile as Report File\n\n    Main-&gt;&gt;DateParm: 0500-DATEPARM-OPEN\n    Main-&gt;&gt;TranFile: 0000-TRANFILE-OPEN\n    Main-&gt;&gt;XrefFile: 0200-CARDXREF-OPEN\n    Main-&gt;&gt;TypeFile: 0300-TRANTYPE-OPEN\n    Main-&gt;&gt;CatgFile: 0400-TRANCATG-OPEN\n    Main-&gt;&gt;ReptFile: 0100-REPTFILE-OPEN\n\n    Main-&gt;&gt;DateParm: 0550-DATEPARM-READ\n    DateParm--&gt;&gt;Main: Return date range parameters\n\n    rect rgb(240, 240, 240)\n        Note over Main,ReptFile: Main Processing Loop\n        loop Until End-Of-File\n            Main-&gt;&gt;TranFile: 1000-TRANFILE-GET-NEXT\n            TranFile--&gt;&gt;Main: Return transaction record\n\n            alt Transaction date within range\n                Main-&gt;&gt;XrefFile: 1500-A-LOOKUP-XREF\n                XrefFile--&gt;&gt;Main: Return account information\n\n                Main-&gt;&gt;TypeFile: 1500-B-LOOKUP-TRANTYPE\n                TypeFile--&gt;&gt;Main: Return transaction type description\n\n                Main-&gt;&gt;CatgFile: 1500-C-LOOKUP-TRANCATG\n                CatgFile--&gt;&gt;Main: Return category description\n\n                alt First transaction or new card number\n                    Main-&gt;&gt;ReptFile: 1120-WRITE-HEADERS\n                end\n\n                alt Page limit reached\n                    Main-&gt;&gt;ReptFile: 1110-WRITE-PAGE-TOTALS\n                    Main-&gt;&gt;ReptFile: 1120-WRITE-HEADERS\n                end\n\n                alt New account number\n                    Main-&gt;&gt;ReptFile: 1120-WRITE-ACCOUNT-TOTALS\n                end\n\n                Main-&gt;&gt;ReptFile: 1120-WRITE-DETAIL\n            end\n        end\n    end\n\n    Main-&gt;&gt;ReptFile: 1110-WRITE-PAGE-TOTALS\n    Main-&gt;&gt;ReptFile: 1110-WRITE-GRAND-TOTALS\n\n    Main-&gt;&gt;DateParm: 9500-DATEPARM-CLOSE\n    Main-&gt;&gt;TranFile: 9000-TRANFILE-CLOSE\n    Main-&gt;&gt;XrefFile: 9200-CARDXREF-CLOSE\n    Main-&gt;&gt;TypeFile: 9300-TRANTYPE-CLOSE\n    Main-&gt;&gt;CatgFile: 9400-TRANCATG-CLOSE\n    Main-&gt;&gt;ReptFile: 9100-REPTFILE-CLOSE</code></pre>"},{"location":"CBTRN03C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CVTRA05Y</code></li> <li><code>CVTRA04Y</code></li> <li><code>CVTRA07Y</code></li> <li><code>CVACT03Y</code></li> <li><code>CVTRA03Y</code></li> </ul>"},{"location":"CBTRN03C.html#environment-division","title":"Environment Division","text":""},{"location":"CBTRN03C.html#input-output-section","title":"INPUT-OUTPUT SECTION","text":"<p>This section defines the file control entries for the transaction report program. It specifies five files: a sequential transaction file (TRANSACT-FILE) that contains the source transaction data, three indexed files accessed randomly - a card cross-reference file (XREF-FILE) for account lookups, a transaction type file (TRANTYPE-FILE) for transaction descriptions, and a transaction category file (TRANCATG-FILE) for category information. It also defines a sequential report output file (REPORT-FILE) and a sequential date parameters file (DATE-PARMS-FILE) that likely contains the date range criteria for filtering transactions. Each file has an associated file status variable for error handling.</p> Code <pre><code>FILE-CONTROL.                                                            \n           SELECT TRANSACT-FILE ASSIGN TO TRANFILE                              \n                  ORGANIZATION IS SEQUENTIAL                                    \n                  FILE STATUS  IS TRANFILE-STATUS.                              \n\n           SELECT XREF-FILE ASSIGN TO CARDXREF                                  \n                  ORGANIZATION IS INDEXED                                       \n                  ACCESS MODE  IS RANDOM                                        \n                  RECORD KEY   IS FD-XREF-CARD-NUM                              \n                  FILE STATUS  IS CARDXREF-STATUS.                              \n\n           SELECT TRANTYPE-FILE ASSIGN TO TRANTYPE                              \n                  ORGANIZATION IS INDEXED                                       \n                  ACCESS MODE  IS RANDOM                                        \n                  RECORD KEY   IS FD-TRAN-TYPE                                  \n                  FILE STATUS  IS TRANTYPE-STATUS.                              \n\n           SELECT TRANCATG-FILE ASSIGN TO TRANCATG                              \n                  ORGANIZATION IS INDEXED                                       \n                  ACCESS MODE  IS RANDOM                                        \n                  RECORD KEY   IS FD-TRAN-CAT-KEY                               \n                  FILE STATUS  IS TRANCATG-STATUS.                              \n\n           SELECT REPORT-FILE ASSIGN TO TRANREPT                                \n                  ORGANIZATION IS SEQUENTIAL                                    \n                  FILE STATUS  IS TRANREPT-STATUS.                              \n\n           SELECT DATE-PARMS-FILE ASSIGN TO DATEPARM                            \n                  ORGANIZATION IS SEQUENTIAL                                    \n                  FILE STATUS  IS DATEPARM-STATUS.                              \n      *\n</code></pre>"},{"location":"CBTRN03C.html#data-division","title":"Data Division","text":""},{"location":"CBTRN03C.html#file-section","title":"FILE SECTION","text":"<p>This File Section defines the file structures used in the CBTRN03C program for generating transaction reports. It includes six file definitions: TRANSACT-FILE for transaction records with a 350-byte structure containing transaction data and timestamp; XREF-FILE for card cross-reference records with card number and related data; TRANTYPE-FILE for transaction type lookup with type code and descriptive data; TRANCATG-FILE for transaction category information with composite keys (type code and category code); REPORT-FILE for the 133-byte output report records; and DATE-PARMS-FILE for reading the 80-byte date range parameters that control which transactions are included in the report.</p> Code <pre><code>FD  TRANSACT-FILE.                                                       \n       01 FD-TRANFILE-REC.                                                      \n          05 FD-TRANS-DATA      PIC X(304).                                     \n          05 FD-TRAN-PROC-TS    PIC X(26).                                      \n          05 FD-FILLER          PIC X(20).                                      \n\n       FD  XREF-FILE.                                                           \n       01  FD-CARDXREF-REC.                                                     \n           05 FD-XREF-CARD-NUM                  PIC X(16).                      \n           05 FD-XREF-DATA                      PIC X(34).                      \n\n       FD  TRANTYPE-FILE.                                                       \n       01 FD-TRANTYPE-REC.                                                      \n          05 FD-TRAN-TYPE       PIC X(02).                                      \n          05 FD-TRAN-DATA       PIC X(58).                                      \n\n       FD  TRANCATG-FILE.                                                       \n       01 FD-TRAN-CAT-RECORD.                                                   \n           05  FD-TRAN-CAT-KEY.                                                 \n              10  FD-TRAN-TYPE-CD                         PIC X(02).            \n              10  FD-TRAN-CAT-CD                          PIC 9(04).            \n           05  FD-TRAN-CAT-DATA                           PIC X(54).            \n\n       FD  REPORT-FILE.                                                         \n       01 FD-REPTFILE-REC       PIC X(133).                                     \n\n       FD  DATE-PARMS-FILE.                                                     \n       01 FD-DATEPARM-REC       PIC X(80).\n</code></pre>"},{"location":"CBTRN03C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working-Storage section defines the data structures used by the CBTRN03C transaction report program. It includes file status variables for all input and output files (transaction file, card cross-reference file, transaction type file, transaction category file, report file, and date parameter file). The section incorporates several copybooks (CVTRA05Y, CVACT03Y, CVTRA03Y, CVTRA04Y, CVTRA07Y) that likely contain record layouts for these files. It defines a structure for the date parameter record that stores the start and end dates for filtering transactions. Report-specific variables track page formatting (line counter, page size), financial totals (page total, account total, grand total), and the current card number being processed. Additional utility fields are defined for I/O status handling, binary data manipulation, and program flow control, including end-of-file indicators and application result codes.</p> Code <pre><code>*****************************************************************         \n       COPY CVTRA05Y.                                                           \n       01 TRANFILE-STATUS.                                                      \n          05 TRANFILE-STAT1     PIC X.                                          \n          05 TRANFILE-STAT2     PIC X.                                          \n\n       COPY CVACT03Y.                                                           \n       01  CARDXREF-STATUS.                                                     \n           05  CARDXREF-STAT1      PIC X.                                       \n           05  CARDXREF-STAT2      PIC X.                                       \n\n       COPY CVTRA03Y.                                                           \n       01  TRANTYPE-STATUS.                                                     \n           05  TRANTYPE-STAT1      PIC X.                                       \n           05  TRANTYPE-STAT2      PIC X.                                       \n\n       COPY CVTRA04Y.                                                           \n       01  TRANCATG-STATUS.                                                     \n           05  TRANCATG-STAT1      PIC X.                                       \n           05  TRANCATG-STAT2      PIC X.                                       \n\n       COPY CVTRA07Y.                                                           \n       01 TRANREPT-STATUS.                                                      \n           05 REPTFILE-STAT1     PIC X.                                         \n           05 REPTFILE-STAT2     PIC X.                                         \n\n       01 DATEPARM-STATUS.                                                      \n           05 DATEPARM-STAT1     PIC X.                                         \n           05 DATEPARM-STAT2     PIC X.                                         \n\n       01 WS-DATEPARM-RECORD.                                                   \n           05 WS-START-DATE      PIC X(10).                                     \n           05 FILLER             PIC X(01).                                     \n           05 WS-END-DATE        PIC X(10).                                     \n\n       01 WS-REPORT-VARS.                                                       \n           05 WS-FIRST-TIME      PIC X      VALUE 'Y'.                          \n           05 WS-LINE-COUNTER    PIC 9(09) COMP-3                               \n                                            VALUE 0.                            \n           05 WS-PAGE-SIZE       PIC 9(03) COMP-3                               \n                                            VALUE 20.                           \n           05 WS-BLANK-LINE      PIC X(133) VALUE SPACES.                       \n           05 WS-PAGE-TOTAL      PIC S9(09)V99 VALUE 0.                         \n           05 WS-ACCOUNT-TOTAL   PIC S9(09)V99 VALUE 0.                         \n           05 WS-GRAND-TOTAL     PIC S9(09)V99 VALUE 0.                         \n           05 WS-CURR-CARD-NUM   PIC X(16) VALUE SPACES.                        \n\n       01 IO-STATUS.                                                            \n          05 IO-STAT1           PIC X.                                          \n          05 IO-STAT2           PIC X.                                          \n       01 TWO-BYTES-BINARY      PIC 9(4) BINARY.                                \n       01 TWO-BYTES-ALPHA REDEFINES TWO-BYTES-BINARY.                           \n          05 TWO-BYTES-LEFT     PIC X.                                          \n          05 TWO-BYTES-RIGHT    PIC X.                                          \n       01 IO-STATUS-04.                                                         \n          05 IO-STATUS-0401     PIC 9      VALUE 0.                             \n          05 IO-STATUS-0403     PIC 999    VALUE 0.                             \n\n       01 APPL-RESULT           PIC S9(9) COMP.                                 \n          88 APPL-AOK                      VALUE 0.                             \n          88 APPL-EOF                      VALUE 16.                            \n\n       01 END-OF-FILE           PIC X(01)  VALUE 'N'.                           \n       01 ABCODE                PIC S9(9) BINARY.                               \n       01 TIMING                PIC S9(9) BINARY.                               \n\n      *****************************************************************\n</code></pre>"},{"location":"CBTRN03C.html#procedure-division","title":"Procedure Division","text":""},{"location":"CBTRN03C.html#0550-dateparm-read","title":"0550-DATEPARM-READ","text":"<p>This paragraph reads a date parameter record from the DATE-PARMS-FILE into the WS-DATEPARM-RECORD work area. It evaluates the file status after the read operation: setting APPL-RESULT to 0 for successful reads, 16 for end-of-file conditions, and 12 for other errors. When the read is successful (APPL-AOK), it displays the date range (from WS-START-DATE to WS-END-DATE) that will be used for transaction filtering. If an end-of-file condition occurs, it sets the END-OF-FILE flag to 'Y'. For any other file errors, it displays an error message, captures the file status code, calls a routine to display the I/O status details, and then abends the program. This paragraph is crucial for establishing the date parameters that control which transactions will be included in the report.</p> Code <pre><code>READ DATE-PARMS-FILE INTO WS-DATEPARM-RECORD                         \n           EVALUATE DATEPARM-STATUS                                             \n             WHEN '00'                                                          \n                 MOVE 0 TO APPL-RESULT                                          \n             WHEN '10'                                                          \n                 MOVE 16 TO APPL-RESULT                                         \n             WHEN OTHER                                                         \n                 MOVE 12 TO APPL-RESULT                                         \n           END-EVALUATE                                                         \n\n           IF APPL-AOK                                                          \n              DISPLAY 'Reporting from ' WS-START-DATE                           \n                 ' to ' WS-END-DATE                                             \n           ELSE                                                                 \n              IF APPL-EOF                                                       \n                 MOVE 'Y' TO END-OF-FILE                                        \n              ELSE                                                              \n                 DISPLAY 'ERROR READING DATEPARM FILE'                          \n                 MOVE DATEPARM-STATUS TO IO-STATUS                              \n                 PERFORM 9910-DISPLAY-IO-STATUS                                 \n                 PERFORM 9999-ABEND-PROGRAM                                     \n              END-IF                                                            \n           .                                                                    \n\n      *****************************************************************         \n      * I/O ROUTINES TO ACCESS A KSDS, VSAM DATA SET...               *         \n      *****************************************************************\n</code></pre>"},{"location":"CBTRN03C.html#1000-tranfile-get-next","title":"1000-TRANFILE-GET-NEXT","text":"<p>This paragraph handles the reading of transaction records from the TRANSACT-FILE. It evaluates the file status after each read operation and sets appropriate result codes: 0 for successful reads, 16 for end-of-file conditions, and 12 for other file errors. When a successful read occurs, processing continues normally. When end-of-file is reached, it sets the END-OF-FILE flag to 'Y'. For any other file errors, it displays an error message, captures the file status code, calls a routine to display the I/O status details, and then terminates the program abnormally. This paragraph implements standard file handling with proper error detection and handling to ensure data integrity during report generation.</p> Code <pre><code>READ TRANSACT-FILE INTO TRAN-RECORD.                                 \n\n           EVALUATE TRANFILE-STATUS                                             \n             WHEN '00'                                                          \n                 MOVE 0 TO APPL-RESULT                                          \n             WHEN '10'                                                          \n                 MOVE 16 TO APPL-RESULT                                         \n             WHEN OTHER                                                         \n                 MOVE 12 TO APPL-RESULT                                         \n           END-EVALUATE                                                         \n\n           IF APPL-AOK                                                          \n              CONTINUE                                                          \n           ELSE                                                                 \n              IF APPL-EOF                                                       \n                 MOVE 'Y' TO END-OF-FILE                                        \n              ELSE                                                              \n                 DISPLAY 'ERROR READING TRANSACTION FILE'                       \n                 MOVE TRANFILE-STATUS TO IO-STATUS                              \n                 PERFORM 9910-DISPLAY-IO-STATUS                                 \n                 PERFORM 9999-ABEND-PROGRAM                                     \n              END-IF                                                            \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#1100-write-transaction-report","title":"1100-WRITE-TRANSACTION-REPORT","text":"<p>This paragraph handles the writing of transaction records to the report. It first checks if this is the initial execution (WS-FIRST-TIME = 'Y'), and if so, initializes the report by setting the date range headers and writing the report headers. It then manages pagination by checking if the current line count has reached the page size limit, and if so, writes page totals and new headers. For each transaction, it accumulates the transaction amount into both page and account total accumulators before writing the transaction detail line to the report. The paragraph maintains proper report formatting and running totals throughout the report generation process.</p> Code <pre><code>IF WS-FIRST-TIME = 'Y'                                               \n              MOVE 'N' TO WS-FIRST-TIME                                         \n              MOVE WS-START-DATE TO REPT-START-DATE                             \n              MOVE WS-END-DATE TO REPT-END-DATE                                 \n              PERFORM 1120-WRITE-HEADERS                                        \n           END-IF                                                               \n\n           IF FUNCTION MOD(WS-LINE-COUNTER, WS-PAGE-SIZE) = 0                   \n              PERFORM 1110-WRITE-PAGE-TOTALS                                    \n              PERFORM 1120-WRITE-HEADERS                                        \n           END-IF                                                               \n\n           ADD TRAN-AMT TO WS-PAGE-TOTAL                                        \n                           WS-ACCOUNT-TOTAL                                     \n           PERFORM 1120-WRITE-DETAIL                                            \n           EXIT.                                                                \n\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#1110-write-page-totals","title":"1110-WRITE-PAGE-TOTALS","text":"<p>This paragraph handles the writing of page total information to the transaction detail report. It moves the accumulated page total to the report line, writes the page totals record to the report file, adds the page total to the running grand total, and then resets the page total to zero for the next page. After writing the page totals, it increments the line counter and writes a transaction header to start the next page of transaction details. The paragraph is part of the report formatting logic that maintains running totals at different levels of the report hierarchy.</p> Code <pre><code>MOVE WS-PAGE-TOTAL TO REPT-PAGE-TOTAL                                \n           MOVE REPORT-PAGE-TOTALS TO FD-REPTFILE-REC                           \n           PERFORM 1111-WRITE-REPORT-REC                                        \n           ADD WS-PAGE-TOTAL TO WS-GRAND-TOTAL                                  \n           MOVE 0 TO WS-PAGE-TOTAL                                              \n           ADD 1 TO WS-LINE-COUNTER                                             \n           MOVE TRANSACTION-HEADER-2 TO FD-REPTFILE-REC                         \n           PERFORM 1111-WRITE-REPORT-REC                                        \n           ADD 1 TO WS-LINE-COUNTER                                             \n\n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#1120-write-account-totals","title":"1120-WRITE-ACCOUNT-TOTALS","text":"<p>This paragraph writes account total information to the transaction detail report. It formats the current account total amount into the report line, writes it to the report file, and then resets the account total to zero for the next account. After writing the account total line, it increments the line counter and writes a secondary header line to the report to prepare for the next account's transactions. This ensures that each account's transactions are properly summarized and visually separated in the final report.</p> Code <pre><code>MOVE WS-ACCOUNT-TOTAL   TO REPT-ACCOUNT-TOTAL                        \n           MOVE REPORT-ACCOUNT-TOTALS TO FD-REPTFILE-REC                        \n           PERFORM 1111-WRITE-REPORT-REC                                        \n           MOVE 0 TO WS-ACCOUNT-TOTAL                                           \n           ADD 1 TO WS-LINE-COUNTER                                             \n           MOVE TRANSACTION-HEADER-2 TO FD-REPTFILE-REC                         \n           PERFORM 1111-WRITE-REPORT-REC                                        \n           ADD 1 TO WS-LINE-COUNTER                                             \n\n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#1110-write-grand-totals","title":"1110-WRITE-GRAND-TOTALS","text":"<p>This paragraph writes the grand total amount to the report. It moves the accumulated grand total from the working storage variable WS-GRAND-TOTAL to the report line field REPT-GRAND-TOTAL, then transfers the formatted grand totals line to the report file record area (FD-REPTFILE-REC). It then calls the 1111-WRITE-REPORT-REC paragraph to physically write the record to the report file before exiting.</p> Code <pre><code>MOVE WS-GRAND-TOTAL TO REPT-GRAND-TOTAL                              \n           MOVE REPORT-GRAND-TOTALS TO FD-REPTFILE-REC                          \n           PERFORM 1111-WRITE-REPORT-REC                                        \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#1120-write-headers","title":"1120-WRITE-HEADERS","text":"<p>This paragraph handles the writing of report headers to the transaction detail report. It sequentially writes four lines to the report file: the report name header, a blank line for spacing, and two transaction header lines that likely contain column titles or report metadata. After writing each line, it increments the line counter to track the current position on the page. The paragraph uses the 1111-WRITE-REPORT-REC paragraph to perform the actual writing operation for each line.</p> Code <pre><code>MOVE REPORT-NAME-HEADER TO FD-REPTFILE-REC                           \n           PERFORM 1111-WRITE-REPORT-REC                                        \n           ADD 1 TO WS-LINE-COUNTER                                             \n\n           MOVE WS-BLANK-LINE TO FD-REPTFILE-REC                                \n           PERFORM 1111-WRITE-REPORT-REC                                        \n           ADD 1 TO WS-LINE-COUNTER                                             \n\n           MOVE TRANSACTION-HEADER-1 TO FD-REPTFILE-REC                         \n           PERFORM 1111-WRITE-REPORT-REC                                        \n           ADD 1 TO WS-LINE-COUNTER                                             \n\n           MOVE TRANSACTION-HEADER-2 TO FD-REPTFILE-REC                         \n           PERFORM 1111-WRITE-REPORT-REC                                        \n           ADD 1 TO WS-LINE-COUNTER                                             \n\n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#1111-write-report-rec","title":"1111-WRITE-REPORT-REC","text":"<p>This paragraph handles the writing of records to the report file and implements error handling for the operation. After attempting to write a record to FD-REPTFILE-REC, it checks the status code. If the write operation is successful (status '00'), it sets APPL-RESULT to 0 indicating success. Otherwise, it sets APPL-RESULT to 12 indicating an error. If the application status is not OK (APPL-AOK), it displays an error message, captures the file status code, displays the I/O status details by calling the 9910-DISPLAY-IO-STATUS paragraph, and then terminates the program by calling the 9999-ABEND-PROGRAM paragraph. This ensures that any file writing errors are properly handled and reported before abnormal termination.</p> Code <pre><code>WRITE FD-REPTFILE-REC                                                \n           IF TRANREPT-STATUS = '00'                                            \n              MOVE 0 TO APPL-RESULT                                             \n           ELSE                                                                 \n              MOVE 12 TO APPL-RESULT                                            \n           END-IF                                                               \n           IF APPL-AOK                                                          \n              CONTINUE                                                          \n           ELSE                                                                 \n              DISPLAY 'ERROR WRITING REPTFILE'                                  \n              MOVE TRANREPT-STATUS TO IO-STATUS                                 \n              PERFORM 9910-DISPLAY-IO-STATUS                                    \n              PERFORM 9999-ABEND-PROGRAM                                        \n           END-IF                                                               \n           EXIT.\n</code></pre>"},{"location":"CBTRN03C.html#1120-write-detail","title":"1120-WRITE-DETAIL","text":"<p>This paragraph formats and writes a single transaction detail line to the report. It initializes the report line structure, then populates it with transaction information including the transaction ID, account ID, type code and description, category code and description, source, and amount. The data is sourced from the transaction record and related lookup files (cross-reference, transaction type, and category files). After formatting the line, it calls the 1111-WRITE-REPORT-REC paragraph to physically write the record to the report file and increments the line counter to track pagination.</p> Code <pre><code>INITIALIZE TRANSACTION-DETAIL-REPORT                                 \n           MOVE TRAN-ID TO TRAN-REPORT-TRANS-ID                                 \n           MOVE XREF-ACCT-ID TO TRAN-REPORT-ACCOUNT-ID                          \n           MOVE TRAN-TYPE-CD OF TRAN-RECORD TO TRAN-REPORT-TYPE-CD              \n           MOVE TRAN-TYPE-DESC TO TRAN-REPORT-TYPE-DESC                         \n           MOVE TRAN-CAT-CD OF TRAN-RECORD  TO TRAN-REPORT-CAT-CD               \n           MOVE TRAN-CAT-TYPE-DESC TO TRAN-REPORT-CAT-DESC                      \n           MOVE TRAN-SOURCE TO TRAN-REPORT-SOURCE                               \n           MOVE TRAN-AMT TO TRAN-REPORT-AMT                                     \n           MOVE TRANSACTION-DETAIL-REPORT TO FD-REPTFILE-REC                    \n           PERFORM 1111-WRITE-REPORT-REC                                        \n           ADD 1 TO WS-LINE-COUNTER                                             \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#0000-tranfile-open","title":"0000-TRANFILE-OPEN","text":"<p>This paragraph handles the opening of the transaction input file (TRANSACT-FILE) and implements error handling for the operation. It initially sets APPL-RESULT to 8 (indicating a pending operation), then attempts to open the file in INPUT mode. If the operation succeeds (status code '00'), it sets APPL-RESULT to 0 indicating success; otherwise, it sets APPL-RESULT to 12 indicating failure. When the file opens successfully, processing continues. If the open operation fails, the paragraph displays an error message, retrieves the file status code, calls a routine to display the I/O status details (9910-DISPLAY-IO-STATUS), and then terminates the program by calling the 9999-ABEND-PROGRAM paragraph. This ensures the program doesn't proceed with invalid file access.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN INPUT TRANSACT-FILE                                             \n           IF TRANFILE-STATUS = '00'                                            \n              MOVE 0 TO APPL-RESULT                                             \n           ELSE                                                                 \n              MOVE 12 TO APPL-RESULT                                            \n           END-IF                                                               \n           IF APPL-AOK                                                          \n              CONTINUE                                                          \n           ELSE                                                                 \n              DISPLAY 'ERROR OPENING TRANFILE'                                  \n              MOVE TRANFILE-STATUS TO IO-STATUS                                 \n              PERFORM 9910-DISPLAY-IO-STATUS                                    \n              PERFORM 9999-ABEND-PROGRAM                                        \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#0100-reptfile-open","title":"0100-REPTFILE-OPEN","text":"<p>This paragraph handles the opening of the output report file. It initializes APPL-RESULT to 8, then attempts to open the REPORT-FILE for output. If the operation is successful (status code '00'), it sets APPL-RESULT to 0; otherwise, it sets APPL-RESULT to 12. The code then checks if the operation was successful (APPL-AOK condition). If not, it displays an error message, captures the file status code, calls a routine to display the I/O status details, and then abends the program. This ensures proper error handling if the report file cannot be opened, preventing the program from continuing execution with an invalid output file.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN OUTPUT REPORT-FILE                                              \n           IF TRANREPT-STATUS = '00'                                            \n              MOVE 0 TO APPL-RESULT                                             \n           ELSE                                                                 \n              MOVE 12 TO APPL-RESULT                                            \n           END-IF                                                               \n           IF APPL-AOK                                                          \n              CONTINUE                                                          \n           ELSE                                                                 \n              DISPLAY 'ERROR OPENING REPTFILE'                                  \n              MOVE TRANREPT-STATUS TO IO-STATUS                                 \n              PERFORM 9910-DISPLAY-IO-STATUS                                    \n              PERFORM 9999-ABEND-PROGRAM                                        \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#0200-cardxref-open","title":"0200-CARDXREF-OPEN","text":"<p>This paragraph handles the opening of the card cross-reference file (XREF-FILE) used to retrieve account information. It sets an initial result code of 8, attempts to open the file in INPUT mode, and then checks the operation's success. If the file opens successfully (status '00'), it sets APPL-RESULT to 0 indicating success. Otherwise, it sets APPL-RESULT to 12 indicating failure. When a failure occurs, the paragraph displays an error message, retrieves the file status code, calls a routine to display the I/O status details, and then terminates the program abnormally. This error handling ensures the program doesn't proceed without access to the critical cross-reference data needed for the transaction report.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN INPUT XREF-FILE                                                 \n           IF  CARDXREF-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING CROSS REF FILE'                           \n               MOVE CARDXREF-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#0300-trantype-open","title":"0300-TRANTYPE-OPEN","text":"<p>This paragraph handles the opening of the transaction type reference file. It sets an initial result code of 8, then attempts to open the TRANTYPE-FILE in INPUT mode. If the file opens successfully (status '00'), it sets the result code to 0; otherwise, it sets it to 12. If the operation is successful (APPL-AOK condition), processing continues. If there's an error, the paragraph displays an error message, captures the file status code, calls a routine to display the I/O status details, and then abends the program. This ensures the program terminates properly if it cannot access the transaction type reference data needed for report generation.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN INPUT TRANTYPE-FILE                                             \n           IF  TRANTYPE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING TRANSACTION TYPE FILE'                    \n               MOVE TRANTYPE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#0400-trancatg-open","title":"0400-TRANCATG-OPEN","text":"<p>This paragraph handles the opening of the Transaction Category file (TRANCATG-FILE) in input mode. It sets an initial result code of 8, then attempts to open the file. If the operation is successful (status '00'), it sets the result code to 0; otherwise, it sets it to 12. If the result indicates success (APPL-AOK), processing continues; otherwise, it displays an error message about failing to open the Transaction Category file, calls a routine to display the I/O status code, and then abends the program. This ensures the program terminates properly if it cannot access the critical Transaction Category reference data needed for the report.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN INPUT TRANCATG-FILE                                             \n           IF  TRANCATG-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING TRANSACTION CATG FILE'                    \n               MOVE TRANCATG-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#0500-dateparm-open","title":"0500-DATEPARM-OPEN","text":"<p>This paragraph handles the opening of the date parameters input file. It initializes the application result code to 8, then attempts to open the DATE-PARMS-FILE. If the file opens successfully (status '00'), it sets the result code to 0; otherwise, it sets it to 12. The paragraph then checks if the operation was successful (APPL-AOK condition). If not, it displays an error message about the date parameter file, calls a routine to display the I/O status code, and then executes the program termination routine. This ensures the program cannot proceed without successfully accessing the date parameters that define the transaction date range for the report.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           OPEN INPUT DATE-PARMS-FILE                                           \n           IF  DATEPARM-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR OPENING DATE PARM FILE'                           \n               MOVE DATEPARM-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#1500-a-lookup-xref","title":"1500-A-LOOKUP-XREF","text":"<p>This paragraph performs a lookup operation in the card cross-reference file to retrieve account information based on a card number. It reads a record from the XREF-FILE into the CARD-XREF-RECORD structure. If the card number is not found (INVALID KEY condition), the paragraph displays an error message with the invalid card number, sets an error status code of 23, displays the I/O status details, and terminates the program abnormally. This validation ensures that only transactions with valid card numbers are processed in the report.</p> Code <pre><code>READ XREF-FILE INTO CARD-XREF-RECORD                                 \n              INVALID KEY                                                       \n                 DISPLAY 'INVALID CARD NUMBER : '  FD-XREF-CARD-NUM             \n                 MOVE 23 TO IO-STATUS                                           \n                 PERFORM 9910-DISPLAY-IO-STATUS                                 \n                 PERFORM 9999-ABEND-PROGRAM                                     \n           END-READ                                                             \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#1500-b-lookup-trantype","title":"1500-B-LOOKUP-TRANTYPE","text":"<p>This paragraph performs a lookup operation to retrieve transaction type information from the TRANTYPE-FILE using the transaction type code stored in FD-TRAN-TYPE. If the lookup fails (INVALID KEY condition), the program displays an error message showing the invalid transaction type, sets an error status code of 23, displays the I/O status details, and terminates the program through the abend routine. The paragraph is essential for obtaining descriptive information about transaction types to include in the transaction detail report.</p> Code <pre><code>READ TRANTYPE-FILE INTO TRAN-TYPE-RECORD                             \n              INVALID KEY                                                       \n                 DISPLAY 'INVALID TRANSACTION TYPE : '  FD-TRAN-TYPE            \n                 MOVE 23 TO IO-STATUS                                           \n                 PERFORM 9910-DISPLAY-IO-STATUS                                 \n                 PERFORM 9999-ABEND-PROGRAM                                     \n           END-READ                                                             \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#1500-c-lookup-trancatg","title":"1500-C-LOOKUP-TRANCATG","text":"<p>This paragraph performs a lookup operation on the transaction category file (TRANCATG-FILE) using the current transaction category key (FD-TRAN-CAT-KEY). If the key is not found in the file, the program displays an error message with the invalid key value, sets an error status code of 23, displays the I/O status details, and then terminates the program through the abend routine. When successful, the transaction category record is read into the TRAN-CAT-RECORD structure for further processing.</p> Code <pre><code>READ TRANCATG-FILE INTO TRAN-CAT-RECORD                              \n              INVALID KEY                                                       \n                 DISPLAY 'INVALID TRAN CATG KEY : '  FD-TRAN-CAT-KEY            \n                 MOVE 23 TO IO-STATUS                                           \n                 PERFORM 9910-DISPLAY-IO-STATUS                                 \n                 PERFORM 9999-ABEND-PROGRAM                                     \n           END-READ                                                             \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#9000-tranfile-close","title":"9000-TRANFILE-CLOSE","text":"<p>This paragraph handles the closing of the transaction file (TRANSACT-FILE) with error handling. It sets an initial result code of 8, then attempts to close the file. If the close operation is successful (status '00'), it resets the result code to 0. If unsuccessful, it sets the result code to 12. When an error occurs, the paragraph displays an error message, captures the file status code, calls a routine to display the I/O status details, and then terminates the program abnormally. This ensures proper resource cleanup and provides meaningful error information if the transaction file cannot be closed properly.</p> Code <pre><code>ADD 8 TO ZERO GIVING APPL-RESULT.                                    \n           CLOSE TRANSACT-FILE                                                  \n           IF TRANFILE-STATUS = '00'                                            \n              SUBTRACT APPL-RESULT FROM APPL-RESULT                             \n           ELSE                                                                 \n              ADD 12 TO ZERO GIVING APPL-RESULT                                 \n           END-IF                                                               \n           IF APPL-AOK                                                          \n              CONTINUE                                                          \n           ELSE                                                                 \n              DISPLAY 'ERROR CLOSING POSTED TRANSACTION FILE'                   \n              MOVE TRANFILE-STATUS TO IO-STATUS                                 \n              PERFORM 9910-DISPLAY-IO-STATUS                                    \n              PERFORM 9999-ABEND-PROGRAM                                        \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#9100-reptfile-close","title":"9100-REPTFILE-CLOSE","text":"<p>This paragraph handles the closing of the report output file in the transaction detail report program. It sets an initial result code of 8, then attempts to close the REPORT-FILE. If the close operation is successful (status '00'), it resets the result code to 0; otherwise, it sets the result code to 12. If the operation completes successfully (APPL-AOK condition), processing continues normally. If an error occurs, the paragraph displays an error message, captures the file status code, displays the I/O status details by calling the 9910-DISPLAY-IO-STATUS paragraph, and then terminates the program abnormally by calling the 9999-ABEND-PROGRAM paragraph. This ensures proper resource cleanup and error handling when closing the report file.</p> Code <pre><code>ADD 8 TO ZERO GIVING APPL-RESULT.                                    \n           CLOSE REPORT-FILE                                                    \n           IF TRANREPT-STATUS = '00'                                            \n              SUBTRACT APPL-RESULT FROM APPL-RESULT                             \n           ELSE                                                                 \n              ADD 12 TO ZERO GIVING APPL-RESULT                                 \n           END-IF                                                               \n           IF APPL-AOK                                                          \n              CONTINUE                                                          \n           ELSE                                                                 \n              DISPLAY 'ERROR CLOSING REPORT FILE'                               \n              MOVE TRANREPT-STATUS TO IO-STATUS                                 \n              PERFORM 9910-DISPLAY-IO-STATUS                                    \n              PERFORM 9999-ABEND-PROGRAM                                        \n           END-IF                                                               \n           EXIT.                                                                \n\n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#9200-cardxref-close","title":"9200-CARDXREF-CLOSE","text":"<p>This paragraph handles the closing of the card cross-reference file (XREF-FILE) with appropriate error handling. It initially sets APPL-RESULT to 8 (indicating a potential error), then attempts to close the file. If the close operation is successful (status code '00'), it resets APPL-RESULT to 0; otherwise, it sets APPL-RESULT to 12 to indicate a more severe error. When an error occurs, the paragraph displays an error message, captures the file status code, calls a routine to display the I/O status details, and then terminates the program abnormally. This ensures proper resource cleanup and provides diagnostic information when file closing operations fail.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           CLOSE XREF-FILE                                                      \n           IF  CARDXREF-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING CROSS REF FILE'                           \n               MOVE CARDXREF-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#9300-trantype-close","title":"9300-TRANTYPE-CLOSE","text":"<p>This paragraph handles the closing of the transaction type file (TRANTYPE-FILE) with appropriate error handling. It initially sets the application result code to 8, then attempts to close the file. If the close operation is successful (status code '00'), it resets the result code to 0; otherwise, it sets it to 12. When the operation fails, the paragraph displays an error message, retrieves the I/O status code, calls a routine to display the status details, and then terminates the program abnormally. This ensures proper resource cleanup and provides meaningful error information if the file cannot be closed properly.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           CLOSE TRANTYPE-FILE                                                  \n           IF  TRANTYPE-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING TRANSACTION TYPE FILE'                    \n               MOVE TRANTYPE-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#9400-trancatg-close","title":"9400-TRANCATG-CLOSE","text":"<p>This paragraph handles the closing of the Transaction Category file (TRANCATG-FILE) with appropriate error handling. It initially sets APPL-RESULT to 8, then attempts to close the file. If the operation is successful (status code '00'), it resets APPL-RESULT to 0; otherwise, it sets APPL-RESULT to 12 indicating an error. When an error occurs, the paragraph displays an error message, captures the file status code, calls routines to display the I/O status details and abnormally terminate the program. This is part of the program's cleanup process that ensures proper file handling before program termination.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           CLOSE TRANCATG-FILE                                                  \n           IF  TRANCATG-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING TRANSACTION CATG FILE'                    \n               MOVE TRANCATG-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.                                                                \n      *---------------------------------------------------------------*\n</code></pre>"},{"location":"CBTRN03C.html#9500-dateparm-close","title":"9500-DATEPARM-CLOSE","text":"<p>This paragraph handles the closing of the date parameters file and performs error handling. It initially sets a result code of 8, then attempts to close the DATE-PARMS-FILE. If the close operation is successful (status '00'), it resets the result code to 0; otherwise, it sets the result code to 12. If the operation was not successful, the paragraph displays an error message, retrieves the file status code, calls a routine to display the I/O status details, and then abends the program. This ensures proper resource cleanup and appropriate error handling when the program is finished with the date parameters file.</p> Code <pre><code>MOVE 8 TO APPL-RESULT.                                               \n           CLOSE DATE-PARMS-FILE                                                \n           IF  DATEPARM-STATUS = '00'                                           \n               MOVE 0 TO APPL-RESULT                                            \n           ELSE                                                                 \n               MOVE 12 TO APPL-RESULT                                           \n           END-IF                                                               \n           IF  APPL-AOK                                                         \n               CONTINUE                                                         \n           ELSE                                                                 \n               DISPLAY 'ERROR CLOSING DATE PARM FILE'                           \n               MOVE DATEPARM-STATUS TO IO-STATUS                                \n               PERFORM 9910-DISPLAY-IO-STATUS                                   \n               PERFORM 9999-ABEND-PROGRAM                                       \n           END-IF                                                               \n           EXIT.\n</code></pre>"},{"location":"CBTRN03C.html#9999-abend-program","title":"9999-ABEND-PROGRAM","text":"<p>This paragraph handles abnormal program termination by displaying an \"ABENDING PROGRAM\" message, resetting the TIMING variable to zero, setting an abort code (ABCODE) to 999, and then calling the Language Environment service 'CEE3ABD' to force an immediate program termination. This is likely used as a last resort error handling mechanism when the program encounters a critical error that prevents further processing.</p> Code <pre><code>DISPLAY 'ABENDING PROGRAM'                                           \n           MOVE 0 TO TIMING                                                     \n           MOVE 999 TO ABCODE                                                   \n           CALL 'CEE3ABD'.                                                      \n\n      *****************************************************************\n</code></pre>"},{"location":"CBTRN03C.html#9910-display-io-status","title":"9910-DISPLAY-IO-STATUS","text":"<p>This paragraph handles the display of file I/O status codes in a standardized format. When an I/O operation encounters an error, this routine formats the status code for consistent display. If the status code is non-numeric or indicates a serious error (first digit is '9'), it processes the two status bytes separately, converting the second byte to binary format before display. Otherwise, it formats standard status codes by padding with leading zeros. In both cases, it displays the formatted status code with a descriptive prefix. This error handling routine helps with debugging file operations by providing clear, consistent error reporting throughout the program.</p> Code <pre><code>IF IO-STATUS NOT NUMERIC                                             \n              OR IO-STAT1 = '9'                                                 \n              MOVE IO-STAT1 TO IO-STATUS-04(1:1)                                \n              MOVE 0 TO TWO-BYTES-BINARY                                        \n              MOVE IO-STAT2 TO TWO-BYTES-RIGHT                                  \n              MOVE TWO-BYTES-BINARY TO IO-STATUS-0403                           \n              DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04                       \n           ELSE                                                                 \n              MOVE '0000' TO IO-STATUS-04                                       \n              MOVE IO-STATUS TO IO-STATUS-04(3:2)                               \n              DISPLAY 'FILE STATUS IS: NNNN' IO-STATUS-04                       \n           END-IF                                                               \n           EXIT.                                                                \n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:32 CDT\n      *\n</code></pre>"},{"location":"COACTUPC.html","title":"COACTUPC","text":""},{"location":"COACTUPC.html#overview","title":"Overview","text":"<p>This program, COACTUPC, is a business logic component of the CardDemo application that handles account updates. It allows users to view and modify account and customer information in a CICS environment. The program provides a comprehensive interface for updating various account details including credit limits, balances, dates, and customer information such as personal details, address, and contact information.</p> <p>The program follows a structured workflow where it first receives and validates user input, then processes the data based on the current state of the transaction, and finally updates the relevant database records if changes are confirmed. It includes extensive validation logic for different data types including dates, currency amounts, phone numbers, SSNs, and address components.</p> <p>Key features include: - Account and customer data retrieval from multiple files (ACCTDAT, CUSTDAT, and card cross-reference files) - Comprehensive field-level validation with specific error messages - Change detection to prevent unnecessary updates - Record locking and transaction management to ensure data integrity - Support for various function keys to navigate the application workflow - Formatted display of account and customer information</p> <p>The program handles various states of the update process, from initial data entry to confirmation and completion, with appropriate user prompts and feedback at each stage. It also includes error handling for database operations and validation failures.</p>"},{"location":"COACTUPC.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COACTUPC</code></p>"},{"location":"COACTUPC.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant User\n    participant CICS\n    participant COACTUPC\n    participant AccountFile\n    participant CustomerFile\n    participant CardXrefFile\n\n    User-&gt;&gt;CICS: Start transaction\n    CICS-&gt;&gt;COACTUPC: Invoke program\n\n    activate COACTUPC\n\n    COACTUPC-&gt;&gt;COACTUPC: 0000-MAIN (Initialize)\n\n    alt First entry to program\n        COACTUPC-&gt;&gt;COACTUPC: 3000-SEND-MAP (Display initial screen)\n        COACTUPC--&gt;&gt;User: Show account search screen\n    else User entered account ID\n        COACTUPC-&gt;&gt;COACTUPC: 1000-PROCESS-INPUTS\n        COACTUPC-&gt;&gt;COACTUPC: 1100-RECEIVE-MAP\n        COACTUPC-&gt;&gt;COACTUPC: 1200-EDIT-MAP-INPUTS\n        COACTUPC-&gt;&gt;COACTUPC: 1210-EDIT-ACCOUNT\n\n        alt Valid account ID\n            COACTUPC-&gt;&gt;COACTUPC: 9000-READ-ACCT\n            COACTUPC-&gt;&gt;CardXrefFile: 9200-GETCARDXREF-BYACCT\n            CardXrefFile--&gt;&gt;COACTUPC: Return cross-reference data\n\n            COACTUPC-&gt;&gt;AccountFile: 9300-GETACCTDATA-BYACCT\n            AccountFile--&gt;&gt;COACTUPC: Return account data\n\n            COACTUPC-&gt;&gt;CustomerFile: 9400-GETCUSTDATA-BYCUST\n            CustomerFile--&gt;&gt;COACTUPC: Return customer data\n\n            COACTUPC-&gt;&gt;COACTUPC: 9500-STORE-FETCHED-DATA\n            COACTUPC-&gt;&gt;COACTUPC: 3000-SEND-MAP (Display account details)\n            COACTUPC--&gt;&gt;User: Show account details for update\n        else Invalid account ID\n            COACTUPC--&gt;&gt;User: Show error message\n        end\n    else User modified account data\n        COACTUPC-&gt;&gt;COACTUPC: 1000-PROCESS-INPUTS\n        COACTUPC-&gt;&gt;COACTUPC: 1100-RECEIVE-MAP\n        COACTUPC-&gt;&gt;COACTUPC: 1200-EDIT-MAP-INPUTS\n        COACTUPC-&gt;&gt;COACTUPC: 1205-COMPARE-OLD-NEW\n\n        alt Changes detected and valid\n            COACTUPC-&gt;&gt;COACTUPC: 2000-DECIDE-ACTION\n            COACTUPC-&gt;&gt;COACTUPC: 3000-SEND-MAP (Confirm changes)\n            COACTUPC--&gt;&gt;User: Show confirmation screen\n        else No changes or invalid data\n            COACTUPC--&gt;&gt;User: Show error message or original screen\n        end\n    else User confirmed changes (PF5)\n        COACTUPC-&gt;&gt;COACTUPC: 9600-WRITE-PROCESSING\n\n        COACTUPC-&gt;&gt;AccountFile: READ UPDATE (Lock record)\n        AccountFile--&gt;&gt;COACTUPC: Return locked account record\n\n        COACTUPC-&gt;&gt;CustomerFile: READ UPDATE (Lock record)\n        CustomerFile--&gt;&gt;COACTUPC: Return locked customer record\n\n        COACTUPC-&gt;&gt;COACTUPC: 9700-CHECK-CHANGE-IN-REC\n\n        alt No concurrent changes detected\n            COACTUPC-&gt;&gt;AccountFile: REWRITE (Update account)\n            AccountFile--&gt;&gt;COACTUPC: Update successful\n\n            COACTUPC-&gt;&gt;CustomerFile: REWRITE (Update customer)\n            CustomerFile--&gt;&gt;COACTUPC: Update successful\n\n            COACTUPC-&gt;&gt;COACTUPC: 3000-SEND-MAP (Success message)\n            COACTUPC--&gt;&gt;User: Show success message\n        else Concurrent changes detected\n            COACTUPC-&gt;&gt;CICS: SYNCPOINT ROLLBACK\n            COACTUPC--&gt;&gt;User: Show error message\n        end\n    else User pressed PF3 (Exit)\n        COACTUPC-&gt;&gt;CICS: SYNCPOINT\n        COACTUPC-&gt;&gt;CICS: XCTL (Return to menu)\n        CICS--&gt;&gt;User: Display menu screen\n    end\n\n    COACTUPC-&gt;&gt;COACTUPC: COMMON-RETURN\n    COACTUPC-&gt;&gt;CICS: RETURN TRANSID\n    deactivate COACTUPC\n\n    CICS--&gt;&gt;User: Wait for next user action</code></pre>"},{"location":"COACTUPC.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CVACT01Y</code></li> <li><code>CVCUS01Y</code></li> <li><code>replacing</code></li> <li><code>COACTUP</code></li> <li><code>CSMSG02Y</code></li> <li><code>DFHAID</code></li> <li><code>CSUSR01Y</code></li> <li><code>CSUTLDWY</code></li> <li><code>CSUTLDPY</code></li> <li><code>CSSETATY</code></li> <li><code>CSDAT01Y</code></li> <li><code>CVCRD01Y</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG01Y</code></li> <li><code>CSLKPCDY</code></li> <li><code>COCOM01Y</code></li> <li><code>CSSTRPFY</code></li> <li><code>DFHBMSCA</code></li> <li><code>CVACT03Y</code></li> </ul>"},{"location":"COACTUPC.html#environment-division","title":"Environment Division","text":""},{"location":"COACTUPC.html#input-output-section","title":"INPUT-OUTPUT SECTION","text":"<p>This section would typically contain the INPUT-OUTPUT SECTION of the COACTUPC program, which would define file control entries and file descriptions for the database files used in the account update process. However, the provided snippet is empty, suggesting that the INPUT-OUTPUT SECTION might be defined elsewhere in the program or inherited from included copybooks. In the CardDemo application context, this section would normally specify the CICS files for account data (ACCTDAT), customer data (CUSTDAT), and card cross-reference files that the program accesses for viewing and updating account information.</p> Code"},{"location":"COACTUPC.html#data-division","title":"Data Division","text":""},{"location":"COACTUPC.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This data section defines the working storage variables for the COACTUPC program, which handles account updates in the CardDemo application. It contains several key components:</p> <ol> <li>CICS processing variables for tracking response codes and transaction IDs</li> <li>Extensive input validation structures for different data types including:</li> <li>Signed numbers and currency amounts</li> <li>Alphanumeric fields</li> <li>US phone numbers with area code validation</li> <li>Social Security Numbers with validity checks</li> <li>Yes/No indicators</li> <li> <p>Mandatory field validation</p> </li> <li> <p>Date validation structures for various date fields (account opening, expiration, reissue dates, and customer date of birth)</p> </li> <li> <p>Status flags to track:</p> </li> <li>Data changes</li> <li>Input validation status</li> <li>Return conditions</li> <li> <p>Function key validity</p> </li> <li> <p>Field-specific validation flags for all account and customer data elements</p> </li> <li> <p>File handling variables for account, customer, and card cross-reference files</p> </li> <li> <p>Message construction areas for user feedback, error messages, and informational displays</p> </li> <li> <p>Record structures for account and customer data updates, including:</p> </li> <li>Account details (ID, status, balances, credit limits, dates)</li> <li> <p>Customer information (personal details, address, contact information)</p> </li> <li> <p>Program communication area (COMMAREA) structures to maintain state between transactions, with both \"old\" and \"new\" versions of all data fields to track changes</p> </li> </ol> <p>The section also includes various copybooks for common functionality like date handling, screen layouts, and file record definitions used throughout the CardDemo application.</p> Code <pre><code>01  WS-MISC-STORAGE.\n      ******************************************************************\n      * General CICS related\n      ******************************************************************\n         05 WS-CICS-PROCESSNG-VARS.\n            07 WS-RESP-CD                          PIC S9(09) COMP\n                                                   VALUE ZEROS.\n            07 WS-REAS-CD                          PIC S9(09) COMP\n                                                   VALUE ZEROS.\n            07 WS-TRANID                           PIC X(4)\n                                                   VALUE SPACES.\n            07 WS-UCTRANS                          PIC X(4)\n                                                   VALUE SPACES.\n      ******************************************************************\n      *      Input edits\n      ******************************************************************\n      *  Generic Input Edits\n         05  WS-GENERIC-EDITS.\n           10 WS-EDIT-VARIABLE-NAME                PIC X(25).\n\n           10 WS-EDIT-SIGNED-NUMBER-9V2-X          PIC X(15).\n           10 WS-FLG-SIGNED-NUMBER-EDIT            PIC X(1).\n              88  FLG-SIGNED-NUMBER-ISVALID        VALUE LOW-VALUES.\n              88  FLG-SIGNED-NUMBER-NOT-OK         VALUE '0'.\n              88  FLG-SIGNED-NUMBER-BLANK          VALUE 'B'.\n\n           10 WS-EDIT-ALPHANUM-ONLY                PIC X(256).\n           10 WS-EDIT-ALPHANUM-LENGTH              PIC S9(4) COMP-3.\n\n           10 WS-EDIT-ALPHA-ONLY-FLAGS             PIC X(1).\n              88  FLG-ALPHA-ISVALID                VALUE LOW-VALUES.\n              88  FLG-ALPHA-NOT-OK                 VALUE '0'.\n              88  FLG-ALPHA-BLANK                  VALUE 'B'.\n           10 WS-EDIT-ALPHANUM-ONLY-FLAGS          PIC X(1).\n              88  FLG-ALPHNANUM-ISVALID            VALUE LOW-VALUES.\n              88  FLG-ALPHNANUM-NOT-OK             VALUE '0'.\n              88  FLG-ALPHNANUM-BLANK              VALUE 'B'.\n           10 WS-EDIT-MANDATORY-FLAGS              PIC X(1).\n              88  FLG-MANDATORY-ISVALID            VALUE LOW-VALUES.\n              88  FLG-MANDATORY-NOT-OK             VALUE '0'.\n              88  FLG-MANDATORY-BLANK              VALUE 'B'.\n           10 WS-EDIT-YES-NO                       PIC X(1)\n                                                   VALUE 'N'.\n              88 FLG-YES-NO-ISVALID                VALUES 'Y', 'N'.\n              88 FLG-YES-NO-NOT-OK                 VALUE '0'.\n              88 FLG-YES-NO-BLANK                  VALUE 'B'.\n\n           10 WS-EDIT-US-PHONE-NUM                 PIC X(15).\n           10 WS-EDIT-US-PHONE-NUM-X REDEFINES\n              WS-EDIT-US-PHONE-NUM.\n              20 FILLER                            PIC X(1).\n      *                                            VALUE '('\n              20 WS-EDIT-US-PHONE-NUMA             PIC X(3).\n              20 WS-EDIT-US-PHONE-NUMA-N REDEFINES\n                 WS-EDIT-US-PHONE-NUMA             PIC 9(3).\n              20 FILLER                            PIC X(1).\n      *                                            VALUE ')'\n              20 WS-EDIT-US-PHONE-NUMB             PIC X(3).\n              20 WS-EDIT-US-PHONE-NUMB-N REDEFINES\n                 WS-EDIT-US-PHONE-NUMB             PIC 9(3).\n              20 FILLER                            PIC X(1).\n      *                                            VALUE '-'\n              20 WS-EDIT-US-PHONE-NUMC             PIC X(4).\n              20 WS-EDIT-US-PHONE-NUMC-N REDEFINES\n                 WS-EDIT-US-PHONE-NUMC             PIC 9(4).\n              20 FILLER                            PIC X(2).\n           10 WS-EDIT-US-PHONE-NUM-FLGS.\n               88 WS-EDIT-US-PHONE-IS-INVALID      VALUE '000'.\n               88 WS-EDIT-US-PHONE-IS-VALID        VALUE LOW-VALUES.\n               20 WS-EDIT-US-PHONEA-FLG            PIC X(01).\n                  88 FLG-EDIT-US-PHONEA-ISVALID    VALUE LOW-VALUES.\n                  88 FLG-EDIT-US-PHONEA-NOT-OK     VALUE '0'.\n                  88 FLG-EDIT-US-PHONEA-BLANK      VALUE 'B'.\n               20 WS-EDIT-EDIT-US-PHONEB           PIC X(01).\n                  88 FLG-EDIT-US-PHONEB-ISVALID    VALUE LOW-VALUES.\n                  88 FLG-EDIT-US-PHONEB-NOT-OK     VALUE '0'.\n                  88 FLG-EDIT-US-PHONEB-BLANK      VALUE 'B'.\n               20 WS-EDIT-EDIT-PHONEC              PIC X(01).\n                  88 FLG-EDIT-US-PHONEC-ISVALID    VALUE LOW-VALUES.\n                  88 FLG-EDIT-US-PHONEC-NOT-OK     VALUE '0'.\n                  88 FLG-EDIT-US-PHONEC-BLANK      VALUE 'B'.\n\n           10 WS-EDIT-US-SSN.\n               20 WS-EDIT-US-SSN-PART1              PIC X(3).\n               20 WS-EDIT-US-SSN-PART1-N REDEFINES\n                  WS-EDIT-US-SSN-PART1              PIC 9(3).\n                  88 INVALID-SSN-PART1  VALUES      0,\n                                                    666,\n                                                    900 THRU 999.\n               20 WS-EDIT-US-SSN-PART2              PIC X(2).\n               20 WS-EDIT-US-SSN-PART2-N REDEFINES\n                  WS-EDIT-US-SSN-PART2              PIC 9(2).\n               20 WS-EDIT-US-SSN-PART3              PIC X(4).\n               20 WS-EDIT-US-SSN-PART3-N REDEFINES\n                  WS-EDIT-US-SSN-PART3              PIC 9(4).\n           10 WS-EDIT-US-SSN-N REDEFINES\n              WS-EDIT-US-SSN                        PIC 9(09).\n           10 WS-EDIT-US-SSN-FLGS.\n               88 WS-EDIT-US-SSN-IS-INVALID         VALUE '000'.\n               88 WS-EDIT-US-SSN-IS-VALID           VALUE LOW-VALUES.\n               20 WS-EDIT-US-SSN-PART1-FLGS         PIC X(01).\n                  88 FLG-EDIT-US-SSN-PART1-ISVALID  VALUE LOW-VALUES.\n                  88 FLG-EDIT-US-SSN-PART1-NOT-OK   VALUE '0'.\n                  88 FLG-EDIT-US-SSN-PART1-BLANK    VALUE 'B'.\n               20 WS-EDIT-US-SSN-PART2-FLGS         PIC X(01).\n                  88 FLG-EDIT-US-SSN-PART2-ISVALID  VALUE LOW-VALUES.\n                  88 FLG-EDIT-US-SSN-PART2-NOT-OK   VALUE '0'.\n                  88 FLG-EDIT-US-SSN-PART2-BLANK    VALUE 'B'.\n               20 WS-EDIT-US-SSN-PART3-FLGS         PIC X(01).\n                  88 FLG-EDIT-US-SSN-PART3-ISVALID  VALUE LOW-VALUES.\n                  88 FLG-EDIT-US-SSN-PART3-NOT-OK   VALUE '0'.\n                  88 FLG-EDIT-US-SSN-PART3-BLANK    VALUE 'B'.\n\n      ******************************************************************\n      *    Work variables\n      ******************************************************************\n         05 WS-CALCULATION-VARS.\n          10 WS-DIV-BY                             PIC S9(4) COMP-3\n                                                   VALUE 4.\n          10 WS-DIVIDEND                           PIC S9(4) COMP-3\n                                                   VALUE 0.\n\n          10 WS-REMAINDER                          PIC S9(4) COMP-3\n                                                   VALUE 0.\n          10 WS-CURR-DATE                          PIC X(21)\n                                                   VALUE SPACES.\n\n\n      ******************************************************************\n      *    Generic date edit variables CCYYMMDD\n      ******************************************************************\n           COPY 'CSUTLDWY'.\n      ******************************************************************\n         05  WS-DATACHANGED-FLAG                   PIC X(1).\n           88  NO-CHANGES-FOUND                    VALUE '0'.\n           88  CHANGE-HAS-OCCURRED                 VALUE '1'.\n         05  WS-INPUT-FLAG                         PIC X(1).\n           88  INPUT-OK                            VALUE '0'.\n           88  INPUT-ERROR                         VALUE '1'.\n           88  INPUT-PENDING                       VALUE LOW-VALUES.\n         05  WS-RETURN-FLAG                        PIC X(1).\n           88  WS-RETURN-FLAG-OFF                  VALUE LOW-VALUES.\n           88  WS-RETURN-FLAG-ON                   VALUE '1'.\n         05  WS-PFK-FLAG                           PIC X(1).\n           88  PFK-VALID                           VALUE '0'.\n           88  PFK-INVALID                         VALUE '1'.\n\n      *  Program specific edits\n         05  WS-EDIT-ACCT-FLAG                     PIC X(1).\n           88  FLG-ACCTFILTER-ISVALID              VALUE '1'.\n           88  FLG-ACCTFILTER-NOT-OK               VALUE '0'.\n           88  FLG-ACCTFILTER-BLANK                VALUE ' '.\n         05  WS-EDIT-CUST-FLAG                     PIC X(1).\n           88  FLG-CUSTFILTER-ISVALID              VALUE '1'.\n           88  FLG-CUSTFILTER-NOT-OK               VALUE '0'.\n           88  FLG-CUSTFILTER-BLANK                VALUE ' '.\n         05 WS-NON-KEY-FLAGS.\n           10  WS-EDIT-ACCT-STATUS                 PIC  X(1).\n               88  FLG-ACCT-STATUS-ISVALID         VALUES 'Y', 'N'.\n               88  FLG-ACCT-STATUS-NOT-OK          VALUE '0'.\n               88  FLG-ACCT-STATUS-BLANK           VALUE 'B'.\n           10  WS-EDIT-CREDIT-LIMIT                PIC  X(1).\n               88  FLG-CRED-LIMIT-ISVALID          VALUE LOW-VALUES.\n               88  FLG-CRED-LIMIT-NOT-OK           VALUE '0'.\n               88  FLG-CRED-LIMIT-BLANK            VALUE 'B'.\n           10  WS-EDIT-CASH-CREDIT-LIMIT           PIC  X(1).\n               88  FLG-CASH-CREDIT-LIMIT-ISVALID   VALUE LOW-VALUES.\n               88  FLG-CASH-CREDIT-LIMIT-NOT-OK    VALUE '0'.\n               88  FLG-CASH-CREDIT-LIMIT-BLANK     VALUE 'B'.\n           10  WS-EDIT-CURR-BAL                    PIC  X(1).\n               88  FLG-CURR-BAL-ISVALID            VALUE LOW-VALUES.\n               88  FLG-CURR-BAL-NOT-OK             VALUE '0'.\n               88  FLG-CURR-BAL-BLANK              VALUE 'B'.\n           10  WS-EDIT-CURR-CYC-CREDIT             PIC  X(1).\n               88  FLG-CURR-CYC-CREDIT-ISVALID     VALUE LOW-VALUES.\n               88  FLG-CURR-CYC-CREDIT-NOT-OK      VALUE '0'.\n               88  FLG-CURR-CYC-CREDIT-BLANK       VALUE 'B'.\n           10  WS-EDIT-CURR-CYC-DEBIT              PIC  X(1).\n               88  FLG-CURR-CYC-DEBIT-ISVALID      VALUE LOW-VALUES.\n               88  FLG-CURR-CYC-DEBIT-NOT-OK       VALUE '0'.\n               88  FLG-CURR-CYC-DEBIT-BLANK        VALUE 'B'.\n           10 WS-EDIT-DT-OF-BIRTH-FLGS.\n               88 WS-EDIT-DT-OF-BIRTH-INVALID      VALUE '000'.\n               88 WS-EDIT-DT-OF-BIRTH-ISVALID      VALUE LOW-VALUES.\n               20 WS-EDIT-DT-OF-BIRTH-YEAR-FLG     PIC X(01).\n                  88 FLG-DT-OF-BIRTH-YEAR-ISVALID  VALUE LOW-VALUES.\n                  88 FLG-DT-OF-BIRTH-YEAR-NOT-OK   VALUE '0'.\n                  88 FLG-DT-OF-BIRTH-YEAR-BLANK    VALUE 'B'.\n               20 WS-EDIT-DT-OF-BIRTH-MONTH        PIC X(01).\n                  88 FLG-DT-OF-BIRTH-MONTH-ISVALID VALUE LOW-VALUES.\n                  88 FLG-DT-OF-BIRTH-MONTH-NOT-OK  VALUE '0'.\n                  88 FLG-DT-OF-BIRTH-MONTH-BLANK   VALUE 'B'.\n               20 WS-EDIT-DT-OF-BIRTH-DAY          PIC X(01).\n                  88 FLG-DT-OF-BIRTH-DAY-ISVALID   VALUE LOW-VALUES.\n                  88 FLG-DT-OF-BIRTH-DAY-NOT-OK    VALUE '0'.\n                  88 FLG-DT-OF-BIRTH-DAY-BLANK     VALUE 'B'.\n           10  WS-EDIT-FICO-SCORE-FLGS             PIC  X(1).\n               88  FLG-FICO-SCORE-ISVALID          VALUE LOW-VALUES.\n               88  FLG-FICO-SCORE-NOT-OK           VALUE '0'.\n               88  FLG-FICO-SCORE-BLANK            VALUE 'B'.\n           10 WS-EDIT-OPEN-DATE-FLGS.\n               88 WS-EDIT-OPEN-DATE-IS-INVALID     VALUE '000'.\n               20 WS-EDIT-OPEN-YEAR-FLG            PIC X(01).\n                  88 FLG-OPEN-YEAR-ISVALID         VALUE LOW-VALUES.\n                  88 FLG-OPEN-YEAR-NOT-OK          VALUE '0'.\n                  88 FLG-OPEN-YEAR-BLANK           VALUE 'B'.\n               20 WS-EDIT-OPEN-MONTH               PIC X(01).\n                  88 FLG-OPEN-MONTH-ISVALID        VALUE LOW-VALUES.\n                  88 FLG-OPEN-MONTH-NOT-OK         VALUE '0'.\n                  88 FLG-OPEN-MONTH-BLANK          VALUE 'B'.\n               20 WS-EDIT-OPEN-DAY                 PIC X(01).\n                  88 FLG-OPEN-DAY-ISVALID          VALUE LOW-VALUES.\n                  88 FLG-OPEN-DAY-NOT-OK           VALUE '0'.\n                  88 FLG-OPEN-DAY-BLANK            VALUE 'B'.\n           10 WS-EXPIRY-DATE-FLGS.\n               88 WS-EDIT-EXPIRY-IS-INVALID        VALUE '000'.\n               20 WS-EDIT-EXPIRY-YEAR-FLG          PIC X(01).\n                  88 FLG-EXPIRY-YEAR-ISVALID       VALUE LOW-VALUES.\n                  88 FLG-EXPIRY-YEAR-NOT-OK        VALUE '0'.\n                  88 FLG-EXPIRY-YEAR-BLANK         VALUE 'B'.\n               20 WS-EDIT-EXPIRY-MONTH             PIC X(01).\n                  88 FLG-EXPIRY-MONTH-ISVALID      VALUE LOW-VALUES.\n                  88 FLG-EXPIRY-MONTH-NOT-OK       VALUE '0'.\n                  88 FLG-EXPIRY-MONTH-BLANK        VALUE 'B'.\n               20 WS-EDIT-EXPIRY-DAY               PIC X(01).\n                  88 FLG-EXPIRY-DAY-ISVALID        VALUE LOW-VALUES.\n                  88 FLG-EXPIRY-DAY-NOT-OK         VALUE '0'.\n                  88 FLG-EXPIRY-DAY-BLANK          VALUE 'B'.\n           10 WS-EDIT-REISSUE-DATE-FLGS.\n               88 WS-EDIT-REISSUE-DATE-INVALID     VALUE '000'.\n               20 WS-EDIT-REISSUE-YEAR-FLG         PIC X(01).\n                  88 FLG-REISSUE-YEAR-ISVALID      VALUE LOW-VALUES.\n                  88 FLG-REISSUE-YEAR-NOT-OK       VALUE '0'.\n                  88 FLG-REISSUE-YEAR-BLANK        VALUE 'B'.\n               20 WS-EDIT-REISSUE-MONTH            PIC X(01).\n                  88 FLG-REISSUE-MONTH-ISVALID     VALUE LOW-VALUES.\n                  88 FLG-REISSUE-MONTH-NOT-OK      VALUE '0'.\n                  88 FLG-REISSUE-MONTH-BLANK       VALUE 'B'.\n               20 WS-EDIT-REISSUE-DAY              PIC X(01).\n                  88 FLG-REISSUE-DAY-ISVALID       VALUE LOW-VALUES.\n                  88 FLG-REISSUE-DAY-NOT-OK        VALUE '0'.\n                  88 FLG-REISSUE-DAY-BLANK         VALUE 'B'.\n           10 WS-EDIT-NAME-FLAGS.\n               20 WS-EDIT-FIRST-NAME-FLGS          PIC X(01).\n                  88 FLG-FIRST-NAME-ISVALID        VALUE LOW-VALUES.\n                  88 FLG-FIRST-NAME-NOT-OK         VALUE '0'.\n                  88 FLG-FIRST-NAME-BLANK          VALUE 'B'.\n               20 WS-EDIT-MIDDLE-NAME-FLGS         PIC X(01).\n                  88 FLG-MIDDLE-NAME-ISVALID       VALUE LOW-VALUES.\n                  88 FLG-MIDDLE-NAME-NOT-OK        VALUE '0'.\n                  88 FLG-MIDDLE-NAME-BLANK         VALUE 'B'.\n               20 WS-EDIT-LAST-NAME-FLGS           PIC X(01).\n                  88 FLG-LAST-NAME-ISVALID         VALUE LOW-VALUES.\n                  88 FLG-LAST-NAME-NOT-OK          VALUE '0'.\n                  88 FLG-LAST-NAME-BLANK           VALUE 'B'.\n           10 WS-EDIT-ADDRESS-FLAGS.\n               20 WS-EDIT-ADDRESS-LINE-1-FLGS      PIC X(01).\n                  88 FLG-ADDRESS-LINE-1-ISVALID    VALUE LOW-VALUES.\n                  88 FLG-ADDRESS-LINE-1-NOT-OK     VALUE '0'.\n                  88 FLG-ADDRESS-LINE-1-BLANK      VALUE 'B'.\n               20 WS-EDIT-ADDRESS-LINE-2-FLGS      PIC X(01).\n                  88 FLG-ADDRESS-LINE-2-ISVALID    VALUE LOW-VALUES.\n                  88 FLG-ADDRESS-LINE-2-NOT-OK     VALUE '0'.\n                  88 FLG-ADDRESS-LINE-2-BLANK      VALUE 'B'.\n               20 WS-EDIT-CITY-FLGS                PIC X(01).\n                  88 FLG-CITY-ISVALID              VALUE LOW-VALUES.\n                  88 FLG-CITY-NOT-OK               VALUE '0'.\n                  88 FLG-CITY-BLANK                VALUE 'B'.\n               20 WS-EDIT-STATE-FLGS               PIC X(01).\n                  88 FLG-STATE-ISVALID             VALUE LOW-VALUES.\n                  88 FLG-STATE-NOT-OK              VALUE '0'.\n                  88 FLG-STATE-BLANK               VALUE 'B'.\n               20 WS-EDIT-ZIPCODE-FLGS             PIC X(01).\n                  88 FLG-ZIPCODE-ISVALID           VALUE LOW-VALUES.\n                  88 FLG-ZIPCODE-NOT-OK            VALUE '0'.\n                  88 FLG-ZIPCODE-BLANK             VALUE 'B'.\n               20 WS-EDIT-COUNTRY-FLGS             PIC X(01).\n                  88 FLG-COUNTRY-ISVALID           VALUE LOW-VALUES.\n                  88 FLG-COUNTRY-NOT-OK            VALUE '0'.\n                  88 FLG-COUNTRY-BLANK             VALUE 'B'.\n               20 WS-EDIT-PHONE-NUM-1-FLGS.\n                  88 WS-EDIT-PHONE-NUM-1-IS-INVALID\n                                                   VALUE '000'.\n                  30 WS-EDIT-PHONE-NUM-1A-FLG      PIC X(01).\n                     88 FLG-PHONE-NUM-1A-ISVALID   VALUE LOW-VALUES.\n                     88 FLG-PHONE-NUM-1A-NOT-OK    VALUE '0'.\n                     88 FLG-PHONE-NUM-1A-BLANK     VALUE 'B'.\n                  30 WS-EDIT-PHONE-NUM-1B          PIC X(01).\n                     88 FLG-PHONE-NUM-1B-ISVALID   VALUE LOW-VALUES.\n                     88 FLG-PHONE-NUM-1B-NOT-OK    VALUE '0'.\n                     88 FLG-PHONE-NUM-1B-BLANK     VALUE 'B'.\n                  30 WS-EDIT-PHONE-NUM-1C          PIC X(01).\n                     88 FLG-PHONE-NUM-1C-ISVALID   VALUE LOW-VALUES.\n                     88 FLG-PHONE-NUM-1C-NOT-OK    VALUE '0'.\n                     88 FLG-PHONE-NUM-1C-BLANK     VALUE 'B'.\n               20 WS-EDIT-PHONE-NUM-2-FLGS.\n                  88 WS-EDIT-PHONE-NUM-2-IS-INVALID\n                                                   VALUE '000'.\n                  30 WS-EDIT-PHONE-NUM-2A-FLG      PIC X(01).\n                     88 FLG-PHONE-NUM-2A-ISVALID   VALUE LOW-VALUES.\n                     88 FLG-PHONE-NUM-2A-NOT-OK    VALUE '0'.\n                     88 FLG-PHONE-NUM-2A-BLANK     VALUE 'B'.\n                  30 WS-EDIT-PHONE-NUM-2B          PIC X(01).\n                     88 FLG-PHONE-NUM-2B-ISVALID   VALUE LOW-VALUES.\n                     88 FLG-PHONE-NUM-2B-NOT-OK    VALUE '0'.\n                     88 FLG-PHONE-NUM-2B-BLANK     VALUE 'B'.\n                  30 WS-EDIT-PHONE-NUM-2C          PIC X(01).\n                     88 FLG-PHONE-NUM-2C-ISVALID   VALUE LOW-VALUES.\n                     88 FLG-PHONE-NUM-2C-NOT-OK    VALUE '0'.\n                     88 FLG-PHONE-NUM-2C-BLANK     VALUE 'B'.\n           10  WS-EFT-ACCOUNT-ID-FLGS              PIC X(01).\n               88 FLG-EFT-ACCOUNT-ID-ISVALID       VALUE LOW-VALUES.\n               88 FLG-EFT-ACCOUNT-ID-NOT-OK        VALUE '0'.\n               88 FLG-EFT-ACCOUNT-ID-BLANK         VALUE 'B'.\n           10  WS-EDIT-PRI-CARDHOLDER              PIC  X(1).\n               88  FLG-PRI-CARDHOLDER-ISVALID      VALUES 'Y', 'N'.\n               88  FLG-PRI-CARDHOLDER-NOT-OK       VALUE '0'.\n               88  FLG-PRI-CARDHOLDER-BLANK        VALUE 'B'.\n\n      ******************************************************************\n      * Output edits\n      ******************************************************************\n         05 CICS-OUTPUT-EDIT-VARS.\n           10  CUST-ACCT-ID-X                      PIC X(11).\n           10  CUST-ACCT-ID-N REDEFINES CUST-ACCT-ID-X\n                                                   PIC 9(11).\n           10  WS-EDIT-DATE-X                      PIC X(10).\n           10  FILLER REDEFINES WS-EDIT-DATE-X.\n               20 WS-EDIT-DATE-X-YEAR              PIC X(4).\n               20 FILLER                           PIC X(1).\n               20 WS-EDIT-DATE-MONTH               PIC X(2).\n               20 FILLER                           PIC X(1).\n               20 WS-EDIT-DATE-DAY                 PIC X(2).\n           10  WS-EDIT-DATE-X REDEFINES\n               WS-EDIT-DATE-X                      PIC 9(10).\n           10  WS-EDIT-CURRENCY-9-2                PIC X(15).\n           10  WS-EDIT-CURRENCY-9-2-F              PIC +ZZZ,ZZZ,ZZZ.99.\n\n      ******************************************************************\n      *      File and data Handling\n      ******************************************************************\n         05 WS-XREF-RID.\n           10  WS-CARD-RID-CARDNUM                 PIC X(16).\n           10  WS-CARD-RID-CUST-ID                 PIC 9(09).\n           10  WS-CARD-RID-CUST-ID-X REDEFINES\n                  WS-CARD-RID-CUST-ID              PIC X(09).\n           10  WS-CARD-RID-ACCT-ID                 PIC 9(11).\n           10  WS-CARD-RID-ACCT-ID-X REDEFINES\n                  WS-CARD-RID-ACCT-ID              PIC X(11).\n         05  WS-FILE-READ-FLAGS.\n           10 WS-ACCOUNT-MASTER-READ-FLAG          PIC X(1).\n              88 FOUND-ACCT-IN-MASTER              VALUE '1'.\n           10 WS-CUST-MASTER-READ-FLAG             PIC X(1).\n              88 FOUND-CUST-IN-MASTER              VALUE '1'.\n         05  WS-FILE-ERROR-MESSAGE.\n           10  FILLER                         PIC X(12)\n                                                   VALUE 'File Error: '.\n           10  ERROR-OPNAME                        PIC X(8)\n                                                   VALUE SPACES.\n           10  FILLER                              PIC X(4)\n                                                   VALUE ' on '.\n           10  ERROR-FILE                          PIC X(9)\n                                                   VALUE SPACES.\n           10  FILLER                              PIC X(15)\n                                                   VALUE\n                                                   ' returned RESP '.\n           10  ERROR-RESP                          PIC X(10)\n                                                   VALUE SPACES.\n           10  FILLER                              PIC X(7)\n                                                   VALUE ',RESP2 '.\n           10  ERROR-RESP2                         PIC X(10)\n                                                   VALUE SPACES.\n          10  FILLER                               PIC X(5)\n                                                   VALUE SPACES.\n      *  Alpha variables for editing numerics\n      *\n          05 ALPHA-VARS-FOR-DATA-EDITING.\n             15 ACUP-NEW-CREDIT-LIMIT-X            PIC X(15).\n             15 ACUP-NEW-CASH-CREDIT-LIMIT-X       PIC X(15).\n             15 ACUP-NEW-CURR-BAL-X                PIC X(15).\n             15 ACUP-NEW-CURR-CYC-CREDIT-X         PIC X(15).\n             15 ACUP-NEW-CURR-CYC-DEBIT-X          PIC X(15).\n\n          05 ACCT-UPDATE-RECORD.\n      *****************************************************************\n      *    Data-structure for  account entity (RECLN 300)\n      *****************************************************************\n               15  ACCT-UPDATE-ID                      PIC 9(11).\n               15  ACCT-UPDATE-ACTIVE-STATUS           PIC X(01).\n               15  ACCT-UPDATE-CURR-BAL                PIC S9(10)V99.\n               15  ACCT-UPDATE-CREDIT-LIMIT            PIC S9(10)V99.\n               15  ACCT-UPDATE-CASH-CREDIT-LIMIT       PIC S9(10)V99.\n               15  ACCT-UPDATE-OPEN-DATE               PIC X(10).\n               15  ACCT-UPDATE-EXPIRAION-DATE          PIC X(10).\n               15  ACCT-UPDATE-REISSUE-DATE            PIC X(10).\n               15  ACCT-UPDATE-CURR-CYC-CREDIT         PIC S9(10)V99.\n               15  ACCT-UPDATE-CURR-CYC-DEBIT          PIC S9(10)V99.\n               15  ACCT-UPDATE-GROUP-ID                PIC X(10).\n               15  FILLER                              PIC X(188).\n          05 CUST-UPDATE-RECORD.\n      *****************************************************************\n      *    Data-structure for  CUSTOMER entity (RECLN 300)\n      *****************************************************************\n               15  CUST-UPDATE-ID                      PIC 9(09).\n               15  CUST-UPDATE-FIRST-NAME              PIC X(25).\n               15  CUST-UPDATE-MIDDLE-NAME             PIC X(25).\n               15  CUST-UPDATE-LAST-NAME               PIC X(25).\n               15  CUST-UPDATE-ADDR-LINE-1             PIC X(50).\n               15  CUST-UPDATE-ADDR-LINE-2             PIC X(50).\n               15  CUST-UPDATE-ADDR-LINE-3             PIC X(50).\n               15  CUST-UPDATE-ADDR-STATE-CD           PIC X(02).\n               15  CUST-UPDATE-ADDR-COUNTRY-CD         PIC X(03).\n               15  CUST-UPDATE-ADDR-ZIP                PIC X(10).\n               15  CUST-UPDATE-PHONE-NUM-1             PIC X(15).\n               15  CUST-UPDATE-PHONE-NUM-2             PIC X(15).\n               15  CUST-UPDATE-SSN                     PIC 9(09).\n               15  CUST-UPDATE-GOVT-ISSUED-ID          PIC X(20).\n               15  CUST-UPDATE-DOB-YYYY-MM-DD          PIC X(10).\n               15  CUST-UPDATE-EFT-ACCOUNT-ID          PIC X(10).\n               15  CUST-UPDATE-PRI-CARD-IND            PIC X(01).\n               15  CUST-UPDATE-FICO-CREDIT-SCORE       PIC 9(03).\n               15  FILLER                              PIC X(168).\n\n\n      ******************************************************************\n      *      Output Message Construction\n      ******************************************************************\n         05  WS-LONG-MSG                           PIC X(500).\n         05  WS-INFO-MSG                           PIC X(40).\n           88  WS-NO-INFO-MESSAGE                 VALUES\n                                                  SPACES LOW-VALUES.\n           88  FOUND-ACCOUNT-DATA             VALUE\n               'Details of selected account shown above'.\n           88  PROMPT-FOR-SEARCH-KEYS              VALUE\n               'Enter or update id of account to update'.\n           88  PROMPT-FOR-CHANGES                  VALUE\n               'Update account details presented above.'.\n           88  PROMPT-FOR-CONFIRMATION             VALUE\n               'Changes validated.Press F5 to save'.\n           88  CONFIRM-UPDATE-SUCCESS              VALUE\n               'Changes committed to database'.\n           88  INFORM-FAILURE                      VALUE\n               'Changes unsuccessful. Please try again'.\n\n         05  WS-RETURN-MSG                         PIC X(75).\n           88  WS-RETURN-MSG-OFF                   VALUE SPACES.\n           88  WS-EXIT-MESSAGE                     VALUE\n               'PF03 pressed.Exiting              '.\n           88  WS-PROMPT-FOR-ACCT                  VALUE\n               'Account number not provided'.\n           88  WS-PROMPT-FOR-LASTNAME              VALUE\n               'Last name not provided'.\n           88  WS-NAME-MUST-BE-ALPHA               VALUE\n               'Name can only contain alphabets and spaces'.\n           88  NO-SEARCH-CRITERIA-RECEIVED         VALUE\n               'No input received'.\n           88  NO-CHANGES-DETECTED                 VALUE\n               'No change detected with respect to values fetched.'.\n           88  SEARCHED-ACCT-ZEROES                VALUE\n               'Account number must be a non zero 11 digit number'.\n           88  SEARCHED-ACCT-NOT-NUMERIC           VALUE\n               'Account number must be a non zero 11 digit number'.\n           88  DID-NOT-FIND-ACCT-IN-CARDXREF       VALUE\n               'Did not find this account in account card xref file'.\n           88  DID-NOT-FIND-ACCT-IN-ACCTDAT        VALUE\n               'Did not find this account in account master file'.\n           88  DID-NOT-FIND-CUST-IN-CUSTDAT        VALUE\n               'Did not find associated customer in master file'.\n           88  ACCT-STATUS-MUST-BE-YES-NO          VALUE\n               'Account Active Status must be Y or N'.\n           88  CRED-LIMIT-IS-BLANK                 VALUE\n               'Credit Limit must be supplied'.\n           88  CRED-LIMIT-IS-NOT-VALID             VALUE\n               'Credit Limit is not valid'.\n           88  THIS-MONTH-NOT-VALID                VALUE\n               'Card expiry month must be between 1 and 12'.\n           88  THIS-YEAR-NOT-VALID                 VALUE\n               'Invalid card expiry year'.\n           88  DID-NOT-FIND-ACCT-IN-CARDXREF       VALUE\n               'Did not find this account in cards database'.\n           88  DID-NOT-FIND-ACCTCARD-COMBO         VALUE\n               'Did not find cards for this search condition'.\n           88  COULD-NOT-LOCK-ACCT-FOR-UPDATE      VALUE\n               'Could not lock account record for update'.\n           88  COULD-NOT-LOCK-CUST-FOR-UPDATE      VALUE\n               'Could not lock customer record for update'.\n           88  DATA-WAS-CHANGED-BEFORE-UPDATE      VALUE\n               'Record changed by some one else. Please review'.\n           88  LOCKED-BUT-UPDATE-FAILED            VALUE\n               'Update of record failed'.\n           88  XREF-READ-ERROR                     VALUE\n               'Error reading Card Data File'.\n           88  CODING-TO-BE-DONE                   VALUE\n               'Looks Good.... so far'.\n      ******************************************************************\n      *      Literals and Constants\n      ******************************************************************\n       01 WS-LITERALS.\n          05 LIT-THISPGM                           PIC X(8)\n                                                   VALUE 'COACTUPC'.\n          05 LIT-THISTRANID                        PIC X(4)\n                                                   VALUE 'CAUP'.\n          05 LIT-THISMAPSET                        PIC X(8)\n                                                   VALUE 'COACTUP '.\n          05 LIT-THISMAP                           PIC X(7)\n                                                   VALUE 'CACTUPA'.\n          05 LIT-CARDUPDATE-PGM                    PIC X(8)\n                                                   VALUE 'COCRDUPC'.\n          05 LIT-CARDUPDATE-TRANID                 PIC X(4)\n                                                   VALUE 'CCUP'.\n          05 LIT-CARDUPDATE-MAPSET                 PIC X(8)\n                                                   VALUE 'COCRDUP '.\n          05 LIT-CARDUPDATE-MAP                    PIC X(7)\n                                                   VALUE 'CCRDUPA'.\n          05 LIT-CCLISTPGM                         PIC X(8)\n                                                   VALUE 'COCRDLIC'.\n          05 LIT-CCLISTTRANID                      PIC X(4)\n                                                   VALUE 'CCLI'.\n          05 LIT-CCLISTMAPSET                      PIC X(7)\n                                                   VALUE 'COCRDLI'.\n          05 LIT-CCLISTMAP                         PIC X(7)\n                                                   VALUE 'CCRDSLA'.\n          05 LIT-MENUPGM                           PIC X(8)\n                                                   VALUE 'COMEN01C'.\n          05 LIT-MENUTRANID                        PIC X(4)\n                                                   VALUE 'CM00'.\n          05 LIT-MENUMAPSET                        PIC X(7)\n                                                   VALUE 'COMEN01'.\n          05 LIT-MENUMAP                           PIC X(7)\n                                                   VALUE 'COMEN1A'.\n          05 LIT-CARDDTLPGM                        PIC X(8)\n                                                   VALUE 'COCRDSLC'.\n          05 LIT-CARDDTLTRANID                     PIC X(4)\n                                                   VALUE 'CCDL'.\n          05 LIT-CARDDTLMAPSET                     PIC X(7)\n                                                   VALUE 'COCRDSL'.\n          05 LIT-CARDDTLMAP                        PIC X(7)\n                                                   VALUE 'CCRDSLA'.\n          05 LIT-ACCTFILENAME                      PIC X(8)\n                                                   VALUE 'ACCTDAT '.\n          05 LIT-CUSTFILENAME                      PIC X(8)\n                                                   VALUE 'CUSTDAT '.\n          05 LIT-CARDFILENAME                      PIC X(8)\n                                                   VALUE 'CARDDAT '.\n          05 LIT-CARDFILENAME-ACCT-PATH            PIC X(8)\n                                                   VALUE 'CARDAIX '.\n          05 LIT-CARDXREFNAME-ACCT-PATH            PIC X(8)\n                                                   VALUE 'CXACAIX '.\n      ******************************************************************\n      * Literals for use in INSPECT statements\n      ******************************************************************\n          05 LIT-ALL-ALPHANUM-FROM-X.\n             10 LIT-ALL-ALPHA-FROM-X.\n                15 LIT-UPPER                       PIC X(26)\n                                 VALUE 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n                15 LIT-LOWER                       PIC X(26)\n                                 VALUE 'abcdefghijklmnopqrstuvwxyz'.\n             10 LIT-NUMBERS                        PIC X(10)\n                                 VALUE '0123456789'.             \n      ******************************************************************\n      *Other common working storage Variables\n      ******************************************************************\n       COPY CVCRD01Y.\n      ******************************************************************\n      *Lookups\n      ******************************************************************\n      *North America Phone Area codes\n       COPY CSLKPCDY.\n\n      ******************************************************************\n      * Variables for use in INSPECT statements\n      ******************************************************************\n       01  LIT-ALL-ALPHA-FROM     PIC X(52) VALUE SPACES.\n       01  LIT-ALL-ALPHANUM-FROM  PIC X(62) VALUE SPACES.\n       01  LIT-ALL-NUM-FROM       PIC X(10) VALUE SPACES.\n       77  LIT-ALPHA-SPACES-TO    PIC X(52) VALUE SPACES.\n       77  LIT-ALPHANUM-SPACES-TO PIC X(62) VALUE SPACES.\n       77  LIT-NUM-SPACES-TO      PIC X(10) VALUE SPACES.\n\n      *IBM SUPPLIED COPYBOOKS\n       COPY DFHBMSCA.\n       COPY DFHAID.\n\n      *COMMON COPYBOOKS\n      *Screen Titles\n       COPY COTTL01Y.\n\n      *Account Update Screen Layout\n       COPY COACTUP.\n\n      *Current Date\n       COPY CSDAT01Y.\n\n      *Common Messages\n       COPY CSMSG01Y.\n\n      *Abend Variables\n       COPY CSMSG02Y.\n\n      *Signed on user data\n       COPY CSUSR01Y.\n\n      *Dataset layouts\n\n      *ACCT RECORD LAYOUT\n       COPY CVACT01Y.\n\n      *CARD XREF LAYOUT\n       COPY CVACT03Y.\n\n      *CUSTOMER LAYOUT\n       COPY CVCUS01Y.\n\n      ******************************************************************\n      *Application Commmarea Copybook\n       COPY COCOM01Y.\n\n       01 WS-THIS-PROGCOMMAREA.\n          05 ACCT-UPDATE-SCREEN-DATA.\n             10 ACUP-CHANGE-ACTION                     PIC X(1)\n                                                       VALUE LOW-VALUES.\n                88 ACUP-DETAILS-NOT-FETCHED            VALUES\n                                                       LOW-VALUES,\n                                                       SPACES.\n                88 ACUP-SHOW-DETAILS                   VALUE 'S'.\n                88 ACUP-CHANGES-MADE                   VALUES 'E', 'N'\n                                                            , 'C', 'L'\n                                                            , 'F'.\n                88 ACUP-CHANGES-NOT-OK                 VALUE 'E'.\n                88 ACUP-CHANGES-OK-NOT-CONFIRMED       VALUE 'N'.\n                88 ACUP-CHANGES-OKAYED-AND-DONE        VALUE 'C'.\n                88 ACUP-CHANGES-FAILED                 VALUES 'L', 'F'.\n                88 ACUP-CHANGES-OKAYED-LOCK-ERROR      VALUE 'L'.\n                88 ACUP-CHANGES-OKAYED-BUT-FAILED      VALUE 'F'.\n          05 ACUP-OLD-DETAILS.\n             10 ACUP-OLD-ACCT-DATA.\n                15  ACUP-OLD-ACCT-ID-X                 PIC X(11).\n                15  ACUP-OLD-ACCT-ID                   REDEFINES\n                    ACUP-OLD-ACCT-ID-X                 PIC 9(11).\n                15  ACUP-OLD-ACTIVE-STATUS             PIC X(01).\n                15  ACUP-OLD-CURR-BAL                  PIC X(12).\n                15  ACUP-OLD-CURR-BAL-N REDEFINES\n                    ACUP-OLD-CURR-BAL                  PIC S9(10)V99.\n                15  ACUP-OLD-CREDIT-LIMIT              PIC X(12).\n                15  ACUP-OLD-CREDIT-LIMIT-N            REDEFINES\n                    ACUP-OLD-CREDIT-LIMIT              PIC S9(10)V99.\n                15  ACUP-OLD-CASH-CREDIT-LIMIT         PIC X(12).\n                15  ACUP-OLD-CASH-CREDIT-LIMIT-N       REDEFINES\n                    ACUP-OLD-CASH-CREDIT-LIMIT         PIC S9(10)V99.\n                15  ACUP-OLD-OPEN-DATE                 PIC X(08).\n                15  ACUP-OLD-OPEN-DATE-PARTS           REDEFINES\n                    ACUP-OLD-OPEN-DATE.\n                    20 ACUP-OLD-OPEN-YEAR              PIC X(4).\n                    20 ACUP-OLD-OPEN-MON               PIC X(2).\n                    20 ACUP-OLD-OPEN-DAY               PIC X(2).\n                15  ACUP-OLD-EXPIRAION-DATE            PIC X(08).\n                15  ACUP-OLD-EXPIRAION-DATE-PARTS      REDEFINES\n                    ACUP-OLD-EXPIRAION-DATE.\n                    20 ACUP-OLD-EXP-YEAR                PIC X(4).\n                    20 ACUP-OLD-EXP-MON                 PIC X(2).\n                    20 ACUP-OLD-EXP-DAY                 PIC X(2).\n                15  ACUP-OLD-REISSUE-DATE              PIC X(08).\n                15  ACUP-OLD-REISSUE-DATE-PARTS        REDEFINES\n                    ACUP-OLD-REISSUE-DATE.\n                    20 ACUP-OLD-REISSUE-YEAR           PIC X(4).\n                    20 ACUP-OLD-REISSUE-MON            PIC X(2).\n                    20 ACUP-OLD-REISSUE-DAY            PIC X(2).\n                15  ACUP-OLD-CURR-CYC-CREDIT           PIC X(12).\n                15  ACUP-OLD-CURR-CYC-CREDIT-N         REDEFINES\n                    ACUP-OLD-CURR-CYC-CREDIT           PIC S9(10)V99.\n                15  ACUP-OLD-CURR-CYC-DEBIT            PIC X(12).\n                15  ACUP-OLD-CURR-CYC-DEBIT-N          REDEFINES\n                    ACUP-OLD-CURR-CYC-DEBIT            PIC S9(10)V99.\n                15  ACUP-OLD-GROUP-ID                  PIC X(10).\n             10 ACUP-OLD-CUST-DATA.\n                15  ACUP-OLD-CUST-ID-X                 PIC X(09).\n                15  ACUP-OLD-CUST-ID                   REDEFINES\n                    ACUP-OLD-CUST-ID-X                 PIC 9(09).\n                15  ACUP-OLD-CUST-FIRST-NAME           PIC X(25).\n                15  ACUP-OLD-CUST-MIDDLE-NAME          PIC X(25).\n                15  ACUP-OLD-CUST-LAST-NAME            PIC X(25).\n                15  ACUP-OLD-CUST-ADDR-LINE-1          PIC X(50).\n                15  ACUP-OLD-CUST-ADDR-LINE-2          PIC X(50).\n                15  ACUP-OLD-CUST-ADDR-LINE-3          PIC X(50).\n                15  ACUP-OLD-CUST-ADDR-STATE-CD        PIC X(02).\n                15  ACUP-OLD-CUST-ADDR-COUNTRY-CD      PIC X(03).\n                15  ACUP-OLD-CUST-ADDR-ZIP             PIC X(10).\n                15  ACUP-OLD-CUST-PHONE-NUM-1          PIC X(15).\n                15  ACUP-OLD-CUST-PHONE-NUM-1-X REDEFINES\n                    ACUP-OLD-CUST-PHONE-NUM-1.\n                    20 FILLER                          PIC X(1).\n                    20 ACUP-OLD-CUST-PHONE-NUM-1A      PIC X(3).\n                    20 FILLER                          PIC X(1).\n                    20 ACUP-OLD-CUST-PHONE-NUM-1B      PIC X(3).\n                    20 FILLER                          PIC X(1).\n                    20 ACUP-OLD-CUST-PHONE-NUM-1C      PIC X(4).\n                    20 FILLER                          PIC X(2).\n                15  ACUP-OLD-CUST-PHONE-NUM-2          PIC X(15).\n                15  ACUP-OLD-CUST-PHONE-NUM-2-X REDEFINES\n                    ACUP-OLD-CUST-PHONE-NUM-2.\n                    20 FILLER                          PIC X(1).\n                    20 ACUP-OLD-CUST-PHONE-NUM-2A      PIC X(3).\n                    20 FILLER                          PIC X(1).\n                    20 ACUP-OLD-CUST-PHONE-NUM-2B      PIC X(3).\n                    20 FILLER                          PIC X(1).\n                    20 ACUP-OLD-CUST-PHONE-NUM-2C      PIC X(4).\n                    20 FILLER                          PIC X(2).\n                15  ACUP-OLD-CUST-SSN-X                PIC X(09).\n                15  ACUP-OLD-CUST-SSN                  REDEFINES\n                    ACUP-OLD-CUST-SSN-X                PIC 9(09).\n                15  ACUP-OLD-CUST-GOVT-ISSUED-ID       PIC X(20).\n                15  ACUP-OLD-CUST-DOB-YYYY-MM-DD       PIC X(08).\n                15  ACUP-OLD-CUST-DOB-PARTS            REDEFINES\n                    ACUP-OLD-CUST-DOB-YYYY-MM-DD.\n                    20 ACUP-OLD-CUST-DOB-YEAR          PIC X(4).\n                    20 ACUP-OLD-CUST-DOB-MON           PIC X(2).\n                    20 ACUP-OLD-CUST-DOB-DAY           PIC X(2).\n                15  ACUP-OLD-CUST-EFT-ACCOUNT-ID       PIC X(10).\n                15  ACUP-OLD-CUST-PRI-HOLDER-IND       PIC X(01).\n                15  ACUP-OLD-CUST-FICO-SCORE-X         PIC X(03).\n                15  ACUP-OLD-CUST-FICO-SCORE           REDEFINES\n                    ACUP-OLD-CUST-FICO-SCORE-X         PIC 9(03).\n          05 ACUP-NEW-DETAILS.\n             10 ACUP-NEW-ACCT-DATA.\n                15  ACUP-NEW-ACCT-ID-X                 PIC X(11).\n                15  ACUP-NEW-ACCT-ID                   REDEFINES\n                    ACUP-NEW-ACCT-ID-X                 PIC 9(11).\n                15  ACUP-NEW-ACTIVE-STATUS             PIC X(01).\n                15  ACUP-NEW-CURR-BAL                  PIC X(12).\n                15  ACUP-NEW-CURR-BAL-N                REDEFINES\n                    ACUP-NEW-CURR-BAL                  PIC S9(10)V99.\n                15  ACUP-NEW-CREDIT-LIMIT              PIC X(12).\n                15  ACUP-NEW-CREDIT-LIMIT-N            REDEFINES\n                    ACUP-NEW-CREDIT-LIMIT              PIC S9(10)V99.\n                15  ACUP-NEW-CASH-CREDIT-LIMIT         PIC X(12).\n                15  ACUP-NEW-CASH-CREDIT-LIMIT-N       REDEFINES\n                    ACUP-NEW-CASH-CREDIT-LIMIT         PIC S9(10)V99.\n                15  ACUP-NEW-OPEN-DATE                 PIC X(08).\n                15  ACUP-NEW-OPEN-DATE-PARTS           REDEFINES\n                    ACUP-NEW-OPEN-DATE.\n                    20 ACUP-NEW-OPEN-YEAR              PIC X(4).\n                    20 ACUP-NEW-OPEN-MON               PIC X(2).\n                    20 ACUP-NEW-OPEN-DAY               PIC X(2).\n                15  ACUP-NEW-EXPIRAION-DATE            PIC X(08).\n                15  ACUP-NEW-EXPIRAION-DATE-PARTS      REDEFINES\n                    ACUP-NEW-EXPIRAION-DATE.\n                    20 ACUP-NEW-EXP-YEAR                PIC X(4).\n                    20 ACUP-NEW-EXP-MON                 PIC X(2).\n                    20 ACUP-NEW-EXP-DAY                 PIC X(2).\n                15  ACUP-NEW-REISSUE-DATE              PIC X(08).\n                15  ACUP-NEW-REISSUE-DATE-PARTS        REDEFINES\n                    ACUP-NEW-REISSUE-DATE.\n                    20 ACUP-NEW-REISSUE-YEAR           PIC X(4).\n                    20 ACUP-NEW-REISSUE-MON            PIC X(2).\n                    20 ACUP-NEW-REISSUE-DAY            PIC X(2).\n                15  ACUP-NEW-CURR-CYC-CREDIT           PIC X(12).\n                15  ACUP-NEW-CURR-CYC-CREDIT-N         REDEFINES\n                    ACUP-NEW-CURR-CYC-CREDIT           PIC S9(10)V99.\n                15  ACUP-NEW-CURR-CYC-DEBIT            PIC X(12).\n                15  ACUP-NEW-CURR-CYC-DEBIT-N          REDEFINES\n                    ACUP-NEW-CURR-CYC-DEBIT            PIC S9(10)V99.\n                15  ACUP-NEW-GROUP-ID                  PIC X(10).\n             10 ACUP-NEW-CUST-DATA.\n                15  ACUP-NEW-CUST-ID-X                 PIC X(09).\n                15  ACUP-NEW-CUST-ID                   REDEFINES\n                    ACUP-NEW-CUST-ID-X                 PIC 9(09).\n                15  ACUP-NEW-CUST-FIRST-NAME           PIC X(25).\n                15  ACUP-NEW-CUST-MIDDLE-NAME          PIC X(25).\n                15  ACUP-NEW-CUST-LAST-NAME            PIC X(25).\n                15  ACUP-NEW-CUST-ADDR-LINE-1          PIC X(50).\n                15  ACUP-NEW-CUST-ADDR-LINE-2          PIC X(50).\n                15  ACUP-NEW-CUST-ADDR-LINE-3          PIC X(50).\n                15  ACUP-NEW-CUST-ADDR-STATE-CD        PIC X(02).\n                15  ACUP-NEW-CUST-ADDR-COUNTRY-CD      PIC X(03).\n                15  ACUP-NEW-CUST-ADDR-ZIP             PIC X(10).\n                15  ACUP-NEW-CUST-PHONE-NUM-1          PIC X(15).\n                15  ACUP-NEW-CUST-PHONE-NUM-1-X REDEFINES\n                    ACUP-NEW-CUST-PHONE-NUM-1.\n                    20 FILLER                          PIC X(1).\n                    20 ACUP-NEW-CUST-PHONE-NUM-1A      PIC X(3).\n                    20 FILLER                          PIC X(1).\n                    20 ACUP-NEW-CUST-PHONE-NUM-1B      PIC X(3).\n                    20 FILLER                          PIC X(1).\n                    20 ACUP-NEW-CUST-PHONE-NUM-1C      PIC X(4).\n                    20 FILLER                          PIC X(2).\n                15  ACUP-NEW-CUST-PHONE-NUM-2          PIC X(15).\n                15  ACUP-NEW-CUST-PHONE-NUM-2-X REDEFINES\n                    ACUP-NEW-CUST-PHONE-NUM-2.\n                    20 FILLER                          PIC X(1).\n                    20 ACUP-NEW-CUST-PHONE-NUM-2A      PIC X(3).\n                    20 FILLER                          PIC X(1).\n                    20 ACUP-NEW-CUST-PHONE-NUM-2B      PIC X(3).\n                    20 FILLER                          PIC X(1).\n                    20 ACUP-NEW-CUST-PHONE-NUM-2C      PIC X(4).\n                    20 FILLER                          PIC X(2).\n                15  ACUP-NEW-CUST-SSN-X.\n                    20 ACUP-NEW-CUST-SSN-1             PIC X(03).\n                    20 ACUP-NEW-CUST-SSN-2             PIC X(02).\n                    20 ACUP-NEW-CUST-SSN-3             PIC X(04).\n                15  ACUP-NEW-CUST-SSN                  REDEFINES\n                    ACUP-NEW-CUST-SSN-X                PIC 9(09).\n                15  ACUP-NEW-CUST-GOVT-ISSUED-ID       PIC X(20).\n                15  ACUP-NEW-CUST-DOB-YYYY-MM-DD       PIC X(08).\n                15  ACUP-NEW-CUST-DOB-PARTS            REDEFINES\n                    ACUP-NEW-CUST-DOB-YYYY-MM-DD.\n                    20 ACUP-NEW-CUST-DOB-YEAR          PIC X(4).\n                    20 ACUP-NEW-CUST-DOB-MON           PIC X(2).\n                    20 ACUP-NEW-CUST-DOB-DAY           PIC X(2).\n                15  ACUP-NEW-CUST-EFT-ACCOUNT-ID       PIC X(10).\n                15  ACUP-NEW-CUST-PRI-HOLDER-IND       PIC X(01).\n                15  ACUP-NEW-CUST-FICO-SCORE-X         PIC X(03).\n                15  ACUP-NEW-CUST-FICO-SCORE           REDEFINES\n                    ACUP-NEW-CUST-FICO-SCORE-X         PIC 9(03).\n                    88 FICO-RANGE-IS-VALID             VALUES 300\n                                                       THROUGH 850.\n       01  WS-COMMAREA                                 PIC X(2000).\n</code></pre>"},{"location":"COACTUPC.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This section defines the DFHCOMMAREA structure in the Linkage Section, which serves as the communication area for data passing between CICS programs. It contains a single field defined as a variable-length array of characters that can expand from 1 to 32,767 bytes depending on the actual length passed in EIBCALEN (CICS Executive Interface Block Communication Area Length). This flexible structure allows the program to receive data of varying sizes from calling programs without needing to know the exact structure in advance.</p> Code <pre><code>01  DFHCOMMAREA.\n         05  FILLER                                PIC X(1)\n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n</code></pre>"},{"location":"COACTUPC.html#procedure-division","title":"Procedure Division","text":""},{"location":"COACTUPC.html#0000-main","title":"0000-MAIN","text":"<p>This paragraph serves as the main control flow for the COACTUPC program, handling the program initialization, user input processing, and navigation logic. It begins by setting up error handling and initializing work areas, then processes the communication area to maintain state between program invocations. The paragraph validates function key inputs and contains a central EVALUATE statement that directs program flow based on the current transaction state and user actions. Key functions include: handling program exit (PF3), processing initial program entry, managing the completion of account updates (both successful and failed), and orchestrating the standard processing flow through three main routines (process inputs, decide action, and send map). The code maintains transaction context throughout the process and includes proper CICS synchronization points when exiting to other programs.</p> Code <pre><code>EXEC CICS HANDLE ABEND\n                     LABEL(ABEND-ROUTINE)\n           END-EXEC\n\n           INITIALIZE CC-WORK-AREA\n                      WS-MISC-STORAGE\n                      WS-COMMAREA\n      *****************************************************************\n      * Store our context\n      *****************************************************************\n           MOVE LIT-THISTRANID       TO WS-TRANID\n      *****************************************************************\n      * Ensure error message is cleared                               *\n      *****************************************************************\n           SET WS-RETURN-MSG-OFF  TO TRUE\n      *****************************************************************\n      * Store passed data if  any                *\n      *****************************************************************\n           IF EIBCALEN IS EQUAL TO 0\n               OR (CDEMO-FROM-PROGRAM = LIT-MENUPGM\n               AND NOT CDEMO-PGM-REENTER)\n              INITIALIZE CARDDEMO-COMMAREA\n                         WS-THIS-PROGCOMMAREA\n              SET CDEMO-PGM-ENTER TO TRUE\n              SET ACUP-DETAILS-NOT-FETCHED TO TRUE\n           ELSE\n              MOVE DFHCOMMAREA (1:LENGTH OF CARDDEMO-COMMAREA)  TO\n                                CARDDEMO-COMMAREA\n              MOVE DFHCOMMAREA(LENGTH OF CARDDEMO-COMMAREA + 1:\n                               LENGTH OF WS-THIS-PROGCOMMAREA ) TO\n                                WS-THIS-PROGCOMMAREA\n           END-IF\n      *****************************************************************\n      * Remap PFkeys as needed.\n      * Store the Mapped PF Key\n      *****************************************************************\n           PERFORM YYYY-STORE-PFKEY\n              THRU YYYY-STORE-PFKEY-EXIT\n      *****************************************************************\n      * Check the AID to see if its valid at this point               *\n      * F3 - Exit\n      * Enter show screen again\n      *****************************************************************\n           SET PFK-INVALID TO TRUE\n           IF CCARD-AID-ENTER OR\n              CCARD-AID-PFK03 OR\n              (CCARD-AID-PFK05 AND ACUP-CHANGES-OK-NOT-CONFIRMED)\n                              OR\n              (CCARD-AID-PFK12 AND NOT ACUP-DETAILS-NOT-FETCHED)\n              SET PFK-VALID TO TRUE\n           END-IF\n\n           IF PFK-INVALID\n              SET CCARD-AID-ENTER TO TRUE\n           END-IF\n\n      *****************************************************************\n      * Decide what to do based on inputs received\n      *****************************************************************\n           EVALUATE TRUE\n      ******************************************************************\n      *       USER PRESSES PF03 TO EXIT\n      *  OR   USER IS DONE WITH UPDATE\n      *            XCTL TO CALLING PROGRAM OR MAIN MENU\n      ******************************************************************\n              WHEN CCARD-AID-PFK03\n                   SET CCARD-AID-PFK03     TO TRUE\n\n                   IF CDEMO-FROM-TRANID    EQUAL LOW-VALUES\n                   OR CDEMO-FROM-TRANID    EQUAL SPACES\n                      MOVE LIT-MENUTRANID  TO CDEMO-TO-TRANID\n                   ELSE\n                      MOVE CDEMO-FROM-TRANID  TO CDEMO-TO-TRANID\n                   END-IF\n\n                   IF CDEMO-FROM-PROGRAM   EQUAL LOW-VALUES\n                   OR CDEMO-FROM-PROGRAM   EQUAL SPACES\n                      MOVE LIT-MENUPGM     TO CDEMO-TO-PROGRAM\n                   ELSE\n                      MOVE CDEMO-FROM-PROGRAM TO CDEMO-TO-PROGRAM\n                   END-IF\n\n                   MOVE LIT-THISTRANID     TO CDEMO-FROM-TRANID\n                   MOVE LIT-THISPGM        TO CDEMO-FROM-PROGRAM\n\n                   SET  CDEMO-USRTYP-USER  TO TRUE\n                   SET  CDEMO-PGM-ENTER    TO TRUE\n                   MOVE LIT-THISMAPSET     TO CDEMO-LAST-MAPSET\n                   MOVE LIT-THISMAP        TO CDEMO-LAST-MAP\n\n                   EXEC CICS\n                        SYNCPOINT\n                   END-EXEC\n      *\n                   EXEC CICS XCTL\n                        PROGRAM (CDEMO-TO-PROGRAM)\n                        COMMAREA(CARDDEMO-COMMAREA)\n                   END-EXEC\n      ******************************************************************\n      *       FRESH ENTRY INTO PROGRAM\n      *            ASK THE USER FOR THE KEYS TO FETCH CARD TO BE UPDATED\n      ******************************************************************\n              WHEN ACUP-DETAILS-NOT-FETCHED\n               AND CDEMO-PGM-ENTER\n              WHEN CDEMO-FROM-PROGRAM   EQUAL LIT-MENUPGM\n               AND NOT CDEMO-PGM-REENTER\n                   INITIALIZE WS-THIS-PROGCOMMAREA\n                   PERFORM 3000-SEND-MAP THRU\n                           3000-SEND-MAP-EXIT\n                   SET CDEMO-PGM-REENTER        TO TRUE\n                   SET ACUP-DETAILS-NOT-FETCHED TO TRUE\n                   GO TO COMMON-RETURN\n      ******************************************************************\n      *       ACCT DATA CHANGES REVIEWED, OKAYED AND DONE SUCESSFULLY\n      *            RESET THE SEARCH KEYS\n      *            ASK THE USER FOR FRESH SEARCH CRITERIA\n      ******************************************************************\n              WHEN ACUP-CHANGES-OKAYED-AND-DONE\n              WHEN ACUP-CHANGES-FAILED\n                   INITIALIZE WS-THIS-PROGCOMMAREA\n                              WS-MISC-STORAGE\n                              CDEMO-ACCT-ID\n                   SET CDEMO-PGM-ENTER            TO TRUE\n                   PERFORM 3000-SEND-MAP THRU\n                           3000-SEND-MAP-EXIT\n                   SET CDEMO-PGM-REENTER          TO TRUE\n                   SET ACUP-DETAILS-NOT-FETCHED   TO TRUE\n                   GO TO COMMON-RETURN\n      ******************************************************************\n      *      ACCT DATA HAS BEEN PRESENTED TO USER\n      *            CHECK THE USER INPUTS\n      *            DECIDE WHAT TO DO\n      *            PRESENT NEXT STEPS TO USER\n      ******************************************************************\n              WHEN OTHER\n                   PERFORM 1000-PROCESS-INPUTS\n                      THRU 1000-PROCESS-INPUTS-EXIT\n                   PERFORM 2000-DECIDE-ACTION\n                      THRU 2000-DECIDE-ACTION-EXIT\n                   PERFORM 3000-SEND-MAP\n                      THRU 3000-SEND-MAP-EXIT\n                   GO TO COMMON-RETURN\n           END-EVALUATE\n           .\n</code></pre>"},{"location":"COACTUPC.html#common-return","title":"COMMON-RETURN","text":"<p>This paragraph handles the common return logic for the COACTUPC program. It first transfers any error or status message to the communication area's error message field. Then it constructs a composite communication area by combining the standard CardDemo communication area with this program's specific communication area data. Finally, it executes a CICS RETURN command that maintains the current transaction ID and passes the constructed communication area back to CICS, allowing the program to maintain state between interactions. This is a critical component for preserving transaction context in the account update process.</p> Code <pre><code>MOVE WS-RETURN-MSG     TO CCARD-ERROR-MSG\n\n           MOVE  CARDDEMO-COMMAREA    TO WS-COMMAREA\n           MOVE  WS-THIS-PROGCOMMAREA TO\n                  WS-COMMAREA(LENGTH OF CARDDEMO-COMMAREA + 1:\n                               LENGTH OF WS-THIS-PROGCOMMAREA )\n\n           EXEC CICS RETURN\n                TRANSID (LIT-THISTRANID)\n                COMMAREA (WS-COMMAREA)\n                LENGTH(LENGTH OF WS-COMMAREA)\n           END-EXEC\n           .\n</code></pre>"},{"location":"COACTUPC.html#0000-main-exit","title":"0000-MAIN-EXIT","text":"<p>This paragraph serves as a standard exit point for the program or a section within COACTUPC. It provides a clean termination point that can be referenced by PERFORM statements throughout the program when processing needs to return to the calling routine.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1000-process-inputs","title":"1000-PROCESS-INPUTS","text":"<p>This paragraph handles the initial processing of user inputs in the account update workflow. It first receives data from the user interface by calling the 1100-RECEIVE-MAP paragraph, then validates the received data through the 1200-EDIT-MAP-INPUTS paragraph. After processing the inputs, it sets up the response by assigning any validation messages to CCARD-ERROR-MSG and configuring the application to return to the same program and map for the next interaction. This establishes the foundation for the account update process by ensuring valid data is available before proceeding with business logic operations.</p> Code <pre><code>PERFORM 1100-RECEIVE-MAP\n              THRU 1100-RECEIVE-MAP-EXIT\n           PERFORM 1200-EDIT-MAP-INPUTS\n              THRU 1200-EDIT-MAP-INPUTS-EXIT\n           MOVE WS-RETURN-MSG  TO CCARD-ERROR-MSG\n           MOVE LIT-THISPGM    TO CCARD-NEXT-PROG\n           MOVE LIT-THISMAPSET TO CCARD-NEXT-MAPSET\n           MOVE LIT-THISMAP    TO CCARD-NEXT-MAP\n           .\n      *\n</code></pre>"},{"location":"COACTUPC.html#1000-process-inputs-exit","title":"1000-PROCESS-INPUTS-EXIT","text":"<p>This paragraph serves as an exit point for the 1000-PROCESS-INPUTS section of the COACTUPC program. It provides a clean termination point for the input processing logic, allowing the program to return control to the calling routine after completing the validation and processing of user inputs related to account updates.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1100-receive-map","title":"1100-RECEIVE-MAP","text":"<p>This paragraph handles the reception and processing of user input from a CICS map in the account update program. It first receives data from the screen into the CACTUPAI structure, then initializes the ACUP-NEW-DETAILS work area before systematically processing each input field. The paragraph performs extensive data validation and conversion for various account and customer fields.</p> <p>For each input field, the code checks if it contains asterisks or spaces (indicating no entry) and either sets the corresponding field to LOW-VALUES or captures the entered value. For numeric fields like credit limits and balances, it uses the FUNCTION TEST-NUMVAL-C and FUNCTION NUMVAL-C to validate and convert string inputs to numeric values.</p> <p>The paragraph processes multiple categories of data including account information (status, limits, balances), date fields (open, expiry, reissue dates), and customer details (personal information, address, contact numbers). Each field is carefully handled with appropriate data type validation to ensure data integrity before proceeding with account updates.</p> Code <pre><code>EXEC CICS RECEIVE MAP(LIT-THISMAP)\n                     MAPSET(LIT-THISMAPSET)\n                     INTO(CACTUPAI)\n                     RESP(WS-RESP-CD)\n                     RESP2(WS-REAS-CD)\n           END-EXEC\n      *\n           INITIALIZE ACUP-NEW-DETAILS\n      ******************************************************************\n      *    Account Master data\n      ******************************************************************\n           IF  ACCTSIDI OF CACTUPAI = '*'\n           OR  ACCTSIDI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO CC-ACCT-ID\n                                            ACUP-NEW-ACCT-ID-X\n           ELSE\n               MOVE ACCTSIDI OF CACTUPAI TO CC-ACCT-ID\n                                            ACUP-NEW-ACCT-ID-X\n           END-IF\n\n           IF ACUP-DETAILS-NOT-FETCHED\n              GO TO 1100-RECEIVE-MAP-EXIT\n           END-IF\n\n      * Active Status\n           IF  ACSTTUSI OF CACTUPAI = '*'\n           OR  ACSTTUSI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-ACTIVE-STATUS\n           ELSE\n               MOVE ACSTTUSI OF CACTUPAI TO ACUP-NEW-ACTIVE-STATUS\n           END-IF\n\n      * Credit Limit\n           IF  ACRDLIMI OF CACTUPAI = '*'\n           OR  ACRDLIMI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CREDIT-LIMIT-X\n           ELSE\n               MOVE ACRDLIMI OF CACTUPAI TO ACUP-NEW-CREDIT-LIMIT-X\n               IF FUNCTION TEST-NUMVAL-C(ACUP-NEW-CREDIT-LIMIT-X) = 0\n                  COMPUTE ACUP-NEW-CREDIT-LIMIT-N =\n                     FUNCTION NUMVAL-C(ACRDLIMI OF CACTUPAI)\n               ELSE\n                  CONTINUE\n               END-IF\n           END-IF\n\n      * Cash Limit\n           IF  ACSHLIMI OF CACTUPAI = '*'\n           OR  ACSHLIMI OF CACTUPAI = SPACES\n             MOVE LOW-VALUES           TO ACUP-NEW-CASH-CREDIT-LIMIT-X\n           ELSE\n             MOVE ACSHLIMI OF CACTUPAI TO ACUP-NEW-CASH-CREDIT-LIMIT-X\n             IF FUNCTION TEST-NUMVAL-C(ACUP-NEW-CASH-CREDIT-LIMIT-X) = 0\n                COMPUTE ACUP-NEW-CASH-CREDIT-LIMIT-N =\n                     FUNCTION NUMVAL-C(ACSHLIMI OF CACTUPAI)\n             ELSE\n                CONTINUE\n             END-IF\n           END-IF\n\n      * Current Balance\n           IF  ACURBALI OF CACTUPAI = '*'\n           OR  ACURBALI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CURR-BAL-X\n           ELSE\n               MOVE ACURBALI OF CACTUPAI TO ACUP-NEW-CURR-BAL-X\n               IF  FUNCTION TEST-NUMVAL-C(ACUP-NEW-CURR-BAL-X) = 0\n                   COMPUTE ACUP-NEW-CURR-BAL-N =\n                     FUNCTION NUMVAL-C(ACUP-NEW-CURR-BAL-X)\n               ELSE\n                   CONTINUE\n               END-IF\n           END-IF\n\n      *Current Cycle Credit\n           IF  ACRCYCRI OF CACTUPAI = '*'\n           OR  ACRCYCRI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CURR-CYC-CREDIT-X\n           ELSE\n               MOVE ACRCYCRI OF CACTUPAI TO ACUP-NEW-CURR-CYC-CREDIT-X\n               IF FUNCTION TEST-NUMVAL-C(ACUP-NEW-CURR-CYC-CREDIT-X) = 0\n                   COMPUTE ACUP-NEW-CURR-CYC-CREDIT-N =\n                     FUNCTION NUMVAL-C(ACRCYCRI OF CACTUPAI)\n               ELSE\n                   CONTINUE\n               END-IF\n           END-IF\n\n      *Current Cycle Debit\n           IF  ACRCYDBI OF CACTUPAI = '*'\n           OR  ACRCYDBI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CURR-CYC-DEBIT-X\n           ELSE\n               MOVE ACRCYDBI OF CACTUPAI TO ACUP-NEW-CURR-CYC-DEBIT-X\n               IF  FUNCTION TEST-NUMVAL-C(ACUP-NEW-CURR-CYC-DEBIT-X) = 0\n                   COMPUTE ACUP-NEW-CURR-CYC-DEBIT-N =\n                     FUNCTION NUMVAL-C(ACRCYDBI OF CACTUPAI)\n               ELSE\n                   CONTINUE\n               END-IF\n           END-IF\n\n      *Open date\n      *\n           IF  OPNYEARI OF CACTUPAI = '*'\n           OR  OPNYEARI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-OPEN-YEAR\n           ELSE\n               MOVE OPNYEARI OF CACTUPAI TO ACUP-NEW-OPEN-YEAR\n           END-IF\n\n           IF  OPNMONI OF CACTUPAI = '*'\n           OR  OPNMONI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-OPEN-MON\n           ELSE\n               MOVE OPNMONI OF CACTUPAI TO  ACUP-NEW-OPEN-MON\n           END-IF\n\n           IF  OPNDAYI OF CACTUPAI = '*'\n           OR  OPNDAYI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-OPEN-DAY\n           ELSE\n               MOVE OPNDAYI OF CACTUPAI TO  ACUP-NEW-OPEN-DAY\n           END-IF\n\n      *Expiry date\n      *\n           IF  EXPYEARI OF CACTUPAI = '*'\n           OR  EXPYEARI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-EXP-YEAR\n           ELSE\n               MOVE EXPYEARI OF CACTUPAI TO ACUP-NEW-EXP-YEAR\n           END-IF\n\n           IF  EXPMONI OF CACTUPAI = '*'\n           OR  EXPMONI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-EXP-MON\n           ELSE\n               MOVE EXPMONI OF CACTUPAI TO  ACUP-NEW-EXP-MON\n           END-IF\n\n           IF  EXPDAYI OF CACTUPAI = '*'\n           OR  EXPDAYI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-EXP-DAY\n           ELSE\n               MOVE EXPDAYI OF CACTUPAI TO  ACUP-NEW-EXP-DAY\n           END-IF\n\n      *Reissue date\n      *\n           IF  RISYEARI OF CACTUPAI = '*'\n           OR  RISYEARI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-REISSUE-YEAR\n           ELSE\n               MOVE RISYEARI OF CACTUPAI TO ACUP-NEW-REISSUE-YEAR\n           END-IF\n\n           IF  RISMONI OF CACTUPAI = '*'\n           OR  RISMONI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-REISSUE-MON\n           ELSE\n               MOVE RISMONI OF CACTUPAI TO  ACUP-NEW-REISSUE-MON\n           END-IF\n\n           IF  RISDAYI OF CACTUPAI = '*'\n           OR  RISDAYI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-REISSUE-DAY\n           ELSE\n               MOVE RISDAYI OF CACTUPAI TO  ACUP-NEW-REISSUE-DAY\n           END-IF\n\n      *Account Group\n      *\n           IF  AADDGRPI OF CACTUPAI = '*'\n           OR  AADDGRPI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-GROUP-ID\n           ELSE\n               MOVE AADDGRPI OF CACTUPAI TO ACUP-NEW-GROUP-ID\n           END-IF\n      ******************************************************************\n      *    Customer Master data\n      ******************************************************************\n      *Customer Id (actually not editable)\n      *\n           IF  ACSTNUMI OF CACTUPAI = '*'\n           OR  ACSTNUMI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-ID-X\n           ELSE\n               MOVE ACSTNUMI OF CACTUPAI TO ACUP-NEW-CUST-ID-X\n           END-IF\n\n      *Social Security Number\n      *\n           IF  ACTSSN1I OF CACTUPAI = '*'\n           OR  ACTSSN1I OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-SSN-1\n           ELSE\n               MOVE ACTSSN1I OF CACTUPAI TO ACUP-NEW-CUST-SSN-1\n           END-IF\n\n           IF  ACTSSN2I OF CACTUPAI = '*'\n           OR  ACTSSN2I OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-SSN-2\n           ELSE\n               MOVE ACTSSN2I OF CACTUPAI TO ACUP-NEW-CUST-SSN-2\n           END-IF\n\n           IF  ACTSSN3I OF CACTUPAI = '*'\n           OR  ACTSSN3I OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-SSN-3\n           ELSE\n               MOVE ACTSSN3I OF CACTUPAI TO ACUP-NEW-CUST-SSN-3\n           END-IF\n      *\n      *Date of birth\n      *\n           IF  DOBYEARI OF CACTUPAI = '*'\n           OR  DOBYEARI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-DOB-YEAR\n           ELSE\n               MOVE DOBYEARI OF CACTUPAI TO ACUP-NEW-CUST-DOB-YEAR\n           END-IF\n\n           IF  DOBMONI OF CACTUPAI = '*'\n           OR  DOBMONI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-DOB-MON\n           ELSE\n               MOVE DOBMONI OF CACTUPAI  TO ACUP-NEW-CUST-DOB-MON\n           END-IF\n\n           IF  DOBDAYI OF CACTUPAI = '*'\n           OR  DOBDAYI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-DOB-DAY\n           ELSE\n               MOVE DOBDAYI OF CACTUPAI  TO ACUP-NEW-CUST-DOB-DAY\n           END-IF\n      *\n      *FICO\n      *\n           IF  ACSTFCOI OF CACTUPAI = '*'\n           OR  ACSTFCOI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-FICO-SCORE-X\n           ELSE\n               MOVE ACSTFCOI OF CACTUPAI TO ACUP-NEW-CUST-FICO-SCORE-X\n           END-IF\n      *\n      *First Name\n      *\n           IF  ACSFNAMI OF CACTUPAI = '*'\n           OR  ACSFNAMI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-FIRST-NAME\n           ELSE\n               MOVE ACSFNAMI OF CACTUPAI TO ACUP-NEW-CUST-FIRST-NAME\n           END-IF\n      *\n      *Middle Name\n      *\n           IF  ACSMNAMI OF CACTUPAI = '*'\n           OR  ACSMNAMI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-MIDDLE-NAME\n           ELSE\n               MOVE ACSMNAMI OF CACTUPAI TO ACUP-NEW-CUST-MIDDLE-NAME\n           END-IF\n      *\n      *Last Name\n      *\n           IF  ACSLNAMI OF CACTUPAI = '*'\n           OR  ACSLNAMI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-LAST-NAME\n           ELSE\n               MOVE ACSLNAMI OF CACTUPAI TO ACUP-NEW-CUST-LAST-NAME\n           END-IF\n      *\n      *Address\n      *\n           IF  ACSADL1I OF CACTUPAI = '*'\n           OR  ACSADL1I OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-ADDR-LINE-1\n           ELSE\n               MOVE ACSADL1I OF CACTUPAI TO ACUP-NEW-CUST-ADDR-LINE-1\n           END-IF\n\n           IF  ACSADL2I OF CACTUPAI = '*'\n           OR  ACSADL2I OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-ADDR-LINE-2\n           ELSE\n               MOVE ACSADL2I OF CACTUPAI TO ACUP-NEW-CUST-ADDR-LINE-2\n           END-IF\n\n           IF  ACSCITYI OF CACTUPAI = '*'\n           OR  ACSCITYI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-ADDR-LINE-3\n           ELSE\n               MOVE ACSCITYI OF CACTUPAI TO ACUP-NEW-CUST-ADDR-LINE-3\n           END-IF\n\n           IF  ACSSTTEI OF CACTUPAI = '*'\n           OR  ACSSTTEI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-ADDR-STATE-CD\n           ELSE\n               MOVE ACSSTTEI OF CACTUPAI TO ACUP-NEW-CUST-ADDR-STATE-CD\n           END-IF\n\n           IF  ACSCTRYI OF CACTUPAI = '*'\n           OR  ACSCTRYI OF CACTUPAI = SPACES\n              MOVE LOW-VALUES           TO ACUP-NEW-CUST-ADDR-COUNTRY-CD\n           ELSE\n              MOVE ACSCTRYI OF CACTUPAI TO ACUP-NEW-CUST-ADDR-COUNTRY-CD\n           END-IF\n\n           IF  ACSZIPCI OF CACTUPAI = '*'\n           OR  ACSZIPCI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-ADDR-ZIP\n           ELSE\n               MOVE ACSZIPCI OF CACTUPAI TO ACUP-NEW-CUST-ADDR-ZIP\n           END-IF\n\n           IF  ACSPH1AI OF CACTUPAI = '*'\n           OR  ACSPH1AI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-PHONE-NUM-1A\n           ELSE\n               MOVE ACSPH1AI OF CACTUPAI TO ACUP-NEW-CUST-PHONE-NUM-1A\n           END-IF\n\n           IF  ACSPH1BI OF CACTUPAI = '*'\n           OR  ACSPH1BI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-PHONE-NUM-1B\n           ELSE\n               MOVE ACSPH1BI OF CACTUPAI TO ACUP-NEW-CUST-PHONE-NUM-1B\n           END-IF\n\n           IF  ACSPH1CI OF CACTUPAI = '*'\n           OR  ACSPH1CI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-PHONE-NUM-1C\n           ELSE\n               MOVE ACSPH1CI OF CACTUPAI TO ACUP-NEW-CUST-PHONE-NUM-1C\n           END-IF\n\n           IF  ACSPH2AI OF CACTUPAI = '*'\n           OR  ACSPH2AI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-PHONE-NUM-2A\n           ELSE\n               MOVE ACSPH2AI OF CACTUPAI TO ACUP-NEW-CUST-PHONE-NUM-2A\n           END-IF\n\n           IF  ACSPH2BI OF CACTUPAI = '*'\n           OR  ACSPH2BI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-PHONE-NUM-2B\n           ELSE\n               MOVE ACSPH2BI OF CACTUPAI TO ACUP-NEW-CUST-PHONE-NUM-2B\n           END-IF\n\n           IF  ACSPH2CI OF CACTUPAI = '*'\n           OR  ACSPH2CI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-PHONE-NUM-2C\n           ELSE\n               MOVE ACSPH2CI OF CACTUPAI TO ACUP-NEW-CUST-PHONE-NUM-2C\n           END-IF\n      *\n      *Government Id\n      *\n           IF  ACSGOVTI OF CACTUPAI = '*'\n           OR  ACSGOVTI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-GOVT-ISSUED-ID\n           ELSE\n               MOVE ACSGOVTI OF CACTUPAI TO ACUP-NEW-CUST-GOVT-ISSUED-ID\n           END-IF\n      *\n      *EFT Code\n      *\n           IF  ACSEFTCI OF CACTUPAI = '*'\n           OR  ACSEFTCI OF CACTUPAI = SPACES\n               MOVE LOW-VALUES           TO ACUP-NEW-CUST-EFT-ACCOUNT-ID\n           ELSE\n               MOVE ACSEFTCI OF CACTUPAI TO ACUP-NEW-CUST-EFT-ACCOUNT-ID\n           END-IF\n      *\n      *Primary Holder Indicator\n      *\n           IF  ACSPFLGI OF CACTUPAI = '*'\n           OR  ACSPFLGI OF CACTUPAI = SPACES\n              MOVE LOW-VALUES            TO ACUP-NEW-CUST-PRI-HOLDER-IND\n           ELSE\n              MOVE ACSPFLGI OF CACTUPAI  TO ACUP-NEW-CUST-PRI-HOLDER-IND\n           END-IF\n           .\n</code></pre>"},{"location":"COACTUPC.html#1100-receive-map-exit","title":"1100-RECEIVE-MAP-EXIT","text":"<p>This paragraph serves as an exit point for the 1100-RECEIVE-MAP routine in the COACTUPC program. It provides a clean termination point for the routine that handles receiving user input from the account update interface. The paragraph contains only the EXIT statement followed by a period, marking the end of the logical processing block.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1200-edit-map-inputs","title":"1200-EDIT-MAP-INPUTS","text":"<p>This paragraph handles the validation of user inputs for account and customer information updates. It first checks if account details have been fetched - if not, it validates only the search keys and exits. When account data has already been retrieved, it compares old and new values to detect changes.</p> <p>If changes are found and not yet confirmed, the paragraph performs extensive field-level validation on all modified fields using specialized validation routines for different data types. The validation includes:</p> <ul> <li>Account status (Y/N format)</li> <li>Dates (open date, expiry date, reissue date, date of birth)</li> <li>Currency amounts (credit limits, balances) with signed decimal validation</li> <li>Personal information (SSN, FICO score)</li> <li>Name fields with required/optional alpha validation</li> <li>Address components (with special validation for US state codes)</li> <li>ZIP code numeric validation</li> <li>Phone numbers with US format validation</li> <li>EFT account ID</li> <li>Primary cardholder indicator</li> </ul> <p>The paragraph also performs cross-field validation between state and ZIP code when both are valid. If any validation errors are found, the input is marked as having errors; otherwise, the changes are marked as valid but not yet confirmed, requiring user confirmation before proceeding with updates.</p> Code <pre><code>SET INPUT-OK                  TO TRUE\n\n           IF  ACUP-DETAILS-NOT-FETCHED\n      *        VALIDATE THE SEARCH KEYS\n               PERFORM 1210-EDIT-ACCOUNT\n                  THRU 1210-EDIT-ACCOUNT-EXIT\n\n               MOVE LOW-VALUES           TO ACUP-OLD-ACCT-DATA\n\n      *       IF THE SEARCH CONDITIONS HAVE PROBLEMS FLAG THEM\n              IF  FLG-ACCTFILTER-BLANK\n                  SET NO-SEARCH-CRITERIA-RECEIVED TO TRUE\n              END-IF\n\n      *       AT THIS STAGE. NO DETAILS FETCHED. NOTHING MORE TO EDIT.\n              GO TO 1200-EDIT-MAP-INPUTS-EXIT\n           ELSE\n               CONTINUE\n           END-IF\n      *\n      *    SEARCH KEYS ALREADY VALIDATED AND DATA FETCHED\n           SET FOUND-ACCOUNT-DATA        TO TRUE\n           SET FOUND-ACCT-IN-MASTER      TO TRUE\n           SET FLG-ACCTFILTER-ISVALID    TO TRUE\n\n           SET FOUND-CUST-IN-MASTER      TO TRUE\n           SET FLG-CUSTFILTER-ISVALID    TO TRUE\n\n      *\n           PERFORM 1205-COMPARE-OLD-NEW\n              THRU 1205-COMPARE-OLD-NEW-EXIT\n\n           IF  NO-CHANGES-FOUND\n           OR  ACUP-CHANGES-OK-NOT-CONFIRMED\n           OR  ACUP-CHANGES-OKAYED-AND-DONE\n               MOVE LOW-VALUES           TO WS-NON-KEY-FLAGS\n               GO TO 1200-EDIT-MAP-INPUTS-EXIT\n           END-IF\n\n           SET ACUP-CHANGES-NOT-OK       TO TRUE\n\n           MOVE 'Account Status'          TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-ACTIVE-STATUS    TO WS-EDIT-YES-NO\n           PERFORM 1220-EDIT-YESNO\n              THRU 1220-EDIT-YESNO-EXIT\n           MOVE WS-EDIT-YES-NO            TO WS-EDIT-ACCT-STATUS\n\n           MOVE 'Open Date'              TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-OPEN-DATE       TO WS-EDIT-DATE-CCYYMMDD\n           PERFORM EDIT-DATE-CCYYMMDD\n              THRU EDIT-DATE-CCYYMMDD-EXIT\n           MOVE WS-EDIT-DATE-FLGS        TO WS-EDIT-OPEN-DATE-FLGS\n\n           MOVE 'Credit Limit'           TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CREDIT-LIMIT-X  TO WS-EDIT-SIGNED-NUMBER-9V2-X\n           PERFORM 1250-EDIT-SIGNED-9V2\n              THRU 1250-EDIT-SIGNED-9V2-EXIT\n           MOVE WS-FLG-SIGNED-NUMBER-EDIT  TO WS-EDIT-CREDIT-LIMIT\n\n           MOVE 'Expiry Date'            TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-EXPIRAION-DATE  TO WS-EDIT-DATE-CCYYMMDD\n           PERFORM EDIT-DATE-CCYYMMDD\n              THRU EDIT-DATE-CCYYMMDD-EXIT\n           MOVE WS-EDIT-DATE-FLGS        TO WS-EXPIRY-DATE-FLGS\n\n           MOVE 'Cash Credit Limit'      TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CASH-CREDIT-LIMIT-X\n                                         TO WS-EDIT-SIGNED-NUMBER-9V2-X\n           PERFORM 1250-EDIT-SIGNED-9V2\n              THRU 1250-EDIT-SIGNED-9V2-EXIT\n           MOVE WS-FLG-SIGNED-NUMBER-EDIT TO WS-EDIT-CASH-CREDIT-LIMIT\n\n           MOVE 'Reissue Date'           TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-REISSUE-DATE    TO WS-EDIT-DATE-CCYYMMDD\n           PERFORM EDIT-DATE-CCYYMMDD\n              THRU EDIT-DATE-CCYYMMDD-EXIT\n           MOVE WS-EDIT-DATE-FLGS        TO WS-EDIT-REISSUE-DATE-FLGS\n\n           MOVE 'Current Balance'        TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CURR-BAL-X      TO WS-EDIT-SIGNED-NUMBER-9V2-X\n           PERFORM 1250-EDIT-SIGNED-9V2\n              THRU 1250-EDIT-SIGNED-9V2-EXIT\n           MOVE WS-FLG-SIGNED-NUMBER-EDIT   TO WS-EDIT-CURR-BAL\n\n           MOVE 'Current Cycle Credit Limit' TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CURR-CYC-CREDIT-X\n                                         TO WS-EDIT-SIGNED-NUMBER-9V2-X\n           PERFORM 1250-EDIT-SIGNED-9V2\n              THRU 1250-EDIT-SIGNED-9V2-EXIT\n           MOVE WS-FLG-SIGNED-NUMBER-EDIT   TO WS-EDIT-CURR-CYC-CREDIT\n\n           MOVE 'Current Cycle Debit Limit' TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CURR-CYC-DEBIT-X\n                                         TO WS-EDIT-SIGNED-NUMBER-9V2-X\n           PERFORM 1250-EDIT-SIGNED-9V2\n              THRU 1250-EDIT-SIGNED-9V2-EXIT\n           MOVE WS-FLG-SIGNED-NUMBER-EDIT   TO WS-EDIT-CURR-CYC-DEBIT\n\n           MOVE 'SSN'                    TO WS-EDIT-VARIABLE-NAME\n           PERFORM 1265-EDIT-US-SSN\n              THRU 1265-EDIT-US-SSN-EXIT\n\n           MOVE 'Date of Birth'          TO WS-EDIT-VARIABLE-NAME\n           MOVE   ACUP-NEW-CUST-DOB-YYYY-MM-DD\n                                         TO WS-EDIT-DATE-CCYYMMDD\n           PERFORM EDIT-DATE-CCYYMMDD\n              THRU EDIT-DATE-CCYYMMDD-EXIT\n           MOVE WS-EDIT-DATE-FLGS        TO WS-EDIT-DT-OF-BIRTH-FLGS\n           IF WS-EDIT-DT-OF-BIRTH-ISVALID\n              PERFORM  EDIT-DATE-OF-BIRTH\n                 THRU  EDIT-DATE-OF-BIRTH-EXIT\n              MOVE WS-EDIT-DATE-FLGS    TO WS-EDIT-DT-OF-BIRTH-FLGS\n           END-IF\n\n           MOVE 'FICO Score'             TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-FICO-SCORE-X\n                                         TO WS-EDIT-ALPHANUM-ONLY\n           MOVE 3                        TO WS-EDIT-ALPHANUM-LENGTH\n           PERFORM 1245-EDIT-NUM-REQD\n              THRU 1245-EDIT-NUM-REQD-EXIT\n           MOVE WS-EDIT-ALPHANUM-ONLY-FLAGS\n                                         TO WS-EDIT-FICO-SCORE-FLGS\n           IF FLG-FICO-SCORE-ISVALID\n              PERFORM  1275-EDIT-FICO-SCORE\n                 THRU  1275-EDIT-FICO-SCORE-EXIT\n           END-IF\n      ******************************************************************\n      *    Edit names\n      ******************************************************************\n           MOVE 'First Name'             TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-FIRST-NAME TO WS-EDIT-ALPHANUM-ONLY\n           MOVE 25                       TO WS-EDIT-ALPHANUM-LENGTH\n           PERFORM 1225-EDIT-ALPHA-REQD\n              THRU 1225-EDIT-ALPHA-REQD-EXIT\n           MOVE WS-EDIT-ALPHA-ONLY-FLAGS\n                                         TO WS-EDIT-FIRST-NAME-FLGS\n\n           MOVE 'Middle Name'            TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-MIDDLE-NAME TO WS-EDIT-ALPHANUM-ONLY\n           MOVE 25                       TO WS-EDIT-ALPHANUM-LENGTH\n           PERFORM 1235-EDIT-ALPHA-OPT\n              THRU 1235-EDIT-ALPHA-OPT-EXIT\n           MOVE WS-EDIT-ALPHA-ONLY-FLAGS\n                                         TO WS-EDIT-MIDDLE-NAME-FLGS\n\n           MOVE 'Last Name'              TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-LAST-NAME  TO WS-EDIT-ALPHANUM-ONLY\n           MOVE 25                       TO WS-EDIT-ALPHANUM-LENGTH\n           PERFORM 1225-EDIT-ALPHA-REQD\n              THRU 1225-EDIT-ALPHA-REQD-EXIT\n           MOVE WS-EDIT-ALPHA-ONLY-FLAGS\n                                        TO WS-EDIT-LAST-NAME-FLGS\n\n           MOVE 'Address Line 1'         TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-ADDR-LINE-1 TO WS-EDIT-ALPHANUM-ONLY\n           MOVE 50                       TO WS-EDIT-ALPHANUM-LENGTH\n           PERFORM 1215-EDIT-MANDATORY\n              THRU 1215-EDIT-MANDATORY-EXIT\n           MOVE WS-EDIT-MANDATORY-FLAGS\n                                         TO WS-EDIT-ADDRESS-LINE-1-FLGS\n\n           MOVE 'State'                  TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-ADDR-STATE-CD TO WS-EDIT-ALPHANUM-ONLY\n           MOVE 2                       TO WS-EDIT-ALPHANUM-LENGTH\n           PERFORM 1225-EDIT-ALPHA-REQD\n              THRU 1225-EDIT-ALPHA-REQD-EXIT\n           MOVE WS-EDIT-ALPHA-ONLY-FLAGS\n                                         TO WS-EDIT-STATE-FLGS\n           IF FLG-ALPHA-ISVALID\n           PERFORM 1270-EDIT-US-STATE-CD\n              THRU 1270-EDIT-US-STATE-CD-EXIT\n           END-IF\n\n\n           MOVE 'Zip'                    TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-ADDR-ZIP   TO WS-EDIT-ALPHANUM-ONLY\n           MOVE 5                        TO WS-EDIT-ALPHANUM-LENGTH\n           PERFORM 1245-EDIT-NUM-REQD\n              THRU 1245-EDIT-NUM-REQD-EXIT\n           MOVE WS-EDIT-ALPHANUM-ONLY-FLAGS\n                                         TO WS-EDIT-ZIPCODE-FLGS\n\n      *    Address Line 2 is optional\n      *    MOVE 'Address Line 2'         TO WS-EDIT-VARIABLE-NAME\n           MOVE 'City'                   TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-ADDR-LINE-3 TO WS-EDIT-ALPHANUM-ONLY\n           MOVE 50                       TO WS-EDIT-ALPHANUM-LENGTH\n           PERFORM 1225-EDIT-ALPHA-REQD\n              THRU 1225-EDIT-ALPHA-REQD-EXIT\n           MOVE WS-EDIT-ALPHA-ONLY-FLAGS\n                                         TO WS-EDIT-CITY-FLGS\n\n           MOVE 'Country'                TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-ADDR-COUNTRY-CD\n                                        TO WS-EDIT-ALPHANUM-ONLY\n           MOVE 3                       TO WS-EDIT-ALPHANUM-LENGTH\n           PERFORM 1225-EDIT-ALPHA-REQD\n              THRU 1225-EDIT-ALPHA-REQD-EXIT\n           MOVE WS-EDIT-ALPHA-ONLY-FLAGS\n                                         TO WS-EDIT-COUNTRY-FLGS\n\n           MOVE 'Phone Number 1'         TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-PHONE-NUM-1\n                                         TO WS-EDIT-US-PHONE-NUM\n           PERFORM 1260-EDIT-US-PHONE-NUM\n              THRU 1260-EDIT-US-PHONE-NUM-EXIT\n           MOVE WS-EDIT-US-PHONE-NUM-FLGS\n                                         TO  WS-EDIT-PHONE-NUM-1-FLGS\n\n           MOVE 'Phone Number 2'         TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-PHONE-NUM-2\n                                         TO WS-EDIT-US-PHONE-NUM\n           PERFORM 1260-EDIT-US-PHONE-NUM\n              THRU 1260-EDIT-US-PHONE-NUM-EXIT\n           MOVE WS-EDIT-US-PHONE-NUM-FLGS\n                                         TO WS-EDIT-PHONE-NUM-2-FLGS\n\n           MOVE 'EFT Account Id'         TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-EFT-ACCOUNT-ID\n                                         TO WS-EDIT-ALPHANUM-ONLY\n           MOVE 10                       TO WS-EDIT-ALPHANUM-LENGTH\n           PERFORM 1245-EDIT-NUM-REQD\n              THRU 1245-EDIT-NUM-REQD-EXIT\n           MOVE WS-EDIT-ALPHANUM-ONLY-FLAGS\n                                         TO WS-EFT-ACCOUNT-ID-FLGS\n\n           MOVE 'Primary Card Holder'    TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-PRI-HOLDER-IND\n                                         TO WS-EDIT-YES-NO\n           PERFORM 1220-EDIT-YESNO\n              THRU 1220-EDIT-YESNO-EXIT\n           MOVE WS-EDIT-YES-NO           TO WS-EDIT-PRI-CARDHOLDER\n\n      *    Cross field edits begin here\n           IF  FLG-STATE-ISVALID\n           AND FLG-ZIPCODE-ISVALID\n               PERFORM 1280-EDIT-US-STATE-ZIP-CD\n                  THRU 1280-EDIT-US-STATE-ZIP-CD-EXIT\n           END-IF\n\n           IF INPUT-ERROR\n              CONTINUE\n           ELSE\n              SET ACUP-CHANGES-OK-NOT-CONFIRMED TO TRUE\n           END-IF\n           .\n</code></pre>"},{"location":"COACTUPC.html#1200-edit-map-inputs-exit","title":"1200-EDIT-MAP-INPUTS-EXIT","text":"<p>This paragraph serves as an exit point for the 1200-EDIT-MAP-INPUTS section of the COACTUPC program. It provides a clean termination point for the input validation logic, allowing the program to return control to the calling section after completing the validation of user-entered account and customer information.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1205-compare-old-new","title":"1205-COMPARE-OLD-NEW","text":"<p>This paragraph compares the original account and customer data with the newly entered values to determine if any changes have been made. It performs an exhaustive field-by-field comparison between the old and new values, using FUNCTION UPPER-CASE and FUNCTION TRIM to ensure case-insensitive and whitespace-normalized comparisons for text fields. The comparison covers all account details (account ID, status, balances, credit limits, dates, cycle information) and customer information (personal details, address, phone numbers, SSN, government ID, date of birth, EFT account, primary holder indicator, and FICO score). If any field differs between the old and new values, the CHANGE-HAS-OCCURRED flag is set to TRUE and processing exits the paragraph. If all fields match, NO-CHANGES-DETECTED is set to TRUE, preventing unnecessary database updates.</p> Code <pre><code>SET NO-CHANGES-FOUND           TO TRUE\n\n           IF  ACUP-NEW-ACCT-ID-X         = ACUP-OLD-ACCT-ID-X\n           AND FUNCTION UPPER-CASE (\n               ACUP-NEW-ACTIVE-STATUS)    =\n               FUNCTION UPPER-CASE (\n               ACUP-OLD-ACTIVE-STATUS)\n           AND ACUP-NEW-CURR-BAL          = ACUP-OLD-CURR-BAL\n           AND ACUP-NEW-CREDIT-LIMIT      = ACUP-OLD-CREDIT-LIMIT\n           AND ACUP-NEW-CASH-CREDIT-LIMIT = ACUP-OLD-CASH-CREDIT-LIMIT\n           AND ACUP-NEW-OPEN-DATE         = ACUP-OLD-OPEN-DATE\n           AND ACUP-NEW-EXPIRAION-DATE    = ACUP-OLD-EXPIRAION-DATE\n           AND ACUP-NEW-REISSUE-DATE      = ACUP-OLD-REISSUE-DATE\n           AND ACUP-NEW-CURR-CYC-CREDIT   = ACUP-OLD-CURR-CYC-CREDIT\n           AND ACUP-NEW-CURR-CYC-DEBIT    = ACUP-OLD-CURR-CYC-DEBIT\n           AND FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-NEW-GROUP-ID))=\n               FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-OLD-GROUP-ID))\n               CONTINUE\n           ELSE\n               SET CHANGE-HAS-OCCURRED   TO TRUE\n               GO TO 1205-COMPARE-OLD-NEW-EXIT\n           END-IF\n\n\n           IF  FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-NEW-CUST-ID-X))=\n               FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-OLD-CUST-ID-X))\n           AND FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-NEW-CUST-FIRST-NAME))=\n               FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-OLD-CUST-FIRST-NAME))\n           AND FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-NEW-CUST-MIDDLE-NAME))=\n               FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-OLD-CUST-MIDDLE-NAME))\n           AND FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-NEW-CUST-LAST-NAME))=\n               FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-OLD-CUST-LAST-NAME))\n           AND FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-NEW-CUST-ADDR-LINE-1))=\n               FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-OLD-CUST-ADDR-LINE-1))\n           AND FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-NEW-CUST-ADDR-LINE-2))=\n               FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-OLD-CUST-ADDR-LINE-2))\n           AND FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-NEW-CUST-ADDR-LINE-3))=\n               FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-OLD-CUST-ADDR-LINE-3))\n           AND FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-NEW-CUST-ADDR-STATE-CD))=\n               FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-OLD-CUST-ADDR-STATE-CD))\n           AND FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-NEW-CUST-ADDR-COUNTRY-CD))=\n               FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-OLD-CUST-ADDR-COUNTRY-CD))\n           AND FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-NEW-CUST-ADDR-ZIP))=\n               FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-OLD-CUST-ADDR-ZIP))\n           AND ACUP-NEW-CUST-PHONE-NUM-1A = ACUP-OLD-CUST-PHONE-NUM-1A\n           AND ACUP-NEW-CUST-PHONE-NUM-1B = ACUP-OLD-CUST-PHONE-NUM-1B\n           AND ACUP-NEW-CUST-PHONE-NUM-1C = ACUP-OLD-CUST-PHONE-NUM-1C\n           AND ACUP-NEW-CUST-PHONE-NUM-2A = ACUP-OLD-CUST-PHONE-NUM-2A\n           AND ACUP-NEW-CUST-PHONE-NUM-2B = ACUP-OLD-CUST-PHONE-NUM-2B\n           AND ACUP-NEW-CUST-PHONE-NUM-2C = ACUP-OLD-CUST-PHONE-NUM-2C\n           AND ACUP-NEW-CUST-SSN-X       = ACUP-OLD-CUST-SSN-X\n           AND FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-NEW-CUST-GOVT-ISSUED-ID ))=\n               FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-OLD-CUST-GOVT-ISSUED-ID))\n           AND ACUP-NEW-CUST-DOB-YYYY-MM-DD\n                                     = ACUP-OLD-CUST-DOB-YYYY-MM-DD\n           AND ACUP-NEW-CUST-EFT-ACCOUNT-ID\n                                     = ACUP-OLD-CUST-EFT-ACCOUNT-ID\n           AND FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-NEW-CUST-PRI-HOLDER-IND))=\n               FUNCTION UPPER-CASE (\n               FUNCTION TRIM (ACUP-OLD-CUST-PRI-HOLDER-IND))\n           AND ACUP-NEW-CUST-FICO-SCORE-X\n                                     = ACUP-OLD-CUST-FICO-SCORE-X\n               SET NO-CHANGES-DETECTED   TO TRUE\n           ELSE\n               SET CHANGE-HAS-OCCURRED   TO TRUE\n               GO TO 1205-COMPARE-OLD-NEW-EXIT\n           END-IF\n\n           .\n</code></pre>"},{"location":"COACTUPC.html#1205-compare-old-new-exit","title":"1205-COMPARE-OLD-NEW-EXIT","text":"<p>This paragraph serves as an exit point for the COMPARE-OLD-NEW routine in the account update process. It's a simple exit paragraph that marks the end of the comparison logic between old and new account/customer data values, allowing the program to return control to the calling routine.</p> Code <pre><code>EXIT\n           .\n\n\n      *\n</code></pre>"},{"location":"COACTUPC.html#1210-edit-account","title":"1210-EDIT-ACCOUNT","text":"<p>This paragraph validates the account ID input field (CC-ACCT-ID) during the account update process. It performs several validation checks:</p> <ol> <li> <p>First, it checks if the account ID is empty or blank. If so, it sets appropriate error flags, prompts the user for an account number if messaging is enabled, and exits the validation routine.</p> </li> <li> <p>If an account ID is provided, it checks whether the value is numeric and non-zero. If the validation fails, it sets an error flag and generates a specific error message explaining that the account number must be an 11-digit non-zero number.</p> </li> <li> <p>When the account ID passes all validation checks, it copies the value to CDEMO-ACCT-ID and sets a flag indicating the account filter is valid.</p> </li> </ol> <p>The paragraph handles data validation while providing appropriate user feedback, ensuring only valid account numbers proceed to further processing.</p> Code <pre><code>SET FLG-ACCTFILTER-NOT-OK    TO TRUE\n\n      *    Not supplied\n           IF CC-ACCT-ID   EQUAL LOW-VALUES\n           OR CC-ACCT-ID   EQUAL SPACES\n              SET INPUT-ERROR           TO TRUE\n              SET FLG-ACCTFILTER-BLANK  TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 SET WS-PROMPT-FOR-ACCT TO TRUE\n              END-IF\n              MOVE ZEROES               TO CDEMO-ACCT-ID\n                                           ACUP-NEW-ACCT-ID\n              GO TO  1210-EDIT-ACCOUNT-EXIT\n           END-IF\n\n      *    Not numeric\n      *    Not 11 characters\n           MOVE CC-ACCT-ID              TO ACUP-NEW-ACCT-ID\n           IF CC-ACCT-ID   IS NOT NUMERIC\n           OR CC-ACCT-ID-N EQUAL ZEROS\n              SET INPUT-ERROR TO TRUE\n              IF WS-RETURN-MSG-OFF\n                STRING\n                 'Account Number if supplied must be a 11 digit'\n                 ' Non-Zero Number'\n                DELIMITED BY SIZE\n                INTO WS-RETURN-MSG\n              END-IF\n              MOVE ZEROES               TO CDEMO-ACCT-ID\n              GO TO 1210-EDIT-ACCOUNT-EXIT\n           ELSE\n              MOVE CC-ACCT-ID TO CDEMO-ACCT-ID\n              SET FLG-ACCTFILTER-ISVALID TO TRUE\n           END-IF\n           .\n</code></pre>"},{"location":"COACTUPC.html#1210-edit-account-exit","title":"1210-EDIT-ACCOUNT-EXIT","text":"<p>This paragraph serves as an exit point for the account editing process in the COACTUPC program. It provides a structured way to terminate the account validation and editing logic, allowing the program flow to return to the calling routine after account data has been processed and validated.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1215-edit-mandatory","title":"1215-EDIT-MANDATORY","text":"<p>This paragraph validates mandatory fields in the account update process. It checks if the input field (stored in WS-EDIT-ALPHANUM-ONLY) is empty, contains only spaces, or has zero length after trimming. If the field is empty, it sets error flags (INPUT-ERROR and FLG-MANDATORY-BLANK) and constructs an error message indicating that the field must be supplied, using the field name stored in WS-EDIT-VARIABLE-NAME. If the field contains valid data, it sets the FLG-MANDATORY-ISVALID flag. This validation ensures that required information is provided before proceeding with account updates.</p> Code <pre><code>*    Initialize\n           SET FLG-MANDATORY-NOT-OK    TO TRUE\n\n      *    Not supplied\n           IF WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n                                       EQUAL LOW-VALUES\n           OR WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n                                       EQUAL SPACES\n           OR FUNCTION LENGTH(FUNCTION TRIM(\n              WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH))) = 0\n\n              SET INPUT-ERROR          TO TRUE\n              SET FLG-MANDATORY-BLANK  TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' must be supplied.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n\n              GO TO  1215-EDIT-MANDATORY-EXIT\n           END-IF\n\n           SET FLG-MANDATORY-ISVALID   TO TRUE\n           .\n</code></pre>"},{"location":"COACTUPC.html#1215-edit-mandatory-exit","title":"1215-EDIT-MANDATORY-EXIT","text":"<p>This paragraph serves as an exit point for the mandatory field validation routine in the account update process. It marks the end of the validation logic for required fields, allowing the program to return control to the calling section after completing the validation checks.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1220-edit-yesno","title":"1220-EDIT-YESNO","text":"<p>This paragraph validates a Yes/No input field. It first checks if the input is empty (spaces, low-values, or zeros) and sets an error flag with an appropriate message if the field is required but not supplied. If the input is provided, it then verifies that the value is valid (presumably checking elsewhere if it's 'Y' or 'N') and sets an error flag with a message if the value is invalid. The validation uses a flag system to track error states and constructs user-friendly error messages that include the name of the field being validated. The paragraph is designed to be reusable across different Yes/No fields in the program by using a variable field name in the error messages.</p> Code <pre><code>*    Must be Y or N\n      *    SET FLG-YES-NO-NOT-OK         TO TRUE\n      *\n      *    Not supplied\n           IF WS-EDIT-YES-NO             EQUAL LOW-VALUES\n           OR WS-EDIT-YES-NO             EQUAL SPACES\n           OR WS-EDIT-YES-NO             EQUAL ZEROS\n              SET INPUT-ERROR            TO TRUE\n              SET FLG-YES-NO-BLANK       TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' must be supplied.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  1220-EDIT-YESNO-EXIT\n           END-IF\n\n\n           IF FLG-YES-NO-ISVALID\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR             TO TRUE\n              SET FLG-YES-NO-NOT-OK       TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' must be Y or N.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  1220-EDIT-YESNO-EXIT\n           END-IF\n           .\n</code></pre>"},{"location":"COACTUPC.html#1220-edit-yesno-exit","title":"1220-EDIT-YESNO-EXIT","text":"<p>This paragraph serves as an exit point for the EDIT-YESNO routine in the account update process. It provides a standard return point when the yes/no validation is complete, allowing the program to continue with its normal flow after validating user confirmation responses.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1225-edit-alpha-reqd","title":"1225-EDIT-ALPHA-REQD","text":"<p>This paragraph validates required alphabetic input fields. It first checks if the field is empty or contains only spaces, setting an error flag and generating a message that the field must be supplied if empty. If the field has content, it then verifies that only alphabetic characters and spaces are present by using character conversion and checking if any non-alphabetic characters remain. If invalid characters are found, it sets an error flag and generates a message indicating that only alphabets are allowed. The paragraph uses function TRIM and LENGTH to properly handle spaces in the validation process, and sets appropriate status flags to indicate the validation result for use by the calling routine.</p> Code <pre><code>*    Initialize\n           SET FLG-ALPHA-NOT-OK              TO TRUE\n\n      *    Not supplied\n           IF WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n                                             EQUAL LOW-VALUES\n           OR WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n               EQUAL SPACES\n           OR FUNCTION LENGTH(FUNCTION TRIM(\n              WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH))) = 0\n\n              SET INPUT-ERROR                TO TRUE\n              SET FLG-ALPHA-BLANK            TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' must be supplied.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n\n              GO TO  1225-EDIT-ALPHA-REQD-EXIT\n           END-IF\n\n      *    Only Alphabets and space allowed\n           MOVE LIT-ALL-ALPHA-FROM-X   TO LIT-ALL-ALPHA-FROM\n           INSPECT WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n             CONVERTING LIT-ALL-ALPHA-FROM\n                     TO LIT-ALPHA-SPACES-TO\n\n           IF FUNCTION LENGTH(\n                   FUNCTION TRIM(\n                   WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n                                  )) = 0\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR           TO TRUE\n              SET FLG-ALPHA-NOT-OK      TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' can have alphabets only.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  1225-EDIT-ALPHA-REQD-EXIT\n           END-IF\n\n           SET FLG-ALPHA-ISVALID        TO TRUE\n           .\n</code></pre>"},{"location":"COACTUPC.html#1225-edit-alpha-reqd-exit","title":"1225-EDIT-ALPHA-REQD-EXIT","text":"<p>This paragraph serves as an exit point for the EDIT-ALPHA-REQD routine in the account update process. It provides a standard control flow mechanism to return to the calling routine after completing the validation of required alphabetic fields.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1230-edit-alphanum-reqd","title":"1230-EDIT-ALPHANUM-REQD","text":"<p>This paragraph validates required alphanumeric input fields. It first checks if the field is empty (contains spaces, low-values, or has zero length after trimming), and if so, sets an error flag and creates an error message indicating the field must be supplied. If the field is not empty, it then validates that the field contains only alphabetic characters, numbers, and spaces by using a character conversion technique that replaces valid characters with spaces and then checks if anything remains after trimming. If invalid characters are found, it sets an error flag and creates an appropriate error message. The paragraph uses several flags to track the validation state and supports conditional message generation based on the WS-RETURN-MSG-OFF flag. When validation passes, it sets the FLG-ALPHNANUM-ISVALID flag to TRUE.</p> Code <pre><code>*    Initialize\n           SET FLG-ALPHNANUM-NOT-OK          TO TRUE\n\n      *    Not supplied\n           IF WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n                                             EQUAL LOW-VALUES\n           OR WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n               EQUAL SPACES\n           OR FUNCTION LENGTH(FUNCTION TRIM(\n              WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH))) = 0\n\n              SET INPUT-ERROR                TO TRUE\n              SET FLG-ALPHNANUM-BLANK        TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' must be supplied.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n\n              GO TO  1230-EDIT-ALPHANUM-REQD-EXIT\n           END-IF\n\n      *    Only Alphabets,numbers and space allowed\n           MOVE LIT-ALL-ALPHANUM-FROM-X TO LIT-ALL-ALPHANUM-FROM\n\n           INSPECT WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n             CONVERTING LIT-ALL-ALPHANUM-FROM\n                     TO LIT-ALPHANUM-SPACES-TO\n\n           IF FUNCTION LENGTH(\n                   FUNCTION TRIM(\n                   WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n                                  )) = 0\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR           TO TRUE\n              SET FLG-ALPHNANUM-NOT-OK  TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' can have numbers or alphabets only.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  1230-EDIT-ALPHANUM-REQD-EXIT\n           END-IF\n\n           SET FLG-ALPHNANUM-ISVALID    TO TRUE\n           .\n</code></pre>"},{"location":"COACTUPC.html#1230-edit-alphanum-reqd-exit","title":"1230-EDIT-ALPHANUM-REQD-EXIT","text":"<p>This paragraph serves as an exit point for the EDIT-ALPHANUM-REQD routine in the account update process. It marks the end of the alphanumeric field validation logic that requires user input, allowing the program to return to the calling routine after validation is complete.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1235-edit-alpha-opt","title":"1235-EDIT-ALPHA-OPT","text":"<p>This paragraph validates that an input field contains only alphabetic characters or is empty. It first checks if the field is empty or contains only spaces, in which case it's considered valid. If the field has content, it performs a character conversion that replaces all alphabetic characters with spaces, then checks if anything remains after trimming. If non-alphabetic characters are detected, it sets an error flag and generates an appropriate error message. The validation is optional, as indicated by the \"OPT\" in the paragraph name, allowing empty values to pass validation. The result of the validation is stored in flags that can be checked by the calling routine.</p> Code <pre><code>*    Initialize\n           SET FLG-ALPHA-NOT-OK              TO TRUE\n\n      *    Not supplied\n           IF WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n                                             EQUAL LOW-VALUES\n           OR WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n               EQUAL SPACES\n           OR FUNCTION LENGTH(FUNCTION TRIM(\n              WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH))) = 0\n\n              SET FLG-ALPHA-ISVALID          TO TRUE\n              GO TO  1235-EDIT-ALPHA-OPT-EXIT\n           ELSE\n              CONTINUE\n           END-IF\n\n      *    Only Alphabets and space allowed\n           MOVE LIT-ALL-ALPHA-FROM-X    TO LIT-ALL-ALPHA-FROM\n           INSPECT WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n             CONVERTING LIT-ALL-ALPHA-FROM\n                     TO LIT-ALPHA-SPACES-TO\n\n           IF FUNCTION LENGTH(\n                   FUNCTION TRIM(\n                   WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n                                  )) = 0\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR           TO TRUE\n              SET FLG-ALPHA-NOT-OK      TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' can have alphabets only.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  1235-EDIT-ALPHA-OPT-EXIT\n           END-IF\n\n           SET FLG-ALPHA-ISVALID        TO TRUE\n           .\n</code></pre>"},{"location":"COACTUPC.html#1235-edit-alpha-opt-exit","title":"1235-EDIT-ALPHA-OPT-EXIT","text":"<p>This paragraph serves as a simple exit point for the EDIT-ALPHA-OPT routine in the account update process. It provides a clean termination point for the alpha field validation logic, allowing the program to return control to the calling routine after completing optional alpha field validation.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1240-edit-alphanum-opt","title":"1240-EDIT-ALPHANUM-OPT","text":"<p>This paragraph validates an optional alphanumeric input field. It first checks if the field is empty (contains spaces, low-values, or trims to zero length), in which case it's considered valid since the field is optional. If the field contains data, it performs validation by converting all valid alphanumeric characters to spaces and then checking if anything remains after trimming. If non-alphanumeric characters are found, it sets an error flag and generates an appropriate error message indicating that only numbers and alphabets are allowed. The validation result is stored in a flag variable that can be checked by the calling routine.</p> Code <pre><code>*    Initialize\n           SET FLG-ALPHNANUM-NOT-OK          TO TRUE\n\n      *    Not supplied, but ok as optional\n           IF WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n                                             EQUAL LOW-VALUES\n           OR WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n               EQUAL SPACES\n           OR FUNCTION LENGTH(FUNCTION TRIM(\n              WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH))) = 0\n              SET FLG-ALPHNANUM-ISVALID     TO TRUE\n              GO TO  1240-EDIT-ALPHANUM-OPT-EXIT\n           ELSE\n              CONTINUE\n           END-IF\n\n      *    Only Alphabets and space allowed\n           MOVE LIT-ALL-ALPHANUM-FROM-X TO LIT-ALL-ALPHANUM-FROM\n           INSPECT WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n             CONVERTING LIT-ALL-ALPHANUM-FROM\n                     TO LIT-ALPHANUM-SPACES-TO\n\n           IF FUNCTION LENGTH(\n                   FUNCTION TRIM(\n                   WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n                                  )) = 0\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR           TO TRUE\n              SET FLG-ALPHNANUM-NOT-OK  TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' can have numbers or alphabets only.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  1240-EDIT-ALPHANUM-OPT-EXIT\n           END-IF\n\n           SET FLG-ALPHNANUM-ISVALID    TO TRUE\n           .\n</code></pre>"},{"location":"COACTUPC.html#1240-edit-alphanum-opt-exit","title":"1240-EDIT-ALPHANUM-OPT-EXIT","text":"<p>This paragraph serves as an exit point for the EDIT-ALPHANUM-OPT routine in the account update process. It provides a structured way to return control to the calling routine after optional alphanumeric field validation has been completed.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1245-edit-num-reqd","title":"1245-EDIT-NUM-REQD","text":"<p>This paragraph performs validation for required numeric input fields. It checks that the input field is not empty, contains only numeric characters, and is not zero. If any validation fails, it sets appropriate error flags and constructs a specific error message that includes the name of the field being validated. The validation process first checks for blank/empty values, then verifies the input contains only numeric characters, and finally ensures the numeric value is not zero. When validation passes, it sets a flag indicating the input is valid. The error messages are only generated if the message buffer is available (WS-RETURN-MSG-OFF condition).</p> Code <pre><code>*    Initialize\n           SET FLG-ALPHNANUM-NOT-OK          TO TRUE\n\n      *    Not supplied\n           IF WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n                                             EQUAL LOW-VALUES\n           OR WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n               EQUAL SPACES\n           OR FUNCTION LENGTH(FUNCTION TRIM(\n              WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH))) = 0\n\n              SET INPUT-ERROR                TO TRUE\n              SET FLG-ALPHNANUM-BLANK        TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' must be supplied.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n\n              GO TO  1245-EDIT-NUM-REQD-EXIT\n           END-IF\n\n      *    Only all numeric allowed\n\n           IF WS-EDIT-ALPHANUM-ONLY(1:WS-EDIT-ALPHANUM-LENGTH)\n                  IS NUMERIC\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR           TO TRUE\n              SET FLG-ALPHNANUM-NOT-OK  TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' must be all numeric.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  1245-EDIT-NUM-REQD-EXIT\n           END-IF\n\n      *    Must not be zero\n\n           IF FUNCTION NUMVAL(WS-EDIT-ALPHANUM-ONLY(1:\n                              WS-EDIT-ALPHANUM-LENGTH)) = 0\n              SET INPUT-ERROR           TO TRUE\n              SET FLG-ALPHNANUM-NOT-OK  TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' must not be zero.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  1245-EDIT-NUM-REQD-EXIT\n           ELSE\n              CONTINUE\n           END-IF\n\n\n           SET FLG-ALPHNANUM-ISVALID    TO TRUE\n           .\n</code></pre>"},{"location":"COACTUPC.html#1245-edit-num-reqd-exit","title":"1245-EDIT-NUM-REQD-EXIT","text":"<p>This paragraph serves as an exit point for the numeric field validation routine in the account update process. It marks the end of the validation logic for required numeric fields, allowing the program to return to the calling routine after completing the validation checks.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1250-edit-signed-9v2","title":"1250-EDIT-SIGNED-9V2","text":"<p>This paragraph validates a signed numeric field with 2 decimal places. It first checks if the field is empty (spaces or low-values), setting appropriate error flags and generating a message that the field must be supplied if empty. If the field contains data, it uses the FUNCTION TEST-NUMVAL-C intrinsic function to verify the value is a valid numeric value. When validation fails, it sets error flags and generates an appropriate error message. If all validations pass, it sets a flag indicating the signed number is valid. The paragraph uses a parameter-driven approach where the field name is passed in WS-EDIT-VARIABLE-NAME to create context-specific error messages.</p> Code <pre><code>SET FLG-SIGNED-NUMBER-NOT-OK    TO TRUE\n\n      *    Not supplied\n           IF WS-EDIT-SIGNED-NUMBER-9V2-X  EQUAL LOW-VALUES\n           OR WS-EDIT-SIGNED-NUMBER-9V2-X  EQUAL SPACES\n              SET INPUT-ERROR              TO TRUE\n              SET FLG-SIGNED-NUMBER-BLANK  TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' must be supplied.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  1250-EDIT-SIGNED-9V2-EXIT\n           ELSE\n              CONTINUE\n           END-IF\n\n           IF FUNCTION TEST-NUMVAL-C(WS-EDIT-SIGNED-NUMBER-9V2-X) = 0\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR             TO TRUE\n              SET FLG-SIGNED-NUMBER-NOT-OK   TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' is not valid'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n              END-IF\n              GO TO  1250-EDIT-SIGNED-9V2-EXIT\n\n           END-IF\n\n      *    If we got here all edits were cleared\n           SET FLG-SIGNED-NUMBER-ISVALID  TO TRUE\n           .\n</code></pre>"},{"location":"COACTUPC.html#1250-edit-signed-9v2-exit","title":"1250-EDIT-SIGNED-9V2-EXIT","text":"<p>This paragraph serves as an exit point for the 1250-EDIT-SIGNED-9V2 validation routine. It marks the end of the validation logic for signed numeric fields with two decimal places, allowing the program to return to the calling section after processing is complete.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1260-edit-us-phone-num","title":"1260-EDIT-US-PHONE-NUM","text":"<p>This paragraph validates US phone number input by checking if the phone number fields are empty. It sets the phone number validation flag to invalid by default, then checks if all three parts of the phone number (area code, prefix, and line number) are either spaces or low-values (nulls). If all parts are empty, it marks the phone number as valid and exits the validation routine, as phone numbers are not mandatory fields. If any part contains data, the validation continues to subsequent logic not shown in this snippet. The paragraph handles the special case where no phone number is provided, treating empty phone numbers as valid input.</p> Code <pre><code>*    The database stores date in X(15) format (999)999-9999\n      *                                             1234567890123\n      *    So we take the X(15) input into WS-EDIT-US-PHONE-NUM\n      *    and edit it\n\n           SET WS-EDIT-US-PHONE-IS-INVALID TO TRUE\n      *    Not mandatory to enter a phone number\n           IF  (WS-EDIT-US-PHONE-NUMA EQUAL SPACES\n           OR   WS-EDIT-US-PHONE-NUMA EQUAL LOW-VALUES)\n           AND (WS-EDIT-US-PHONE-NUMB EQUAL SPACES\n           OR   WS-EDIT-US-PHONE-NUMB EQUAL LOW-VALUES)\n           AND (WS-EDIT-US-PHONE-NUMA EQUAL SPACES\n           OR   WS-EDIT-US-PHONE-NUMC EQUAL LOW-VALUES)\n                SET WS-EDIT-US-PHONE-IS-VALID TO TRUE\n                GO TO EDIT-US-PHONE-EXIT\n           ELSE\n                CONTINUE\n           END-IF\n           .\n</code></pre>"},{"location":"COACTUPC.html#edit-area-code","title":"EDIT-AREA-CODE","text":"<p>This paragraph validates the area code portion of a US phone number. It performs several checks: ensuring the area code is not blank, verifying it contains only numeric characters, confirming it's not zero, and validating it against a list of valid North American area codes. For each validation failure, it sets appropriate error flags and constructs a specific error message that includes the field name being validated. If all validations pass, it sets a flag indicating the area code is valid before proceeding to validate the phone number prefix. The validation logic supports the account update process by ensuring phone number data meets formatting and validity requirements before database updates occur.</p> Code <pre><code>IF WS-EDIT-US-PHONE-NUMA EQUAL SPACES\n           OR WS-EDIT-US-PHONE-NUMA EQUAL LOW-VALUES\n              SET INPUT-ERROR              TO TRUE\n              SET FLG-EDIT-US-PHONEA-BLANK    TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': Area code must be supplied.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  EDIT-US-PHONE-PREFIX\n           ELSE\n              CONTINUE\n           END-IF\n\n           IF  WS-EDIT-US-PHONE-NUMA       IS NUMERIC\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR                 TO TRUE\n              SET  FLG-EDIT-US-PHONEA-NOT-OK  TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': Area code must be A 3 digit number.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  EDIT-US-PHONE-PREFIX\n           END-IF\n\n           IF  WS-EDIT-US-PHONE-NUMA-N = 0\n              SET INPUT-ERROR              TO TRUE\n              SET  FLG-EDIT-US-PHONEA-NOT-OK  TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': Area code cannot be zero'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  EDIT-US-PHONE-PREFIX\n           ELSE\n              CONTINUE\n           END-IF\n\n           MOVE FUNCTION TRIM (WS-EDIT-US-PHONE-NUMA)\n             TO WS-US-PHONE-AREA-CODE-TO-EDIT\n           IF VALID-GENERAL-PURP-CODE\n               CONTINUE\n           ELSE\n              SET INPUT-ERROR              TO TRUE\n              SET  FLG-EDIT-US-PHONEA-NOT-OK  TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': Not valid North America general purpose area code'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  EDIT-US-PHONE-PREFIX\n           END-IF\n\n           SET FLG-EDIT-US-PHONEA-ISVALID    TO TRUE\n           .\n</code></pre>"},{"location":"COACTUPC.html#edit-us-phone-prefix","title":"EDIT-US-PHONE-PREFIX","text":"<p>This paragraph validates the US phone number prefix (area code) portion of a phone number. It performs three key validation checks: first ensuring the prefix is not blank or spaces, then verifying it contains only numeric characters, and finally confirming the prefix is not zero. If any validation fails, it sets appropriate error flags and constructs a specific error message that includes the field name being validated. The error message is stored in WS-RETURN-MSG if no message has been set previously (WS-RETURN-MSG-OFF condition). When validation passes, it sets a flag indicating the phone prefix is valid. Each validation check includes a conditional branch to EDIT-US-PHONE-LINENUM when errors are detected.</p> Code <pre><code>IF WS-EDIT-US-PHONE-NUMB EQUAL SPACES\n           OR WS-EDIT-US-PHONE-NUMB EQUAL LOW-VALUES\n              SET INPUT-ERROR              TO TRUE\n              SET FLG-EDIT-US-PHONEB-BLANK    TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': Prefix code must be supplied.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  EDIT-US-PHONE-LINENUM\n           ELSE\n              CONTINUE\n           END-IF\n\n           IF  WS-EDIT-US-PHONE-NUMB          IS NUMERIC\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR                 TO TRUE\n              SET  FLG-EDIT-US-PHONEB-NOT-OK  TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': Prefix code must be A 3 digit number.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  EDIT-US-PHONE-LINENUM\n           END-IF\n\n           IF  WS-EDIT-US-PHONE-NUMB-N = 0\n              SET INPUT-ERROR              TO TRUE\n              SET  FLG-EDIT-US-PHONEB-NOT-OK  TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': Prefix code cannot be zero'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  EDIT-US-PHONE-LINENUM\n           ELSE\n              CONTINUE\n           END-IF\n\n           SET FLG-EDIT-US-PHONEB-ISVALID    TO TRUE\n           .\n</code></pre>"},{"location":"COACTUPC.html#edit-us-phone-linenum","title":"EDIT-US-PHONE-LINENUM","text":"<p>This paragraph validates the line number portion of a US phone number. It performs three key validation checks: first ensuring the field is not blank or empty, then verifying the value is numeric, and finally confirming the value is not zero. For each validation failure, it sets appropriate error flags and constructs a specific error message that includes the field name from WS-EDIT-VARIABLE-NAME. If all validations pass, it sets a flag indicating the phone line number is valid. The validation process terminates immediately upon encountering any error condition, with control returning to the calling routine via EDIT-US-PHONE-EXIT.</p> Code <pre><code>IF WS-EDIT-US-PHONE-NUMC EQUAL SPACES\n           OR WS-EDIT-US-PHONE-NUMC EQUAL LOW-VALUES\n              SET INPUT-ERROR              TO TRUE\n              SET FLG-EDIT-US-PHONEC-BLANK    TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': Line number code must be supplied.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO EDIT-US-PHONE-EXIT\n           ELSE\n              CONTINUE\n           END-IF\n\n           IF  WS-EDIT-US-PHONE-NUMC          IS NUMERIC\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR                 TO TRUE\n              SET  FLG-EDIT-US-PHONEC-NOT-OK  TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': Line number code must be A 4 digit number.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  EDIT-US-PHONE-EXIT\n           END-IF\n\n           IF  WS-EDIT-US-PHONE-NUMC-N = 0\n              SET INPUT-ERROR              TO TRUE\n              SET  FLG-EDIT-US-PHONEC-NOT-OK  TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': Line number code cannot be zero'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  EDIT-US-PHONE-EXIT\n           ELSE\n               CONTINUE\n           END-IF\n\n\n           SET FLG-EDIT-US-PHONEC-ISVALID    TO TRUE\n           .\n</code></pre>"},{"location":"COACTUPC.html#edit-us-phone-exit","title":"EDIT-US-PHONE-EXIT","text":"<p>This paragraph serves as an exit point for the US phone number validation routine in the account update process. It marks the end of the phone number validation logic, allowing the program to return to the calling section after completing the validation checks.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1260-edit-us-phone-num-exit","title":"1260-EDIT-US-PHONE-NUM-EXIT","text":"<p>This paragraph serves as an exit point for the US phone number validation routine. It marks the end of the phone number validation logic, allowing the program to return to the calling process after completing the validation checks.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1265-edit-us-ssn","title":"1265-EDIT-US-SSN","text":"<p>This paragraph validates a US Social Security Number (SSN) in the format xxx-xx-xxxx by checking each part separately. It first validates that the first part contains exactly 3 numeric digits and is not an invalid value (000, 666, or 900-999). Then it validates the second part contains exactly 2 numeric digits. Finally, it validates the third part contains exactly 4 numeric digits. For each part, it sets appropriate flags to indicate validation status and generates specific error messages when validation fails. The validation leverages a common numeric validation routine (1245-EDIT-NUM-REQD) and maintains detailed status flags to track the validity of each SSN component.</p> Code <pre><code>*Format xxx-xx-xxxx\n      *Part1 :should have 3 digits\n      *Part2 :should have 2 digits and it should be from 01 to 99\n      *Part3 should have 4 digits from 0001 to 9999.\n      ******************************************************************\n      *    Edit SSN Part 1\n      ******************************************************************\n           MOVE 'SSN: First 3 chars'     TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-SSN-1      TO WS-EDIT-ALPHANUM-ONLY\n           MOVE 3                        TO WS-EDIT-ALPHANUM-LENGTH\n           PERFORM 1245-EDIT-NUM-REQD\n              THRU 1245-EDIT-NUM-REQD-EXIT\n           MOVE WS-EDIT-ALPHANUM-ONLY-FLAGS\n                                         TO WS-EDIT-US-SSN-PART1-FLGS\n\n      *Part1 :should not be 000, 666, or between 900 and 999\n           IF FLG-EDIT-US-SSN-PART1-ISVALID\n              MOVE ACUP-NEW-CUST-SSN-1   TO WS-EDIT-US-SSN-PART1\n              IF INVALID-SSN-PART1\n              SET INPUT-ERROR            TO TRUE\n              SET FLG-EDIT-US-SSN-PART1-NOT-OK\n                                 TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': should not be 000, 666, or between 900 and 999'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              ELSE\n                CONTINUE\n              END-IF\n           END-IF\n\n      ******************************************************************\n      *    Edit SSN Part 2\n      ******************************************************************\n           MOVE 'SSN 4th &amp; 5th chars'    TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-SSN-2      TO WS-EDIT-ALPHANUM-ONLY\n           MOVE 2                        TO WS-EDIT-ALPHANUM-LENGTH\n           PERFORM 1245-EDIT-NUM-REQD\n              THRU 1245-EDIT-NUM-REQD-EXIT\n           MOVE WS-EDIT-ALPHANUM-ONLY-FLAGS\n                                         TO WS-EDIT-US-SSN-PART2-FLGS\n\n\n      ******************************************************************\n      *    Edit SSN Part 3\n      ******************************************************************\n           MOVE 'SSN Last 4 chars'       TO WS-EDIT-VARIABLE-NAME\n           MOVE ACUP-NEW-CUST-SSN-3      TO WS-EDIT-ALPHANUM-ONLY\n           MOVE 4                        TO WS-EDIT-ALPHANUM-LENGTH\n           PERFORM 1245-EDIT-NUM-REQD\n              THRU 1245-EDIT-NUM-REQD-EXIT\n           MOVE WS-EDIT-ALPHANUM-ONLY-FLAGS\n                                         TO WS-EDIT-US-SSN-PART3-FLGS\n           .\n</code></pre>"},{"location":"COACTUPC.html#1265-edit-us-ssn-exit","title":"1265-EDIT-US-SSN-EXIT","text":"<p>This paragraph serves as an exit point for the US Social Security Number (SSN) validation routine. It marks the end of the SSN validation logic, allowing the program to return to the calling section after completing the validation process.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1270-edit-us-state-cd","title":"1270-EDIT-US-STATE-CD","text":"<p>This paragraph validates the US state code entered by the user during account updates. It takes the state code from the ACUP-NEW-CUST-ADDR-STATE-CD field and checks if it's valid using the VALID-US-STATE-CODE condition (likely defined elsewhere). If the state code is valid, processing continues normally. If invalid, it sets error flags (INPUT-ERROR and FLG-STATE-NOT-OK) and constructs an error message indicating the state code is invalid, but only if message display is enabled (WS-RETURN-MSG-OFF). The error message includes the field name from WS-EDIT-VARIABLE-NAME. After validation, regardless of outcome, control passes to the paragraph exit point.</p> Code <pre><code>MOVE ACUP-NEW-CUST-ADDR-STATE-CD TO US-STATE-CODE-TO-EDIT\n           IF VALID-US-STATE-CODE\n               CONTINUE\n           ELSE\n              SET INPUT-ERROR              TO TRUE\n              SET FLG-STATE-NOT-OK         TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': is not a valid state code'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  1270-EDIT-US-STATE-CD-EXIT\n           END-IF\n           .\n</code></pre>"},{"location":"COACTUPC.html#1270-edit-us-state-cd-exit","title":"1270-EDIT-US-STATE-CD-EXIT","text":"<p>This paragraph serves as an exit point for the US state code validation routine. It marks the end of the state code validation logic, allowing the program to return to the calling process after completing the validation checks for US state codes.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#1275-edit-fico-score","title":"1275-EDIT-FICO-SCORE","text":"<p>This paragraph validates if a FICO credit score falls within the acceptable range (300-850). If the score is valid, processing continues. If invalid, it sets error flags (INPUT-ERROR and FLG-FICO-SCORE-NOT-OK) and constructs an appropriate error message when message display is enabled. The error message includes the field name and the valid range requirement. After validation, control passes to the paragraph exit point regardless of the outcome.</p> Code <pre><code>IF FICO-RANGE-IS-VALID\n               CONTINUE\n           ELSE\n              SET INPUT-ERROR              TO TRUE\n              SET FLG-FICO-SCORE-NOT-OK    TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': should be between 300 and 850'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  1275-EDIT-FICO-SCORE-EXIT\n           END-IF\n           .\n</code></pre>"},{"location":"COACTUPC.html#1275-edit-fico-score-exit","title":"1275-EDIT-FICO-SCORE-EXIT","text":"<p>This paragraph serves as an exit point for the FICO score validation routine in the account update process. The comment indicates that the program also includes a basic ZIP code validation mechanism based on data from the United States Postal Service website, though the actual validation logic is not shown in this snippet.</p> Code <pre><code>EXIT\n           .\n\n      *A crude zip code edit based on data from USPS web site\n</code></pre>"},{"location":"COACTUPC.html#1280-edit-us-state-zip-cd","title":"1280-EDIT-US-STATE-ZIP-CD","text":"<p>This paragraph validates the relationship between the US state code and ZIP code entered by the user. It combines the state code with the first two digits of the ZIP code into a single field and checks if this combination is valid according to US postal standards. If the combination is invalid, it sets error flags for both the state and ZIP code fields and generates an error message indicating that the ZIP code is not valid for the specified state. This validation ensures that customer address information is geographically consistent before allowing updates to proceed.</p> Code <pre><code>STRING ACUP-NEW-CUST-ADDR-STATE-CD\n                  ACUP-NEW-CUST-ADDR-ZIP(1:2)\n             DELIMITED BY SIZE\n             INTO US-STATE-AND-FIRST-ZIP2\n\n           IF VALID-US-STATE-ZIP-CD2-COMBO\n               CONTINUE\n           ELSE\n              SET INPUT-ERROR              TO TRUE\n              SET FLG-STATE-NOT-OK         TO TRUE\n              SET FLG-ZIPCODE-NOT-OK       TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   'Invalid zip code for state'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                 END-STRING\n              END-IF\n              GO TO  1280-EDIT-US-STATE-ZIP-CD-EXIT\n           END-IF\n           .\n</code></pre>"},{"location":"COACTUPC.html#1280-edit-us-state-zip-cd-exit","title":"1280-EDIT-US-STATE-ZIP-CD-EXIT","text":"<p>This paragraph serves as an exit point for the US state and ZIP code validation routine. It marks the end of the validation logic for these fields, allowing the program to return to the calling section after completing the state and ZIP code validation checks.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#2000-decide-action","title":"2000-DECIDE-ACTION","text":"<p>This paragraph handles the decision logic for different states of the account update process. It evaluates the current transaction state and user actions to determine the next processing step. The logic includes handling scenarios such as: initial data retrieval, user cancellation of changes, validation of input data, confirmation of changes, processing database updates, and handling various error conditions. The paragraph implements a state machine approach where each condition triggers appropriate actions based on the current state flag and user input. It includes error handling for unexpected scenarios, record locking issues, and update failures. The code also manages the return to previous screens or reset of the process based on transaction completion status.</p> Code <pre><code>EVALUATE TRUE\n      ******************************************************************\n      *       NO DETAILS SHOWN.\n      *       SO GET THEM AND SETUP DETAIL EDIT SCREEN\n      ******************************************************************\n              WHEN ACUP-DETAILS-NOT-FETCHED\n      ******************************************************************\n      *       CHANGES MADE. BUT USER CANCELS\n      ******************************************************************\n              WHEN CCARD-AID-PFK12\n                 IF  FLG-ACCTFILTER-ISVALID\n                     SET WS-RETURN-MSG-OFF       TO TRUE\n                     PERFORM 9000-READ-ACCT\n                        THRU 9000-READ-ACCT-EXIT\n                     IF FOUND-CUST-IN-MASTER\n                        SET ACUP-SHOW-DETAILS    TO TRUE\n                     END-IF\n                 END-IF\n      ******************************************************************\n      *       DETAILS SHOWN\n      *       CHECK CHANGES AND ASK CONFIRMATION IF GOOD\n      ******************************************************************\n              WHEN ACUP-SHOW-DETAILS\n                 IF INPUT-ERROR\n                 OR NO-CHANGES-DETECTED\n                    CONTINUE\n                 ELSE\n                    SET ACUP-CHANGES-OK-NOT-CONFIRMED TO TRUE\n                 END-IF\n      ******************************************************************\n      *       DETAILS SHOWN\n      *       BUT INPUT EDIT ERRORS FOUND\n      ******************************************************************\n              WHEN ACUP-CHANGES-NOT-OK\n                  CONTINUE\n      ******************************************************************\n      *       DETAILS EDITED , FOUND OK, CONFIRM SAVE REQUESTED\n      *       CONFIRMATION GIVEN.SO SAVE THE CHANGES\n      ******************************************************************\n              WHEN ACUP-CHANGES-OK-NOT-CONFIRMED\n               AND CCARD-AID-PFK05\n                 PERFORM 9600-WRITE-PROCESSING\n                    THRU 9600-WRITE-PROCESSING-EXIT\n                 EVALUATE TRUE\n                    WHEN COULD-NOT-LOCK-ACCT-FOR-UPDATE\n                         SET ACUP-CHANGES-OKAYED-LOCK-ERROR TO TRUE\n                    WHEN LOCKED-BUT-UPDATE-FAILED\n                       SET ACUP-CHANGES-OKAYED-BUT-FAILED TO TRUE\n                    WHEN DATA-WAS-CHANGED-BEFORE-UPDATE\n                        SET ACUP-SHOW-DETAILS            TO TRUE\n                    WHEN OTHER\n                       SET ACUP-CHANGES-OKAYED-AND-DONE   TO TRUE\n                 END-EVALUATE\n      ******************************************************************\n      *       DETAILS EDITED , FOUND OK, CONFIRM SAVE REQUESTED\n      *       CONFIRMATION NOT GIVEN. SO SHOW DETAILS AGAIN\n      ******************************************************************\n              WHEN ACUP-CHANGES-OK-NOT-CONFIRMED\n                  CONTINUE\n      ******************************************************************\n      *       SHOW CONFIRMATION. GO BACK TO SQUARE 1\n      ******************************************************************\n              WHEN ACUP-CHANGES-OKAYED-AND-DONE\n                  SET ACUP-SHOW-DETAILS TO TRUE\n                  IF CDEMO-FROM-TRANID    EQUAL LOW-VALUES\n                  OR CDEMO-FROM-TRANID    EQUAL SPACES\n                     MOVE ZEROES       TO CDEMO-ACCT-ID\n                                          CDEMO-CARD-NUM\n                     MOVE LOW-VALUES   TO CDEMO-ACCT-STATUS\n                  END-IF\n              WHEN OTHER\n                   MOVE LIT-THISPGM    TO ABEND-CULPRIT\n                   MOVE '0001'         TO ABEND-CODE\n                   MOVE SPACES         TO ABEND-REASON\n                   MOVE 'UNEXPECTED DATA SCENARIO'\n                                       TO ABEND-MSG\n                   PERFORM ABEND-ROUTINE\n                      THRU ABEND-ROUTINE-EXIT\n           END-EVALUATE\n           .\n</code></pre>"},{"location":"COACTUPC.html#2000-decide-action-exit","title":"2000-DECIDE-ACTION-EXIT","text":"<p>This is a simple exit paragraph that serves as the termination point for the 2000-DECIDE-ACTION section. It provides a clean exit point when the decision logic in that section has completed processing, allowing the program to continue with the next sequential instruction after the section call.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#3000-send-map","title":"3000-SEND-MAP","text":"<p>This paragraph orchestrates the preparation and display of the account update screen. It follows a sequential process by first initializing the screen, setting up screen variables with appropriate values, preparing informational messages for the user, configuring screen attributes (such as field highlighting, protection status, and colors), setting attributes for information messages, and finally sending the completed screen to the terminal. This structured approach ensures the user interface is properly prepared with all necessary data and formatting before being presented to the user.</p> Code <pre><code>PERFORM 3100-SCREEN-INIT\n              THRU 3100-SCREEN-INIT-EXIT\n           PERFORM 3200-SETUP-SCREEN-VARS\n              THRU 3200-SETUP-SCREEN-VARS-EXIT\n           PERFORM 3250-SETUP-INFOMSG\n              THRU 3250-SETUP-INFOMSG-EXIT\n           PERFORM 3300-SETUP-SCREEN-ATTRS\n              THRU 3300-SETUP-SCREEN-ATTRS-EXIT\n           PERFORM 3390-SETUP-INFOMSG-ATTRS\n              THRU 3390-SETUP-INFOMSG-ATTRS-EXIT\n           PERFORM 3400-SEND-SCREEN\n              THRU 3400-SEND-SCREEN-EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#3000-send-map-exit","title":"3000-SEND-MAP-EXIT","text":"<p>This paragraph serves as an exit point for the SEND-MAP routine in the COACTUPC program. It provides a clean termination point for the routine that handles displaying account update information to the user interface in the CICS environment.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#3100-screen-init","title":"3100-SCREEN-INIT","text":"<p>This paragraph initializes the account update screen by clearing the output area (CACTUPAO) and populating standard header information. It retrieves the current date and time using the FUNCTION CURRENT-DATE intrinsic function, then formats this information into display format. The paragraph sets up the screen with title information from constants, transaction and program identifiers, and properly formatted date (MM/DD/YY) and time (HH:MM:SS) values. This initialization ensures the screen displays consistent header information before any account-specific data is presented to the user.</p> Code <pre><code>MOVE LOW-VALUES TO CACTUPAO\n\n           MOVE FUNCTION CURRENT-DATE     TO WS-CURDATE-DATA\n\n           MOVE CCDA-TITLE01              TO TITLE01O OF CACTUPAO\n           MOVE CCDA-TITLE02              TO TITLE02O OF CACTUPAO\n           MOVE LIT-THISTRANID            TO TRNNAMEO OF CACTUPAO\n           MOVE LIT-THISPGM               TO PGMNAMEO OF CACTUPAO\n\n           MOVE FUNCTION CURRENT-DATE     TO WS-CURDATE-DATA\n\n           MOVE WS-CURDATE-MONTH          TO WS-CURDATE-MM\n           MOVE WS-CURDATE-DAY            TO WS-CURDATE-DD\n           MOVE WS-CURDATE-YEAR(3:2)      TO WS-CURDATE-YY\n\n           MOVE WS-CURDATE-MM-DD-YY       TO CURDATEO OF CACTUPAO\n\n           MOVE WS-CURTIME-HOURS          TO WS-CURTIME-HH\n           MOVE WS-CURTIME-MINUTE         TO WS-CURTIME-MM\n           MOVE WS-CURTIME-SECOND         TO WS-CURTIME-SS\n\n           MOVE WS-CURTIME-HH-MM-SS       TO CURTIMEO OF CACTUPAO\n\n           .\n</code></pre>"},{"location":"COACTUPC.html#3100-screen-init-exit","title":"3100-SCREEN-INIT-EXIT","text":"<p>This paragraph serves as an exit point for the screen initialization process in the COACTUPC program. It's a simple exit paragraph that marks the end of the screen initialization logic, allowing the program to return control to the calling routine after completing the setup of the account update screen.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#3200-setup-screen-vars","title":"3200-SETUP-SCREEN-VARS","text":"<p>This paragraph handles the setup of screen variables for the account update interface based on the current state of the transaction. It first checks if this is an initial program entry or a subsequent interaction. For non-initial entries, it manages the account ID display field, either clearing it or populating it with the current account ID depending on validation status. The paragraph then uses an EVALUATE statement to determine which values should be displayed on the screen based on the current transaction state: showing initial default values when no details have been fetched yet, displaying the original account values when details are available, or showing updated values when changes have been made. Each state triggers a specific paragraph to populate the appropriate screen fields.</p> Code <pre><code>*    INITIALIZE SEARCH CRITERIA\n           IF CDEMO-PGM-ENTER\n              CONTINUE\n           ELSE\n              IF CC-ACCT-ID-N = 0\n              AND FLG-ACCTFILTER-ISVALID\n                 MOVE LOW-VALUES                TO ACCTSIDO OF CACTUPAO\n              ELSE\n                 MOVE CC-ACCT-ID                TO ACCTSIDO OF CACTUPAO\n              END-IF\n\n              EVALUATE TRUE\n                WHEN ACUP-DETAILS-NOT-FETCHED\n                WHEN CC-ACCT-ID-N =  0\n                  PERFORM 3201-SHOW-INITIAL-VALUES\n                     THRU 3201-SHOW-INITIAL-VALUES-EXIT\n               WHEN ACUP-SHOW-DETAILS\n                  PERFORM 3202-SHOW-ORIGINAL-VALUES\n                     THRU 3202-SHOW-ORIGINAL-VALUES-EXIT\n               WHEN ACUP-CHANGES-MADE\n                  PERFORM 3203-SHOW-UPDATED-VALUES\n                     THRU 3203-SHOW-UPDATED-VALUES-EXIT\n               WHEN OTHER\n                  PERFORM 3202-SHOW-ORIGINAL-VALUES\n                     THRU 3202-SHOW-ORIGINAL-VALUES-EXIT\n              END-EVALUATE\n            END-IF\n           .\n</code></pre>"},{"location":"COACTUPC.html#3200-setup-screen-vars-exit","title":"3200-SETUP-SCREEN-VARS-EXIT","text":"<p>This paragraph serves as an exit point for the 3200-SETUP-SCREEN-VARS routine. It provides a clean termination point for the routine that prepares screen variables for display, allowing the program to return control to the calling section after screen setup operations are complete.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#3201-show-initial-values","title":"3201-SHOW-INITIAL-VALUES","text":"<p>This paragraph initializes the account update screen (CACTUPAO) by clearing all input fields with LOW-VALUES. The code systematically clears several groups of fields: account status and limits, account dates, customer identification data, personal information, address and contact details, and customer flags. This preparation step ensures the screen is ready for new data entry or for displaying existing account information without any residual values from previous operations. The fields are organized in logical groups that correspond to the different sections of customer and account information managed by the program.</p> Code <pre><code>MOVE LOW-VALUES                     TO  ACSTTUSO OF CACTUPAO\n                                                   ACRDLIMO OF CACTUPAO\n      *Account Limits\n                                                   ACURBALO OF CACTUPAO\n                                                   ACSHLIMO OF CACTUPAO\n                                                   ACRCYCRO OF CACTUPAO\n                                                   ACRCYDBO OF CACTUPAO\n      *Account Dates\n                                                   OPNYEARO OF CACTUPAO\n                                                   OPNMONO  OF CACTUPAO\n                                                   OPNDAYO  OF CACTUPAO\n                                                   EXPYEARO OF CACTUPAO\n                                                   EXPMONO  OF CACTUPAO\n                                                   EXPDAYO  OF CACTUPAO\n                                                   RISYEARO OF CACTUPAO\n                                                   RISMONO  OF CACTUPAO\n                                                   RISDAYO  OF CACTUPAO\n                                                   AADDGRPO OF CACTUPAO\n      *Customer data\n                                                   ACSTNUMO OF CACTUPAO\n                                                   ACTSSN1O OF CACTUPAO\n                                                   ACTSSN2O OF CACTUPAO\n                                                   ACTSSN3O OF CACTUPAO\n                                                   ACSTFCOO OF CACTUPAO\n                                                   DOBYEARO OF CACTUPAO\n                                                   DOBMONO  OF CACTUPAO\n                                                   DOBDAYO  OF CACTUPAO\n                                                   ACSFNAMO OF CACTUPAO\n                                                   ACSMNAMO OF CACTUPAO\n                                                   ACSLNAMO OF CACTUPAO\n      *Customer address and contact info\n                                                   ACSADL1O OF CACTUPAO\n                                                   ACSADL2O OF CACTUPAO\n                                                   ACSCITYO OF CACTUPAO\n                                                   ACSSTTEO OF CACTUPAO\n                                                   ACSZIPCO OF CACTUPAO\n                                                   ACSCTRYO OF CACTUPAO\n\n                                                   ACSPH1AO OF CACTUPAO\n                                                   ACSPH1BO OF CACTUPAO\n                                                   ACSPH1CO OF CACTUPAO\n                                                   ACSPH2AO OF CACTUPAO\n                                                   ACSPH2BO OF CACTUPAO\n                                                   ACSPH2CO OF CACTUPAO\n\n      *Customer other good stuff\n                                                   ACSGOVTO OF CACTUPAO\n                                                   ACSEFTCO OF CACTUPAO\n                                                   ACSPFLGO OF CACTUPAO\n           .\n</code></pre>"},{"location":"COACTUPC.html#3201-show-initial-values-exit","title":"3201-SHOW-INITIAL-VALUES-EXIT","text":"<p>This paragraph serves as an exit point for the 3201-SHOW-INITIAL-VALUES routine. It provides a clean termination point for the routine that displays the initial account and customer values to the user before they make any modifications.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#3202-show-original-values","title":"3202-SHOW-ORIGINAL-VALUES","text":"<p>This paragraph populates the display screen with original account and customer values from the database records. It first initializes flags and sets the transaction state to prompt for changes. When account or customer records are found, it formats and transfers data from internal working storage fields to the corresponding output screen fields. For account information, it handles financial data (converting numeric values to formatted currency), account status, balance information, credit limits, cycle credits/debits, and various dates (open, expiration, reissue). For customer information, it populates personal details including SSN (split into three parts), FICO score, date of birth, name fields, complete address information, phone numbers (formatted into area code, exchange, and line number components), government ID, EFT account information, and primary holder indicator. This paragraph essentially prepares the screen to show the user what data currently exists before they make any modifications.</p> Code <pre><code>MOVE LOW-VALUES                     TO WS-NON-KEY-FLAGS\n\n           SET PROMPT-FOR-CHANGES              TO TRUE\n\n           IF FOUND-ACCT-IN-MASTER\n           OR FOUND-CUST-IN-MASTER\n              MOVE ACUP-OLD-ACTIVE-STATUS      TO ACSTTUSO OF CACTUPAO\n\n              MOVE ACUP-OLD-CURR-BAL-N         TO WS-EDIT-CURRENCY-9-2-F\n              MOVE WS-EDIT-CURRENCY-9-2-F      TO ACURBALO OF CACTUPAO\n\n              MOVE ACUP-OLD-CREDIT-LIMIT-N     TO WS-EDIT-CURRENCY-9-2-F\n              MOVE WS-EDIT-CURRENCY-9-2-F      TO ACRDLIMO OF CACTUPAO\n\n              MOVE ACUP-OLD-CASH-CREDIT-LIMIT-N\n                                               TO WS-EDIT-CURRENCY-9-2-F\n              MOVE WS-EDIT-CURRENCY-9-2-F      TO ACSHLIMO OF CACTUPAO\n\n              MOVE ACUP-OLD-CURR-CYC-CREDIT-N  TO WS-EDIT-CURRENCY-9-2-F\n              MOVE WS-EDIT-CURRENCY-9-2-F      TO ACRCYCRO OF CACTUPAO\n\n              MOVE ACUP-OLD-CURR-CYC-DEBIT-N   TO WS-EDIT-CURRENCY-9-2-F\n              MOVE WS-EDIT-CURRENCY-9-2-F      TO ACRCYDBO OF CACTUPAO\n\n              MOVE ACUP-OLD-OPEN-YEAR          TO OPNYEARO OF CACTUPAO\n              MOVE ACUP-OLD-OPEN-MON           TO OPNMONO  OF CACTUPAO\n              MOVE ACUP-OLD-OPEN-DAY           TO OPNDAYO  OF CACTUPAO\n\n              MOVE ACUP-OLD-EXP-YEAR           TO EXPYEARO OF CACTUPAO\n              MOVE ACUP-OLD-EXP-MON            TO EXPMONO  OF CACTUPAO\n              MOVE ACUP-OLD-EXP-DAY            TO EXPDAYO  OF CACTUPAO\n\n              MOVE ACUP-OLD-REISSUE-YEAR       TO RISYEARO OF CACTUPAO\n              MOVE ACUP-OLD-REISSUE-MON        TO RISMONO  OF CACTUPAO\n              MOVE ACUP-OLD-REISSUE-DAY        TO RISDAYO  OF CACTUPAO\n              MOVE ACUP-OLD-GROUP-ID           TO AADDGRPO OF CACTUPAO\n           END-IF\n\n           IF FOUND-CUST-IN-MASTER\n              MOVE ACUP-OLD-CUST-ID-X          TO ACSTNUMO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-SSN-X(1:3)    TO ACTSSN1O OF CACTUPAO\n              MOVE ACUP-OLD-CUST-SSN-X(4:2)    TO ACTSSN2O OF CACTUPAO\n              MOVE ACUP-OLD-CUST-SSN-X(6:4)    TO ACTSSN3O OF CACTUPAO\n              MOVE ACUP-OLD-CUST-FICO-SCORE-X  TO ACSTFCOO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-DOB-YEAR      TO DOBYEARO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-DOB-MON       TO DOBMONO  OF CACTUPAO\n              MOVE ACUP-OLD-CUST-DOB-DAY       TO DOBDAYO  OF CACTUPAO\n              MOVE ACUP-OLD-CUST-FIRST-NAME    TO ACSFNAMO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-MIDDLE-NAME   TO ACSMNAMO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-LAST-NAME     TO ACSLNAMO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-ADDR-LINE-1   TO ACSADL1O OF CACTUPAO\n              MOVE ACUP-OLD-CUST-ADDR-LINE-2   TO ACSADL2O OF CACTUPAO\n              MOVE ACUP-OLD-CUST-ADDR-LINE-3   TO ACSCITYO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-ADDR-STATE-CD TO ACSSTTEO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-ADDR-ZIP      TO ACSZIPCO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-ADDR-COUNTRY-CD\n                                               TO ACSCTRYO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-PHONE-NUM-1(2:3)\n                                               TO ACSPH1AO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-PHONE-NUM-1(6:3)\n                                               TO ACSPH1BO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-PHONE-NUM-1(10:4)\n                                               TO ACSPH1CO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-PHONE-NUM-2(2:3)\n                                               TO ACSPH2AO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-PHONE-NUM-2(6:3)\n                                               TO ACSPH2BO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-PHONE-NUM-2(10:4)\n                                               TO ACSPH2CO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-GOVT-ISSUED-ID\n                                               TO ACSGOVTO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-EFT-ACCOUNT-ID\n                                               TO ACSEFTCO OF CACTUPAO\n              MOVE ACUP-OLD-CUST-PRI-HOLDER-IND\n                                               TO ACSPFLGO OF CACTUPAO\n           END-IF\n           .\n</code></pre>"},{"location":"COACTUPC.html#3202-show-original-values-exit","title":"3202-SHOW-ORIGINAL-VALUES-EXIT","text":"<p>This paragraph serves as an exit point for the 3202-SHOW-ORIGINAL-VALUES routine. It provides a clean termination point for the routine that displays the original account and customer values to the user before modifications are made.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#3203-show-updated-values","title":"3203-SHOW-UPDATED-VALUES","text":"<p>This paragraph populates the account update display screen (CACTUPAO) with the new values that have been entered or modified by the user. It transfers data from the working storage fields (ACUP-NEW-*) to the corresponding screen fields. The paragraph handles different data types appropriately:</p> <p>For monetary values (credit limits, balances), it checks validation flags first and either formats the numeric values using a currency editing field (WS-EDIT-CURRENCY-9-2-F) or displays the raw input if validation failed. This ensures proper display formatting while preserving invalid entries for correction.</p> <p>The paragraph populates all account information including status, credit limits, balances, cycle credits/debits, and important dates (open date, expiration date, reissue date). It also transfers all customer information including identification details (customer ID, SSN, FICO score), personal information (name, date of birth), address information (multiple address lines, city, state, zip, country), contact information (phone numbers), and account relationship data (government ID, EFT account, primary holder indicator).</p> Code <pre><code>MOVE ACUP-NEW-ACTIVE-STATUS         TO ACSTTUSO OF CACTUPAO\n\n           IF FLG-CRED-LIMIT-ISVALID\n              MOVE ACUP-NEW-CREDIT-LIMIT-N     TO WS-EDIT-CURRENCY-9-2-F\n              MOVE WS-EDIT-CURRENCY-9-2-F      TO ACRDLIMO OF CACTUPAO\n           ELSE\n              MOVE ACUP-NEW-CREDIT-LIMIT-X     TO ACRDLIMO OF CACTUPAO\n           END-IF\n\n           IF FLG-CASH-CREDIT-LIMIT-ISVALID\n              MOVE ACUP-NEW-CASH-CREDIT-LIMIT-N\n                                               TO WS-EDIT-CURRENCY-9-2-F\n              MOVE WS-EDIT-CURRENCY-9-2-F      TO ACSHLIMO OF CACTUPAO\n           ELSE\n              MOVE ACUP-NEW-CASH-CREDIT-LIMIT-X\n                                               TO ACSHLIMO OF CACTUPAO\n           END-IF\n\n           IF FLG-CURR-BAL-ISVALID\n              MOVE ACUP-NEW-CURR-BAL-N         TO WS-EDIT-CURRENCY-9-2-F\n              MOVE WS-EDIT-CURRENCY-9-2-F      TO ACURBALO OF CACTUPAO\n           ELSE\n              MOVE ACUP-NEW-CURR-BAL-X         TO ACURBALO OF CACTUPAO\n           END-IF\n\n           IF FLG-CURR-CYC-CREDIT-ISVALID\n              MOVE ACUP-NEW-CURR-CYC-CREDIT-N  TO WS-EDIT-CURRENCY-9-2-F\n              MOVE WS-EDIT-CURRENCY-9-2-F      TO ACRCYCRO OF CACTUPAO\n           ELSE\n              MOVE ACUP-NEW-CURR-CYC-CREDIT-X  TO ACRCYCRO OF CACTUPAO\n           END-IF\n\n           IF FLG-CURR-CYC-DEBIT-ISVALID\n              MOVE ACUP-NEW-CURR-CYC-DEBIT-N   TO WS-EDIT-CURRENCY-9-2-F\n              MOVE WS-EDIT-CURRENCY-9-2-F      TO ACRCYDBO OF CACTUPAO\n           ELSE\n              MOVE ACUP-NEW-CURR-CYC-DEBIT-X   TO ACRCYDBO OF CACTUPAO\n           END-IF\n\n           MOVE ACUP-NEW-OPEN-YEAR             TO OPNYEARO OF CACTUPAO\n           MOVE ACUP-NEW-OPEN-MON              TO OPNMONO  OF CACTUPAO\n           MOVE ACUP-NEW-OPEN-DAY              TO OPNDAYO  OF CACTUPAO\n\n           MOVE ACUP-NEW-EXP-YEAR              TO EXPYEARO OF CACTUPAO\n           MOVE ACUP-NEW-EXP-MON               TO EXPMONO  OF CACTUPAO\n           MOVE ACUP-NEW-EXP-DAY               TO EXPDAYO  OF CACTUPAO\n           MOVE ACUP-NEW-REISSUE-YEAR          TO RISYEARO OF CACTUPAO\n           MOVE ACUP-NEW-REISSUE-MON           TO RISMONO  OF CACTUPAO\n           MOVE ACUP-NEW-REISSUE-DAY           TO RISDAYO  OF CACTUPAO\n           MOVE ACUP-NEW-GROUP-ID              TO AADDGRPO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-ID-X             TO ACSTNUMO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-SSN-1            TO ACTSSN1O OF CACTUPAO\n           MOVE ACUP-NEW-CUST-SSN-2            TO ACTSSN2O OF CACTUPAO\n           MOVE ACUP-NEW-CUST-SSN-3            TO ACTSSN3O OF CACTUPAO\n           MOVE ACUP-NEW-CUST-FICO-SCORE-X     TO ACSTFCOO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-DOB-YEAR         TO DOBYEARO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-DOB-MON          TO DOBMONO  OF CACTUPAO\n           MOVE ACUP-NEW-CUST-DOB-DAY          TO DOBDAYO  OF CACTUPAO\n           MOVE ACUP-NEW-CUST-FIRST-NAME       TO ACSFNAMO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-MIDDLE-NAME      TO ACSMNAMO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-LAST-NAME        TO ACSLNAMO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-ADDR-LINE-1      TO ACSADL1O OF CACTUPAO\n           MOVE ACUP-NEW-CUST-ADDR-LINE-2      TO ACSADL2O OF CACTUPAO\n           MOVE ACUP-NEW-CUST-ADDR-LINE-3      TO ACSCITYO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-ADDR-STATE-CD    TO ACSSTTEO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-ADDR-ZIP         TO ACSZIPCO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-ADDR-COUNTRY-CD  TO ACSCTRYO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-PHONE-NUM-1A     TO ACSPH1AO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-PHONE-NUM-1B     TO ACSPH1BO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-PHONE-NUM-1C     TO ACSPH1CO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-PHONE-NUM-2A     TO ACSPH2AO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-PHONE-NUM-2B     TO ACSPH2BO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-PHONE-NUM-2C     TO ACSPH2CO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-GOVT-ISSUED-ID   TO ACSGOVTO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-EFT-ACCOUNT-ID   TO ACSEFTCO OF CACTUPAO\n           MOVE ACUP-NEW-CUST-PRI-HOLDER-IND   TO ACSPFLGO OF CACTUPAO\n\n           .\n</code></pre>"},{"location":"COACTUPC.html#3203-show-updated-values-exit","title":"3203-SHOW-UPDATED-VALUES-EXIT","text":"<p>This paragraph serves as an exit point for the 3203-SHOW-UPDATED-VALUES routine. It provides a clean termination point for the routine that displays updated account and customer values to the user after modifications have been made but before they are committed to the database.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#3250-setup-infomsg","title":"3250-SETUP-INFOMSG","text":"<p>This paragraph sets up the appropriate information message to display to the user based on the current state of the account update process. It uses an EVALUATE statement to determine which message to display according to where the user is in the workflow - whether they need to enter search criteria, make changes to account details, confirm changes, or receive feedback about the success or failure of an update operation. After determining the appropriate message type, it moves the selected message to the output fields on the CACTUPAO screen. The paragraph handles all possible states of the transaction flow, ensuring the user receives relevant guidance or feedback at each step of the process.</p> Code <pre><code>*    SETUP INFORMATION MESSAGE\n           EVALUATE TRUE\n               WHEN CDEMO-PGM-ENTER\n                    SET  PROMPT-FOR-SEARCH-KEYS TO TRUE\n               WHEN ACUP-DETAILS-NOT-FETCHED\n                   SET PROMPT-FOR-SEARCH-KEYS      TO TRUE\n               WHEN ACUP-SHOW-DETAILS\n                    SET PROMPT-FOR-CHANGES         TO TRUE\n               WHEN ACUP-CHANGES-NOT-OK\n                    SET PROMPT-FOR-CHANGES         TO TRUE\n               WHEN ACUP-CHANGES-OK-NOT-CONFIRMED\n                    SET PROMPT-FOR-CONFIRMATION    TO TRUE\n               WHEN ACUP-CHANGES-OKAYED-AND-DONE\n                    SET CONFIRM-UPDATE-SUCCESS     TO TRUE\n\n               WHEN ACUP-CHANGES-OKAYED-LOCK-ERROR\n                    SET INFORM-FAILURE             TO TRUE\n               WHEN ACUP-CHANGES-OKAYED-BUT-FAILED\n                    SET INFORM-FAILURE             TO TRUE\n               WHEN WS-NO-INFO-MESSAGE\n                   SET PROMPT-FOR-SEARCH-KEYS      TO TRUE\n           END-EVALUATE\n\n           MOVE WS-INFO-MSG                    TO INFOMSGO OF CACTUPAO\n\n           MOVE WS-RETURN-MSG                  TO ERRMSGO OF CACTUPAO\n           .\n</code></pre>"},{"location":"COACTUPC.html#3250-setup-infomsg-exit","title":"3250-SETUP-INFOMSG-EXIT","text":"<p>This paragraph serves as an exit point for the SETUP-INFOMSG routine in the account update process. It provides a structured way to return control to the calling routine after information messages have been prepared for display to the user.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#3300-setup-screen-attrs","title":"3300-SETUP-SCREEN-ATTRS","text":"<p>This paragraph manages the screen attributes for the account update interface based on the current transaction state. It first protects all fields, then selectively unprotects fields depending on the context (whether account details have been fetched, changes are pending, etc.). The bulk of the code handles cursor positioning logic, which determines where the cursor should be placed on the screen based on validation errors or the current field being edited. The cursor is positioned on the first field with an error, following a top-to-bottom, left-to-right screen order.</p> <p>The paragraph also handles visual feedback by setting color attributes for fields - highlighting invalid entries in red and marking required fields with an asterisk when they're blank. It uses a reusable copybook (CSSETATY) with the REPLACING option to efficiently apply consistent attribute handling across numerous fields including dates, monetary amounts, personal information, and contact details. This approach ensures consistent user experience while reducing code duplication across the many editable fields in the account update screen.</p> Code <pre><code>*    PROTECT ALL FIELDS\n           PERFORM 3310-PROTECT-ALL-ATTRS\n              THRU 3310-PROTECT-ALL-ATTRS-EXIT\n\n      *    UNPROTECT BASED ON CONTEXT\n           EVALUATE TRUE\n              WHEN ACUP-DETAILS-NOT-FETCHED\n      *            Make Account Id editable\n                   MOVE DFHBMFSE      TO ACCTSIDA OF CACTUPAI\n              WHEN  ACUP-SHOW-DETAILS\n              WHEN  ACUP-CHANGES-NOT-OK\n                   PERFORM 3320-UNPROTECT-FEW-ATTRS\n                      THRU 3320-UNPROTECT-FEW-ATTRS-EXIT\n              WHEN ACUP-CHANGES-OK-NOT-CONFIRMED\n              WHEN ACUP-CHANGES-OKAYED-AND-DONE\n                   CONTINUE\n              WHEN OTHER\n                   MOVE DFHBMFSE      TO ACCTSIDA OF CACTUPAI\n           END-EVALUATE\n\n      *    POSITION CURSOR - ORDER BASED ON SCREEN LOCATION\n           EVALUATE TRUE\n              WHEN FOUND-ACCOUNT-DATA\n              WHEN NO-CHANGES-DETECTED\n                  MOVE -1              TO ACSTTUSL OF CACTUPAI\n              WHEN FLG-ACCTFILTER-NOT-OK\n              WHEN FLG-ACCTFILTER-BLANK\n                   MOVE -1             TO ACCTSIDL OF CACTUPAI\n      *    Account Status\n              WHEN FLG-ACCT-STATUS-NOT-OK\n              WHEN FLG-ACCT-STATUS-BLANK\n                  MOVE -1              TO ACSTTUSL OF CACTUPAI\n      *    Open Year\n              WHEN FLG-OPEN-YEAR-NOT-OK\n              WHEN FLG-OPEN-YEAR-BLANK\n                  MOVE -1              TO OPNYEARL OF CACTUPAI\n      *    Open Month\n              WHEN FLG-OPEN-MONTH-NOT-OK\n              WHEN FLG-OPEN-MONTH-BLANK\n                  MOVE -1              TO OPNMONL  OF CACTUPAI\n      *    Open Day\n              WHEN FLG-OPEN-DAY-NOT-OK\n              WHEN FLG-OPEN-DAY-BLANK\n                  MOVE -1              TO OPNDAYL  OF CACTUPAI\n      *    Credit Limit\n              WHEN FLG-CRED-LIMIT-NOT-OK\n              WHEN FLG-CRED-LIMIT-BLANK\n                  MOVE -1              TO ACRDLIML OF CACTUPAI\n      *    Expiry Year\n              WHEN FLG-EXPIRY-YEAR-NOT-OK\n              WHEN FLG-EXPIRY-YEAR-BLANK\n                  MOVE -1              TO EXPYEARL OF CACTUPAI\n      *    Expiry Month\n              WHEN FLG-EXPIRY-MONTH-NOT-OK\n              WHEN FLG-EXPIRY-MONTH-BLANK\n                  MOVE -1              TO EXPMONL  OF CACTUPAI\n      *    Expiry Day\n              WHEN FLG-EXPIRY-DAY-NOT-OK\n              WHEN FLG-EXPIRY-DAY-BLANK\n                  MOVE -1              TO EXPDAYL  OF CACTUPAI\n      *    Cash credit limit\n              WHEN FLG-CASH-CREDIT-LIMIT-NOT-OK\n              WHEN FLG-CASH-CREDIT-LIMIT-BLANK\n                  MOVE -1              TO ACSHLIML OF CACTUPAI\n      *    Reissue Year\n              WHEN FLG-REISSUE-YEAR-NOT-OK\n              WHEN FLG-REISSUE-YEAR-BLANK\n                  MOVE -1              TO RISYEARL OF CACTUPAI\n      *    Expiry Month\n              WHEN FLG-REISSUE-MONTH-NOT-OK\n              WHEN FLG-REISSUE-MONTH-BLANK\n                  MOVE -1              TO RISMONL  OF CACTUPAI\n      *    Expiry Day\n              WHEN FLG-REISSUE-DAY-NOT-OK\n              WHEN FLG-REISSUE-DAY-BLANK\n                  MOVE -1              TO RISDAYL  OF CACTUPAI\n\n      *    Current Balance\n              WHEN FLG-CURR-BAL-NOT-OK\n              WHEN FLG-CURR-BAL-BLANK\n                  MOVE -1              TO ACURBALL OF CACTUPAI\n      *    Current Cycle Credit\n              WHEN FLG-CURR-CYC-CREDIT-NOT-OK\n              WHEN FLG-CURR-CYC-CREDIT-BLANK\n                  MOVE -1              TO ACRCYCRL OF CACTUPAI\n      *    Current Cycle Debit\n              WHEN FLG-CURR-CYC-DEBIT-NOT-OK\n              WHEN FLG-CURR-CYC-DEBIT-BLANK\n                  MOVE -1              TO ACRCYDBL OF CACTUPAI\n      *    SSN Part 1\n              WHEN FLG-EDIT-US-SSN-PART1-NOT-OK\n              WHEN FLG-EDIT-US-SSN-PART1-BLANK\n                  MOVE -1              TO ACTSSN1L OF CACTUPAI\n      *    SSN Part 2\n              WHEN FLG-EDIT-US-SSN-PART2-NOT-OK\n              WHEN FLG-EDIT-US-SSN-PART2-BLANK\n                  MOVE -1              TO ACTSSN2L  OF CACTUPAI\n      *    SSN Part 3\n              WHEN FLG-EDIT-US-SSN-PART3-NOT-OK\n              WHEN FLG-EDIT-US-SSN-PART3-BLANK\n                  MOVE -1              TO ACTSSN3L  OF CACTUPAI\n      *    Date of Birth Year\n              WHEN FLG-DT-OF-BIRTH-YEAR-NOT-OK\n              WHEN FLG-DT-OF-BIRTH-YEAR-BLANK\n                  MOVE -1              TO DOBYEARL OF CACTUPAI\n      *    Date of Birth Month\n              WHEN FLG-DT-OF-BIRTH-MONTH-NOT-OK\n              WHEN FLG-DT-OF-BIRTH-MONTH-BLANK\n                  MOVE -1              TO DOBMONL  OF CACTUPAI\n      *    Date of Birth Day\n              WHEN FLG-DT-OF-BIRTH-DAY-NOT-OK\n              WHEN FLG-DT-OF-BIRTH-DAY-BLANK\n                  MOVE -1              TO DOBDAYL  OF CACTUPAI\n      *    FICO Score\n              WHEN FLG-FICO-SCORE-NOT-OK\n              WHEN FLG-FICO-SCORE-BLANK\n                  MOVE -1              TO ACSTFCOL OF CACTUPAI\n      *    First Name\n              WHEN FLG-FIRST-NAME-NOT-OK\n              WHEN FLG-FIRST-NAME-BLANK\n                  MOVE -1              TO ACSFNAML OF CACTUPAI\n      *    Middle Name\n              WHEN FLG-MIDDLE-NAME-NOT-OK\n                  MOVE -1              TO ACSMNAML OF CACTUPAI\n      *    Last Name\n              WHEN FLG-LAST-NAME-NOT-OK\n              WHEN FLG-LAST-NAME-BLANK\n                  MOVE -1              TO ACSLNAML OF CACTUPAI\n      *    Address Line 1\n              WHEN FLG-ADDRESS-LINE-1-NOT-OK\n              WHEN FLG-ADDRESS-LINE-1-BLANK\n                  MOVE -1              TO ACSADL1L OF CACTUPAI\n      *    State (appears next to Line 2 on screen before city)\n              WHEN FLG-STATE-NOT-OK\n              WHEN FLG-STATE-BLANK\n                  MOVE -1              TO ACSSTTEL OF CACTUPAI\n      *    Address Line 2 has no edits\n      *    Zip code\n              WHEN FLG-ZIPCODE-NOT-OK\n              WHEN FLG-ZIPCODE-BLANK\n                  MOVE -1              TO ACSZIPCL OF CACTUPAI\n      *    Address Line 3 (City)\n              WHEN FLG-CITY-NOT-OK\n              WHEN FLG-CITY-BLANK\n                  MOVE -1              TO ACSCITYL OF CACTUPAI\n      *    Country edits.\n              WHEN FLG-COUNTRY-NOT-OK\n              WHEN FLG-COUNTRY-BLANK\n                  MOVE -1              TO ACSCTRYL OF CACTUPAI\n      *    Phone 1\n              WHEN FLG-PHONE-NUM-1A-NOT-OK\n              WHEN FLG-PHONE-NUM-1A-BLANK\n                  MOVE -1              TO ACSPH1AL OF CACTUPAI\n              WHEN FLG-PHONE-NUM-1B-NOT-OK\n              WHEN FLG-PHONE-NUM-1B-BLANK\n                  MOVE -1              TO ACSPH1BL OF CACTUPAI\n              WHEN FLG-PHONE-NUM-1C-NOT-OK\n              WHEN FLG-PHONE-NUM-1C-BLANK\n                  MOVE -1              TO ACSPH1CL OF CACTUPAI\n      *    Phone 2\n              WHEN FLG-PHONE-NUM-2A-NOT-OK\n              WHEN FLG-PHONE-NUM-2A-BLANK\n                  MOVE -1              TO ACSPH2AL OF CACTUPAI\n              WHEN FLG-PHONE-NUM-2B-NOT-OK\n              WHEN FLG-PHONE-NUM-2B-BLANK\n                  MOVE -1              TO ACSPH2BL OF CACTUPAI\n              WHEN FLG-PHONE-NUM-2C-NOT-OK\n              WHEN FLG-PHONE-NUM-2C-BLANK\n                  MOVE -1              TO ACSPH2CL OF CACTUPAI\n      *    EFT Account Id\n              WHEN FLG-EFT-ACCOUNT-ID-NOT-OK\n              WHEN FLG-EFT-ACCOUNT-ID-BLANK\n                  MOVE -1              TO ACSEFTCL OF CACTUPAI\n      *    Primary Card Holder\n              WHEN FLG-PRI-CARDHOLDER-NOT-OK\n              WHEN FLG-PRI-CARDHOLDER-BLANK\n                  MOVE -1              TO ACSPFLGL OF CACTUPAI\n              WHEN OTHER\n                  MOVE -1              TO ACCTSIDL OF CACTUPAI\n            END-EVALUATE\n\n\n      *    SETUP COLOR\n           IF CDEMO-LAST-MAPSET   EQUAL LIT-CCLISTMAPSET\n              MOVE DFHDFCOL            TO ACCTSIDC OF CACTUPAO\n           END-IF\n\n      *    Account Filter\n           IF FLG-ACCTFILTER-NOT-OK\n              MOVE DFHRED              TO ACCTSIDC OF CACTUPAO\n           END-IF\n\n           IF  FLG-ACCTFILTER-BLANK\n           AND CDEMO-PGM-REENTER\n               MOVE '*'                TO ACCTSIDO OF CACTUPAO\n               MOVE DFHRED             TO ACCTSIDC OF CACTUPAO\n           END-IF\n\n           IF ACUP-DETAILS-NOT-FETCHED\n           OR FLG-ACCTFILTER-BLANK\n           OR FLG-ACCTFILTER-NOT-OK\n              GO TO 3300-SETUP-SCREEN-ATTRS-EXIT\n           ELSE\n              CONTINUE\n           END-IF\n\n      ******************************************************************\n      *    Using Copy replacing to set attribs for remaining vars\n      *    Write specific code only if rules differ\n      ******************************************************************\n      *    IF (FLG-ACCT-STATUS-NOT-OK\n      *    OR  FLG-ACCT-STATUS-BLANK)\n      *    AND CDEMO-PGM-REENTER\n      *        MOVE DFHRED             TO ACSTTUSC OF CACTUPAO\n      *        IF  FLG-ACCT-STATUS-BLANK\n      *            MOVE '*'            TO ACSTTUSO OF CACTUPAO\n      *        END-IF\n      *    END-IF\n\n      *    Account Status\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==ACCT-STATUS==\n             ==(SCRNVAR2)== BY ==ACSTTUS==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Open Year\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==OPEN-YEAR==\n             ==(SCRNVAR2)== BY ==OPNYEAR==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Open Month\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==OPEN-MONTH==\n             ==(SCRNVAR2)== BY ==OPNMON==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Open Day\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==OPEN-DAY==\n             ==(SCRNVAR2)== BY ==OPNDAY==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Credit Limit\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==CRED-LIMIT==\n             ==(SCRNVAR2)== BY ==ACRDLIM==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Expiry Year\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==EXPIRY-YEAR==\n             ==(SCRNVAR2)== BY ==EXPYEAR==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Expiry Month\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==EXPIRY-MONTH==\n             ==(SCRNVAR2)== BY ==EXPMON==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Expiry Day\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==EXPIRY-DAY==\n             ==(SCRNVAR2)== BY ==EXPDAY==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Cash Credit Limit\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==CASH-CREDIT-LIMIT==\n             ==(SCRNVAR2)== BY ==ACSHLIM==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Reissue Year\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==REISSUE-YEAR==\n             ==(SCRNVAR2)== BY ==RISYEAR==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Reissue Month\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==REISSUE-MONTH==\n             ==(SCRNVAR2)== BY ==RISMON==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Reissue Day\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==REISSUE-DAY==\n             ==(SCRNVAR2)== BY ==RISDAY==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Current Balance\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==CURR-BAL==\n             ==(SCRNVAR2)== BY ==ACURBAL==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Current Cycle Credit\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==CURR-CYC-CREDIT==\n             ==(SCRNVAR2)== BY ==ACRCYCR==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Current Cycle Debit\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==CURR-CYC-DEBIT==\n             ==(SCRNVAR2)== BY ==ACRCYDB==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    SSN Part 1\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==EDIT-US-SSN-PART1==\n             ==(SCRNVAR2)== BY ==ACTSSN1==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    SSN Part 2\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==EDIT-US-SSN-PART2==\n             ==(SCRNVAR2)== BY ==ACTSSN2==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    SSN Part 3\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==EDIT-US-SSN-PART3==\n             ==(SCRNVAR2)== BY ==ACTSSN3==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Date of Birth Year\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==DT-OF-BIRTH-YEAR==\n             ==(SCRNVAR2)== BY ==DOBYEAR==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Date of Birth Month\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==DT-OF-BIRTH-MONTH==\n             ==(SCRNVAR2)== BY ==DOBMON==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Date of Birth Day\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==DT-OF-BIRTH-DAY==\n             ==(SCRNVAR2)== BY ==DOBDAY==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    FICO Score\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==FICO-SCORE==\n             ==(SCRNVAR2)== BY ==ACSTFCO==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    First Name\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==FIRST-NAME==\n             ==(SCRNVAR2)== BY ==ACSFNAM==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Middle Name (no edits coded)\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==MIDDLE-NAME==\n             ==(SCRNVAR2)== BY ==ACSMNAM==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Last Name\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==LAST-NAME==\n             ==(SCRNVAR2)== BY ==ACSLNAM==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Address Line 1\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==ADDRESS-LINE-1==\n             ==(SCRNVAR2)== BY ==ACSADL1==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    State\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==STATE==\n             ==(SCRNVAR2)== BY ==ACSSTTE==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Address Line 2 (NO EDITS CODED AS YET)\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==ADDRESS-LINE-2==\n             ==(SCRNVAR2)== BY ==ACSADL2==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    State\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==ZIPCODE==\n             ==(SCRNVAR2)== BY ==ACSZIPC==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    City\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==CITY==\n             ==(SCRNVAR2)== BY ==ACSCITY==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Country\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==COUNTRY==\n             ==(SCRNVAR2)== BY ==ACSCTRY==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Phone 1 Area Code\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==PHONE-NUM-1A==\n             ==(SCRNVAR2)== BY ==ACSPH1A==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Phone 1 Prefix\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==PHONE-NUM-1B==\n             ==(SCRNVAR2)== BY ==ACSPH1B==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n      *    Phone 1 Line number\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==PHONE-NUM-1C==\n             ==(SCRNVAR2)== BY ==ACSPH1C==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Phone 2 Area Code\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==PHONE-NUM-2A==\n             ==(SCRNVAR2)== BY ==ACSPH2A==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n\n      *    Phone 2 Prefix\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==PHONE-NUM-2B==\n             ==(SCRNVAR2)== BY ==ACSPH2B==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n      *    Phone 2 Line number\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==PHONE-NUM-2C==\n             ==(SCRNVAR2)== BY ==ACSPH2C==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n      *    EFT Account Id\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==PRI-CARDHOLDER==\n             ==(SCRNVAR2)== BY ==ACSPFLG==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n      *    Primary Card Holder\n           COPY CSSETATY REPLACING\n             ==(TESTVAR1)== BY ==EFT-ACCOUNT-ID==\n             ==(SCRNVAR2)== BY ==ACSEFTC==\n             ==(MAPNAME3)== BY ==CACTUPA== .\n           .\n</code></pre>"},{"location":"COACTUPC.html#3300-setup-screen-attrs-exit","title":"3300-SETUP-SCREEN-ATTRS-EXIT","text":"<p>This paragraph serves as an exit point for the 3300-SETUP-SCREEN-ATTRS routine. It simply contains the EXIT statement followed by a period, which returns control to the calling routine after the screen attributes setup process has completed.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#3310-protect-all-attrs","title":"3310-PROTECT-ALL-ATTRS","text":"<p>This paragraph sets all input fields on the account update screen (CACTUPAI) to protected status by applying the DFHBMPRF attribute. This prevents users from modifying any data fields on the screen, effectively making the entire form read-only. The fields being protected include account identification, status, financial limits, balance information, various dates (opening, expiration, risk assessment), customer personal information (SSN, name components), address details (street, city, state, zip), phone numbers, and various flags and indicators. This paragraph is likely called when the system needs to display account information without allowing modifications, such as during a view-only mode or after a transaction has been completed.</p> Code <pre><code>MOVE DFHBMPRF              TO ACCTSIDA OF CACTUPAI\n                                         ACSTTUSA OF CACTUPAI\n      *Account Limits\n                                         ACRDLIMA OF CACTUPAI\n                                         ACSHLIMA OF CACTUPAI\n                                         ACURBALA OF CACTUPAI\n                                         ACRCYCRA OF CACTUPAI\n                                         ACRCYDBA OF CACTUPAI\n      *Account dates\n                                         OPNYEARA OF CACTUPAI\n                                         OPNMONA  OF CACTUPAI\n                                         OPNDAYA  OF CACTUPAI\n                                         EXPYEARA OF CACTUPAI\n                                         EXPMONA  OF CACTUPAI\n                                         EXPDAYA  OF CACTUPAI\n                                         RISYEARA OF CACTUPAI\n                                         RISMONA  OF CACTUPAI\n                                         RISDAYA  OF CACTUPAI\n\n                                         AADDGRPA OF CACTUPAI\n      *Customer data\n                                         ACSTNUMA OF CACTUPAI\n                                         ACTSSN1A OF CACTUPAI\n                                         ACTSSN2A OF CACTUPAI\n                                         ACTSSN3A OF CACTUPAI\n                                         ACSTFCOA OF CACTUPAI\n      *Date of Birth\n                                         DOBYEARA OF CACTUPAI\n                                         DOBMONA  OF CACTUPAI\n                                         DOBDAYA  OF CACTUPAI\n\n                                         ACSFNAMA OF CACTUPAI\n                                         ACSMNAMA OF CACTUPAI\n                                         ACSLNAMA OF CACTUPAI\n      *Address\n                                         ACSADL1A OF CACTUPAI\n                                         ACSADL2A OF CACTUPAI\n                                         ACSCITYA OF CACTUPAI\n                                         ACSSTTEA OF CACTUPAI\n                                         ACSZIPCA OF CACTUPAI\n                                         ACSCTRYA OF CACTUPAI\n\n                                         ACSPH1AA OF CACTUPAI\n                                         ACSPH1BA OF CACTUPAI\n                                         ACSPH1CA OF CACTUPAI\n                                         ACSPH2AA OF CACTUPAI\n                                         ACSPH2BA OF CACTUPAI\n                                         ACSPH2CA OF CACTUPAI\n\n                                         ACSGOVTA OF CACTUPAI\n                                         ACSEFTCA OF CACTUPAI\n                                         ACSPFLGA OF CACTUPAI\n                                         INFOMSGA OF CACTUPAI\n           .\n</code></pre>"},{"location":"COACTUPC.html#3310-protect-all-attrs-exit","title":"3310-PROTECT-ALL-ATTRS-EXIT","text":"<p>This paragraph serves as an exit point for the PROTECT-ALL-ATTRS routine in the account update program. It provides a clean termination point for the routine that handles attribute protection for screen fields, allowing the program flow to return to the calling section after the protection logic has been applied.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#3320-unprotect-few-attrs","title":"3320-UNPROTECT-FEW-ATTRS","text":"<p>This paragraph configures the input fields on the account update screen by setting specific attribute properties. It makes certain fields modifiable by applying the DFHBMFSE attribute (Field Selection, Extended highlighting) to various account and customer data fields. The paragraph enables user editing for account status, financial limits, balance fields, various date components (open date, expiry date, reissue date, date of birth), and customer information including SSN, name fields, address components, and phone numbers. It also protects certain fields from modification by applying the DFHBMPRF attribute (Protected Field) to the account number, country code (which is fixed as USA due to USA-specific validation logic), and the information message field. This paragraph essentially prepares the screen for user input by controlling which fields can be modified during the account update process.</p> Code <pre><code>MOVE DFHBMFSE              TO ACSTTUSA OF CACTUPAI\n      *Account Limits\n                                         ACRDLIMA OF CACTUPAI\n                                         ACSHLIMA OF CACTUPAI\n                                         ACURBALA OF CACTUPAI\n                                         ACRCYCRA OF CACTUPAI\n                                         ACRCYDBA OF CACTUPAI\n      *Account dates\n      *Open Date\n                                         OPNYEARA OF CACTUPAI\n                                         OPNMONA  OF CACTUPAI\n                                         OPNDAYA  OF CACTUPAI\n      *Expiry date\n                                         EXPYEARA OF CACTUPAI\n                                         EXPMONA  OF CACTUPAI\n                                         EXPDAYA  OF CACTUPAI\n      *Reissue date\n                                         RISYEARA OF CACTUPAI\n                                         RISMONA  OF CACTUPAI\n                                         RISDAYA  OF CACTUPAI\n      *Date of Birth\n                                         DOBYEARA OF CACTUPAI\n                                         DOBMONA  OF CACTUPAI\n                                         DOBDAYA  OF CACTUPAI\n\n\n\n                                         AADDGRPA OF CACTUPAI\n      *Customer data\n            MOVE DFHBMPRF            TO  ACSTNUMA OF CACTUPAI\n            MOVE DFHBMFSE            TO  ACTSSN1A OF CACTUPAI         \n                                         ACTSSN2A OF CACTUPAI\n                                         ACTSSN3A OF CACTUPAI\n                                         ACSTFCOA OF CACTUPAI\n\n                                         ACSFNAMA OF CACTUPAI\n                                         ACSMNAMA OF CACTUPAI\n                                         ACSLNAMA OF CACTUPAI\n      *Address\n                                         ACSADL1A OF CACTUPAI\n                                         ACSADL2A OF CACTUPAI\n                                         ACSCITYA OF CACTUPAI\n                                         ACSSTTEA OF CACTUPAI\n                                         ACSZIPCA OF CACTUPAI\n      *Since most of the edits are USA specific protected country\n           MOVE DFHBMPRF              TO ACSCTRYA OF CACTUPAI\n\n           MOVE DFHBMFSE              TO ACSPH1AA OF CACTUPAI\n                                         ACSPH1BA OF CACTUPAI\n                                         ACSPH1CA OF CACTUPAI\n\n           MOVE DFHBMFSE              TO ACSPH2AA OF CACTUPAI\n                                         ACSPH2BA OF CACTUPAI\n                                         ACSPH2CA OF CACTUPAI\n\n                                         ACSGOVTA OF CACTUPAI\n                                         ACSEFTCA OF CACTUPAI\n                                         ACSPFLGA OF CACTUPAI\n           MOVE DFHBMPRF              TO INFOMSGA OF CACTUPAI\n           .\n</code></pre>"},{"location":"COACTUPC.html#3320-unprotect-few-attrs-exit","title":"3320-UNPROTECT-FEW-ATTRS-EXIT","text":"<p>This paragraph serves as an exit point for the 3320-UNPROTECT-FEW-ATTRS routine in the account update process. It provides a clean termination point for the routine that selectively enables specific fields for user modification on the account update screen.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#3390-setup-infomsg-attrs","title":"3390-SETUP-INFOMSG-ATTRS","text":"<p>This paragraph sets the visual attributes for various fields on the account update screen (CACTUPAI). It controls the display characteristics of the information message area based on whether a message needs to be shown, highlighting it when a message is present. Additionally, it manages the visibility of function key prompts based on the current state of the transaction - specifically highlighting PF12 when changes have been made but not yet confirmed, and highlighting both PF5 and PF12 when user confirmation is required. These visual cues help guide the user through the account update workflow by drawing attention to relevant action options at each step.</p> Code <pre><code>IF  WS-NO-INFO-MESSAGE\n               MOVE DFHBMDAR           TO INFOMSGA OF CACTUPAI\n           ELSE\n               MOVE DFHBMASB           TO INFOMSGA OF CACTUPAI\n           END-IF\n\n           IF ACUP-CHANGES-MADE\n           AND NOT ACUP-CHANGES-OKAYED-AND-DONE\n               MOVE DFHBMASB           TO FKEY12A  OF CACTUPAI\n           END-IF\n\n           IF PROMPT-FOR-CONFIRMATION\n               MOVE DFHBMASB           TO FKEY05A  OF CACTUPAI\n               MOVE DFHBMASB           TO FKEY12A  OF CACTUPAI\n           END-IF\n\n           .\n</code></pre>"},{"location":"COACTUPC.html#3390-setup-infomsg-attrs-exit","title":"3390-SETUP-INFOMSG-ATTRS-EXIT","text":"<p>This paragraph serves as an exit point for the 3390-SETUP-INFOMSG-ATTRS routine in the account update program. It provides a clean termination point for the routine that sets up information message attributes, allowing the program flow to return to the calling section after the attribute setup is complete.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#3400-send-screen","title":"3400-SEND-SCREEN","text":"<p>This paragraph handles the display of the account update screen in the CICS environment. It first sets up the next map and mapset names using literal values, then issues a CICS SEND MAP command to display the screen to the user. The command sends the map defined in CCARD-NEXT-MAP from the CACTUPAO data area, positions the cursor appropriately, clears the screen (ERASE), and enables keyboard input (FREEKB). The response code from this operation is captured in WS-RESP-CD for error handling purposes.</p> Code <pre><code>MOVE LIT-THISMAPSET         TO CCARD-NEXT-MAPSET\n           MOVE LIT-THISMAP            TO CCARD-NEXT-MAP\n\n           EXEC CICS SEND MAP(CCARD-NEXT-MAP)\n                          MAPSET(CCARD-NEXT-MAPSET)\n                          FROM(CACTUPAO)\n                          CURSOR\n                          ERASE\n                          FREEKB\n                          RESP(WS-RESP-CD)\n           END-EXEC\n           .\n</code></pre>"},{"location":"COACTUPC.html#3400-send-screen-exit","title":"3400-SEND-SCREEN-EXIT","text":"<p>This paragraph serves as an exit point for the 3400-SEND-SCREEN routine in the account update program. It provides a clean termination point for the routine that handles screen display operations, allowing control to return to the calling section after the screen has been sent to the user.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#9000-read-acct","title":"9000-READ-ACCT","text":"<p>This paragraph retrieves and prepares account and customer data for the update process. It first initializes the old details structure and clears any information messages. Using the account ID from the communication area, it performs a series of data retrieval operations: first checking the card cross-reference file (9200-GETCARDXREF-BYACCT), then retrieving account data (9300-GETACCTDATA-BYACCT), and finally fetching the associated customer information (9400-GETCUSTDATA-BYCUST). The process exits early if any of these lookups fail. When all data is successfully retrieved, it stores the fetched information in working storage (9500-STORE-FETCHED-DATA) for subsequent processing in the update workflow.</p> Code <pre><code>INITIALIZE ACUP-OLD-DETAILS\n\n           SET  WS-NO-INFO-MESSAGE      TO TRUE\n\n           MOVE CC-ACCT-ID              TO ACUP-OLD-ACCT-ID\n                                           WS-CARD-RID-ACCT-ID\n\n           PERFORM 9200-GETCARDXREF-BYACCT\n              THRU 9200-GETCARDXREF-BYACCT-EXIT\n\n           IF FLG-ACCTFILTER-NOT-OK\n              GO TO 9000-READ-ACCT-EXIT\n           END-IF\n\n           PERFORM 9300-GETACCTDATA-BYACCT\n              THRU 9300-GETACCTDATA-BYACCT-EXIT\n\n           IF DID-NOT-FIND-ACCT-IN-ACCTDAT\n              GO TO 9000-READ-ACCT-EXIT\n           END-IF\n\n           MOVE CDEMO-CUST-ID TO WS-CARD-RID-CUST-ID\n\n           PERFORM 9400-GETCUSTDATA-BYCUST\n              THRU 9400-GETCUSTDATA-BYCUST-EXIT\n\n           IF DID-NOT-FIND-CUST-IN-CUSTDAT\n              GO TO 9000-READ-ACCT-EXIT\n           END-IF\n\n\n\n           PERFORM 9500-STORE-FETCHED-DATA\n              THRU 9500-STORE-FETCHED-DATA-EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#9000-read-acct-exit","title":"9000-READ-ACCT-EXIT","text":"<p>This paragraph serves as an exit point for the account reading process in the COACTUPC program. It's a simple exit routine that provides a structured way to return control to the calling section after account data has been read from the database. This follows standard structured programming practices in COBOL where dedicated exit paragraphs are used to maintain clear control flow.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#9200-getcardxref-byacct","title":"9200-GETCARDXREF-BYACCT","text":"<p>This paragraph retrieves a card cross-reference record using the account ID as the key. It reads from the card cross-reference file through its alternate index path (ACCTID) and processes the result based on the response code. When successful, it extracts the customer ID and card number from the retrieved record. If the record is not found, it sets appropriate error flags and constructs a detailed error message indicating the account was not found in the cross-reference file. For other errors, it captures file operation details and sets a generic file error message. The paragraph is essential for linking account information to customer and card data during the account update process.</p> Code <pre><code>*    Read the Card file. Access via alternate index ACCTID\n      *\n           EXEC CICS READ\n                DATASET   (LIT-CARDXREFNAME-ACCT-PATH)\n                RIDFLD    (WS-CARD-RID-ACCT-ID-X)\n                KEYLENGTH (LENGTH OF WS-CARD-RID-ACCT-ID-X)\n                INTO      (CARD-XREF-RECORD)\n                LENGTH    (LENGTH OF CARD-XREF-RECORD)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                  MOVE XREF-CUST-ID               TO CDEMO-CUST-ID\n                  MOVE XREF-CARD-NUM              TO CDEMO-CARD-NUM\n               WHEN DFHRESP(NOTFND)\n                  SET INPUT-ERROR                 TO TRUE\n                  SET FLG-ACCTFILTER-NOT-OK       TO TRUE\n                  IF WS-RETURN-MSG-OFF\n                    MOVE WS-RESP-CD               TO ERROR-RESP\n                    MOVE WS-REAS-CD               TO ERROR-RESP2\n                    STRING\n                    'Account:'\n                     WS-CARD-RID-ACCT-ID-X\n                    ' not found in'\n                    ' Cross ref file.  Resp:'\n                    ERROR-RESP\n                    ' Reas:'\n                    ERROR-RESP2\n                    DELIMITED BY SIZE\n                    INTO WS-RETURN-MSG\n                    END-STRING\n                  END-IF\n               WHEN OTHER\n                  SET INPUT-ERROR                 TO TRUE\n                  SET FLG-ACCTFILTER-NOT-OK                TO TRUE\n                  MOVE 'READ'                     TO ERROR-OPNAME\n                  MOVE LIT-CARDXREFNAME-ACCT-PATH TO ERROR-FILE\n                  MOVE WS-RESP-CD                 TO ERROR-RESP\n                  MOVE WS-REAS-CD                 TO ERROR-RESP2\n                  MOVE WS-FILE-ERROR-MESSAGE      TO WS-RETURN-MSG\n      *                                              WS-LONG-MSG\n      *          PERFORM SEND-LONG-TEXT\n           END-EVALUATE\n           .\n</code></pre>"},{"location":"COACTUPC.html#9200-getcardxref-byacct-exit","title":"9200-GETCARDXREF-BYACCT-EXIT","text":"<p>This paragraph serves as an exit point for the GETCARDXREF-BYACCT routine. It provides a standard control flow marker that allows the program to return to the calling routine after completing the card cross-reference lookup by account number. This is a simple control structure element that helps maintain the program's organized flow when retrieving card cross-reference information.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#9300-getacctdata-byacct","title":"9300-GETACCTDATA-BYACCT","text":"<p>This paragraph retrieves account data from the account master file using the account ID as the key. It performs a CICS READ operation on the account file and handles three possible outcomes: successful retrieval, record not found, or other errors. When successful, it sets a flag indicating the account was found. If the account is not found, it sets appropriate error flags and constructs a detailed error message including the account ID and response codes. For other errors, it captures file operation details and generates a standard file error message. The paragraph is essential for validating account existence before proceeding with account updates in the main program flow.</p> Code <pre><code>EXEC CICS READ\n                DATASET   (LIT-ACCTFILENAME)\n                RIDFLD    (WS-CARD-RID-ACCT-ID-X)\n                KEYLENGTH (LENGTH OF WS-CARD-RID-ACCT-ID-X)\n                INTO      (ACCOUNT-RECORD)\n                LENGTH    (LENGTH OF ACCOUNT-RECORD)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                  SET FOUND-ACCT-IN-MASTER        TO TRUE\n               WHEN DFHRESP(NOTFND)\n                  SET INPUT-ERROR                 TO TRUE\n                  SET FLG-ACCTFILTER-NOT-OK       TO TRUE\n      *           SET DID-NOT-FIND-ACCT-IN-ACCTDAT TO TRUE\n                  IF WS-RETURN-MSG-OFF\n                    MOVE WS-RESP-CD               TO ERROR-RESP\n                    MOVE WS-REAS-CD               TO ERROR-RESP2\n                    STRING\n                    'Account:'\n                     WS-CARD-RID-ACCT-ID-X\n                    ' not found in'\n                    ' Acct Master file.Resp:'\n                    ERROR-RESP\n                    ' Reas:'\n                    ERROR-RESP2\n                    DELIMITED BY SIZE\n                    INTO WS-RETURN-MSG\n                    END-STRING\n                  END-IF\n      *\n               WHEN OTHER\n                  SET INPUT-ERROR                 TO TRUE\n                  SET FLG-ACCTFILTER-NOT-OK                TO TRUE\n                  MOVE 'READ'                     TO ERROR-OPNAME\n                  MOVE LIT-ACCTFILENAME           TO ERROR-FILE\n                  MOVE WS-RESP-CD                 TO ERROR-RESP\n                  MOVE WS-REAS-CD                 TO ERROR-RESP2\n                  MOVE WS-FILE-ERROR-MESSAGE      TO WS-RETURN-MSG\n      *                                              WS-LONG-MSG\n      *           PERFORM SEND-LONG-TEXT\n           END-EVALUATE\n           .\n</code></pre>"},{"location":"COACTUPC.html#9300-getacctdata-byacct-exit","title":"9300-GETACCTDATA-BYACCT-EXIT","text":"<p>This paragraph serves as an exit point for the 9300-GETACCTDATA-BYACCT routine. It provides a structured way to return control to the calling routine after the account data retrieval process has completed, whether successfully or with errors. This follows standard COBOL structured programming practices for paragraph termination.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#9400-getcustdata-bycust","title":"9400-GETCUSTDATA-BYCUST","text":"<p>This paragraph retrieves customer data from the customer master file using the customer ID as the key. It performs a CICS READ operation on the customer file and evaluates the response code to determine the outcome. If the read is successful, it sets a flag indicating the customer was found. If the customer is not found, it sets error flags and constructs an error message containing the customer ID and response codes. For any other response code, it sets error flags and prepares a file error message. The paragraph handles all possible outcomes of the database read operation, ensuring proper error handling and user feedback when retrieving customer information.</p> Code <pre><code>EXEC CICS READ\n                DATASET   (LIT-CUSTFILENAME)\n                RIDFLD    (WS-CARD-RID-CUST-ID-X)\n                KEYLENGTH (LENGTH OF WS-CARD-RID-CUST-ID-X)\n                INTO      (CUSTOMER-RECORD)\n                LENGTH    (LENGTH OF CUSTOMER-RECORD)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                  SET FOUND-CUST-IN-MASTER        TO TRUE\n               WHEN DFHRESP(NOTFND)\n                  SET INPUT-ERROR                 TO TRUE\n                  SET FLG-CUSTFILTER-NOT-OK       TO TRUE\n      *           SET DID-NOT-FIND-CUST-IN-CUSTDAT TO TRUE\n                  MOVE WS-RESP-CD               TO ERROR-RESP\n                  MOVE WS-REAS-CD               TO ERROR-RESP2\n                  IF WS-RETURN-MSG-OFF\n                    STRING\n                    'CustId:'\n                     WS-CARD-RID-CUST-ID-X\n                    ' not found'\n                    ' in customer master.Resp: '\n                    ERROR-RESP\n                    ' REAS:'\n                    ERROR-RESP2\n                    DELIMITED BY SIZE\n                    INTO WS-RETURN-MSG\n                    END-STRING\n                  END-IF\n               WHEN OTHER\n                  SET INPUT-ERROR                 TO TRUE\n                  SET FLG-CUSTFILTER-NOT-OK                TO TRUE\n                  MOVE 'READ'                     TO ERROR-OPNAME\n                  MOVE LIT-CUSTFILENAME           TO ERROR-FILE\n                  MOVE WS-RESP-CD                 TO ERROR-RESP\n                  MOVE WS-REAS-CD                 TO ERROR-RESP2\n                  MOVE WS-FILE-ERROR-MESSAGE      TO WS-RETURN-MSG\n      *                                              WS-LONG-MSG\n      *           PERFORM SEND-LONG-TEXT\n           END-EVALUATE\n           .\n</code></pre>"},{"location":"COACTUPC.html#9400-getcustdata-bycust-exit","title":"9400-GETCUSTDATA-BYCUST-EXIT","text":"<p>This paragraph serves as an exit point for the 9400-GETCUSTDATA-BYCUST routine, which retrieves customer data by customer identifier. It provides a clean termination point for the routine, allowing control to return to the calling section after customer data retrieval operations are complete.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#9500-store-fetched-data","title":"9500-STORE-FETCHED-DATA","text":"<p>This paragraph stores retrieved account and customer data into two main areas: the communication area (CDEMO fields) for context preservation between program calls, and a structured backup area (ACUP-OLD-DETAILS). The backup area captures the original state of all account and customer fields before any modifications are made. The paragraph handles various data types including account identifiers, financial information (balances, credit limits), dates (which are split into separate year, month, and day components), and customer personal information (name, address, contact details, identification numbers). This stored data serves as both the initial display values for the update screen and as a baseline for detecting which fields have been changed when processing updates.</p> Code <pre><code>*    Store Context in Commarea\n      *\n           MOVE ACCT-ID                   TO CDEMO-ACCT-ID\n           MOVE CUST-ID                   TO CDEMO-CUST-ID\n           MOVE CUST-FIRST-NAME           TO CDEMO-CUST-FNAME\n           MOVE CUST-MIDDLE-NAME          TO CDEMO-CUST-MNAME\n           MOVE CUST-LAST-NAME            TO CDEMO-CUST-LNAME\n           MOVE ACCT-ACTIVE-STATUS        TO CDEMO-ACCT-STATUS\n           MOVE XREF-CARD-NUM             TO CDEMO-CARD-NUM\n\n           INITIALIZE ACUP-OLD-DETAILS\n      ******************************************************************\n      *    Account Master data\n      ******************************************************************\n           MOVE ACCT-ID                  TO ACUP-OLD-ACCT-ID\n      * Active Status\n           MOVE ACCT-ACTIVE-STATUS       TO ACUP-OLD-ACTIVE-STATUS\n      * Current Balance\n           MOVE ACCT-CURR-BAL            TO ACUP-OLD-CURR-BAL-N\n      * Credit Limit\n           MOVE ACCT-CREDIT-LIMIT        TO ACUP-OLD-CREDIT-LIMIT-N\n      * Cash Limit\n           MOVE ACCT-CASH-CREDIT-LIMIT   TO ACUP-OLD-CASH-CREDIT-LIMIT-N\n      * Current Cycle Credit\n           MOVE ACCT-CURR-CYC-CREDIT     TO ACUP-OLD-CURR-CYC-CREDIT-N\n      * Current Cycle Debit\n           MOVE ACCT-CURR-CYC-DEBIT      TO ACUP-OLD-CURR-CYC-DEBIT-N\n      * Open date\n      *    MOVE ACCT-OPEN-DATE           TO ACUP-OLD-OPEN-DATE\n           MOVE ACCT-OPEN-DATE(1:4)      TO ACUP-OLD-OPEN-YEAR\n           MOVE ACCT-OPEN-DATE(6:2)      TO ACUP-OLD-OPEN-MON\n           MOVE ACCT-OPEN-DATE(9:2)      TO ACUP-OLD-OPEN-DAY\n      * Expiry date\n      *    MOVE ACCT-EXPIRAION-DATE      TO ACUP-OLD-EXPIRAION-DATE\n           MOVE ACCT-EXPIRAION-DATE(1:4) TO ACUP-OLD-EXP-YEAR\n           MOVE ACCT-EXPIRAION-DATE(6:2) TO ACUP-OLD-EXP-MON\n           MOVE ACCT-EXPIRAION-DATE(9:2) TO ACUP-OLD-EXP-DAY\n\n      * Reissue date\n      *    MOVE ACCT-REISSUE-DATE        TO ACUP-OLD-REISSUE-DATE\n           MOVE ACCT-REISSUE-DATE(1:4)   TO ACUP-OLD-REISSUE-YEAR\n           MOVE ACCT-REISSUE-DATE(6:2)   TO ACUP-OLD-REISSUE-MON\n           MOVE ACCT-REISSUE-DATE(9:2)   TO ACUP-OLD-REISSUE-DAY\n      * Account Group\n           MOVE ACCT-GROUP-ID            TO ACUP-OLD-GROUP-ID\n      ******************************************************************\n      *    Customer Master data\n      ******************************************************************\n      *Customer Id (actually not editable)\n           MOVE CUST-ID                  TO ACUP-OLD-CUST-ID\n      *Social Security Number\n           MOVE CUST-SSN                 TO ACUP-OLD-CUST-SSN\n      *Date of birth\n      *    MOVE CUST-DOB-YYYY-MM-DD      TO ACUP-OLD-CUST-DOB-YYYY-MM-DD\n           MOVE CUST-DOB-YYYY-MM-DD(1:4) TO ACUP-OLD-CUST-DOB-YEAR\n           MOVE CUST-DOB-YYYY-MM-DD(6:2) TO ACUP-OLD-CUST-DOB-MON\n           MOVE CUST-DOB-YYYY-MM-DD(9:2) TO ACUP-OLD-CUST-DOB-DAY\n      *FICO\n           MOVE CUST-FICO-CREDIT-SCORE   TO ACUP-OLD-CUST-FICO-SCORE\n      *First Name\n           MOVE CUST-FIRST-NAME          TO ACUP-OLD-CUST-FIRST-NAME\n      *Middle Name\n           MOVE CUST-MIDDLE-NAME         TO ACUP-OLD-CUST-MIDDLE-NAME\n      *Last Name\n           MOVE CUST-LAST-NAME           TO ACUP-OLD-CUST-LAST-NAME\n      *Address\n           MOVE CUST-ADDR-LINE-1         TO ACUP-OLD-CUST-ADDR-LINE-1\n           MOVE CUST-ADDR-LINE-2         TO ACUP-OLD-CUST-ADDR-LINE-2\n           MOVE CUST-ADDR-LINE-3         TO ACUP-OLD-CUST-ADDR-LINE-3\n           MOVE CUST-ADDR-STATE-CD       TO ACUP-OLD-CUST-ADDR-STATE-CD\n           MOVE CUST-ADDR-COUNTRY-CD     TO\n                                          ACUP-OLD-CUST-ADDR-COUNTRY-CD\n           MOVE CUST-ADDR-ZIP            TO ACUP-OLD-CUST-ADDR-ZIP\n           MOVE CUST-PHONE-NUM-1         TO ACUP-OLD-CUST-PHONE-NUM-1\n           MOVE CUST-PHONE-NUM-2         TO ACUP-OLD-CUST-PHONE-NUM-2\n      *Government Id\n           MOVE CUST-GOVT-ISSUED-ID      TO ACUP-OLD-CUST-GOVT-ISSUED-ID\n      *EFT Code\n           MOVE CUST-EFT-ACCOUNT-ID      TO ACUP-OLD-CUST-EFT-ACCOUNT-ID\n      *Primary Holder Indicator\n           MOVE CUST-PRI-CARD-HOLDER-IND TO ACUP-OLD-CUST-PRI-HOLDER-IND\n           .\n</code></pre>"},{"location":"COACTUPC.html#9500-store-fetched-data-exit","title":"9500-STORE-FETCHED-DATA-EXIT","text":"<p>This paragraph serves as an exit point for the 9500-STORE-FETCHED-DATA routine in the account update program. It provides a clean termination point for the routine that stores retrieved account and customer data from the database into program variables for processing.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#9600-write-processing","title":"9600-WRITE-PROCESSING","text":"<p>This paragraph handles the database update process for account and customer information in the CardDemo application. It first attempts to lock both the account and customer records for update by performing READ UPDATE operations on the respective files. If either record cannot be locked, it sets appropriate error flags and exits.</p> <p>After successfully locking the records, it checks if the data has changed since it was initially retrieved (via the 9700-CHECK-CHANGE-IN-REC paragraph) to prevent overwriting concurrent changes. If no conflicts are detected, it prepares the update records by transferring the modified data from the screen fields to the database record structures.</p> <p>The paragraph carefully formats various fields including dates (open date, expiry date, reissue date, date of birth) and phone numbers with proper formatting. It then performs the actual database updates by executing CICS REWRITE commands for both the account and customer records. If either update fails, it sets an error flag and performs a SYNCPOINT ROLLBACK to ensure data integrity. The comprehensive error handling throughout the paragraph ensures that database operations maintain transactional integrity.</p> Code <pre><code>*    Read the account file for update\n\n           MOVE CC-ACCT-ID              TO WS-CARD-RID-ACCT-ID\n\n           EXEC CICS READ\n                FILE      (LIT-ACCTFILENAME)\n                UPDATE\n                RIDFLD    (WS-CARD-RID-ACCT-ID-X)\n                KEYLENGTH (LENGTH OF WS-CARD-RID-ACCT-ID-X)\n                INTO      (ACCOUNT-RECORD)\n                LENGTH    (LENGTH OF ACCOUNT-RECORD)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n      *****************************************************************\n      *    Could we lock the account record ?\n      *****************************************************************\n           IF WS-RESP-CD EQUAL TO DFHRESP(NORMAL)\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR                    TO TRUE\n              IF  WS-RETURN-MSG-OFF\n                  SET COULD-NOT-LOCK-ACCT-FOR-UPDATE  TO TRUE\n              END-IF\n              GO TO 9600-WRITE-PROCESSING-EXIT\n           END-IF\n\n      *    Read the customer file for update\n\n           MOVE CDEMO-CUST-ID                   TO WS-CARD-RID-CUST-ID\n\n           EXEC CICS READ\n                FILE      (LIT-CUSTFILENAME)\n                UPDATE\n                RIDFLD    (WS-CARD-RID-CUST-ID-X)\n                KEYLENGTH (LENGTH OF WS-CARD-RID-CUST-ID-X)\n                INTO      (CUSTOMER-RECORD)\n                LENGTH    (LENGTH OF CUSTOMER-RECORD)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n      *****************************************************************\n      *    Could we lock the customer record ?\n      *****************************************************************\n           IF WS-RESP-CD EQUAL TO DFHRESP(NORMAL)\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR                    TO TRUE\n              IF  WS-RETURN-MSG-OFF\n                  SET COULD-NOT-LOCK-CUST-FOR-UPDATE  TO TRUE\n              END-IF\n              GO TO 9600-WRITE-PROCESSING-EXIT\n           END-IF\n\n      *****************************************************************\n      *    Did someone change the record while we were out ?\n      *****************************************************************\n           PERFORM 9700-CHECK-CHANGE-IN-REC\n              THRU 9700-CHECK-CHANGE-IN-REC-EXIT\n\n           IF DATA-WAS-CHANGED-BEFORE-UPDATE\n              GO TO 9600-WRITE-PROCESSING-EXIT\n           END-IF\n      *****************************************************************\n      * Prepare the update\n      *****************************************************************\n           INITIALIZE ACCT-UPDATE-RECORD\n      ******************************************************************\n      *    Account Master data\n      ******************************************************************\n           MOVE ACUP-NEW-ACCT-ID         TO ACCT-UPDATE-ID\n      * Active Status\n           MOVE ACUP-NEW-ACTIVE-STATUS   TO ACCT-UPDATE-ACTIVE-STATUS\n      * Current Balance\n           MOVE ACUP-NEW-CURR-BAL-N      TO ACCT-UPDATE-CURR-BAL\n      * Credit Limit\n           MOVE ACUP-NEW-CREDIT-LIMIT-N  TO ACCT-UPDATE-CREDIT-LIMIT\n      * Cash Limit\n           MOVE ACUP-NEW-CASH-CREDIT-LIMIT-N\n                                      TO ACCT-UPDATE-CASH-CREDIT-LIMIT\n      * Current Cycle Credit\n           MOVE ACUP-NEW-CURR-CYC-CREDIT-N\n                                          TO ACCT-UPDATE-CURR-CYC-CREDIT\n      * Current Cycle Debit\n           MOVE ACUP-NEW-CURR-CYC-DEBIT-N TO ACCT-UPDATE-CURR-CYC-DEBIT\n      * Open date\n           STRING ACUP-NEW-OPEN-YEAR\n                  '-'\n                  ACUP-NEW-OPEN-MON\n                  '-'\n                  ACUP-NEW-OPEN-DAY\n           DELIMITED BY SIZE\n                                       INTO ACCT-UPDATE-OPEN-DATE\n      * Expiry date\n           STRING ACUP-NEW-EXP-YEAR\n                  '-'\n                  ACUP-NEW-EXP-MON\n                  '-'\n                  ACUP-NEW-EXP-DAY\n           DELIMITED BY SIZE\n                                       INTO ACCT-UPDATE-EXPIRAION-DATE\n\n      * Reissue date\n           MOVE ACCT-REISSUE-DATE        TO ACCT-UPDATE-REISSUE-DATE\n           STRING ACUP-NEW-REISSUE-YEAR\n                  '-'\n                  ACUP-NEW-REISSUE-MON\n                  '-'\n                  ACUP-NEW-REISSUE-DAY\n           DELIMITED BY SIZE\n                                       INTO ACCT-UPDATE-REISSUE-DATE\n      * Account Group\n           MOVE ACUP-NEW-GROUP-ID        TO ACCT-UPDATE-GROUP-ID\n\n      ******************************************************************\n      *    Customer data\n      ******************************************************************\n           INITIALIZE CUST-UPDATE-RECORD\n\n           MOVE  ACUP-NEW-CUST-ID        TO CUST-UPDATE-ID\n           MOVE  ACUP-NEW-CUST-FIRST-NAME\n                                   TO CUST-UPDATE-FIRST-NAME\n           MOVE  ACUP-NEW-CUST-MIDDLE-NAME\n                                   TO CUST-UPDATE-MIDDLE-NAME\n           MOVE  ACUP-NEW-CUST-LAST-NAME TO CUST-UPDATE-LAST-NAME\n           MOVE  ACUP-NEW-CUST-ADDR-LINE-1\n                                   TO CUST-UPDATE-ADDR-LINE-1\n           MOVE  ACUP-NEW-CUST-ADDR-LINE-2\n                                   TO CUST-UPDATE-ADDR-LINE-2\n           MOVE  ACUP-NEW-CUST-ADDR-LINE-3\n                                   TO CUST-UPDATE-ADDR-LINE-3\n           MOVE  ACUP-NEW-CUST-ADDR-STATE-CD\n                                   TO CUST-UPDATE-ADDR-STATE-CD\n           MOVE  ACUP-NEW-CUST-ADDR-COUNTRY-CD\n                                   TO CUST-UPDATE-ADDR-COUNTRY-CD\n           MOVE  ACUP-NEW-CUST-ADDR-ZIP  TO CUST-UPDATE-ADDR-ZIP\n\n           STRING '(',\n                  ACUP-NEW-CUST-PHONE-NUM-1A,\n                  ')',\n                  ACUP-NEW-CUST-PHONE-NUM-1B,\n                  '-',\n                  ACUP-NEW-CUST-PHONE-NUM-1C\n           DELIMITED BY SIZE    INTO CUST-UPDATE-PHONE-NUM-1\n\n           STRING '(',\n                  ACUP-NEW-CUST-PHONE-NUM-2A,\n                  ')',\n                  ACUP-NEW-CUST-PHONE-NUM-2B,\n                  '-',\n                  ACUP-NEW-CUST-PHONE-NUM-2C\n           DELIMITED BY SIZE    INTO CUST-UPDATE-PHONE-NUM-2\n\n\n           MOVE  ACUP-NEW-CUST-SSN       TO CUST-UPDATE-SSN\n           MOVE  ACUP-NEW-CUST-GOVT-ISSUED-ID\n                                   TO CUST-UPDATE-GOVT-ISSUED-ID\n           STRING ACUP-NEW-CUST-DOB-YEAR\n                  '-'\n                  ACUP-NEW-CUST-DOB-MON\n                  '-'\n                  ACUP-NEW-CUST-DOB-DAY\n           DELIMITED BY SIZE           INTO CUST-UPDATE-DOB-YYYY-MM-DD\n\n           MOVE ACUP-NEW-CUST-EFT-ACCOUNT-ID\n                                         TO CUST-UPDATE-EFT-ACCOUNT-ID\n           MOVE ACUP-NEW-CUST-PRI-HOLDER-IND\n                                         TO CUST-UPDATE-PRI-CARD-IND\n           MOVE ACUP-NEW-CUST-FICO-SCORE TO\n                                   CUST-UPDATE-FICO-CREDIT-SCORE\n      *****************************************************************\n      * Update account *\n      *****************************************************************\n\n\n           EXEC CICS\n                REWRITE FILE(LIT-ACCTFILENAME)\n                        FROM(ACCT-UPDATE-RECORD)\n                        LENGTH(LENGTH OF ACCT-UPDATE-RECORD)\n                        RESP      (WS-RESP-CD)\n                        RESP2     (WS-REAS-CD)\n           END-EXEC.\n      *\n      *****************************************************************\n      * Did account update succeed ?  *\n      *****************************************************************\n           IF WS-RESP-CD EQUAL TO DFHRESP(NORMAL)\n             CONTINUE\n           ELSE\n             SET LOCKED-BUT-UPDATE-FAILED    TO TRUE\n             GO TO 9600-WRITE-PROCESSING-EXIT\n           END-IF\n      *****************************************************************\n      * Update customer *\n      *****************************************************************\n           EXEC CICS\n                        REWRITE FILE(LIT-CUSTFILENAME)\n                        FROM(CUST-UPDATE-RECORD)\n                        LENGTH(LENGTH OF CUST-UPDATE-RECORD)\n                        RESP      (WS-RESP-CD)\n                        RESP2     (WS-REAS-CD)\n           END-EXEC.\n      *****************************************************************\n      * Did customer update succeed ? *\n      *****************************************************************\n           IF WS-RESP-CD EQUAL TO DFHRESP(NORMAL)\n             CONTINUE\n           ELSE\n             SET LOCKED-BUT-UPDATE-FAILED    TO TRUE\n             EXEC CICS\n                SYNCPOINT ROLLBACK\n             END-EXEC\n             GO TO 9600-WRITE-PROCESSING-EXIT\n           END-IF\n           .\n</code></pre>"},{"location":"COACTUPC.html#9600-write-processing-exit","title":"9600-WRITE-PROCESSING-EXIT","text":"<p>This paragraph serves as an exit point for the write processing routine in the COACTUPC program. It's a simple exit paragraph that marks the end of a processing section, allowing the program to return control to the calling routine after completing write operations related to account updates.</p> Code <pre><code>EXIT\n           .\n</code></pre>"},{"location":"COACTUPC.html#9700-check-change-in-rec","title":"9700-CHECK-CHANGE-IN-REC","text":"<p>This paragraph performs a comprehensive comparison between the current account and customer data values and their original values stored in the program's working storage. It checks if any changes have been made to the data before proceeding with an update operation. The comparison includes account details (active status, balances, credit limits, and various dates) and customer information (personal details, address, contact information, and identification data). If any field has been modified from its original value, it sets a flag indicating data was changed and exits the current processing flow. This validation ensures that unnecessary updates are avoided when no actual changes have been made to the data, improving efficiency and preventing unintended modifications to the database records.</p> Code <pre><code>******************************************************************\n      *    Account Master data\n      ******************************************************************\n           IF  ACCT-ACTIVE-STATUS      EQUAL ACUP-OLD-ACTIVE-STATUS\n      * Current Balance\n           AND ACCT-CURR-BAL           EQUAL ACUP-OLD-CURR-BAL-N\n      * Credit Limit\n           AND ACCT-CREDIT-LIMIT       EQUAL ACUP-OLD-CREDIT-LIMIT-N\n      * Cash Limit\n           AND ACCT-CASH-CREDIT-LIMIT EQUAL ACUP-OLD-CASH-CREDIT-LIMIT-N\n      * Current Cycle Credit\n           AND ACCT-CURR-CYC-CREDIT    EQUAL ACUP-OLD-CURR-CYC-CREDIT-N\n      * Current Cycle Debit\n           AND ACCT-CURR-CYC-DEBIT     EQUAL ACUP-OLD-CURR-CYC-DEBIT-N\n      * Open date\n           AND ACCT-OPEN-DATE(1:4)     EQUAL ACUP-OLD-OPEN-YEAR\n           AND ACCT-OPEN-DATE(6:2)     EQUAL ACUP-OLD-OPEN-MON\n           AND ACCT-OPEN-DATE(9:2)     EQUAL ACUP-OLD-OPEN-DAY\n      * Expiry date\n           AND ACCT-EXPIRAION-DATE(1:4)EQUAL ACUP-OLD-EXP-YEAR\n           AND ACCT-EXPIRAION-DATE(6:2)EQUAL ACUP-OLD-EXP-MON\n           AND ACCT-EXPIRAION-DATE(9:2)EQUAL ACUP-OLD-EXP-DAY\n      * Reissue date\n           AND ACCT-REISSUE-DATE(1:4)  EQUAL ACUP-OLD-REISSUE-YEAR\n           AND ACCT-REISSUE-DATE(6:2)  EQUAL ACUP-OLD-REISSUE-MON\n           AND ACCT-REISSUE-DATE(9:2)  EQUAL ACUP-OLD-REISSUE-DAY\n      * Account Group\n           AND FUNCTION LOWER-CASE (ACCT-GROUP-ID)           EQUAL\n               FUNCTION LOWER-CASE (ACUP-OLD-GROUP-ID)\n               CONTINUE\n           ELSE\n              SET DATA-WAS-CHANGED-BEFORE-UPDATE TO TRUE\n              GO TO 9600-WRITE-PROCESSING-EXIT\n           END-IF\n\n      ******************************************************************\n      *    Customer  data - Split into 2 IFs for easier reading\n      *    And maybe put logic to update only 1 file if only date\n      *    pertaining to one of them is updated\n      ******************************************************************\n           IF  FUNCTION UPPER-CASE (CUST-FIRST-NAME          ) EQUAL\n               FUNCTION UPPER-CASE (ACUP-OLD-CUST-FIRST-NAME )\n           AND FUNCTION UPPER-CASE (CUST-MIDDLE-NAME         ) EQUAL\n               FUNCTION UPPER-CASE (ACUP-OLD-CUST-MIDDLE-NAME)\n           AND FUNCTION UPPER-CASE (CUST-LAST-NAME           ) EQUAL\n               FUNCTION UPPER-CASE (ACUP-OLD-CUST-LAST-NAME  )\n           AND FUNCTION UPPER-CASE (CUST-ADDR-LINE-1         ) EQUAL\n               FUNCTION UPPER-CASE (ACUP-OLD-CUST-ADDR-LINE-1)\n           AND FUNCTION UPPER-CASE (CUST-ADDR-LINE-2         ) EQUAL\n               FUNCTION UPPER-CASE (ACUP-OLD-CUST-ADDR-LINE-2)\n           AND FUNCTION UPPER-CASE (CUST-ADDR-LINE-3         ) EQUAL\n               FUNCTION UPPER-CASE (ACUP-OLD-CUST-ADDR-LINE-3)\n           AND FUNCTION UPPER-CASE (CUST-ADDR-STATE-CD       ) EQUAL\n               FUNCTION UPPER-CASE (ACUP-OLD-CUST-ADDR-STATE-CD)\n           AND FUNCTION UPPER-CASE (CUST-ADDR-COUNTRY-CD     ) EQUAL\n               FUNCTION UPPER-CASE (ACUP-OLD-CUST-ADDR-COUNTRY-CD )\n           AND CUST-ADDR-ZIP           EQUAL ACUP-OLD-CUST-ADDR-ZIP\n           AND CUST-PHONE-NUM-1        EQUAL ACUP-OLD-CUST-PHONE-NUM-1\n           AND CUST-PHONE-NUM-2        EQUAL ACUP-OLD-CUST-PHONE-NUM-2\n           AND CUST-SSN                EQUAL ACUP-OLD-CUST-SSN\n           AND FUNCTION UPPER-CASE (CUST-GOVT-ISSUED-ID      ) EQUAL\n               FUNCTION UPPER-CASE (ACUP-OLD-CUST-GOVT-ISSUED-ID )\n           AND CUST-DOB-YYYY-MM-DD (1:4)                       EQUAL\n               ACUP-OLD-CUST-DOB-YYYY-MM-DD (1:4)\n           AND CUST-DOB-YYYY-MM-DD (6:2)                       EQUAL\n               ACUP-OLD-CUST-DOB-YYYY-MM-DD (5:2)\n           AND CUST-DOB-YYYY-MM-DD (9:2)                       EQUAL\n               ACUP-OLD-CUST-DOB-YYYY-MM-DD (7:2)\n\n           AND CUST-EFT-ACCOUNT-ID     EQUAL\n                                            ACUP-OLD-CUST-EFT-ACCOUNT-ID\n           AND CUST-PRI-CARD-HOLDER-IND\n                                       EQUAL\n                                            ACUP-OLD-CUST-PRI-HOLDER-IND\n           AND CUST-FICO-CREDIT-SCORE  EQUAL ACUP-OLD-CUST-FICO-SCORE\n               CONTINUE\n           ELSE\n              SET DATA-WAS-CHANGED-BEFORE-UPDATE TO TRUE\n              GO TO 9600-WRITE-PROCESSING-EXIT\n           END-IF\n           .\n</code></pre>"},{"location":"COACTUPC.html#9700-check-change-in-rec-exit","title":"9700-CHECK-CHANGE-IN-REC-EXIT","text":"<p>This paragraph serves as an exit point for the change detection routine in the account update process. It includes a reference to the 'CSSTRPFY' copybook, which contains common code for storing function key (PFKey) information. This is part of the program's user interface handling, allowing it to track which function keys the user presses during the account update workflow.</p> Code <pre><code>EXIT\n           .\n      ******************************************************************\n      *Common code to store PFKey\n      ******************************************************************\n       COPY 'CSSTRPFY'\n           .\n</code></pre>"},{"location":"COACTUPC.html#abend-routine","title":"ABEND-ROUTINE","text":"<p>This paragraph handles abnormal termination (ABEND) processing for the account update program. It ensures a meaningful error message is displayed to the user before terminating the transaction. If no specific error message has been set (ABEND-MSG contains LOW-VALUES), it displays a generic \"UNEXPECTED ABEND OCCURRED\" message. The routine identifies the current program as the source of the error, sends the error information to the terminal with screen clearing, cancels any existing abend handlers to prevent recursive handling, and finally terminates the transaction with abend code '9999'. This provides a controlled shutdown path when unrecoverable errors occur during account update processing.</p> Code <pre><code>IF ABEND-MSG EQUAL LOW-VALUES\n              MOVE 'UNEXPECTED ABEND OCCURRED.' TO ABEND-MSG\n           END-IF\n\n           MOVE LIT-THISPGM       TO ABEND-CULPRIT\n\n           EXEC CICS SEND\n                            FROM (ABEND-DATA)\n                            LENGTH(LENGTH OF ABEND-DATA)\n                            NOHANDLE\n                            ERASE\n           END-EXEC\n\n           EXEC CICS HANDLE ABEND\n                CANCEL\n           END-EXEC\n\n           EXEC CICS ABEND\n                ABCODE('9999')\n           END-EXEC\n           .\n</code></pre>"},{"location":"COACTUPC.html#abend-routine-exit","title":"ABEND-ROUTINE-EXIT","text":"<p>This paragraph serves as the exit point for the ABEND-ROUTINE section in the COACTUPC program. After executing the ABEND handling logic, control flows to this EXIT statement which marks the end of the routine. Following this exit point, the program incorporates the CSUTLDPY copybook which contains common date manipulation routines used throughout the application. These shared date utilities likely support the program's extensive date validation and formatting requirements when processing account updates. The final comment line indicates the version control information for the program, showing it's based on CardDemo version 1.0 with specific commit details and a timestamp from July 19, 2022.</p> Code <pre><code>EXIT\n           .\n      ******************************************************************\n      * Common Date Routines\n      ******************************************************************\n       COPY CSUTLDPY\n           .\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:32 CDT\n      *\n</code></pre>"},{"location":"COACTVWC.html","title":"COACTVWC","text":""},{"location":"COACTVWC.html#overview","title":"Overview","text":"<p>This program, COACTVWC, is a CICS business logic component that handles account view requests in the CardDemo application. It allows users to search for and display detailed account information by entering an account number. The program retrieves account data from multiple files, including account master records, customer information, and card cross-reference data.</p> <p>When executed, the program displays a screen where users can enter an account ID. Upon submission, it validates the input, retrieves the corresponding account information from the database files, and displays comprehensive account details including balance, credit limits, customer information, and address data. The program performs thorough error handling for scenarios such as invalid account numbers, missing records, or file access errors.</p> <p>The application follows a structured flow with clear separation between screen handling, input validation, and data retrieval functions. It integrates with other components of the CardDemo system through a common communication area and provides navigation capabilities to related functions through PF keys.</p>"},{"location":"COACTVWC.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COACTVWC</code></p>"},{"location":"COACTVWC.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant Main as 0000-MAIN\n    participant SendMap as 1000-SEND-MAP\n    participant ProcessInputs as 2000-PROCESS-INPUTS\n    participant ReadAcct as 9000-READ-ACCT\n    participant CardXRef as 9200-GETCARDXREF-BYACCT\n    participant AcctData as 9300-GETACCTDATA-BYACCT\n    participant CustData as 9400-GETCUSTDATA-BYCUST\n\n    User-&gt;&gt;Main: Start transaction\n\n    alt Initial Entry or From Menu\n        Main-&gt;&gt;SendMap: 1000-SEND-MAP\n        SendMap-&gt;&gt;User: Display account search screen\n    else Re-entry with User Input\n        Main-&gt;&gt;ProcessInputs: 2000-PROCESS-INPUTS\n        ProcessInputs-&gt;&gt;ProcessInputs: 2100-RECEIVE-MAP\n        ProcessInputs-&gt;&gt;ProcessInputs: 2200-EDIT-MAP-INPUTS\n\n        alt Input Error\n            ProcessInputs--&gt;&gt;Main: Return with error\n            Main-&gt;&gt;SendMap: 1000-SEND-MAP\n            SendMap-&gt;&gt;User: Display error message\n        else Valid Input\n            ProcessInputs--&gt;&gt;Main: Return with valid input\n            Main-&gt;&gt;ReadAcct: 9000-READ-ACCT\n\n            ReadAcct-&gt;&gt;CardXRef: 9200-GETCARDXREF-BYACCT\n            alt Account Not Found in Cross Reference\n                CardXRef--&gt;&gt;ReadAcct: Return with error\n                ReadAcct--&gt;&gt;Main: Return with error\n            else Account Found\n                CardXRef--&gt;&gt;ReadAcct: Return with customer ID\n\n                ReadAcct-&gt;&gt;AcctData: 9300-GETACCTDATA-BYACCT\n                alt Account Not Found in Master\n                    AcctData--&gt;&gt;ReadAcct: Return with error\n                    ReadAcct--&gt;&gt;Main: Return with error\n                else Account Found\n                    AcctData--&gt;&gt;ReadAcct: Return with account data\n\n                    ReadAcct-&gt;&gt;CustData: 9400-GETCUSTDATA-BYCUST\n                    alt Customer Not Found\n                        CustData--&gt;&gt;ReadAcct: Return with error\n                        ReadAcct--&gt;&gt;Main: Return with error\n                    else Customer Found\n                        CustData--&gt;&gt;ReadAcct: Return with customer data\n                        ReadAcct--&gt;&gt;Main: Return with all data\n                    end\n                end\n            end\n\n            Main-&gt;&gt;SendMap: 1000-SEND-MAP\n            SendMap-&gt;&gt;User: Display account details\n        end\n    else PF3 Pressed\n        Main-&gt;&gt;User: Return to calling program\n    end</code></pre>"},{"location":"COACTVWC.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>DFHAID</code></li> <li><code>CVCUS01Y</code></li> <li><code>CVACT01Y</code></li> <li><code>CSUSR01Y</code></li> <li><code>COCOM01Y</code></li> <li><code>CVCRD01Y</code></li> <li><code>CSSTRPFY</code></li> <li><code>DFHBMSCA</code></li> <li><code>CVACT03Y</code></li> <li><code>CVACT02Y</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG02Y</code></li> <li><code>CSMSG01Y</code></li> <li><code>COACTVW</code></li> </ul>"},{"location":"COACTVWC.html#environment-division","title":"Environment Division","text":""},{"location":"COACTVWC.html#input-output-section","title":"INPUT-OUTPUT SECTION","text":"<p>This section would typically contain the file declarations and I/O configurations for the COACTVWC program, but appears to be empty in the provided snippet. In a complete program, this section would define the files used for retrieving account information, customer data, and card cross-references that the program needs to display account details. The absence of this section suggests that file access may be handled through CICS commands rather than traditional COBOL file handling.</p> Code"},{"location":"COACTVWC.html#data-division","title":"Data Division","text":""},{"location":"COACTVWC.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage Section defines the data structures used in the COACTVWC program for account view functionality in the CardDemo application. It contains several key components:</p> <ol> <li>CICS processing variables for handling response codes and transaction IDs</li> <li>Input validation flags for tracking the status of user inputs, particularly for account and customer filtering</li> <li>File handling structures including record identifiers for card cross-reference data and flags to track successful record retrieval from account and customer master files</li> <li>Comprehensive error handling structures for file operations with detailed message formatting</li> <li>Information and status message fields with predefined values for various user interactions and error conditions</li> <li>Program constants including transaction IDs, program names, mapsets, and file names for navigation between different components of the CardDemo system</li> <li>Character conversion tables for case manipulation</li> </ol> <p>The section incorporates multiple copybooks for common structures including card data (CVCRD01Y), communication area (COCOM01Y), screen titles (COTTL01Y), BMS screen definition (COACTVW), date handling (CSDAT01Y), messaging (CSMSG01Y, CSMSG02Y), user data (CSUSR01Y), and various record layouts for accounts (CVACT01Y), customers (CVACT02Y, CVCUS01Y), and card cross-references (CVACT03Y).</p> <p>This comprehensive data structure supports the program's main functions of account lookup, data validation, and information display while facilitating integration with other CardDemo components.</p> Code <pre><code>01  WS-MISC-STORAGE.                                                     \n      ******************************************************************        \n      * General CICS related                                                    \n      ******************************************************************        \n         05 WS-CICS-PROCESSNG-VARS.                                             \n            07 WS-RESP-CD                          PIC S9(09) COMP              \n                                                   VALUE ZEROS.                 \n            07 WS-REAS-CD                          PIC S9(09) COMP              \n                                                   VALUE ZEROS.                 \n            07 WS-TRANID                           PIC X(4)                     \n                                                   VALUE SPACES.                \n      ******************************************************************        \n      *      Input edits                                                        \n      ******************************************************************        \n\n         05  WS-INPUT-FLAG                         PIC X(1).                    \n           88  INPUT-OK                            VALUE '0'.                   \n           88  INPUT-ERROR                         VALUE '1'.                   \n           88  INPUT-PENDING                       VALUE LOW-VALUES.            \n         05  WS-PFK-FLAG                           PIC X(1).                    \n           88  PFK-VALID                           VALUE '0'.                   \n           88  PFK-INVALID                         VALUE '1'.                   \n           88  INPUT-PENDING                       VALUE LOW-VALUES.            \n         05  WS-EDIT-ACCT-FLAG                     PIC X(1).                    \n           88  FLG-ACCTFILTER-NOT-OK               VALUE '0'.                   \n           88  FLG-ACCTFILTER-ISVALID              VALUE '1'.                   \n           88  FLG-ACCTFILTER-BLANK                VALUE ' '.                   \n         05  WS-EDIT-CUST-FLAG                     PIC X(1).                    \n           88  FLG-CUSTFILTER-NOT-OK               VALUE '0'.                   \n           88  FLG-CUSTFILTER-ISVALID              VALUE '1'.                   \n           88  FLG-CUSTFILTER-BLANK                VALUE ' '.                   \n      ******************************************************************        \n      * Output edits                                                            \n      ******************************************************************        \n      *  05  EDIT-FIELD-9-2                PIC +ZZZ,ZZZ,ZZZ.99.                 \n      ******************************************************************        \n      *      File and data Handling                                             \n      ******************************************************************        \n         05  WS-XREF-RID.                                                       \n           10  WS-CARD-RID-CARDNUM                 PIC X(16).                   \n           10  WS-CARD-RID-CUST-ID                 PIC 9(09).                   \n           10  WS-CARD-RID-CUST-ID-X REDEFINES                                  \n                  WS-CARD-RID-CUST-ID              PIC X(09).                   \n           10  WS-CARD-RID-ACCT-ID                 PIC 9(11).                   \n           10  WS-CARD-RID-ACCT-ID-X REDEFINES                                  \n                  WS-CARD-RID-ACCT-ID              PIC X(11).                   \n         05  WS-FILE-READ-FLAGS. \n           10 WS-ACCOUNT-MASTER-READ-FLAG          PIC X(1).\n              88 FOUND-ACCT-IN-MASTER              VALUE '1'.\n           10 WS-CUST-MASTER-READ-FLAG             PIC X(1).\n              88 FOUND-CUST-IN-MASTER              VALUE '1'.                   \n         05  WS-FILE-ERROR-MESSAGE.                                             \n           10  FILLER                              PIC X(12)                    \n                                                   VALUE 'File Error: '.        \n           10  ERROR-OPNAME                        PIC X(8)                     \n                                                   VALUE SPACES.                \n           10  FILLER                              PIC X(4)                     \n                                                   VALUE ' on '.                \n           10  ERROR-FILE                          PIC X(9)                     \n                                                   VALUE SPACES.                \n           10  FILLER                              PIC X(15)                    \n                                                   VALUE                        \n                                                   ' returned RESP '.           \n           10  ERROR-RESP                          PIC X(10)                    \n                                                   VALUE SPACES.                \n           10  FILLER                              PIC X(7)                     \n                                                   VALUE ',RESP2 '.             \n           10  ERROR-RESP2                         PIC X(10)                    \n                                                   VALUE SPACES.                \n          10  FILLER                               PIC X(5)                     \n                                                   VALUE SPACES.                \n      ******************************************************************        \n      *      Output Message Construction                                        \n      ******************************************************************        \n         05  WS-LONG-MSG                           PIC X(500).                  \n         05  WS-INFO-MSG                           PIC X(40).                   \n           88  WS-NO-INFO-MESSAGE                 VALUES                        \n                                                  SPACES LOW-VALUES.            \n           88  WS-PROMPT-FOR-INPUT                 VALUE                        \n               'Enter or update id of account to display'.\n           88  WS-INFORM-OUTPUT                    VALUE\n               'Displaying details of given Account'.                           \n         05  WS-RETURN-MSG                         PIC X(75).                   \n           88  WS-RETURN-MSG-OFF                   VALUE SPACES.                \n           88  WS-EXIT-MESSAGE                     VALUE                        \n               'PF03 pressed.Exiting              '.                            \n           88  WS-PROMPT-FOR-ACCT                  VALUE                        \n               'Account number not provided'.                                   \n           88  NO-SEARCH-CRITERIA-RECEIVED         VALUE                        \n               'No input received'.                                             \n           88  SEARCHED-ACCT-ZEROES                VALUE                        \n               'Account number must be a non zero 11 digit number'.             \n           88  SEARCHED-ACCT-NOT-NUMERIC           VALUE                        \n               'Account number must be a non zero 11 digit number'.             \n           88  DID-NOT-FIND-ACCT-IN-CARDXREF       VALUE                        \n               'Did not find this account in account card xref file'.           \n           88  DID-NOT-FIND-ACCT-IN-ACCTDAT        VALUE                        \n               'Did not find this account in account master file'.              \n           88  DID-NOT-FIND-CUST-IN-CUSTDAT        VALUE                        \n               'Did not find associated customer in master file'.               \n           88  XREF-READ-ERROR                     VALUE                        \n               'Error reading account card xref File'.                          \n           88  CODING-TO-BE-DONE                   VALUE                        \n               'Looks Good.... so far'.                                         \n      *****************************************************************         \n      *      Literals and Constants                                             \n      ******************************************************************        \n       01 WS-LITERALS.                                                          \n          05 LIT-THISPGM                           PIC X(8)                     \n                                                   VALUE 'COACTVWC'.            \n          05 LIT-THISTRANID                        PIC X(4)                     \n                                                   VALUE 'CAVW'.                \n          05 LIT-THISMAPSET                        PIC X(8)                     \n                                                   VALUE 'COACTVW '.            \n          05 LIT-THISMAP                           PIC X(7)                     \n                                                   VALUE 'CACTVWA'.             \n          05 LIT-CCLISTPGM                         PIC X(8)                     \n                                                   VALUE 'COCRDLIC'.            \n          05 LIT-CCLISTTRANID                      PIC X(4)                     \n                                                   VALUE 'CCLI'.                \n          05 LIT-CCLISTMAPSET                      PIC X(7)                     \n                                                   VALUE 'COCRDLI'.             \n          05 LIT-CCLISTMAP                         PIC X(7)                     \n                                                   VALUE 'CCRDSLA'.             \n          05 LIT-CARDUPDATEPGM                           PIC X(8)               \n                                                   VALUE 'COCRDUPC'.            \n          05 LIT-CARDUDPATETRANID                        PIC X(4)               \n                                                   VALUE 'CCUP'.                \n          05 LIT-CARDUPDATEMAPSET                        PIC X(8)               \n                                                   VALUE 'COCRDUP '.            \n          05 LIT-CARDUPDATEMAP                           PIC X(7)               \n                                                   VALUE 'CCRDUPA'.             \n\n          05 LIT-MENUPGM                           PIC X(8)                     \n                                                   VALUE 'COMEN01C'.            \n          05 LIT-MENUTRANID                        PIC X(4)                     \n                                                   VALUE 'CM00'.                \n          05 LIT-MENUMAPSET                        PIC X(7)                     \n                                                   VALUE 'COMEN01'.             \n          05 LIT-MENUMAP                           PIC X(7)                     \n                                                   VALUE 'COMEN1A'.             \n          05  LIT-CARDDTLPGM                       PIC X(8)                     \n                                                   VALUE 'COCRDSLC'.            \n          05  LIT-CARDDTLTRANID                    PIC X(4)                     \n                                                   VALUE 'CCDL'.                \n          05  LIT-CARDDTLMAPSET                    PIC X(7)                     \n                                                   VALUE 'COCRDSL'.             \n          05  LIT-CARDDTLMAP                       PIC X(7)                     \n                                                   VALUE 'CCRDSLA'.             \n          05 LIT-ACCTFILENAME                      PIC X(8)                     \n                                                   VALUE 'ACCTDAT '.            \n          05 LIT-CARDFILENAME                      PIC X(8)                     \n                                                   VALUE 'CARDDAT '.            \n          05 LIT-CUSTFILENAME                      PIC X(8)                     \n                                                   VALUE 'CUSTDAT '.            \n          05 LIT-CARDFILENAME-ACCT-PATH            PIC X(8)                     \n                                                   VALUE 'CARDAIX '.            \n          05 LIT-CARDXREFNAME-ACCT-PATH            PIC X(8)                     \n                                                   VALUE 'CXACAIX '.            \n          05 LIT-ALL-ALPHA-FROM                    PIC X(52)                    \n             VALUE                                                              \n             'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.            \n          05 LIT-ALL-SPACES-TO                     PIC X(52)                    \n                                                   VALUE SPACES.                \n          05 LIT-UPPER                             PIC X(26)                    \n                                 VALUE 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.            \n          05 LIT-LOWER                             PIC X(26)                    \n                                 VALUE 'abcdefghijklmnopqrstuvwxyz'.            \n\n      ******************************************************************        \n      *Other common working storage Variables                                   \n      ******************************************************************        \n       COPY CVCRD01Y.                                                           \n\n      ******************************************************************        \n      *Application Commmarea Copybook                                           \n       COPY COCOM01Y.                                                           \n\n       01 WS-THIS-PROGCOMMAREA.                                                 \n          05 CA-CALL-CONTEXT.                                                   \n             10 CA-FROM-PROGRAM                    PIC X(08).                   \n             10 CA-FROM-TRANID                     PIC X(04).                   \n\n       01  WS-COMMAREA                             PIC X(2000).                 \n\n      *IBM SUPPLIED COPYBOOKS                                                   \n       COPY DFHBMSCA.                                                           \n       COPY DFHAID.                                                             \n\n      *COMMON COPYBOOKS                                                         \n      *Screen Titles                                                            \n       COPY COTTL01Y.                                                           \n\n      *BMS Copybook                                                             \n       COPY COACTVW.                                                            \n\n      *Current Date                                                             \n       COPY CSDAT01Y.                                                           \n\n      *Common Messages                                                          \n       COPY CSMSG01Y.                                                           \n\n      *Abend Variables                                                          \n       COPY CSMSG02Y.                                                           \n\n      *Signed on user data                                                      \n       COPY CSUSR01Y.                                                           \n\n      *ACCOUNT RECORD LAYOUT                                                    \n       COPY CVACT01Y.                                                           \n\n\n      *CUSTOMER RECORD LAYOUT                                                   \n       COPY CVACT02Y.                                                           \n\n      *CARD XREF LAYOUT                                                         \n       COPY CVACT03Y.                                                           \n\n      *CUSTOMER LAYOUT                                                          \n       COPY CVCUS01Y.\n</code></pre>"},{"location":"COACTVWC.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This section defines the DFHCOMMAREA structure in the Linkage Section, which serves as the communication area for data exchange between CICS programs. It contains a single field defined as a variable-length array of 1-byte elements that can expand from 1 to 32,767 bytes depending on the actual length passed in EIBCALEN (CICS Executive Interface Block Communication Area Length). This flexible structure allows the program to receive and process variable-sized data from calling programs within the CardDemo application.</p> Code <pre><code>01  DFHCOMMAREA.                                                         \n         05  FILLER                                PIC X(1)                     \n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n</code></pre>"},{"location":"COACTVWC.html#procedure-division","title":"Procedure Division","text":""},{"location":"COACTVWC.html#0000-main","title":"0000-MAIN","text":"<p>This paragraph serves as the main control flow for the COACTVWC program, handling initialization, user input processing, and navigation. It begins by setting up error handling and initializing work areas, then processes the communication area to maintain context between program calls. The paragraph evaluates user actions based on PF keys pressed, with specific handling for PF3 (exit) and different program entry states. When a user enters the program initially, it displays the account search screen. Upon re-entry with user input, it validates the input, retrieves account information if valid, and redisplays the screen with results or error messages. The code includes thorough error handling throughout and maintains program context for proper navigation within the CardDemo application flow.</p> Code <pre><code>EXEC CICS HANDLE ABEND                                               \n                     LABEL(ABEND-ROUTINE)                                       \n           END-EXEC                                                             \n\n           INITIALIZE CC-WORK-AREA                                              \n                      WS-MISC-STORAGE                                           \n                      WS-COMMAREA                                               \n      *****************************************************************         \n      * Store our context                                                       \n      *****************************************************************         \n           MOVE LIT-THISTRANID       TO WS-TRANID                               \n      *****************************************************************         \n      * Ensure error message is cleared                               *         \n      *****************************************************************         \n           SET WS-RETURN-MSG-OFF  TO TRUE                                       \n      *****************************************************************         \n      * Store passed data if  any                *                              \n      *****************************************************************         \n           IF EIBCALEN IS EQUAL TO 0                                            \n               OR (CDEMO-FROM-PROGRAM = LIT-MENUPGM                             \n               AND NOT CDEMO-PGM-REENTER)                                       \n              INITIALIZE CARDDEMO-COMMAREA                                      \n                         WS-THIS-PROGCOMMAREA                                   \n           ELSE                                                                 \n              MOVE DFHCOMMAREA (1:LENGTH OF CARDDEMO-COMMAREA)  TO              \n                                CARDDEMO-COMMAREA                               \n              MOVE DFHCOMMAREA(LENGTH OF CARDDEMO-COMMAREA + 1:                 \n                               LENGTH OF WS-THIS-PROGCOMMAREA ) TO              \n                                WS-THIS-PROGCOMMAREA                            \n           END-IF                                                               \n\n      *****************************************************************         \n      * Remap PFkeys as needed.                                                 \n      * Store the Mapped PF Key                                                 \n      *****************************************************************         \n           PERFORM YYYY-STORE-PFKEY                                             \n              THRU YYYY-STORE-PFKEY-EXIT                                        \n      *****************************************************************         \n      * Check the AID to see if its valid at this point               *         \n      * F3 - Exit                                                               \n      * Enter show screen again                                                 \n      *****************************************************************         \n           SET PFK-INVALID TO TRUE                                              \n           IF CCARD-AID-ENTER OR                                                \n              CCARD-AID-PFK03                                                   \n              SET PFK-VALID TO TRUE                                             \n           END-IF                                                               \n\n           IF PFK-INVALID                                                       \n              SET CCARD-AID-ENTER TO TRUE                                       \n           END-IF                                                               \n\n      *****************************************************************         \n      * Decide what to do based on inputs received                              \n      *****************************************************************         \n      *****************************************************************         \n      *****************************************************************         \n      * Decide what to do based on inputs received                              \n      *****************************************************************         \n           EVALUATE TRUE                                                        \n              WHEN CCARD-AID-PFK03                                              \n      ******************************************************************        \n      *            XCTL TO CALLING PROGRAM OR MAIN MENU                         \n      ******************************************************************        \n                   IF CDEMO-FROM-TRANID    EQUAL LOW-VALUES                     \n                   OR CDEMO-FROM-TRANID    EQUAL SPACES                         \n                      MOVE LIT-MENUTRANID  TO CDEMO-TO-TRANID                   \n                   ELSE                                                         \n                      MOVE CDEMO-FROM-TRANID  TO CDEMO-TO-TRANID                \n                   END-IF                                                       \n                   IF CDEMO-FROM-PROGRAM   EQUAL LOW-VALUES                     \n                   OR CDEMO-FROM-PROGRAM   EQUAL SPACES                         \n                      MOVE LIT-MENUPGM     TO CDEMO-TO-PROGRAM                  \n                   ELSE                                                         \n                      MOVE CDEMO-FROM-PROGRAM TO CDEMO-TO-PROGRAM               \n                   END-IF                                                       \n\n                   MOVE LIT-THISTRANID     TO CDEMO-FROM-TRANID                 \n                   MOVE LIT-THISPGM        TO CDEMO-FROM-PROGRAM                \n\n                   SET  CDEMO-USRTYP-USER  TO TRUE                              \n                   SET  CDEMO-PGM-ENTER    TO TRUE                              \n                   MOVE LIT-THISMAPSET     TO CDEMO-LAST-MAPSET                 \n                   MOVE LIT-THISMAP        TO CDEMO-LAST-MAP                    \n      *                                                                         \n                   EXEC CICS XCTL                                               \n                             PROGRAM (CDEMO-TO-PROGRAM)                         \n                             COMMAREA(CARDDEMO-COMMAREA)                        \n                   END-EXEC                                                     \n              WHEN CDEMO-PGM-ENTER                                              \n      ******************************************************************        \n      *            COMING FROM SOME OTHER CONTEXT                               \n      *            SELECTION CRITERIA TO BE GATHERED                            \n      ******************************************************************        \n                   PERFORM 1000-SEND-MAP THRU                                   \n                           1000-SEND-MAP-EXIT                                   \n                   GO TO COMMON-RETURN                                          \n              WHEN CDEMO-PGM-REENTER                                            \n                   PERFORM 2000-PROCESS-INPUTS                                  \n                      THRU 2000-PROCESS-INPUTS-EXIT                             \n                   IF INPUT-ERROR                                               \n                      PERFORM 1000-SEND-MAP                                     \n                         THRU 1000-SEND-MAP-EXIT                                \n                      GO TO COMMON-RETURN                                       \n                   ELSE                                                         \n                      PERFORM 9000-READ-ACCT                                    \n                         THRU 9000-READ-ACCT-EXIT                               \n                      PERFORM 1000-SEND-MAP                                     \n                         THRU 1000-SEND-MAP-EXIT                                \n                      GO TO COMMON-RETURN                                       \n                   END-IF                                                       \n             WHEN OTHER                                                         \n                   MOVE LIT-THISPGM    TO ABEND-CULPRIT                         \n                   MOVE '0001'         TO ABEND-CODE                            \n                   MOVE SPACES         TO ABEND-REASON                          \n                   MOVE 'UNEXPECTED DATA SCENARIO'                              \n                                       TO WS-RETURN-MSG                         \n                   PERFORM SEND-PLAIN-TEXT                                      \n                      THRU SEND-PLAIN-TEXT-EXIT                                 \n           END-EVALUATE                                                         \n\n      * If we had an error setup error message that slipped through             \n      * Display and return                                                      \n           IF INPUT-ERROR                                                       \n              MOVE WS-RETURN-MSG  TO CCARD-ERROR-MSG                            \n              PERFORM 1000-SEND-MAP                                             \n                 THRU 1000-SEND-MAP-EXIT                                        \n              GO TO COMMON-RETURN                                               \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COACTVWC.html#common-return","title":"COMMON-RETURN","text":"<p>This paragraph handles the return logic for the COACTVWC program. It first transfers any error or status message to the communication area's error message field. Then it prepares the return communication area by combining the standard CardDemo communication area with this program's specific data. Finally, it executes a CICS RETURN command that maintains the same transaction ID and passes back the combined communication area to the calling program. This standardized return mechanism ensures proper state preservation and error reporting when control is returned to the caller.</p> Code <pre><code>MOVE WS-RETURN-MSG     TO CCARD-ERROR-MSG                            \n\n           MOVE  CARDDEMO-COMMAREA    TO WS-COMMAREA                            \n           MOVE  WS-THIS-PROGCOMMAREA TO                                        \n                  WS-COMMAREA(LENGTH OF CARDDEMO-COMMAREA + 1:                  \n                               LENGTH OF WS-THIS-PROGCOMMAREA )                 \n\n           EXEC CICS RETURN                                                     \n                TRANSID (LIT-THISTRANID)                                        \n                COMMAREA (WS-COMMAREA)                                          \n                LENGTH(LENGTH OF WS-COMMAREA)                                   \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COACTVWC.html#0000-main-exit","title":"0000-MAIN-EXIT","text":"<p>This paragraph serves as the exit point for the program, marking the end of processing. It's a simple control structure that allows the program to return control to the calling module or terminate execution after completing its account view operations.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COACTVWC.html#0000-main-exit_1","title":"0000-MAIN-EXIT","text":"<p>This paragraph serves as the exit point for the program, marking the end of processing. It's a simple control structure that allows the program to return control to the calling module or terminate execution after completing its account view operations.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COACTVWC.html#1000-send-map","title":"1000-SEND-MAP","text":"<p>This paragraph orchestrates the preparation and display of the account view screen. It follows a sequential process by first initializing the screen (1100-SCREEN-INIT), then setting up the screen variables with appropriate values (1200-SETUP-SCREEN-VARS), configuring the screen attributes for proper display formatting (1300-SETUP-SCREEN-ATTRS), and finally sending the completed screen to the user terminal (1400-SEND-SCREEN). This structured approach separates the different aspects of screen handling into distinct steps, making the code more maintainable and easier to troubleshoot.</p> Code <pre><code>PERFORM 1100-SCREEN-INIT                                             \n              THRU 1100-SCREEN-INIT-EXIT                                        \n           PERFORM 1200-SETUP-SCREEN-VARS                                       \n              THRU 1200-SETUP-SCREEN-VARS-EXIT                                  \n           PERFORM 1300-SETUP-SCREEN-ATTRS                                      \n              THRU 1300-SETUP-SCREEN-ATTRS-EXIT                                 \n           PERFORM 1400-SEND-SCREEN                                             \n              THRU 1400-SEND-SCREEN-EXIT                                        \n           .\n</code></pre>"},{"location":"COACTVWC.html#1000-send-map-exit","title":"1000-SEND-MAP-EXIT","text":"<p>This paragraph serves as a simple exit point for the 1000-SEND-MAP routine in the COACTVWC program. It marks the end of the routine that handles displaying the account view screen to the user, providing a clean control flow structure within the program.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COACTVWC.html#1100-screen-init","title":"1100-SCREEN-INIT","text":"<p>This paragraph initializes the account view screen by clearing the output area and populating standard header information. It retrieves the current system date and time using the FUNCTION CURRENT-DATE, formats these values into display format (MM/DD/YY and HH:MM:SS), and places them on the screen. The paragraph also sets up common screen elements including title information and program identification details. This initialization routine prepares the screen before any account-specific data is retrieved or displayed.</p> Code <pre><code>MOVE LOW-VALUES             TO CACTVWAO                              \n\n           MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA                       \n\n           MOVE CCDA-TITLE01           TO TITLE01O OF CACTVWAO                  \n           MOVE CCDA-TITLE02           TO TITLE02O OF CACTVWAO                  \n           MOVE LIT-THISTRANID         TO TRNNAMEO OF CACTVWAO                  \n           MOVE LIT-THISPGM            TO PGMNAMEO OF CACTVWAO                  \n\n           MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA                       \n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM                         \n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD                         \n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY                         \n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF CACTVWAO                  \n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH                         \n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM                         \n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS                         \n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF CACTVWAO                  \n\n           .\n</code></pre>"},{"location":"COACTVWC.html#1100-screen-init-exit","title":"1100-SCREEN-INIT-EXIT","text":"<p>This paragraph serves as an exit point for the screen initialization routine in the COACTVWC program. It marks the end of the screen initialization process, allowing the program to return control to the calling section after the account view screen has been properly set up for display to the user.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COACTVWC.html#1200-setup-screen-vars","title":"1200-SETUP-SCREEN-VARS","text":"<p>This paragraph populates the account view screen with data based on the program's state. It first checks if this is an initial call (EIBCALEN = 0) or a subsequent interaction. For subsequent interactions, it handles the account ID field display based on whether a filter was provided. When account or customer records have been found, it populates numerous screen fields with account information (status, balance, credit limits, dates) and customer details (name, address, contact information, identification numbers). The paragraph formats the Social Security Number with hyphens for display purposes. It also manages informational and error messages to be displayed on the screen. This logic serves as the data preparation step before rendering the account view interface to the user.</p> Code <pre><code>*    INITIALIZE SEARCH CRITERIA                                           \n           IF EIBCALEN = 0                                                      \n              SET  WS-PROMPT-FOR-INPUT TO TRUE                                  \n           ELSE\n              IF FLG-ACCTFILTER-BLANK  \n                 MOVE LOW-VALUES   TO ACCTSIDO OF CACTVWAO                      \n              ELSE                                                              \n                 MOVE CC-ACCT-ID   TO ACCTSIDO OF CACTVWAO                      \n              END-IF                                                            \n\n              IF FOUND-ACCT-IN-MASTER                                           \n              OR FOUND-CUST-IN-MASTER                                           \n                 MOVE ACCT-ACTIVE-STATUS  TO ACSTTUSO OF CACTVWAO               \n\n                 MOVE ACCT-CURR-BAL       TO ACURBALO OF CACTVWAO               \n\n                 MOVE ACCT-CREDIT-LIMIT   TO ACRDLIMO OF CACTVWAO               \n\n                 MOVE ACCT-CASH-CREDIT-LIMIT\n                                          TO ACSHLIMO OF CACTVWAO               \n\n                 MOVE ACCT-CURR-CYC-CREDIT          \n                                          TO ACRCYCRO OF CACTVWAO               \n\n                 MOVE ACCT-CURR-CYC-DEBIT TO ACRCYDBO OF CACTVWAO               \n\n                 MOVE ACCT-OPEN-DATE      TO ADTOPENO OF CACTVWAO               \n                 MOVE ACCT-EXPIRAION-DATE TO AEXPDTO  OF CACTVWAO               \n                 MOVE ACCT-REISSUE-DATE   TO AREISDTO OF CACTVWAO               \n                 MOVE ACCT-GROUP-ID       TO AADDGRPO OF CACTVWAO               \n              END-IF                                                            \n\n              IF FOUND-CUST-IN-MASTER                                           \n                MOVE CUST-ID              TO ACSTNUMO OF CACTVWAO               \n      *         MOVE CUST-SSN             TO ACSTSSNO OF CACTVWAO       \n                STRING \n                    CUST-SSN(1:3)\n                    '-'                 \n                    CUST-SSN(4:2)\n                    '-'\n                    CUST-SSN(6:4)\n                    DELIMITED BY SIZE\n                    INTO ACSTSSNO OF CACTVWAO\n                END-STRING                                                      \n                MOVE CUST-FICO-CREDIT-SCORE                                     \n                                          TO ACSTFCOO OF CACTVWAO               \n                MOVE CUST-DOB-YYYY-MM-DD  TO ACSTDOBO OF CACTVWAO               \n                MOVE CUST-FIRST-NAME      TO ACSFNAMO OF CACTVWAO               \n                MOVE CUST-MIDDLE-NAME     TO ACSMNAMO OF CACTVWAO               \n                MOVE CUST-LAST-NAME       TO ACSLNAMO OF CACTVWAO               \n                MOVE CUST-ADDR-LINE-1     TO ACSADL1O OF CACTVWAO               \n                MOVE CUST-ADDR-LINE-2     TO ACSADL2O OF CACTVWAO               \n                MOVE CUST-ADDR-LINE-3     TO ACSCITYO OF CACTVWAO               \n                MOVE CUST-ADDR-STATE-CD   TO ACSSTTEO OF CACTVWAO               \n                MOVE CUST-ADDR-ZIP        TO ACSZIPCO OF CACTVWAO               \n                MOVE CUST-ADDR-COUNTRY-CD TO ACSCTRYO OF CACTVWAO               \n                MOVE CUST-PHONE-NUM-1     TO ACSPHN1O OF CACTVWAO               \n                MOVE CUST-PHONE-NUM-2     TO ACSPHN2O OF CACTVWAO               \n                MOVE CUST-GOVT-ISSUED-ID  TO ACSGOVTO OF CACTVWAO               \n                MOVE CUST-EFT-ACCOUNT-ID  TO ACSEFTCO OF CACTVWAO               \n                MOVE CUST-PRI-CARD-HOLDER-IND                                   \n                                          TO ACSPFLGO OF CACTVWAO               \n              END-IF                                                            \n\n            END-IF                                                              \n\n      *    SETUP MESSAGE                                                        \n           IF WS-NO-INFO-MESSAGE                                                \n             SET WS-PROMPT-FOR-INPUT TO TRUE                                    \n           END-IF                                                               \n\n           MOVE WS-RETURN-MSG          TO ERRMSGO OF CACTVWAO                   \n\n           MOVE WS-INFO-MSG            TO INFOMSGO OF CACTVWAO                  \n           .\n</code></pre>"},{"location":"COACTVWC.html#1200-setup-screen-vars-exit","title":"1200-SETUP-SCREEN-VARS-EXIT","text":"<p>This paragraph serves as an exit point for the 1200-SETUP-SCREEN-VARS routine. It provides a clean termination point for the screen variable setup process, allowing the program to return control to the calling routine after completing the initialization of screen display variables.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COACTVWC.html#1300-setup-screen-attrs","title":"1300-SETUP-SCREEN-ATTRS","text":"<p>This paragraph configures the screen attributes for the account view interface. It sets up field protection, cursor positioning, and color coding based on the current state of the application. The paragraph first protects the account ID field using DFHBMFSE attribute, then positions the cursor at the account ID field regardless of the current condition. It applies color attributes to the account ID field, using red to highlight validation errors (when the account filter is invalid) or when a blank account ID is submitted on a re-entry. The paragraph also handles the display attributes for information messages, making them dark if no message is present or neutral color if a message needs to be displayed. These visual cues help guide the user through the account search process by clearly indicating input errors and required fields.</p> Code <pre><code>*    PROTECT OR UNPROTECT BASED ON CONTEXT                                \n           MOVE DFHBMFSE               TO ACCTSIDA OF CACTVWAI                  \n\n      *    POSITION CURSOR                                                      \n           EVALUATE TRUE                                                        \n              WHEN FLG-ACCTFILTER-NOT-OK                                        \n              WHEN FLG-ACCTFILTER-BLANK                                         \n                   MOVE -1             TO ACCTSIDL OF CACTVWAI                  \n              WHEN OTHER                                                        \n                   MOVE -1             TO ACCTSIDL OF CACTVWAI                  \n           END-EVALUATE                                                         \n\n      *    SETUP COLOR                                                          \n           MOVE DFHDFCOL               TO ACCTSIDC OF CACTVWAO                  \n\n           IF FLG-ACCTFILTER-NOT-OK                                             \n              MOVE DFHRED              TO ACCTSIDC OF CACTVWAO                  \n           END-IF                                                               \n\n           IF  FLG-ACCTFILTER-BLANK                                             \n           AND CDEMO-PGM-REENTER                                                \n               MOVE '*'                TO ACCTSIDO OF CACTVWAO                  \n               MOVE DFHRED             TO ACCTSIDC OF CACTVWAO                  \n           END-IF                                                               \n\n           IF  WS-NO-INFO-MESSAGE                                               \n               MOVE DFHBMDAR           TO INFOMSGC OF CACTVWAO                  \n           ELSE                                                                 \n               MOVE DFHNEUTR           TO INFOMSGC OF CACTVWAO                  \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COACTVWC.html#1300-setup-screen-attrs-exit","title":"1300-SETUP-SCREEN-ATTRS-EXIT","text":"<p>This paragraph serves as an exit point for the screen attributes setup routine in the COACTVWC program. It marks the end of the 1300-SETUP-SCREEN-ATTRS section, allowing the program to return control to the calling routine after screen attribute initialization has been completed.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COACTVWC.html#1400-send-screen","title":"1400-SEND-SCREEN","text":"<p>This paragraph handles the screen display functionality for the account view component. It sets up the next map and mapset values in the common communication area, indicating that the program should be re-entered after the screen is displayed. The paragraph then executes a CICS SEND MAP command to display the account view screen (CACTVWAO) to the user, positioning the cursor appropriately. The ERASE option clears the screen before displaying the new content, while FREEKB unlocks the keyboard for user input. The response code from this operation is captured in WS-RESP-CD for error handling purposes.</p> Code <pre><code>MOVE LIT-THISMAPSET         TO CCARD-NEXT-MAPSET                     \n           MOVE LIT-THISMAP            TO CCARD-NEXT-MAP                        \n           SET  CDEMO-PGM-REENTER TO TRUE                                       \n\n           EXEC CICS SEND MAP(CCARD-NEXT-MAP)                                   \n                          MAPSET(CCARD-NEXT-MAPSET)                             \n                          FROM(CACTVWAO)                                        \n                          CURSOR                                                \n                          ERASE                                                 \n                          FREEKB                                                \n                          RESP(WS-RESP-CD)                                      \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COACTVWC.html#1400-send-screen-exit","title":"1400-SEND-SCREEN-EXIT","text":"<p>This paragraph serves as an exit point for the screen sending routine in the COACTVWC program. It marks the end of the 1400-SEND-SCREEN section, allowing the program to return control to the calling section after the account view screen has been sent to the user.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COACTVWC.html#2000-process-inputs","title":"2000-PROCESS-INPUTS","text":"<p>This paragraph handles the initial processing of user inputs for the account view function. It first receives the map data from the user interface, then validates the input data through the edit map inputs routine. After processing, it sets up the error message (if any) and prepares for the next program flow by setting the program, mapset, and map names in the communication area. This establishes the foundation for subsequent processing by ensuring valid input before attempting to retrieve account information.</p> Code <pre><code>PERFORM 2100-RECEIVE-MAP                                             \n              THRU 2100-RECEIVE-MAP-EXIT                                        \n           PERFORM 2200-EDIT-MAP-INPUTS                                         \n              THRU 2200-EDIT-MAP-INPUTS-EXIT                                    \n           MOVE WS-RETURN-MSG  TO CCARD-ERROR-MSG                               \n           MOVE LIT-THISPGM    TO CCARD-NEXT-PROG                               \n           MOVE LIT-THISMAPSET TO CCARD-NEXT-MAPSET                             \n           MOVE LIT-THISMAP    TO CCARD-NEXT-MAP                                \n           .\n</code></pre>"},{"location":"COACTVWC.html#2000-process-inputs-exit","title":"2000-PROCESS-INPUTS-EXIT","text":"<p>This paragraph serves as an exit point for the 2000-PROCESS-INPUTS section of the COACTVWC program. It provides a clean termination point for the input processing logic, allowing the program flow to return to the calling section after input validation and processing has been completed.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COACTVWC.html#2100-receive-map","title":"2100-RECEIVE-MAP","text":"<p>This paragraph receives user input from the screen map named in LIT-THISMAP within the mapset LIT-THISMAPSET. It stores the received data into the CACTVWAI structure, which likely contains the account search criteria entered by the user. The paragraph captures both response and reason codes in WS-RESP-CD and WS-REAS-CD variables, which will be used for error handling if the receive operation encounters any issues.</p> Code <pre><code>EXEC CICS RECEIVE MAP(LIT-THISMAP)                                   \n                     MAPSET(LIT-THISMAPSET)                                     \n                     INTO(CACTVWAI)                                             \n                     RESP(WS-RESP-CD)                                           \n                     RESP2(WS-REAS-CD)                                          \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COACTVWC.html#2100-receive-map-exit","title":"2100-RECEIVE-MAP-EXIT","text":"<p>This paragraph serves as an exit point for the 2100-RECEIVE-MAP routine in the COACTVWC program. It provides a clean termination point for the routine that handles receiving user input from the account view screen. The paragraph contains only the EXIT statement, marking the end of the logical processing block without performing any additional operations.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COACTVWC.html#2200-edit-map-inputs","title":"2200-EDIT-MAP-INPUTS","text":"<p>This paragraph handles the validation and processing of user input from the account search screen. It first sets flags to indicate valid input status, then processes the account ID field by either converting asterisks or spaces to low-values (which likely indicates a wildcard search) or capturing the specific account ID entered by the user. The code then performs detailed validation of the account field through the 2210-EDIT-ACCOUNT paragraph and checks if no search criteria were provided (blank account filter). The processing results are tracked through status flags that will determine subsequent program flow and error handling.</p> Code <pre><code>SET INPUT-OK                  TO TRUE                                \n           SET FLG-ACCTFILTER-ISVALID    TO TRUE                                \n\n      *    REPLACE * WITH LOW-VALUES                                            \n           IF  ACCTSIDI OF CACTVWAI = '*'                                       \n           OR  ACCTSIDI OF CACTVWAI = SPACES                                    \n               MOVE LOW-VALUES           TO  CC-ACCT-ID                         \n           ELSE                                                                 \n               MOVE ACCTSIDI OF CACTVWAI TO  CC-ACCT-ID                         \n           END-IF                                                               \n\n      *    INDIVIDUAL FIELD EDITS                                               \n           PERFORM 2210-EDIT-ACCOUNT                                            \n              THRU 2210-EDIT-ACCOUNT-EXIT                                       \n\n      *    CROSS FIELD EDITS                                                    \n           IF  FLG-ACCTFILTER-BLANK                                             \n               SET NO-SEARCH-CRITERIA-RECEIVED TO TRUE                          \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COACTVWC.html#2200-edit-map-inputs-exit","title":"2200-EDIT-MAP-INPUTS-EXIT","text":"<p>This paragraph serves as an exit point for the 2200-EDIT-MAP-INPUTS routine. It marks the end of the input validation logic for the account view screen, allowing the program flow to return to the calling section after input processing is complete.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COACTVWC.html#2210-edit-account","title":"2210-EDIT-ACCOUNT","text":"<p>This paragraph validates the account ID input provided by the user. It first checks if the account ID is empty (spaces or low-values) and sets appropriate error flags if so, prompting the user to enter an account number. Next, it verifies that the account ID is numeric, non-zero, and properly formatted. If validation fails, it sets error flags and provides a specific error message indicating that the account filter must be a non-zero 11-digit number. When validation succeeds, it moves the account ID to the demo account ID field and sets a flag indicating the account filter is valid. The paragraph includes conditional message handling based on the return message settings.</p> Code <pre><code>SET FLG-ACCTFILTER-NOT-OK TO TRUE                                    \n\n      *    Not supplied                                                         \n           IF CC-ACCT-ID   EQUAL LOW-VALUES                                     \n           OR CC-ACCT-ID   EQUAL SPACES                                         \n              SET INPUT-ERROR           TO TRUE                                 \n              SET FLG-ACCTFILTER-BLANK  TO TRUE                                 \n              IF WS-RETURN-MSG-OFF                                              \n                 SET WS-PROMPT-FOR-ACCT TO TRUE                                 \n              END-IF                                                            \n              MOVE ZEROES       TO CDEMO-ACCT-ID                                \n              GO TO  2210-EDIT-ACCOUNT-EXIT                                     \n           END-IF                                                               \n      *                                                                         \n      *    Not numeric                                                          \n      *    Not 11 characters                                                    \n           IF CC-ACCT-ID  IS NOT NUMERIC \n           OR CC-ACCT-ID  EQUAL ZEROES                                          \n              SET INPUT-ERROR TO TRUE                                           \n              SET FLG-ACCTFILTER-NOT-OK TO TRUE                                 \n              IF WS-RETURN-MSG-OFF                                              \n                MOVE                                                            \n              'Account Filter must  be a non-zero 11 digit number'      00\n                              TO WS-RETURN-MSG                                  \n              END-IF                                                            \n              MOVE ZERO       TO CDEMO-ACCT-ID                                  \n              GO TO 2210-EDIT-ACCOUNT-EXIT                                      \n           ELSE                                                                 \n              MOVE CC-ACCT-ID TO CDEMO-ACCT-ID                                  \n              SET FLG-ACCTFILTER-ISVALID TO TRUE                                \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COACTVWC.html#2210-edit-account-exit","title":"2210-EDIT-ACCOUNT-EXIT","text":"<p>This paragraph serves as an exit point for the account editing process in the COACTVWC program. It provides a clean termination point for the 2210-EDIT-ACCOUNT routine, allowing the program flow to return to the calling section after account validation and processing is complete.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COACTVWC.html#9000-read-acct","title":"9000-READ-ACCT","text":"<p>This paragraph retrieves and validates account information across multiple data sources. It first sets a flag indicating no information message is needed, then uses the provided account ID to search for related records. The process follows a sequential validation flow: first checking the card cross-reference file, then retrieving account data, and finally fetching customer information using the customer ID obtained from the account record. At each step, the paragraph verifies successful record retrieval and exits if any lookup fails. This ensures that complete and valid account information is available before proceeding with further processing in the main program flow.</p> Code <pre><code>SET  WS-NO-INFO-MESSAGE  TO TRUE\n\n           MOVE CDEMO-ACCT-ID TO WS-CARD-RID-ACCT-ID                            \n\n           PERFORM 9200-GETCARDXREF-BYACCT                                      \n              THRU 9200-GETCARDXREF-BYACCT-EXIT                                 \n\n      *    IF DID-NOT-FIND-ACCT-IN-CARDXREF                                     \n           IF FLG-ACCTFILTER-NOT-OK                                             \n              GO TO 9000-READ-ACCT-EXIT                                         \n           END-IF                                                               \n\n           PERFORM 9300-GETACCTDATA-BYACCT                                      \n              THRU 9300-GETACCTDATA-BYACCT-EXIT                                 \n\n           IF DID-NOT-FIND-ACCT-IN-ACCTDAT                                      \n              GO TO 9000-READ-ACCT-EXIT                                         \n           END-IF                                                               \n\n           MOVE CDEMO-CUST-ID TO WS-CARD-RID-CUST-ID                            \n\n           PERFORM 9400-GETCUSTDATA-BYCUST                                      \n              THRU 9400-GETCUSTDATA-BYCUST-EXIT                                 \n\n           IF DID-NOT-FIND-CUST-IN-CUSTDAT                                      \n              GO TO 9000-READ-ACCT-EXIT                                         \n           END-IF                                                               \n\n\n           .\n</code></pre>"},{"location":"COACTVWC.html#9000-read-acct-exit","title":"9000-READ-ACCT-EXIT","text":"<p>This paragraph serves as an exit point for the account reading process in the COACTVWC program. It provides a structured way to terminate the account reading routine and return control to the calling section. This simple exit point helps maintain the program's modular structure and control flow when processing account information.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COACTVWC.html#9200-getcardxref-byacct","title":"9200-GETCARDXREF-BYACCT","text":"<p>This paragraph retrieves card cross-reference information by account ID from the card cross-reference file using an alternate index. It performs a CICS READ operation on the CARDXREF file using the account ID as the key. Upon successful retrieval, it extracts the customer ID and card number from the record and stores them in the communication area fields. The paragraph includes comprehensive error handling for different scenarios: when the record is found (normal case), when no matching record exists (generating a specific \"Account not found\" error message), and for other unexpected errors (generating a generic file error message). The error handling logic sets appropriate flags to indicate the failure condition and constructs detailed error messages that include the response codes for troubleshooting purposes.</p> Code <pre><code>*    Read the Card file. Access via alternate index ACCTID                \n      *                                                                         \n           EXEC CICS READ                                                       \n                DATASET   (LIT-CARDXREFNAME-ACCT-PATH)                          \n                RIDFLD    (WS-CARD-RID-ACCT-ID-X)                               \n                KEYLENGTH (LENGTH OF WS-CARD-RID-ACCT-ID-X)                     \n                INTO      (CARD-XREF-RECORD)                                    \n                LENGTH    (LENGTH OF CARD-XREF-RECORD)                          \n                RESP      (WS-RESP-CD)                                          \n                RESP2     (WS-REAS-CD)                                          \n           END-EXEC                                                             \n\n           EVALUATE WS-RESP-CD                                                  \n               WHEN DFHRESP(NORMAL)                                             \n                  MOVE XREF-CUST-ID               TO CDEMO-CUST-ID              \n                  MOVE XREF-CARD-NUM              TO CDEMO-CARD-NUM             \n               WHEN DFHRESP(NOTFND)                                             \n                  SET INPUT-ERROR                 TO TRUE                       \n                  SET FLG-ACCTFILTER-NOT-OK       TO TRUE                       \n                  IF WS-RETURN-MSG-OFF                                          \n                    MOVE WS-RESP-CD               TO ERROR-RESP                 \n                    MOVE WS-REAS-CD               TO ERROR-RESP2                \n                    STRING                                                      \n                    'Account:'                                                  \n                     WS-CARD-RID-ACCT-ID-X                                      \n                    ' not found in'                                             \n                    ' Cross ref file.  Resp:'                                   \n                    ERROR-RESP                                                  \n                    ' Reas:'                                                    \n                    ERROR-RESP2                                                 \n                    DELIMITED BY SIZE                                           \n                    INTO WS-RETURN-MSG                                          \n                    END-STRING                                                  \n                  END-IF                                                        \n               WHEN OTHER                                                       \n                  SET INPUT-ERROR                 TO TRUE                       \n                  SET FLG-ACCTFILTER-NOT-OK                TO TRUE              \n                  MOVE 'READ'                     TO ERROR-OPNAME               \n                  MOVE LIT-CARDXREFNAME-ACCT-PATH TO ERROR-FILE                 \n                  MOVE WS-RESP-CD                 TO ERROR-RESP                 \n                  MOVE WS-REAS-CD                 TO ERROR-RESP2                \n                  MOVE WS-FILE-ERROR-MESSAGE      TO WS-RETURN-MSG              \n      *                                              WS-LONG-MSG                \n      *          PERFORM SEND-LONG-TEXT                                         \n           END-EVALUATE                                                         \n           .\n</code></pre>"},{"location":"COACTVWC.html#9200-getcardxref-byacct-exit","title":"9200-GETCARDXREF-BYACCT-EXIT","text":"<p>This paragraph serves as an exit point for the GETCARDXREF-BYACCT routine, marking the end of the process that retrieves card cross-reference data by account number. It provides a clean termination point for the routine, allowing control to return to the calling section after the card cross-reference data has been successfully retrieved or after handling any error conditions.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COACTVWC.html#9300-getacctdata-byacct","title":"9300-GETACCTDATA-BYACCT","text":"<p>This paragraph retrieves account data from the account master file using the provided account ID. It performs a CICS READ operation on the account file using the account ID as the key. The paragraph handles three possible outcomes: successful retrieval (setting the FOUND-ACCT-IN-MASTER flag), record not found (setting appropriate error flags and constructing a user-friendly error message indicating the account wasn't found), or other file access errors (setting error flags and generating a technical error message with response codes). The error handling includes detailed information about the nature of the failure, which helps with troubleshooting. This is a critical component of the account lookup functionality, as it performs the primary data retrieval that drives subsequent processing in the program.</p> Code <pre><code>EXEC CICS READ                                                       \n                DATASET   (LIT-ACCTFILENAME)                                    \n                RIDFLD    (WS-CARD-RID-ACCT-ID-X)                               \n                KEYLENGTH (LENGTH OF WS-CARD-RID-ACCT-ID-X)                     \n                INTO      (ACCOUNT-RECORD)                                      \n                LENGTH    (LENGTH OF ACCOUNT-RECORD)                            \n                RESP      (WS-RESP-CD)                                          \n                RESP2     (WS-REAS-CD)                                          \n           END-EXEC                                                             \n\n           EVALUATE WS-RESP-CD                                                  \n               WHEN DFHRESP(NORMAL)                                             \n                  SET FOUND-ACCT-IN-MASTER        TO TRUE                       \n               WHEN DFHRESP(NOTFND)                                             \n                  SET INPUT-ERROR                 TO TRUE                       \n                  SET FLG-ACCTFILTER-NOT-OK       TO TRUE                       \n      *           SET DID-NOT-FIND-ACCT-IN-ACCTDAT TO TRUE                      \n                  IF WS-RETURN-MSG-OFF                                          \n                    MOVE WS-RESP-CD               TO ERROR-RESP                 \n                    MOVE WS-REAS-CD               TO ERROR-RESP2                \n                    STRING                                                      \n                    'Account:'                                                  \n                     WS-CARD-RID-ACCT-ID-X                                      \n                    ' not found in'                                             \n                    ' Acct Master file.Resp:'                                   \n                    ERROR-RESP                                                  \n                    ' Reas:'                                                    \n                    ERROR-RESP2                                                 \n                    DELIMITED BY SIZE                                           \n                    INTO WS-RETURN-MSG                                          \n                    END-STRING                                                  \n                  END-IF                                                        \n      *                                                                         \n               WHEN OTHER                                                       \n                  SET INPUT-ERROR                 TO TRUE                       \n                  SET FLG-ACCTFILTER-NOT-OK                TO TRUE              \n                  MOVE 'READ'                     TO ERROR-OPNAME               \n                  MOVE LIT-ACCTFILENAME           TO ERROR-FILE                 \n                  MOVE WS-RESP-CD                 TO ERROR-RESP                 \n                  MOVE WS-REAS-CD                 TO ERROR-RESP2                \n                  MOVE WS-FILE-ERROR-MESSAGE      TO WS-RETURN-MSG              \n      *                                              WS-LONG-MSG                \n      *           PERFORM SEND-LONG-TEXT                                        \n           END-EVALUATE                                                         \n           .\n</code></pre>"},{"location":"COACTVWC.html#9300-getacctdata-byacct-exit","title":"9300-GETACCTDATA-BYACCT-EXIT","text":"<p>This paragraph serves as an exit point for the GETACCTDATA-BYACCT routine. It marks the end of the account data retrieval process when searching by account number, allowing the program to return control to the calling section after completing the account lookup operation.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COACTVWC.html#9400-getcustdata-bycust","title":"9400-GETCUSTDATA-BYCUST","text":"<p>This paragraph retrieves customer data from the customer master file using the customer ID as the key. It executes a CICS READ command against the customer file (LIT-CUSTFILENAME) using the customer ID stored in WS-CARD-RID-CUST-ID-X as the record key. The retrieved data is stored in the CUSTOMER-RECORD structure.</p> <p>The paragraph includes comprehensive error handling through an EVALUATE statement that processes three possible outcomes: 1. When the read is successful (DFHRESP(NORMAL)), it sets the FOUND-CUST-IN-MASTER flag to TRUE. 2. When the customer record is not found (DFHRESP(NOTFND)), it sets error flags (INPUT-ERROR and FLG-CUSTFILTER-NOT-OK) and constructs a detailed error message indicating the customer ID was not found in the master file. 3. For any other response code, it sets error flags, captures the file operation details (READ operation on the customer file), and prepares a general file error message.</p> <p>This functionality is a critical part of the account view process, as it retrieves the customer information needed to display complete account details.</p> Code <pre><code>EXEC CICS READ                                                       \n                DATASET   (LIT-CUSTFILENAME)                                    \n                RIDFLD    (WS-CARD-RID-CUST-ID-X)                               \n                KEYLENGTH (LENGTH OF WS-CARD-RID-CUST-ID-X)                     \n                INTO      (CUSTOMER-RECORD)                                     \n                LENGTH    (LENGTH OF CUSTOMER-RECORD)                           \n                RESP      (WS-RESP-CD)                                          \n                RESP2     (WS-REAS-CD)                                          \n           END-EXEC                                                             \n\n           EVALUATE WS-RESP-CD                                                  \n               WHEN DFHRESP(NORMAL)                                             \n                  SET FOUND-CUST-IN-MASTER        TO TRUE                       \n               WHEN DFHRESP(NOTFND)                                             \n                  SET INPUT-ERROR                 TO TRUE                       \n                  SET FLG-CUSTFILTER-NOT-OK       TO TRUE                       \n      *           SET DID-NOT-FIND-CUST-IN-CUSTDAT TO TRUE                      \n                  MOVE WS-RESP-CD               TO ERROR-RESP                   \n                  MOVE WS-REAS-CD               TO ERROR-RESP2                  \n                  IF WS-RETURN-MSG-OFF                                          \n                    STRING                                                      \n                    'CustId:'                                                   \n                     WS-CARD-RID-CUST-ID-X                                      \n                    ' not found'                                                \n                    ' in customer master.Resp: '                                \n                    ERROR-RESP                                                  \n                    ' REAS:'                                                    \n                    ERROR-RESP2                                                 \n                    DELIMITED BY SIZE                                           \n                    INTO WS-RETURN-MSG                                          \n                    END-STRING                                                  \n                  END-IF                                                        \n               WHEN OTHER                                                       \n                  SET INPUT-ERROR                 TO TRUE                       \n                  SET FLG-CUSTFILTER-NOT-OK                TO TRUE              \n                  MOVE 'READ'                     TO ERROR-OPNAME               \n                  MOVE LIT-CUSTFILENAME           TO ERROR-FILE                 \n                  MOVE WS-RESP-CD                 TO ERROR-RESP                 \n                  MOVE WS-REAS-CD                 TO ERROR-RESP2                \n                  MOVE WS-FILE-ERROR-MESSAGE      TO WS-RETURN-MSG              \n      *                                              WS-LONG-MSG                \n      *           PERFORM SEND-LONG-TEXT                                        \n           END-EVALUATE                                                         \n           .\n</code></pre>"},{"location":"COACTVWC.html#9400-getcustdata-bycust-exit","title":"9400-GETCUSTDATA-BYCUST-EXIT","text":"<p>This paragraph serves as an exit point for the GETCUSTDATA-BYCUST routine, which retrieves customer data based on customer identification. The comment warns that this is a plain text exit that should not be used in production environments, suggesting it may be a simplified or unsecured implementation intended only for development or testing purposes within the CardDemo application.</p> Code <pre><code>EXIT                                                                 \n           .                                                                    \n\n      *****************************************************************         \n      * Plain text exit - Dont use in production                      *         \n      *****************************************************************\n</code></pre>"},{"location":"COACTVWC.html#send-plain-text","title":"SEND-PLAIN-TEXT","text":"<p>This paragraph sends a plain text message to the user's terminal in the CardDemo account view component. It uses the CICS SEND TEXT command to display the content stored in WS-RETURN-MSG, specifying the length dynamically. The ERASE option clears the screen before displaying the message, while FREEKB unlocks the keyboard for user input. After sending the message, the paragraph executes a CICS RETURN command to end the current task and return control to CICS. This functionality is typically used for displaying error messages or informational text when standard screen formatting isn't required.</p> Code <pre><code>EXEC CICS SEND TEXT                                                  \n                     FROM(WS-RETURN-MSG)                                        \n                     LENGTH(LENGTH OF WS-RETURN-MSG)                            \n                     ERASE                                                      \n                     FREEKB                                                     \n           END-EXEC                                                             \n\n           EXEC CICS RETURN                                                     \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COACTVWC.html#send-plain-text-exit","title":"SEND-PLAIN-TEXT-EXIT","text":"<p>This paragraph serves as an exit point for displaying long text messages, primarily intended for debugging purposes. It's specifically designed not to be used during normal program operation, but rather as a diagnostic tool for developers when troubleshooting issues in the account view functionality.</p> Code <pre><code>EXIT                                                                 \n           .                                                                    \n      *****************************************************************         \n      * Display Long text and exit                                    *         \n      * This is primarily for debugging and should not be used in     *         \n      * regular course                                                *         \n      *****************************************************************\n</code></pre>"},{"location":"COACTVWC.html#send-long-text","title":"SEND-LONG-TEXT","text":"<p>This paragraph sends a long message to the user's terminal screen using CICS SEND TEXT command. It displays the contents of the WS-LONG-MSG field, clears the screen (ERASE), and unlocks the keyboard (FREEKB). After sending the message, it returns control to CICS, effectively ending the transaction. This is typically used for displaying error messages or informational text that requires the full screen.</p> Code <pre><code>EXEC CICS SEND TEXT                                                  \n                     FROM(WS-LONG-MSG)                                          \n                     LENGTH(LENGTH OF WS-LONG-MSG)                              \n                     ERASE                                                      \n                     FREEKB                                                     \n           END-EXEC                                                             \n\n           EXEC CICS RETURN                                                     \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COACTVWC.html#send-long-text-exit","title":"SEND-LONG-TEXT-EXIT","text":"<p>This paragraph serves as an exit point for the SEND-LONG-TEXT routine in the account view component. It includes a reference to the 'CSSTRPFY' copybook, which contains common code for storing and handling PF key information. This structure allows the program to maintain consistent PF key processing across different parts of the CardDemo application while providing a clean exit from the text display functionality.</p> Code <pre><code>EXIT                                                                 \n           . \n      *****************************************************************         \n      *Common code to store PFKey\n      ******************************************************************\n       COPY 'CSSTRPFY'\n           .\n</code></pre>"},{"location":"COACTVWC.html#abend-routine","title":"ABEND-ROUTINE","text":"<p>This paragraph handles abnormal termination (ABEND) processing in the COACTVWC program. When an error occurs that requires program termination, this routine ensures proper error messaging before ending execution. If no specific error message has been set (ABEND-MSG contains LOW-VALUES), it sets a default \"UNEXPECTED ABEND OCCURRED\" message. It identifies the current program as the source of the error by storing the program name in ABEND-CULPRIT. The routine then displays the error information to the user via a CICS SEND command, cancels any existing abend handlers to prevent recursive error handling, and finally terminates the program with abend code '9999'. This provides a controlled shutdown mechanism that communicates failure information to both users and system administrators.</p> Code <pre><code>IF ABEND-MSG EQUAL LOW-VALUES                                        \n              MOVE 'UNEXPECTED ABEND OCCURRED.' TO ABEND-MSG                    \n           END-IF                                                               \n\n           MOVE LIT-THISPGM       TO ABEND-CULPRIT                              \n\n           EXEC CICS SEND                                                       \n                            FROM (ABEND-DATA)                                   \n                            LENGTH(LENGTH OF ABEND-DATA)                        \n                            NOHANDLE                                            \n           END-EXEC                                                             \n\n           EXEC CICS HANDLE ABEND                                               \n                CANCEL                                                          \n           END-EXEC                                                             \n\n           EXEC CICS ABEND                                                      \n                ABCODE('9999')                                                  \n           END-EXEC                                                             \n           .                                                                    \n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:32 CDT\n      *\n</code></pre>"},{"location":"COADM01C.html","title":"COADM01C","text":""},{"location":"COADM01C.html#overview","title":"Overview","text":"<p>This program serves as the administrative menu interface for the CardDemo application, providing a centralized access point for administrative functions. It displays a menu of options available to admin users and handles navigation to the selected administrative functions. The program manages user input validation, ensuring only valid menu options are processed, and provides appropriate error messages for invalid selections. It maintains session context through a commarea and includes navigation capabilities to return to the sign-on screen. The interface displays current date and time information in the header along with program and transaction identifiers, creating a complete administrative console experience for authorized users.</p>"},{"location":"COADM01C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COADM01C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"COADM01C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant CICS as CICS System\n    participant COADM01C as Admin Menu Program\n    participant SignOn as Sign-on Program\n    participant AdminOpt as Admin Option Program\n\n    User-&gt;&gt;CICS: Start transaction\n    CICS-&gt;&gt;COADM01C: Execute COADM01C\n\n    Note over COADM01C: MAIN-PARA\n\n    alt No COMMAREA (First Entry)\n        COADM01C-&gt;&gt;SignOn: Return to sign-on screen\n    else Has COMMAREA\n        alt First time entry\n            COADM01C-&gt;&gt;COADM01C: POPULATE-HEADER-INFO\n            COADM01C-&gt;&gt;COADM01C: BUILD-MENU-OPTIONS\n            COADM01C-&gt;&gt;User: SEND-MENU-SCREEN\n        else Subsequent interaction\n            COADM01C-&gt;&gt;User: RECEIVE-MENU-SCREEN\n\n            alt ENTER key pressed\n                COADM01C-&gt;&gt;COADM01C: PROCESS-ENTER-KEY\n\n                alt Invalid option\n                    COADM01C-&gt;&gt;User: Display error message\n                else Valid option\n                    alt Option implemented\n                        COADM01C-&gt;&gt;AdminOpt: Transfer control (XCTL)\n                    else Option not implemented\n                        COADM01C-&gt;&gt;User: Display \"coming soon\" message\n                    end\n                end\n\n            else PF3 key pressed\n                COADM01C-&gt;&gt;SignOn: RETURN-TO-SIGNON-SCREEN\n            else Other key pressed\n                COADM01C-&gt;&gt;User: Display invalid key message\n            end\n        end\n    end\n\n    COADM01C-&gt;&gt;CICS: Return with COMMAREA</code></pre>"},{"location":"COADM01C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>DFHAID</code></li> <li><code>COCOM01Y</code></li> <li><code>CSUSR01Y</code></li> <li><code>DFHBMSCA</code></li> <li><code>COTTL01Y</code></li> <li><code>COADM02Y</code></li> <li><code>CSMSG01Y</code></li> <li><code>COADM01</code></li> </ul>"},{"location":"COADM01C.html#environment-division","title":"Environment Division","text":""},{"location":"COADM01C.html#configuration-section","title":"CONFIGURATION SECTION","text":"<p>This environment section appears to be empty or not provided in the snippet. In a complete COBOL program, the CONFIGURATION SECTION would typically contain specifications for special names, file assignments, and other environmental settings needed for the CardDemo administrative menu interface program (COADM01C). This section would normally define how the program interacts with the system environment, including any special device assignments or system-specific configurations required for the administrative functions.</p> Code"},{"location":"COADM01C.html#data-division","title":"Data Division","text":""},{"location":"COADM01C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This data section defines the working storage variables for the administrative menu program COADM01C. It includes program identification variables (program name and transaction ID), message handling fields, file references for user security, error flags with condition names, response codes, and menu option processing variables. The section incorporates several copybooks that likely contain common data structures, screen layouts, date/time formatting, message handling, user information, and standard CICS definitions. These variables support the program's function as an administrative interface, providing storage for menu selection processing, error handling, and display formatting needed to present and navigate the administrative console.</p> Code <pre><code>01 WS-VARIABLES.\n         05 WS-PGMNAME                 PIC X(08) VALUE 'COADM01C'.\n         05 WS-TRANID                  PIC X(04) VALUE 'CA00'.\n         05 WS-MESSAGE                 PIC X(80) VALUE SPACES.\n         05 WS-USRSEC-FILE             PIC X(08) VALUE 'USRSEC  '.\n         05 WS-ERR-FLG                 PIC X(01) VALUE 'N'.\n           88 ERR-FLG-ON                         VALUE 'Y'.\n           88 ERR-FLG-OFF                        VALUE 'N'.\n         05 WS-RESP-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REAS-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-OPTION-X                PIC X(02) JUST RIGHT.\n         05 WS-OPTION                  PIC 9(02) VALUE 0.\n         05 WS-IDX                     PIC S9(04) COMP VALUE ZEROS.\n         05 WS-ADMIN-OPT-TXT           PIC X(40) VALUE SPACES.\n\n       COPY COCOM01Y.\n       COPY COADM02Y.\n\n       COPY COADM01.\n\n       COPY COTTL01Y.\n       COPY CSDAT01Y.\n       COPY CSMSG01Y.\n       COPY CSUSR01Y.\n\n       COPY DFHAID.\n       COPY DFHBMSCA.\n\n      *----------------------------------------------------------------*\n      *                        LINKAGE SECTION\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COADM01C.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This section defines the linkage area for communication with other programs. It uses the standard DFHCOMMAREA structure with a variable-length field (LK-COMMAREA) that can expand from 1 to 32,767 bytes depending on the actual communication area length (EIBCALEN). This flexible structure allows the program to receive and pass data of different sizes when interacting with other components of the CardDemo administrative system.</p> Code <pre><code>01  DFHCOMMAREA.\n         05  LK-COMMAREA                           PIC X(01)\n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n\n      *----------------------------------------------------------------*\n      *\n</code></pre>"},{"location":"COADM01C.html#procedure-division","title":"Procedure Division","text":""},{"location":"COADM01C.html#main-para","title":"MAIN-PARA","text":"<p>This paragraph serves as the main control flow for the administrative menu interface. It first clears any error flags and message fields, then checks if the program was called with a communication area. If not, it returns to the sign-on screen. Otherwise, it processes the existing communication area and either displays the menu for first-time entry or handles user input for subsequent interactions. The paragraph evaluates function key inputs, specifically processing ENTER key actions, returning to the sign-on screen when PF3 is pressed, or displaying an error message for invalid keys. After processing, it returns control to CICS with the transaction ID and updated communication area, maintaining the program's state between interactions.</p> Code <pre><code>SET ERR-FLG-OFF TO TRUE\n\n           MOVE SPACES TO WS-MESSAGE\n                          ERRMSGO OF COADM1AO\n\n           IF EIBCALEN = 0\n               MOVE 'COSGN00C' TO CDEMO-FROM-PROGRAM\n               PERFORM RETURN-TO-SIGNON-SCREEN\n           ELSE\n               MOVE DFHCOMMAREA(1:EIBCALEN) TO CARDDEMO-COMMAREA\n               IF NOT CDEMO-PGM-REENTER\n                   SET CDEMO-PGM-REENTER    TO TRUE\n                   MOVE LOW-VALUES          TO COADM1AO\n                   PERFORM SEND-MENU-SCREEN\n               ELSE\n                   PERFORM RECEIVE-MENU-SCREEN\n                   EVALUATE EIBAID\n                       WHEN DFHENTER\n                           PERFORM PROCESS-ENTER-KEY\n                       WHEN DFHPF3\n                           MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n                           PERFORM RETURN-TO-SIGNON-SCREEN\n                       WHEN OTHER\n                           MOVE 'Y'                       TO WS-ERR-FLG\n                           MOVE CCDA-MSG-INVALID-KEY      TO WS-MESSAGE\n                           PERFORM SEND-MENU-SCREEN\n                   END-EVALUATE\n               END-IF\n           END-IF\n\n           EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-ENTER-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COADM01C.html#process-enter-key","title":"PROCESS-ENTER-KEY","text":"<p>This paragraph processes the user's menu selection when the Enter key is pressed in the CardDemo administrative interface. It first trims trailing spaces from the input option and converts it to a numeric value, handling any blank input by replacing spaces with zeros. The code validates that the option is numeric, within the valid range of menu options, and not zero. If validation fails, it sets an error flag and displays an appropriate message. For valid selections, the code checks if the target program is available (not marked as \"DUMMY\") and if so, transfers control to that program while passing the commarea to maintain session context. If the selected option is not yet implemented (has a \"DUMMY\" program name), it displays a \"coming soon\" message to the user. The paragraph maintains user interface consistency by redisplaying the menu screen with appropriate status messages after processing.</p> Code <pre><code>PERFORM VARYING WS-IDX\n                   FROM LENGTH OF OPTIONI OF COADM1AI BY -1 UNTIL\n                   OPTIONI OF COADM1AI(WS-IDX:1) NOT = SPACES OR\n                   WS-IDX = 1\n           END-PERFORM\n           MOVE OPTIONI OF COADM1AI(1:WS-IDX) TO WS-OPTION-X\n           INSPECT WS-OPTION-X REPLACING ALL ' ' BY '0'\n           MOVE WS-OPTION-X              TO WS-OPTION\n           MOVE WS-OPTION                TO OPTIONO OF COADM1AO\n\n           IF WS-OPTION IS NOT NUMERIC OR\n              WS-OPTION &gt; CDEMO-ADMIN-OPT-COUNT OR\n              WS-OPTION = ZEROS\n               MOVE 'Y'     TO WS-ERR-FLG\n               MOVE 'Please enter a valid option number...' TO\n                                       WS-MESSAGE\n               PERFORM SEND-MENU-SCREEN\n           END-IF\n\n\n           IF NOT ERR-FLG-ON\n               IF CDEMO-ADMIN-OPT-PGMNAME(WS-OPTION)(1:5) NOT = 'DUMMY'\n                   MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n                   MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n                   MOVE ZEROS        TO CDEMO-PGM-CONTEXT\n                   EXEC CICS\n                       XCTL PROGRAM(CDEMO-ADMIN-OPT-PGMNAME(WS-OPTION))\n                       COMMAREA(CARDDEMO-COMMAREA)\n                   END-EXEC\n               END-IF\n               MOVE SPACES             TO WS-MESSAGE\n               MOVE DFHGREEN           TO ERRMSGC  OF COADM1AO\n               STRING 'This option '       DELIMITED BY SIZE\n      *                CDEMO-ADMIN-OPT-NAME(WS-OPTION)\n      *                                DELIMITED BY SIZE\n                       'is coming soon ...'   DELIMITED BY SIZE\n                  INTO WS-MESSAGE\n               PERFORM SEND-MENU-SCREEN\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      RETURN-TO-SIGNON-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COADM01C.html#return-to-signon-screen","title":"RETURN-TO-SIGNON-SCREEN","text":"<p>This paragraph handles the return navigation to the sign-on screen from the administrative menu. It first checks if the target program variable (CDEMO-TO-PROGRAM) is empty or contains spaces, and if so, sets it to the sign-on program 'COSGN00C' as the default destination. It then executes a CICS XCTL command to transfer control to the specified program, effectively ending the current program's execution and transferring control to the sign-on screen or another designated program. This ensures users can properly exit the administrative functions and return to the application's entry point.</p> Code <pre><code>IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n           END-IF\n           EXEC CICS\n               XCTL PROGRAM(CDEMO-TO-PROGRAM)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      SEND-MENU-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COADM01C.html#send-menu-screen","title":"SEND-MENU-SCREEN","text":"<p>This paragraph handles the display of the administrative menu screen. It first calls two supporting paragraphs to populate the header information and build the menu options. It then transfers any system messages to the output map's error message field. Finally, it uses the CICS SEND command to display the COADM1A map from the COADM01 mapset, using the COADM1AO data structure as the source of the display data, and clears the screen before displaying the new content.</p> Code <pre><code>PERFORM POPULATE-HEADER-INFO\n           PERFORM BUILD-MENU-OPTIONS\n\n           MOVE WS-MESSAGE TO ERRMSGO OF COADM1AO\n\n           EXEC CICS SEND\n                     MAP('COADM1A')\n                     MAPSET('COADM01')\n                     FROM(COADM1AO)\n                     ERASE\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      RECEIVE-MENU-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COADM01C.html#receive-menu-screen","title":"RECEIVE-MENU-SCREEN","text":"<p>This paragraph handles the reception of user input from the administrative menu screen. It uses the CICS RECEIVE command to capture data entered by the user on the 'COADM1A' map within the 'COADM01' mapset, storing the input in the COADM1AI structure. The operation's response codes are captured in WS-RESP-CD and WS-REAS-CD variables for subsequent error handling. This is a standard input processing step that occurs after displaying the menu and before processing the user's selection.</p> Code <pre><code>EXEC CICS RECEIVE\n                     MAP('COADM1A')\n                     MAPSET('COADM01')\n                     INTO(COADM1AI)\n                     RESP(WS-RESP-CD)\n                     RESP2(WS-REAS-CD)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      POPULATE-HEADER-INFO\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COADM01C.html#populate-header-info","title":"POPULATE-HEADER-INFO","text":"<p>This paragraph populates the header information for the administrative menu screen. It retrieves the current system date and time using the CURRENT-DATE function, then formats and displays this information on the screen. The paragraph sets the title fields, transaction ID, and program name in the output map (COADM1AO). It also formats the current date into MM/DD/YY format and the current time into HH:MM:SS format before placing these values in their respective output fields. This creates a consistent header that provides context to the user about when they're accessing the system and which program they're currently using.</p> Code <pre><code>MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n           MOVE CCDA-TITLE01           TO TITLE01O OF COADM1AO\n           MOVE CCDA-TITLE02           TO TITLE02O OF COADM1AO\n           MOVE WS-TRANID              TO TRNNAMEO OF COADM1AO\n           MOVE WS-PGMNAME             TO PGMNAMEO OF COADM1AO\n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM\n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD\n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY\n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF COADM1AO\n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH\n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM\n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS\n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF COADM1AO.\n\n      *----------------------------------------------------------------*\n      *                      BUILD-MENU-OPTIONS\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COADM01C.html#build-menu-options","title":"BUILD-MENU-OPTIONS","text":"<p>This paragraph constructs and populates the administrative menu options displayed to users. It iterates through available admin options (up to the count stored in CDEMO-ADMIN-OPT-COUNT), formatting each option by combining its number and name into a formatted string with proper delimiters. The formatted text for each option is then assigned to the appropriate screen field (OPTN001O through OPTN010O) based on its position in the menu. The paragraph supports up to 10 menu options, with any additional options being ignored. This dynamic menu construction allows the administrative interface to display a variable number of options without requiring code changes when menu items are added or removed.</p> Code <pre><code>PERFORM VARYING WS-IDX FROM 1 BY 1 UNTIL\n                           WS-IDX &gt; CDEMO-ADMIN-OPT-COUNT\n\n               MOVE SPACES             TO WS-ADMIN-OPT-TXT\n\n               STRING CDEMO-ADMIN-OPT-NUM(WS-IDX)  DELIMITED BY SIZE\n                      '. '                         DELIMITED BY SIZE\n                      CDEMO-ADMIN-OPT-NAME(WS-IDX) DELIMITED BY SIZE\n                 INTO WS-ADMIN-OPT-TXT\n\n               EVALUATE WS-IDX\n                   WHEN 1\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN001O\n                   WHEN 2\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN002O\n                   WHEN 3\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN003O\n                   WHEN 4\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN004O\n                   WHEN 5\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN005O\n                   WHEN 6\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN006O\n                   WHEN 7\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN007O\n                   WHEN 8\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN008O\n                   WHEN 9\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN009O\n                   WHEN 10\n                       MOVE WS-ADMIN-OPT-TXT TO OPTN010O\n                   WHEN OTHER\n                       CONTINUE\n               END-EVALUATE\n\n           END-PERFORM.\n\n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:32 CDT\n      *\n</code></pre>"},{"location":"COBIL00C.html","title":"COBIL00C","text":""},{"location":"COBIL00C.html#overview","title":"Overview","text":"<p>This CICS COBOL program (COBIL00C) handles online bill payment functionality for the CardDemo application. It allows users to pay their credit card account balance in full and records the transaction. The program reads the account information, verifies the current balance, and if confirmed by the user, creates a payment transaction record and updates the account balance. Key features include:</p> <ol> <li>Account validation to ensure the account exists and has a balance to pay</li> <li>Confirmation process requiring user approval before processing payment</li> <li>Transaction recording with unique transaction ID generation</li> <li>Account balance update after successful payment</li> <li>Integration with multiple files: TRANSACT (transaction records), ACCTDAT (account data), and CXACAIX (account cross-reference)</li> </ol> <p>The program includes comprehensive error handling for various scenarios such as account not found, invalid input values, and transaction processing failures. It also provides clear feedback messages to the user about the payment status, including the transaction ID upon successful completion.</p>"},{"location":"COBIL00C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COBIL00C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"COBIL00C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant Screen as Bill Payment Screen\n    participant MAIN as MAIN-PARA\n    participant PROCESS as PROCESS-ENTER-KEY\n    participant ACCTDAT as ACCTDAT File\n    participant CXACAIX as CXACAIX File\n    participant TRANSACT as TRANSACT File\n\n    User-&gt;&gt;Screen: Access bill payment function\n    Screen-&gt;&gt;MAIN: Initialize program\n\n    alt First time entry\n        MAIN-&gt;&gt;Screen: Redirect to sign-on screen\n    else Re-entry\n        MAIN-&gt;&gt;Screen: Receive user input\n\n        alt ENTER key pressed\n            Screen-&gt;&gt;PROCESS: Process payment request\n\n            PROCESS-&gt;&gt;PROCESS: Validate account ID\n\n            alt Account ID valid\n                PROCESS-&gt;&gt;ACCTDAT: READ-ACCTDAT-FILE\n                ACCTDAT--&gt;&gt;PROCESS: Return account data\n\n                alt Confirmation = 'Y'\n                    PROCESS-&gt;&gt;CXACAIX: READ-CXACAIX-FILE\n                    CXACAIX--&gt;&gt;PROCESS: Return card cross-reference\n\n                    PROCESS-&gt;&gt;TRANSACT: STARTBR-TRANSACT-FILE\n                    PROCESS-&gt;&gt;TRANSACT: READPREV-TRANSACT-FILE\n                    TRANSACT--&gt;&gt;PROCESS: Return last transaction\n                    PROCESS-&gt;&gt;TRANSACT: ENDBR-TRANSACT-FILE\n\n                    PROCESS-&gt;&gt;PROCESS: GET-CURRENT-TIMESTAMP\n                    PROCESS-&gt;&gt;PROCESS: Generate new transaction ID\n\n                    PROCESS-&gt;&gt;TRANSACT: WRITE-TRANSACT-FILE\n                    TRANSACT--&gt;&gt;PROCESS: Confirm transaction written\n\n                    PROCESS-&gt;&gt;ACCTDAT: UPDATE-ACCTDAT-FILE\n                    ACCTDAT--&gt;&gt;PROCESS: Confirm balance updated\n\n                    PROCESS-&gt;&gt;Screen: Display success message\n                else Confirmation not 'Y'\n                    PROCESS-&gt;&gt;Screen: Request confirmation\n                end\n            else Account ID invalid\n                PROCESS-&gt;&gt;Screen: Display error message\n            end\n\n        else PF3 key pressed\n            MAIN-&gt;&gt;Screen: RETURN-TO-PREV-SCREEN\n        else PF4 key pressed\n            MAIN-&gt;&gt;Screen: CLEAR-CURRENT-SCREEN\n        else Other key pressed\n            MAIN-&gt;&gt;Screen: Display invalid key message\n        end\n    end\n\n    Screen-&gt;&gt;User: Display updated information</code></pre>"},{"location":"COBIL00C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>DFHAID</code></li> <li><code>CVACT01Y</code></li> <li><code>CVTRA05Y</code></li> <li><code>COCOM01Y</code></li> <li><code>DFHBMSCA</code></li> <li><code>CVACT03Y</code></li> <li><code>COBIL00</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG01Y</code></li> </ul>"},{"location":"COBIL00C.html#environment-division","title":"Environment Division","text":""},{"location":"COBIL00C.html#configuration-section","title":"CONFIGURATION SECTION","text":"<p>This section would typically contain configuration details for the COBIL00C program, including file assignments, special names, and system dependencies. However, the provided snippet is empty, indicating that the CONFIGURATION SECTION in this program doesn't contain any explicit configuration entries. This suggests that the program likely relies on standard CICS environment settings and doesn't require special configuration parameters for its bill payment functionality.</p> Code"},{"location":"COBIL00C.html#data-division","title":"Data Division","text":""},{"location":"COBIL00C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working-Storage section defines the key variables and data structures used in the COBIL00C bill payment program. It includes program identifiers, file names for transaction and account data, status flags for error handling and payment confirmation, and financial fields for tracking transaction amounts and account balances. The section contains several important control flags that manage the program flow, including error flags and user modification indicators. It also defines fields for transaction identification, date/time processing, and balance management. The section incorporates multiple copybooks that likely contain screen layouts, message definitions, account and transaction record structures, and CICS interface definitions. These variables collectively support the program's core functionality of validating accounts, processing bill payments, recording transactions, and updating account balances.</p> Code <pre><code>01 WS-VARIABLES.\n         05 WS-PGMNAME                 PIC X(08) VALUE 'COBIL00C'.\n         05 WS-TRANID                  PIC X(04) VALUE 'CB00'.\n         05 WS-MESSAGE                 PIC X(80) VALUE SPACES.\n         05 WS-TRANSACT-FILE           PIC X(08) VALUE 'TRANSACT'.\n         05 WS-ACCTDAT-FILE            PIC X(08) VALUE 'ACCTDAT '.\n         05 WS-CXACAIX-FILE            PIC X(08) VALUE 'CXACAIX '.\n         05 WS-ERR-FLG                 PIC X(01) VALUE 'N'.\n           88 ERR-FLG-ON                         VALUE 'Y'.\n           88 ERR-FLG-OFF                        VALUE 'N'.\n         05 WS-RESP-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REAS-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-USR-MODIFIED            PIC X(01) VALUE 'N'.\n           88 USR-MODIFIED-YES                   VALUE 'Y'.\n           88 USR-MODIFIED-NO                    VALUE 'N'.\n         05 WS-CONF-PAY-FLG            PIC X(01) VALUE 'N'.\n           88 CONF-PAY-YES                       VALUE 'Y'.\n           88 CONF-PAY-NO                        VALUE 'N'.\n\n         05 WS-TRAN-AMT                PIC +99999999.99.\n         05 WS-CURR-BAL                PIC +9999999999.99.\n         05 WS-TRAN-ID-NUM             PIC 9(16) VALUE ZEROS.\n         05 WS-TRAN-DATE               PIC X(08) VALUE '00/00/00'.\n         05 WS-ABS-TIME                PIC S9(15) COMP-3 VALUE 0.\n         05 WS-CUR-DATE-X10            PIC X(10) VALUE SPACES.\n         05 WS-CUR-TIME-X08            PIC X(08) VALUE SPACES.\n\n       COPY COCOM01Y.\n          05 CDEMO-CB00-INFO.\n             10 CDEMO-CB00-TRNID-FIRST     PIC X(16).\n             10 CDEMO-CB00-TRNID-LAST      PIC X(16).\n             10 CDEMO-CB00-PAGE-NUM        PIC 9(08).\n             10 CDEMO-CB00-NEXT-PAGE-FLG   PIC X(01) VALUE 'N'.\n                88 NEXT-PAGE-YES                     VALUE 'Y'.\n                88 NEXT-PAGE-NO                      VALUE 'N'.\n             10 CDEMO-CB00-TRN-SEL-FLG     PIC X(01).\n             10 CDEMO-CB00-TRN-SELECTED    PIC X(16).\n\n       COPY COBIL00.\n\n       COPY COTTL01Y.\n       COPY CSDAT01Y.\n       COPY CSMSG01Y.\n\n       COPY CVACT01Y.\n       COPY CVACT03Y.\n       COPY CVTRA05Y.\n\n       COPY DFHAID.\n       COPY DFHBMSCA.\n\n      *----------------------------------------------------------------*\n      *                        LINKAGE SECTION\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This section defines the DFHCOMMAREA in the Linkage Section, which is the standard CICS communication area used to pass data between program calls. It contains a single field, LK-COMMAREA, defined as a variable-length array of characters that can expand from 1 to 32,767 bytes depending on the actual length passed to the program (EIBCALEN). This structure allows the bill payment program to receive and maintain state information across multiple interactions with the user interface.</p> Code <pre><code>01  DFHCOMMAREA.\n         05  LK-COMMAREA                           PIC X(01)\n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n\n      *----------------------------------------------------------------*\n      *\n</code></pre>"},{"location":"COBIL00C.html#procedure-division","title":"Procedure Division","text":""},{"location":"COBIL00C.html#main-para","title":"MAIN-PARA","text":"<p>This paragraph serves as the main control flow for the bill payment screen in the CardDemo application. It handles initial screen setup, user navigation, and input processing. The paragraph first initializes error flags and message fields, then checks if the program is being entered for the first time (EIBCALEN = 0) or returning from another screen. </p> <p>For first-time entry, it redirects to the sign-on screen. For re-entry, it either initializes the bill payment screen with any pre-selected account information or processes user input based on the function key pressed. The paragraph handles several navigation options: ENTER to process payment information, PF3 to return to the previous screen, and PF4 to clear the current screen. Invalid key presses trigger an error message. After processing, it returns control to CICS with the transaction ID and updated communication area to maintain program state between interactions.</p> Code <pre><code>SET ERR-FLG-OFF     TO TRUE\n           SET USR-MODIFIED-NO TO TRUE\n\n           MOVE SPACES TO WS-MESSAGE\n                          ERRMSGO OF COBIL0AO\n\n           IF EIBCALEN = 0\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n               PERFORM RETURN-TO-PREV-SCREEN\n           ELSE\n               MOVE DFHCOMMAREA(1:EIBCALEN) TO CARDDEMO-COMMAREA\n               IF NOT CDEMO-PGM-REENTER\n                   SET CDEMO-PGM-REENTER    TO TRUE\n                   MOVE LOW-VALUES          TO COBIL0AO\n                   MOVE -1       TO ACTIDINL OF COBIL0AI\n                   IF CDEMO-CB00-TRN-SELECTED NOT =\n                                              SPACES AND LOW-VALUES\n                       MOVE CDEMO-CB00-TRN-SELECTED TO\n                            ACTIDINI OF COBIL0AI\n                       PERFORM PROCESS-ENTER-KEY\n                   END-IF\n                   PERFORM SEND-BILLPAY-SCREEN\n               ELSE\n                   PERFORM RECEIVE-BILLPAY-SCREEN\n                   EVALUATE EIBAID\n                       WHEN DFHENTER\n                           PERFORM PROCESS-ENTER-KEY\n                       WHEN DFHPF3\n                           IF CDEMO-FROM-PROGRAM = SPACES OR LOW-VALUES\n                               MOVE 'COMEN01C' TO CDEMO-TO-PROGRAM\n                           ELSE\n                               MOVE CDEMO-FROM-PROGRAM TO\n                               CDEMO-TO-PROGRAM\n                           END-IF\n                           PERFORM RETURN-TO-PREV-SCREEN\n                       WHEN DFHPF4\n                           PERFORM CLEAR-CURRENT-SCREEN\n                       WHEN OTHER\n                           MOVE 'Y'                       TO WS-ERR-FLG\n                           MOVE CCDA-MSG-INVALID-KEY      TO WS-MESSAGE\n                           PERFORM SEND-BILLPAY-SCREEN\n                   END-EVALUATE\n               END-IF\n           END-IF\n\n           EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-ENTER-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#process-enter-key","title":"PROCESS-ENTER-KEY","text":"<p>This paragraph processes the user's input when the Enter key is pressed on the bill payment screen. It validates the account ID, checks the confirmation flag, and executes the payment transaction if confirmed. The logic includes:</p> <ol> <li>Initial validation to ensure the account ID is not empty</li> <li>Processing of the confirmation field (Y/N) to determine if payment should proceed</li> <li>Verification that the account has a positive balance to pay</li> <li>For confirmed payments:</li> <li>Retrieving the account cross-reference information</li> <li>Generating a unique transaction ID by reading the last transaction record</li> <li>Creating a new transaction record with payment details</li> <li>Updating the account balance by subtracting the payment amount</li> <li>Recording the transaction with timestamp information</li> </ol> <p>If validation fails at any point, appropriate error messages are displayed to the user. The paragraph includes comprehensive error handling and maintains the screen cursor position for user convenience.</p> Code <pre><code>SET CONF-PAY-NO TO TRUE\n\n           EVALUATE TRUE\n               WHEN ACTIDINI OF COBIL0AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Acct ID can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COBIL0AI\n                   PERFORM SEND-BILLPAY-SCREEN\n               WHEN OTHER\n                   CONTINUE\n           END-EVALUATE\n\n           IF NOT ERR-FLG-ON\n               MOVE ACTIDINI  OF COBIL0AI TO ACCT-ID\n                                             XREF-ACCT-ID\n\n               EVALUATE CONFIRMI OF COBIL0AI\n                   WHEN 'Y'\n                   WHEN 'y'\n                       SET CONF-PAY-YES TO TRUE\n                       PERFORM READ-ACCTDAT-FILE\n                   WHEN 'N'\n                   WHEN 'n'\n                       PERFORM CLEAR-CURRENT-SCREEN\n                       MOVE 'Y'     TO WS-ERR-FLG\n                   WHEN SPACES\n                   WHEN LOW-VALUES\n                       PERFORM READ-ACCTDAT-FILE\n                   WHEN OTHER\n                       MOVE 'Y'     TO WS-ERR-FLG\n                       MOVE 'Invalid value. Valid values are (Y/N)...'\n                                    TO WS-MESSAGE\n                       MOVE -1      TO CONFIRML OF COBIL0AI\n                       PERFORM SEND-BILLPAY-SCREEN\n               END-EVALUATE\n\n               MOVE ACCT-CURR-BAL TO WS-CURR-BAL\n               MOVE WS-CURR-BAL   TO CURBALI    OF COBIL0AI\n           END-IF\n\n           IF NOT ERR-FLG-ON\n               IF ACCT-CURR-BAL &lt;= ZEROS AND\n                  ACTIDINI OF COBIL0AI NOT = SPACES AND LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'You have nothing to pay...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COBIL0AI\n                   PERFORM SEND-BILLPAY-SCREEN\n               END-IF\n           END-IF\n\n           IF NOT ERR-FLG-ON\n\n               IF CONF-PAY-YES\n                   PERFORM READ-CXACAIX-FILE\n                   MOVE HIGH-VALUES TO TRAN-ID\n                   PERFORM STARTBR-TRANSACT-FILE\n                   PERFORM READPREV-TRANSACT-FILE\n                   PERFORM ENDBR-TRANSACT-FILE\n                   MOVE TRAN-ID     TO WS-TRAN-ID-NUM\n                   ADD 1 TO WS-TRAN-ID-NUM\n                   INITIALIZE TRAN-RECORD\n                   MOVE WS-TRAN-ID-NUM       TO TRAN-ID\n                   MOVE '02'                 TO TRAN-TYPE-CD\n                   MOVE 2                    TO TRAN-CAT-CD\n                   MOVE 'POS TERM'           TO TRAN-SOURCE\n                   MOVE 'BILL PAYMENT - ONLINE' TO TRAN-DESC\n                   MOVE ACCT-CURR-BAL        TO TRAN-AMT\n                   MOVE XREF-CARD-NUM        TO TRAN-CARD-NUM\n                   MOVE 999999999            TO TRAN-MERCHANT-ID\n                   MOVE 'BILL PAYMENT'       TO TRAN-MERCHANT-NAME\n                   MOVE 'N/A'                TO TRAN-MERCHANT-CITY\n                   MOVE 'N/A'                TO TRAN-MERCHANT-ZIP\n                   PERFORM GET-CURRENT-TIMESTAMP\n                   MOVE WS-TIMESTAMP         TO TRAN-ORIG-TS\n                                                TRAN-PROC-TS\n                   PERFORM WRITE-TRANSACT-FILE\n                   COMPUTE ACCT-CURR-BAL = ACCT-CURR-BAL - TRAN-AMT\n                   PERFORM UPDATE-ACCTDAT-FILE\n               ELSE\n                   MOVE 'Confirm to make a bill payment...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO CONFIRML OF COBIL0AI\n               END-IF\n\n               PERFORM SEND-BILLPAY-SCREEN\n\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      GET-CURRENT-TIMESTAMP\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#get-current-timestamp","title":"GET-CURRENT-TIMESTAMP","text":"<p>This paragraph retrieves and formats the current system timestamp for use in transaction processing. It uses CICS ASKTIME to get the absolute time, then FORMATTIME to convert it into a readable date (YYYY-MM-DD) and time (HH:MM:SS) format with appropriate separators. The formatted date and time values are then combined into a single timestamp field (WS-TIMESTAMP), with the millisecond portion initialized to zeros. This timestamp is likely used for recording when bill payment transactions occur in the system.</p> Code <pre><code>EXEC CICS ASKTIME\n             ABSTIME(WS-ABS-TIME)\n           END-EXEC\n\n           EXEC CICS FORMATTIME\n             ABSTIME(WS-ABS-TIME)\n             YYYYMMDD(WS-CUR-DATE-X10)\n             DATESEP('-')\n             TIME(WS-CUR-TIME-X08)\n             TIMESEP(':')\n           END-EXEC\n\n           INITIALIZE WS-TIMESTAMP\n           MOVE WS-CUR-DATE-X10 TO WS-TIMESTAMP(01:10)\n           MOVE WS-CUR-TIME-X08 TO WS-TIMESTAMP(12:08)\n           MOVE ZEROS           TO WS-TIMESTAMP-TM-MS6\n           .\n\n\n      *----------------------------------------------------------------*\n      *                      RETURN-TO-PREV-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#return-to-prev-screen","title":"RETURN-TO-PREV-SCREEN","text":"<p>This paragraph handles the navigation back to a previous screen in the CardDemo application. It first checks if the target program is specified in the communication area, and if not, defaults to the sign-on program 'COSGN00C'. It then sets up the communication area with the current transaction ID and program name before transferring control to the target program using the CICS XCTL command. This functionality provides a consistent way to return to previous screens while maintaining context information between program calls.</p> Code <pre><code>IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n           END-IF\n           MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n           MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n           MOVE ZEROS        TO CDEMO-PGM-CONTEXT\n           EXEC CICS\n               XCTL PROGRAM(CDEMO-TO-PROGRAM)\n               COMMAREA(CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      SEND-BILLPAY-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#send-billpay-screen","title":"SEND-BILLPAY-SCREEN","text":"<p>This paragraph displays the bill payment screen to the user. It first calls the POPULATE-HEADER-INFO paragraph to set up common header information, then moves any system message to the error message field on the screen. It then uses the CICS SEND command to display the COBIL0A map from the COBIL00 mapset, clearing the screen (ERASE) and positioning the cursor. This is a standard screen display routine that presents the bill payment interface to the user.</p> Code <pre><code>PERFORM POPULATE-HEADER-INFO\n\n           MOVE WS-MESSAGE TO ERRMSGO OF COBIL0AO\n\n           EXEC CICS SEND\n                     MAP('COBIL0A')\n                     MAPSET('COBIL00')\n                     FROM(COBIL0AO)\n                     ERASE\n                     CURSOR\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      RECEIVE-BILLPAY-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#receive-billpay-screen","title":"RECEIVE-BILLPAY-SCREEN","text":"<p>This paragraph receives user input from the bill payment screen using the CICS RECEIVE command. It captures data entered by the user from the 'COBIL0A' map within the 'COBIL00' mapset and stores it in the COBIL0AI structure. The response codes are captured in WS-RESP-CD and WS-REAS-CD variables for subsequent error handling. This is the initial step in the bill payment process where the program obtains the user's payment information before processing.</p> Code <pre><code>EXEC CICS RECEIVE\n                     MAP('COBIL0A')\n                     MAPSET('COBIL00')\n                     INTO(COBIL0AI)\n                     RESP(WS-RESP-CD)\n                     RESP2(WS-REAS-CD)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      POPULATE-HEADER-INFO\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#populate-header-info","title":"POPULATE-HEADER-INFO","text":"<p>This paragraph populates the header information for the bill payment screen. It retrieves the current system date and time using the CURRENT-DATE function, then formats and displays this information along with program identification details on the screen. The paragraph sets the title fields from constant data, displays the transaction ID and program name, and formats the current date (MM/DD/YY) and time (HH:MM:SS) for display. This creates a consistent header that provides context to users about which program they're using and when the transaction is taking place.</p> Code <pre><code>MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n           MOVE CCDA-TITLE01           TO TITLE01O OF COBIL0AO\n           MOVE CCDA-TITLE02           TO TITLE02O OF COBIL0AO\n           MOVE WS-TRANID              TO TRNNAMEO OF COBIL0AO\n           MOVE WS-PGMNAME             TO PGMNAMEO OF COBIL0AO\n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM\n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD\n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY\n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF COBIL0AO\n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH\n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM\n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS\n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF COBIL0AO.\n\n      *----------------------------------------------------------------*\n      *                      READ-ACCTDAT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#read-acctdat-file","title":"READ-ACCTDAT-FILE","text":"<p>This paragraph reads an account record from the ACCTDAT file using the account ID as the key. It performs the read with UPDATE intent, allowing the record to be modified later. The paragraph handles three possible outcomes: if the read is successful, processing continues; if the account is not found, an error message is displayed to the user and the bill payment screen is redisplayed with the cursor positioned at the account ID field; for any other errors, diagnostic information is displayed, an error message is shown to the user, and the bill payment screen is redisplayed. This validation ensures that bill payments can only be processed for existing accounts.</p> Code <pre><code>EXEC CICS READ\n                DATASET   (WS-ACCTDAT-FILE)\n                INTO      (ACCOUNT-RECORD)\n                LENGTH    (LENGTH OF ACCOUNT-RECORD)\n                RIDFLD    (ACCT-ID)\n                KEYLENGTH (LENGTH OF ACCT-ID)\n                UPDATE\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(NOTFND)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Account ID NOT found...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COBIL0AI\n                   PERFORM SEND-BILLPAY-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup Account...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COBIL0AI\n                   PERFORM SEND-BILLPAY-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      UPDATE-ACCTDAT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#update-acctdat-file","title":"UPDATE-ACCTDAT-FILE","text":"<p>This paragraph updates the account record in the ACCTDAT file after a bill payment has been processed. It uses a CICS REWRITE command to replace the existing account record with the updated version that reflects the new balance. The paragraph includes error handling logic that checks the response code from the CICS operation and takes appropriate action: continuing if successful, displaying an error message if the account is not found, or showing a generic update error message for other failures. If an error occurs, the paragraph sets an error flag and positions the cursor at the account ID field before redisplaying the bill payment screen to the user.</p> Code <pre><code>EXEC CICS REWRITE\n                DATASET   (WS-ACCTDAT-FILE)\n                FROM      (ACCOUNT-RECORD)\n                LENGTH    (LENGTH OF ACCOUNT-RECORD)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(NOTFND)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Account ID NOT found...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COBIL0AI\n                   PERFORM SEND-BILLPAY-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to Update Account...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COBIL0AI\n                   PERFORM SEND-BILLPAY-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      READ-CXACAIX-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#read-cxacaix-file","title":"READ-CXACAIX-FILE","text":"<p>This paragraph performs a read operation on the CXACAIX cross-reference file to validate the account ID entered by the user. It attempts to retrieve the card cross-reference record using the account ID as the key. The paragraph handles three possible outcomes: successful retrieval (processing continues), account not found (displays an error message and returns to the bill payment screen with cursor positioned at the account ID field), or other errors (displays technical response codes, shows a generic error message, and returns to the bill payment screen). This validation step is critical to ensure the bill payment operation is only attempted for valid accounts in the system.</p> Code <pre><code>EXEC CICS READ\n                DATASET   (WS-CXACAIX-FILE)\n                INTO      (CARD-XREF-RECORD)\n                LENGTH    (LENGTH OF CARD-XREF-RECORD)\n                RIDFLD    (XREF-ACCT-ID)\n                KEYLENGTH (LENGTH OF XREF-ACCT-ID)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(NOTFND)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Account ID NOT found...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COBIL0AI\n                   PERFORM SEND-BILLPAY-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup XREF AIX file...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COBIL0AI\n                   PERFORM SEND-BILLPAY-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      STARTBR-TRANSACT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#startbr-transact-file","title":"STARTBR-TRANSACT-FILE","text":"<p>This paragraph initiates a browse operation on the TRANSACT file to locate a specific transaction record using the transaction ID as the key. It evaluates the response code from the CICS STARTBR command and handles three possible outcomes: 1) if the operation is successful, processing continues normally; 2) if the transaction ID is not found, it sets an error flag, displays a \"Transaction ID NOT found\" message, and returns to the bill payment screen; 3) for any other response code, it displays the specific response and reason codes, sets an error flag, shows a generic error message, and returns to the bill payment screen. This paragraph is part of the transaction validation process in the bill payment workflow.</p> Code <pre><code>EXEC CICS STARTBR\n                DATASET   (WS-TRANSACT-FILE)\n                RIDFLD    (TRAN-ID)\n                KEYLENGTH (LENGTH OF TRAN-ID)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(NOTFND)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Transaction ID NOT found...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COBIL0AI\n                   PERFORM SEND-BILLPAY-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup Transaction...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COBIL0AI\n                   PERFORM SEND-BILLPAY-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      READPREV-TRANSACT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#readprev-transact-file","title":"READPREV-TRANSACT-FILE","text":"<p>This paragraph performs a \"read previous\" operation on the transaction file to retrieve the previous transaction record based on the current transaction ID. It reads the record into the TRAN-RECORD structure and handles three possible response scenarios: 1) successful read (continues processing), 2) end-of-file condition (sets the transaction ID to zeros), or 3) any other response (displays error information, sets an error flag, prepares an error message, positions the cursor at the account ID field, and displays the bill payment screen). This functionality is likely used to find the most recent transaction or to navigate backward through transaction history when processing bill payments.</p> Code <pre><code>EXEC CICS READPREV\n                DATASET   (WS-TRANSACT-FILE)\n                INTO      (TRAN-RECORD)\n                LENGTH    (LENGTH OF TRAN-RECORD)\n                RIDFLD    (TRAN-ID)\n                KEYLENGTH (LENGTH OF TRAN-ID)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(ENDFILE)\n                   MOVE ZEROS TO TRAN-ID\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup Transaction...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COBIL0AI\n                   PERFORM SEND-BILLPAY-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      ENDBR-TRANSACT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#endbr-transact-file","title":"ENDBR-TRANSACT-FILE","text":"<p>This paragraph terminates a browse operation on the TRANSACT file (referenced by the working storage variable WS-TRANSACT-FILE) using the CICS ENDBR command. It's executed after the program has finished browsing through transaction records, properly releasing the resources associated with the browse operation.</p> Code <pre><code>EXEC CICS ENDBR\n                DATASET   (WS-TRANSACT-FILE)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      WRITE-TRANSACT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#write-transact-file","title":"WRITE-TRANSACT-FILE","text":"<p>This paragraph handles the writing of a transaction record to the TRANSACT file and processes the response. After attempting to write the transaction record, it evaluates the CICS response code and takes appropriate action. For successful transactions, it initializes fields, constructs a confirmation message including the transaction ID, and displays the bill payment screen with a green success message. If a duplicate key or record is detected, it sets an error flag and displays an appropriate error message. For any other response codes, it logs the response and reason codes, sets an error flag, and displays a generic error message. In all cases, the paragraph concludes by redisplaying the bill payment screen with the appropriate feedback to the user.</p> Code <pre><code>EXEC CICS WRITE\n                DATASET   (WS-TRANSACT-FILE)\n                FROM      (TRAN-RECORD)\n                LENGTH    (LENGTH OF TRAN-RECORD)\n                RIDFLD    (TRAN-ID)\n                KEYLENGTH (LENGTH OF TRAN-ID)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   PERFORM INITIALIZE-ALL-FIELDS\n                   MOVE SPACES             TO WS-MESSAGE\n                   MOVE DFHGREEN           TO ERRMSGC  OF COBIL0AO\n                   STRING 'Payment successful. '     DELIMITED BY SIZE\n                     ' Your Transaction ID is ' DELIMITED BY SIZE\n                          TRAN-ID  DELIMITED BY SPACE\n                          '.' DELIMITED BY SIZE\n                     INTO WS-MESSAGE\n                   PERFORM SEND-BILLPAY-SCREEN\n               WHEN DFHRESP(DUPKEY)\n               WHEN DFHRESP(DUPREC)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Tran ID already exist...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COBIL0AI\n                   PERFORM SEND-BILLPAY-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to Add Bill pay Transaction...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COBIL0AI\n                   PERFORM SEND-BILLPAY-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      CLEAR-CURRENT-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#clear-current-screen","title":"CLEAR-CURRENT-SCREEN","text":"<p>This paragraph clears the current bill payment screen by first initializing all fields to their default values and then redisplaying the bill payment screen to the user. It provides a way to reset the interface when needed, such as after an error or when starting a new payment process.</p> Code <pre><code>PERFORM INITIALIZE-ALL-FIELDS\n           PERFORM SEND-BILLPAY-SCREEN.\n\n      *----------------------------------------------------------------*\n      *                      INITIALIZE-ALL-FIELDS\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COBIL00C.html#initialize-all-fields","title":"INITIALIZE-ALL-FIELDS","text":"<p>This paragraph initializes the input fields on the bill payment screen. It sets the cursor position to the account ID field by setting its length to -1, and clears the account ID input field, current balance field, and confirmation field by filling them with spaces. This is typically executed when the screen is first displayed or needs to be reset.</p> Code <pre><code>MOVE -1              TO ACTIDINL OF COBIL0AI\n           MOVE SPACES          TO ACTIDINI OF COBIL0AI\n                                   CURBALI  OF COBIL0AI\n                                   CONFIRMI OF COBIL0AI\n</code></pre>"},{"location":"COBIL00C.html#ws-message","title":"WS-MESSAGE","text":"<p>This paragraph contains version control information for the COBIL00C program, indicating it is part of the CardDemo application version 1.0-15-g27d6c6f-68, with a timestamp of July 19, 2022, at 23:12:32 CDT. This helps track which version of the code is deployed and when it was last updated.</p> Code <pre><code>*\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:32 CDT\n      *\n</code></pre>"},{"location":"COCRDLIC.html","title":"COCRDLIC","text":""},{"location":"COCRDLIC.html#overview","title":"Overview","text":"<p>This program, COCRDLIC, is a business logic component of the CardDemo application that manages the display and navigation of credit card listings. It provides a user interface for viewing credit cards with filtering capabilities and access to detailed card information.</p> <p>The program implements role-based access control, showing either all cards for admin users or only cards associated with a specific account for regular users. It supports pagination through card records with forward and backward navigation using PF7/PF8 keys.</p> <p>Key functionality includes: - Filtering card records by account ID and/or card number - Displaying up to 7 card records per screen with pagination - Allowing users to select individual cards for detailed view or update operations - Input validation for account and card number filters - Navigation between related screens in the application</p> <p>The program interacts with the CARDDAT file to retrieve card information and handles various user actions including entering search criteria, selecting records for viewing or updating, and navigating between pages of results. Error handling is implemented throughout the program to provide appropriate feedback to users when invalid inputs are detected or when system errors occur.</p>"},{"location":"COCRDLIC.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COCRDLIC</code></p>"},{"location":"COCRDLIC.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant Main as 0000-MAIN\n    participant SendMap as 1000-SEND-MAP\n    participant ReceiveMap as 2000-RECEIVE-MAP\n    participant ReadForward as 9000-READ-FORWARD\n    participant ReadBackwards as 9100-READ-BACKWARDS\n    participant FilterRecords as 9500-FILTER-RECORDS\n    participant CICS\n    participant CardFile as CARDDAT File\n\n    User-&gt;&gt;Main: Start transaction\n\n    Main-&gt;&gt;Main: Initialize work areas\n    Main-&gt;&gt;Main: Check COMMAREA\n\n    alt First execution\n        Main-&gt;&gt;Main: Initialize COMMAREA\n    else Subsequent call\n        Main-&gt;&gt;Main: Retrieve COMMAREA data\n    end\n\n    Main-&gt;&gt;Main: Store PF key\n\n    alt User pressed PF3 (Exit)\n        Main-&gt;&gt;CICS: XCTL to menu program\n    else User pressed PF7 (Page Up)\n        alt First page\n            Main-&gt;&gt;ReadForward: Read current page\n            ReadForward-&gt;&gt;CardFile: STARTBR\n            ReadForward-&gt;&gt;CardFile: READNEXT (multiple)\n            CardFile--&gt;&gt;ReadForward: Card records\n            ReadForward-&gt;&gt;FilterRecords: Filter records\n            ReadForward-&gt;&gt;CardFile: ENDBR\n            ReadForward--&gt;&gt;Main: Return filtered records\n        else Not first page\n            Main-&gt;&gt;ReadBackwards: Read previous page\n            ReadBackwards-&gt;&gt;CardFile: STARTBR\n            ReadBackwards-&gt;&gt;CardFile: READPREV (multiple)\n            CardFile--&gt;&gt;ReadBackwards: Card records\n            ReadBackwards-&gt;&gt;FilterRecords: Filter records\n            ReadBackwards-&gt;&gt;CardFile: ENDBR\n            ReadBackwards--&gt;&gt;Main: Return filtered records\n        end\n    else User pressed PF8 (Page Down)\n        alt More pages exist\n            Main-&gt;&gt;ReadForward: Read next page\n            ReadForward-&gt;&gt;CardFile: STARTBR\n            ReadForward-&gt;&gt;CardFile: READNEXT (multiple)\n            CardFile--&gt;&gt;ReadForward: Card records\n            ReadForward-&gt;&gt;FilterRecords: Filter records\n            ReadForward-&gt;&gt;CardFile: ENDBR\n            ReadForward--&gt;&gt;Main: Return filtered records\n        else Last page\n            Main-&gt;&gt;SendMap: Display current page\n        end\n    else User pressed ENTER\n        alt View card details selected\n            Main-&gt;&gt;CICS: XCTL to card detail program\n        else Update card selected\n            Main-&gt;&gt;CICS: XCTL to card update program\n        else Filter/search entered\n            Main-&gt;&gt;ReceiveMap: Process input\n            ReceiveMap-&gt;&gt;ReceiveMap: Validate account ID\n            ReceiveMap-&gt;&gt;ReceiveMap: Validate card number\n            ReceiveMap-&gt;&gt;ReceiveMap: Validate selections\n\n            alt Input valid\n                Main-&gt;&gt;ReadForward: Read filtered records\n                ReadForward-&gt;&gt;CardFile: STARTBR\n                ReadForward-&gt;&gt;CardFile: READNEXT (multiple)\n                CardFile--&gt;&gt;ReadForward: Card records\n                ReadForward-&gt;&gt;FilterRecords: Filter records\n                ReadForward-&gt;&gt;CardFile: ENDBR\n                ReadForward--&gt;&gt;Main: Return filtered records\n            else Input error\n                Main-&gt;&gt;SendMap: Display error message\n            end\n        end\n    end\n\n    Main-&gt;&gt;SendMap: Prepare screen\n    SendMap-&gt;&gt;SendMap: Initialize screen\n    SendMap-&gt;&gt;SendMap: Setup array data\n    SendMap-&gt;&gt;SendMap: Setup array attributes\n    SendMap-&gt;&gt;SendMap: Setup screen attributes\n    SendMap-&gt;&gt;SendMap: Setup messages\n    SendMap-&gt;&gt;CICS: SEND MAP\n\n    Main-&gt;&gt;CICS: RETURN with COMMAREA\n    CICS--&gt;&gt;User: Display screen</code></pre>"},{"location":"COCRDLIC.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>COCRDSL</code></li> <li><code>DFHAID</code></li> <li><code>CSUSR01Y</code></li> <li><code>COCOM01Y</code></li> <li><code>CVCRD01Y</code></li> <li><code>CSSTRPFY</code></li> <li><code>DFHBMSCA</code></li> <li><code>CVACT02Y</code></li> <li><code>COCRDLI</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG02Y</code></li> <li><code>CSMSG01Y</code></li> </ul>"},{"location":"COCRDLIC.html#environment-division","title":"Environment Division","text":""},{"location":"COCRDLIC.html#input-output-section","title":"INPUT-OUTPUT SECTION","text":"<p>This section would typically contain the file definitions and I/O configurations for the COCRDLIC program, but appears to be empty in the provided snippet. In a complete program, the INPUT-OUTPUT SECTION would define the file control entries for files used by the program, such as the CARDDAT file mentioned in the program description. This section would specify file names, access methods, organization types, and record keys for the data files that the program reads from or writes to.</p> Code"},{"location":"COCRDLIC.html#data-division","title":"Data Division","text":""},{"location":"COCRDLIC.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage Section defines the data structures used in the COCRDLIC program for managing credit card listings. It contains several key components:</p> <ol> <li>CICS processing variables for handling responses and transaction IDs</li> <li>Input validation flags and fields for filtering by account ID and card number</li> <li>Selection handling variables that track user selections on the card listing screen</li> <li>Output formatting and message construction fields for user feedback</li> <li>File handling variables for CARDDAT file access and record filtering</li> <li>Program constants including screen limits (7 lines per page) and program/transaction IDs for navigation</li> <li>A commarea structure that maintains state between program invocations, particularly for pagination</li> <li>Screen data arrays to store and display up to 7 card records per screen</li> </ol> <p>The section includes flags for role-based access control, pagination tracking (first/last page indicators), and error handling. It incorporates several copybooks for common structures like card records (CVACT02Y), user information (CSUSR01Y), and screen layouts (COCRDLI). The structure supports the program's core functionality of displaying filtered card listings with pagination and allowing users to select records for detailed viewing or updates.</p> Code <pre><code>01  WS-MISC-STORAGE.                                                     \n      ******************************************************************        \n      * General CICS related                                                    \n      ******************************************************************        \n\n         05 WS-CICS-PROCESSNG-VARS.                                             \n            07 WS-RESP-CD                          PIC S9(09) COMP              \n                                                   VALUE ZEROS.                 \n            07 WS-REAS-CD                          PIC S9(09) COMP              \n                                                   VALUE ZEROS.                 \n            07 WS-TRANID                           PIC X(4)                     \n                                                   VALUE SPACES.                \n      ******************************************************************        \n      * Input edits                                                             \n      ******************************************************************        \n         05 WS-INPUT-FLAG                          PIC X(1).                    \n           88  INPUT-OK                            VALUES '0'                   \n                                                          ' '                   \n                                                   LOW-VALUES.                  \n           88  INPUT-ERROR                         VALUE '1'.                   \n         05  WS-EDIT-ACCT-FLAG                     PIC X(1).                    \n           88  FLG-ACCTFILTER-NOT-OK               VALUE '0'.                   \n           88  FLG-ACCTFILTER-ISVALID             VALUE '1'.                    \n           88  FLG-ACCTFILTER-BLANK                VALUE ' '.                   \n         05  WS-EDIT-CARD-FLAG                     PIC X(1).                    \n           88  FLG-CARDFILTER-NOT-OK               VALUE '0'.                   \n           88  FLG-CARDFILTER-ISVALID             VALUE '1'.                    \n           88  FLG-CARDFILTER-BLANK                VALUE ' '.                   \n         05 WS-EDIT-SELECT-COUNTER                PIC S9(04)                    \n                                                  USAGE COMP-3                  \n                                                  VALUE 0.                      \n         05 WS-EDIT-SELECT-FLAGS                  PIC X(7)                      \n                                                  VALUE LOW-VALUES.             \n         05 WS-EDIT-SELECT-ARRAY REDEFINES  WS-EDIT-SELECT-FLAGS.               \n            10 WS-EDIT-SELECT                      PIC X(1)                     \n                                                  OCCURS 7 TIMES.               \n               88 SELECT-OK                        VALUES 'S', 'U'.             \n               88 VIEW-REQUESTED-ON                VALUE 'S'.                   \n               88 UPDATE-REQUESTED-ON              VALUE 'U'.                   \n               88 SELECT-BLANK                     VALUES                       \n                                                   ' ',                         \n                                                   LOW-VALUES.                  \n         05 WS-EDIT-SELECT-ERROR-FLAGS             PIC X(7).                    \n         05 WS-EDIT-SELECT-ERROR-FLAGX     REDEFINES                            \n            WS-EDIT-SELECT-ERROR-FLAGS.                                         \n            10 WS-EDIT-SELECT-ERRORS OCCURS 7 TIMES.                            \n               20 WS-ROW-CRDSELECT-ERROR          PIC X(1).                     \n                  88 WS-ROW-SELECT-ERROR          VALUE '1'.                    \n         05 WS-SUBSCRIPT-VARS.                                                  \n            10 I                                  PIC S9(4) COMP                \n                                                  VALUE 0.                      \n            10 I-SELECTED                         PIC S9(4) COMP                \n                                                  VALUE 0.                      \n               88 DETAIL-WAS-REQUESTED            VALUES 1 THRU 7.              \n      ******************************************************************        \n      * Output edits                                                            \n      ******************************************************************        \n         05 CICS-OUTPUT-EDIT-VARS.                                              \n           10  CARD-ACCT-ID-X                      PIC X(11).                   \n           10  CARD-ACCT-ID-N REDEFINES CARD-ACCT-ID-X                          \n                                                   PIC 9(11).                   \n           10  CARD-CVV-CD-X                       PIC X(03).                   \n           10  CARD-CVV-CD-N REDEFINES  CARD-CVV-CD-X                           \n                                                   PIC 9(03).                   \n           10  FLG-PROTECT-SELECT-ROWS             PIC X(1).                    \n           88  FLG-PROTECT-SELECT-ROWS-NO          VALUE '0'.                   \n           88  FLG-PROTECT-SELECT-ROWS-YES         VALUE '1'.                   \n      ******************************************************************        \n      * Output Message Construction                                             \n      ******************************************************************        \n         05  WS-LONG-MSG                           PIC X(500).                  \n         05  WS-INFO-MSG                           PIC X(45).                   \n           88  WS-NO-INFO-MESSAGE                 VALUES                        \n                                                  SPACES LOW-VALUES.            \n           88  WS-INFORM-REC-ACTIONS          VALUE                             \n               'TYPE S FOR DETAIL, U TO UPDATE ANY RECORD'.                     \n         05  WS-ERROR-MSG                         PIC X(75).                    \n           88  WS-ERROR-MSG-OFF                   VALUE SPACES.                 \n           88  WS-EXIT-MESSAGE                     VALUE                        \n               'PF03 PRESSED.EXITING'.                                          \n           88  WS-NO-RECORDS-FOUND                 VALUE                        \n               'NO RECORDS FOUND FOR THIS SEARCH CONDITION.'.                   \n           88  WS-MORE-THAN-1-ACTION              VALUE                         \n               'PLEASE SELECT ONLY ONE RECORD TO VIEW OR UPDATE'.               \n           88  WS-INVALID-ACTION-CODE              VALUE                        \n               'INVALID ACTION CODE'.                                           \n         05  WS-PFK-FLAG                           PIC X(1).                    \n           88  PFK-VALID                           VALUE '0'.                   \n           88  PFK-INVALID                         VALUE '1'.                   \n         05  WS-CONTEXT-FLAG                       PIC X(1).                    \n           88  WS-CONTEXT-FRESH-START              VALUE '0'.                   \n           88  WS-CONTEXT-FRESH-START-NO           VALUE '1'.                   \n      ******************************************************************        \n      * File and data Handling                                                  \n      ******************************************************************        \n         05 WS-FILE-HANDLING-VARS.                                              \n            10  WS-CARD-RID.                                                    \n                20  WS-CARD-RID-CARDNUM            PIC X(16).                   \n                20  WS-CARD-RID-ACCT-ID            PIC 9(11).                   \n                20  WS-CARD-RID-ACCT-ID-X          REDEFINES                    \n                    WS-CARD-RID-ACCT-ID            PIC X(11).                   \n\n\n\n         05  WS-SCRN-COUNTER               PIC S9(4) COMP VALUE 0.              \n\n         05  WS-FILTER-RECORD-FLAG                 PIC X(1).                    \n           88  WS-EXCLUDE-THIS-RECORD               VALUE '0'.                  \n           88  WS-DONOT-EXCLUDE-THIS-RECORD         VALUE '1'.                  \n         05  WS-RECORDS-TO-PROCESS-FLAG            PIC X(1).                    \n           88  READ-LOOP-EXIT                      VALUE '0'.                   \n           88  MORE-RECORDS-TO-READ                VALUE '1'.                   \n         05  WS-FILE-ERROR-MESSAGE.                                             \n           10  FILLER                              PIC X(12)                    \n                                                   VALUE 'File Error:'.         \n           10  ERROR-OPNAME                        PIC X(8)                     \n                                                   VALUE SPACES.                \n           10  FILLER                              PIC X(4)                     \n                                                   VALUE ' on '.                \n           10  ERROR-FILE                          PIC X(9)                     \n                                                   VALUE SPACES.                \n           10  FILLER                              PIC X(15)                    \n                                                   VALUE                        \n                                                   ' returned RESP '.           \n           10  ERROR-RESP                          PIC X(10)                    \n                                                   VALUE SPACES.                \n           10  FILLER                              PIC X(7)                     \n                                                   VALUE ',RESP2 '.             \n           10  ERROR-RESP2                         PIC X(10)                    \n                                                   VALUE SPACES.                \n          10  FILLER                               PIC X(5).                    \n\n      ******************************************************************\n      * Literals and Constants                                                  \n      ******************************************************************        \n       01 WS-CONSTANTS.                                                         \n         05  WS-MAX-SCREEN-LINES                    PIC S9(4) COMP              \n                                                    VALUE 7.                    \n         05  LIT-THISPGM                            PIC X(8)                    \n             VALUE 'COCRDLIC'.                                                  \n         05  LIT-THISTRANID                         PIC X(4)                    \n             VALUE 'CCLI'.                                                      \n         05  LIT-THISMAPSET                         PIC X(7)                    \n             VALUE 'COCRDLI'.                                                   \n         05  LIT-THISMAP                            PIC X(7)                    \n             VALUE 'CCRDLIA'.                                                   \n         05  LIT-MENUPGM                            PIC X(8)                    \n             VALUE 'COMEN01C'.                                                  \n         05  LIT-MENUTRANID                         PIC X(4)                    \n             VALUE 'CM00'.                                                      \n         05  LIT-MENUMAPSET                         PIC X(7)                    \n             VALUE 'COMEN01'.                                                   \n         05  LIT-MENUMAP                            PIC X(7)                    \n             VALUE 'COMEN1A'.                                                   \n         05  LIT-CARDDTLPGM                         PIC X(8)                    \n             VALUE 'COCRDSLC'.                                                  \n         05  LIT-CARDDTLTRANID                      PIC X(4)                    \n             VALUE 'CCDL'.                                                      \n         05  LIT-CARDDTLMAPSET                      PIC X(7)                    \n             VALUE 'COCRDSL'.                                                   \n         05  LIT-CARDDTLMAP                         PIC X(7)                    \n             VALUE 'CCRDSLA'.                                                   \n         05  LIT-CARDUPDPGM                         PIC X(8)                    \n             VALUE 'COCRDUPC'.                                                  \n         05  LIT-CARDUPDTRANID                      PIC X(4)                    \n             VALUE 'CCUP'.                                                      \n         05  LIT-CARDUPDMAPSET                      PIC X(7)                    \n             VALUE 'COCRDUP'.                                                   \n         05  LIT-CARDUPDMAP                         PIC X(7)                    \n             VALUE 'CCRDUPA'.                                                   \n\n\n         05  LIT-CARD-FILE                          PIC X(8)                    \n                                                   VALUE 'CARDDAT '.            \n         05  LIT-CARD-FILE-ACCT-PATH                PIC X(8)                    \n\n                                                   VALUE 'CARDAIX '.            \n      ******************************************************************        \n      *Other common working storage Variables                                   \n      ******************************************************************        \n       COPY CVCRD01Y.                                                           \n\n      ******************************************************************        \n      *  Commarea manipulations                                                 \n      ******************************************************************        \n      *Application Commmarea Copybook                                           \n       COPY COCOM01Y.                                                           \n\n       01 WS-THIS-PROGCOMMAREA.                                                 \n            10 WS-CA-LAST-CARDKEY.                                              \n               15  WS-CA-LAST-CARD-NUM                PIC X(16).                \n               15  WS-CA-LAST-CARD-ACCT-ID            PIC 9(11).                \n            10 WS-CA-FIRST-CARDKEY.                                             \n               15  WS-CA-FIRST-CARD-NUM               PIC X(16).                \n               15  WS-CA-FIRST-CARD-ACCT-ID           PIC 9(11).                \n\n            10 WS-CA-SCREEN-NUM                       PIC 9(1).                 \n               88 CA-FIRST-PAGE                          VALUE 1.               \n            10 WS-CA-LAST-PAGE-DISPLAYED              PIC 9(1).                 \n               88 CA-LAST-PAGE-SHOWN                     VALUE 0.               \n               88 CA-LAST-PAGE-NOT-SHOWN                 VALUE 9.               \n            10 WS-CA-NEXT-PAGE-IND                    PIC X(1).                 \n               88 CA-NEXT-PAGE-NOT-EXISTS             VALUE LOW-VALUES.         \n               88 CA-NEXT-PAGE-EXISTS                 VALUE 'Y'.                \n\n            10 WS-RETURN-FLAG                        PIC X(1).                  \n           88  WS-RETURN-FLAG-OFF                  VALUE LOW-VALUES.            \n           88  WS-RETURN-FLAG-ON                   VALUE '1'.                   \n      ******************************************************************        \n      *  File Data Array         28 CHARS X 7 ROWS = 196                        \n      ******************************************************************        \n         05 WS-SCREEN-DATA.                                                     \n            10 WS-ALL-ROWS                         PIC X(196).                  \n            10 FILLER REDEFINES WS-ALL-ROWS.                                    \n               15 WS-SCREEN-ROWS OCCURS  7 TIMES.                               \n                  20 WS-EACH-ROW.                                               \n                     25 WS-EACH-CARD.                                           \n                        30 WS-ROW-ACCTNO           PIC X(11).                   \n                        30 WS-ROW-CARD-NUM         PIC X(16).                   \n                        30 WS-ROW-CARD-STATUS      PIC X(1).                    \n\n       01  WS-COMMAREA                             PIC X(2000).                 \n\n\n\n      *IBM SUPPLIED COPYBOOKS                                                   \n       COPY DFHBMSCA.                                                           \n       COPY DFHAID.                                                             \n\n      *COMMON COPYBOOKS                                                         \n      *Screen Titles                                                            \n       COPY COTTL01Y.                                                           \n      *Credit Card Search Screen Layout                                         \n      *COPY COCRDSL.                                                            \n      *Credit Card List Screen Layout                                           \n       COPY COCRDLI.                                                            \n\n      *Current Date                                                             \n       COPY CSDAT01Y.                                                           \n      *Common Messages                                                          \n       COPY CSMSG01Y.                                                           \n      *Abend Variables                                                          \n      *COPY CSMSG02Y.                                                           \n      *Signed on user data                                                      \n       COPY CSUSR01Y.                                                           \n\n      *Dataset layouts                                                          \n\n      *CARD RECORD LAYOUT                                                       \n       COPY CVACT02Y.\n</code></pre>"},{"location":"COCRDLIC.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This section defines the DFHCOMMAREA structure in the Linkage Section, which serves as the communication area for passing data between CICS programs. It contains a single field defined as a variable-length array of 1-byte elements (PIC X(1)) that can occur from 1 to 32,767 times, with the actual length determined by the EIBCALEN special register. This flexible structure allows the program to receive and process communication data of varying lengths from calling programs within the CardDemo application.</p> Code <pre><code>01  DFHCOMMAREA.                                                         \n         05  FILLER                                PIC X(1)                     \n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n</code></pre>"},{"location":"COCRDLIC.html#procedure-division","title":"Procedure Division","text":""},{"location":"COCRDLIC.html#0000-main","title":"0000-MAIN","text":"<p>This paragraph serves as the main control flow for the COCRDLIC program, handling initialization, user input processing, and navigation between screens. It begins by initializing work areas and setting up the program context, then processes the communication area to determine if this is the first execution or a subsequent call.</p> <p>The paragraph implements key navigation logic, handling various function keys (PF3 for exit, PF7 for page up, PF8 for page down) and the ENTER key. It contains extensive conditional logic to evaluate user actions and determine the appropriate response, including:</p> <ol> <li>Validating user input and displaying error messages when needed</li> <li>Implementing pagination through card records with first/last page boundary checks</li> <li>Processing user selections for viewing or updating specific card details</li> <li>Transferring control to other programs when a card is selected for detailed view or update</li> </ol> <p>The code uses an EVALUATE statement to handle different scenarios based on user actions and program state, directing the flow to appropriate sections for reading records forward or backward, sending maps to display, or transferring to other programs in the application workflow. Throughout the paragraph, the program maintains context information in the communication area to support navigation between related screens.</p> Code <pre><code>INITIALIZE CC-WORK-AREA                                              \n                      WS-MISC-STORAGE                                           \n                      WS-COMMAREA                                               \n\n      *****************************************************************         \n      * Store our context                                                       \n      *****************************************************************         \n           MOVE LIT-THISTRANID       TO WS-TRANID                               \n      *****************************************************************         \n      * Ensure error message is cleared                               *         \n      *****************************************************************         \n           SET WS-ERROR-MSG-OFF  TO TRUE                                        \n      *****************************************************************         \n      * Retrived passed data if  any. Initialize them if first run.             \n      *****************************************************************         \n           IF EIBCALEN = 0\n              INITIALIZE CARDDEMO-COMMAREA\n                         WS-THIS-PROGCOMMAREA \n              MOVE LIT-THISTRANID        TO CDEMO-FROM-TRANID                   \n              MOVE LIT-THISPGM           TO CDEMO-FROM-PROGRAM                  \n              SET CDEMO-USRTYP-USER      TO TRUE                                \n              SET CDEMO-PGM-ENTER        TO TRUE                                \n              MOVE LIT-THISMAP           TO CDEMO-LAST-MAP                      \n              MOVE LIT-THISMAPSET        TO CDEMO-LAST-MAPSET                   \n              SET CA-FIRST-PAGE          TO TRUE                                \n              SET CA-LAST-PAGE-NOT-SHOWN TO TRUE                                \n           ELSE\n              MOVE DFHCOMMAREA (1:LENGTH OF CARDDEMO-COMMAREA) TO               \n                                CARDDEMO-COMMAREA                               \n              MOVE DFHCOMMAREA(LENGTH OF CARDDEMO-COMMAREA + 1:                 \n                               LENGTH OF WS-THIS-PROGCOMMAREA )TO               \n                                WS-THIS-PROGCOMMAREA                            \n           END-IF                                                               \n      *****************************************************************         \n      * If coming in from menu. Lets forget the past and start afresh *         \n      *****************************************************************         \n           IF (CDEMO-PGM-ENTER                                                  \n           AND CDEMO-FROM-PROGRAM NOT EQUAL LIT-THISPGM)                        \n               INITIALIZE WS-THIS-PROGCOMMAREA\n               SET CDEMO-PGM-ENTER      TO TRUE                                 \n               MOVE LIT-THISMAP         TO CDEMO-LAST-MAP                       \n               SET CA-FIRST-PAGE        TO TRUE                                 \n               SET CA-LAST-PAGE-NOT-SHOWN TO TRUE                               \n           END-IF \n\n      ******************************************************************        \n      * Remap PFkeys as needed.                                                 \n      * Store the Mapped PF Key                                                 \n      *****************************************************************         \n           PERFORM YYYY-STORE-PFKEY                                             \n              THRU YYYY-STORE-PFKEY-EXIT                                        \n\n      ******************************************************************        \n      * If something is present in commarea                                     \n      * and the from program is this program itself,                            \n      * read and edit the inputs given                                          \n      *****************************************************************         \n           IF  EIBCALEN &gt; 0                                                     \n           AND CDEMO-FROM-PROGRAM  EQUAL LIT-THISPGM                            \n               PERFORM 2000-RECEIVE-MAP                                         \n               THRU    2000-RECEIVE-MAP-EXIT                                    \n\n           END-IF                                                               \n      *****************************************************************         \n      * Check the mapped key  to see if its valid at this point       *         \n      * F3    - Exit                                                            \n      * Enter - List of cards for current start key                             \n      * F8    - Page down                                                       \n      * F7    - Page up                                                         \n      *****************************************************************         \n           SET PFK-INVALID TO TRUE                                              \n           IF CCARD-AID-ENTER OR                                                \n              CCARD-AID-PFK03 OR                                                \n              CCARD-AID-PFK07 OR                                                \n              CCARD-AID-PFK08                                                   \n               SET PFK-VALID TO TRUE                                            \n           END-IF                                                               \n\n           IF PFK-INVALID                                                       \n              SET CCARD-AID-ENTER TO TRUE                                       \n           END-IF                                                               \n      *****************************************************************         \n      * If the user pressed PF3 go back to main menu                            \n      *****************************************************************         \n           IF  (CCARD-AID-PFK03                                                 \n           AND CDEMO-FROM-PROGRAM  EQUAL LIT-THISPGM)                           \n              MOVE LIT-THISTRANID   TO CDEMO-FROM-TRANID                        \n              MOVE LIT-THISPGM      TO CDEMO-FROM-PROGRAM                       \n              SET  CDEMO-USRTYP-USER TO TRUE                                    \n              SET  CDEMO-PGM-ENTER  TO TRUE                                     \n              MOVE LIT-THISMAPSET   TO CDEMO-LAST-MAPSET                        \n              MOVE LIT-THISMAP      TO CDEMO-LAST-MAP                           \n              MOVE LIT-MENUPGM      TO CDEMO-TO-PROGRAM                         \n\n              MOVE LIT-MENUMAPSET   TO CCARD-NEXT-MAPSET                        \n              MOVE LIT-THISMAP      TO CCARD-NEXT-MAP                           \n              SET WS-EXIT-MESSAGE            TO TRUE                            \n\n      *       CALL MENU PROGRAM                                                 \n      *                                                                         \n              SET CDEMO-PGM-ENTER   TO TRUE                                     \n      *                                                                         \n              EXEC CICS XCTL                                                    \n                        PROGRAM (LIT-MENUPGM)                                   \n                        COMMAREA(CARDDEMO-COMMAREA)                             \n              END-EXEC                                                          \n           END-IF                                                               \n      *****************************************************************         \n      * If the user did not press PF8, lets reset the last page flag            \n      *****************************************************************         \n           IF CCARD-AID-PFK08                                                   \n              CONTINUE                                                          \n           ELSE                                                                 \n              SET CA-LAST-PAGE-NOT-SHOWN   TO TRUE                              \n           END-IF                                                               \n      *****************************************************************         \n      * Now we decide what to do                                                \n      *****************************************************************         \n           EVALUATE TRUE                                                        \n               WHEN INPUT-ERROR                                                 \n      *****************************************************************         \n      *        ASK FOR CORRECTIONS TO INPUTS                                    \n      *****************************************************************         \n                    MOVE WS-ERROR-MSG    TO CCARD-ERROR-MSG                     \n                    MOVE LIT-THISPGM     TO CDEMO-FROM-PROGRAM                  \n                    MOVE LIT-THISMAPSET  TO CDEMO-LAST-MAPSET                   \n                    MOVE LIT-THISMAP     TO CDEMO-LAST-MAP                      \n\n                    MOVE LIT-THISPGM     TO CCARD-NEXT-PROG                     \n                    MOVE LIT-THISMAPSET  TO CCARD-NEXT-MAPSET                   \n                    MOVE LIT-THISMAP     TO CCARD-NEXT-MAP                      \n                    IF  NOT FLG-ACCTFILTER-NOT-OK                               \n                    AND NOT FLG-CARDFILTER-NOT-OK                               \n                       PERFORM 9000-READ-FORWARD                                \n                          THRU 9000-READ-FORWARD-EXIT                           \n                    END-IF                                                      \n                    PERFORM 1000-SEND-MAP                                       \n                       THRU 1000-SEND-MAP                                       \n                    GO TO COMMON-RETURN                                         \n               WHEN CCARD-AID-PFK07                                             \n                    AND CA-FIRST-PAGE                                           \n      *****************************************************************         \n      *        PAGE UP - PF7 - BUT ALREADY ON FIRST PAGE                        \n      *****************************************************************         \n               WHEN CCARD-AID-PFK07                                             \n                    AND CA-FIRST-PAGE                                           \n                    MOVE WS-CA-FIRST-CARD-NUM                                   \n                                  TO WS-CARD-RID-CARDNUM                        \n      *             MOVE WS-CA-FIRST-CARD-ACCT-ID                               \n      *                           TO WS-CARD-RID-ACCT-ID                        \n                    PERFORM 9000-READ-FORWARD                                   \n                       THRU 9000-READ-FORWARD-EXIT                              \n                    PERFORM 1000-SEND-MAP                                       \n                       THRU 1000-SEND-MAP                                       \n                    GO TO COMMON-RETURN                                         \n      *****************************************************************         \n      *        BACK - PF3 IF WE CAME FROM SOME OTHER PROGRAM                    \n      *****************************************************************         \n               WHEN CCARD-AID-PFK03                                             \n               WHEN CDEMO-PGM-REENTER AND                                       \n                    CDEMO-FROM-PROGRAM NOT EQUAL LIT-THISPGM                    \n\n                    INITIALIZE CARDDEMO-COMMAREA                                \n                               WS-THIS-PROGCOMMAREA                             \n                    MOVE LIT-THISTRANID      TO CDEMO-FROM-TRANID               \n                    MOVE LIT-THISPGM         TO CDEMO-FROM-PROGRAM              \n                    SET CDEMO-USRTYP-USER    TO TRUE                            \n                    SET CDEMO-PGM-ENTER      TO TRUE                            \n                    MOVE LIT-THISMAP         TO CDEMO-LAST-MAP                  \n                    MOVE LIT-THISMAPSET      TO CDEMO-LAST-MAPSET               \n                    SET CA-FIRST-PAGE        TO TRUE                            \n                    SET CA-LAST-PAGE-NOT-SHOWN TO TRUE                          \n\n                    MOVE WS-CA-FIRST-CARD-NUM                                   \n                                  TO WS-CARD-RID-CARDNUM                        \n      *             MOVE WS-CA-FIRST-CARD-ACCT-ID                               \n      *                           TO WS-CARD-RID-ACCT-ID                        \n\n                    PERFORM 9000-READ-FORWARD                                   \n                       THRU 9000-READ-FORWARD-EXIT                              \n                    PERFORM 1000-SEND-MAP                                       \n                       THRU 1000-SEND-MAP                                       \n                    GO TO COMMON-RETURN                                         \n      *****************************************************************         \n      *        PAGE DOWN                                                        \n      *****************************************************************         \n               WHEN CCARD-AID-PFK08                                             \n                    AND CA-NEXT-PAGE-EXISTS                                     \n                    MOVE WS-CA-LAST-CARD-NUM                                    \n                                  TO WS-CARD-RID-CARDNUM                        \n      *             MOVE WS-CA-LAST-CARD-ACCT-ID                                \n      *                           TO WS-CARD-RID-ACCT-ID                        \n                    ADD   +1       TO WS-CA-SCREEN-NUM                          \n                    PERFORM 9000-READ-FORWARD                                   \n                       THRU 9000-READ-FORWARD-EXIT                              \n                    PERFORM 1000-SEND-MAP                                       \n                       THRU 1000-SEND-MAP-EXIT                                  \n                    GO TO COMMON-RETURN                                         \n      *****************************************************************         \n      *        PAGE UP                                                          \n      *****************************************************************         \n               WHEN CCARD-AID-PFK07                                             \n                    AND NOT CA-FIRST-PAGE                                       \n\n                    MOVE WS-CA-FIRST-CARD-NUM                                   \n                                  TO WS-CARD-RID-CARDNUM                        \n      *             MOVE WS-CA-FIRST-CARD-ACCT-ID                               \n      *                           TO WS-CARD-RID-ACCT-ID                        \n                    SUBTRACT 1    FROM WS-CA-SCREEN-NUM                         \n                    PERFORM 9100-READ-BACKWARDS                                 \n                       THRU 9100-READ-BACKWARDS-EXIT                            \n                    PERFORM 1000-SEND-MAP                                       \n                       THRU 1000-SEND-MAP-EXIT                                  \n                    GO TO COMMON-RETURN                                         \n      *****************************************************************         \n      *        TRANSFER TO CARD DETAIL VIEW                                     \n      *****************************************************************         \n               WHEN CCARD-AID-ENTER                                             \n                AND VIEW-REQUESTED-ON(I-SELECTED)                               \n                AND CDEMO-FROM-PROGRAM  EQUAL LIT-THISPGM                       \n                   MOVE LIT-THISTRANID    TO CDEMO-FROM-TRANID                  \n                   MOVE LIT-THISPGM       TO CDEMO-FROM-PROGRAM                 \n                   SET  CDEMO-USRTYP-USER TO TRUE                               \n                   SET  CDEMO-PGM-ENTER   TO TRUE                               \n                   MOVE LIT-THISMAPSET    TO CDEMO-LAST-MAPSET                  \n                   MOVE LIT-THISMAP       TO CDEMO-LAST-MAP                     \n                   MOVE LIT-CARDDTLPGM    TO CCARD-NEXT-PROG                    \n\n                   MOVE LIT-CARDDTLMAPSET TO CCARD-NEXT-MAPSET                  \n                   MOVE LIT-CARDDTLMAP    TO CCARD-NEXT-MAP                     \n\n                   MOVE WS-ROW-ACCTNO (I-SELECTED)                              \n                                          TO CDEMO-ACCT-ID                      \n                   MOVE WS-ROW-CARD-NUM (I-SELECTED)                            \n                                          TO CDEMO-CARD-NUM                     \n\n      *            CALL CARD DETAIL PROGRAM                                     \n      *                                                                         \n                   EXEC CICS XCTL                                               \n                        PROGRAM (CCARD-NEXT-PROG)                               \n                        COMMAREA(CARDDEMO-COMMAREA)                             \n                   END-EXEC                                                     \n      *****************************************************************         \n      *        TRANSFER TO CARD UPDATED PROGRAM                                 \n      *****************************************************************         \n               WHEN CCARD-AID-ENTER                                             \n                AND UPDATE-REQUESTED-ON(I-SELECTED)                             \n                AND CDEMO-FROM-PROGRAM  EQUAL LIT-THISPGM                       \n                   MOVE LIT-THISTRANID    TO CDEMO-FROM-TRANID                  \n                   MOVE LIT-THISPGM       TO CDEMO-FROM-PROGRAM                 \n                   SET  CDEMO-USRTYP-USER TO TRUE                               \n                   SET  CDEMO-PGM-ENTER   TO TRUE                               \n                   MOVE LIT-THISMAPSET    TO CDEMO-LAST-MAPSET                  \n                   MOVE LIT-THISMAP       TO CDEMO-LAST-MAP                     \n                   MOVE LIT-CARDUPDPGM    TO CCARD-NEXT-PROG                    \n\n                   MOVE LIT-CARDUPDMAPSET TO CCARD-NEXT-MAPSET                  \n                   MOVE LIT-CARDUPDMAP    TO CCARD-NEXT-MAP                     \n\n                   MOVE WS-ROW-ACCTNO (I-SELECTED)                              \n                                          TO CDEMO-ACCT-ID                      \n                   MOVE WS-ROW-CARD-NUM (I-SELECTED)                            \n                                          TO CDEMO-CARD-NUM                     \n\n      *            CALL CARD UPDATE PROGRAM                                     \n      *                                                                         \n                   EXEC CICS XCTL                                               \n                        PROGRAM (CCARD-NEXT-PROG)                               \n                        COMMAREA(CARDDEMO-COMMAREA)                             \n                   END-EXEC                                                     \n\n      *****************************************************************         \n               WHEN OTHER                                                       \n      *****************************************************************         \n                    MOVE WS-CA-FIRST-CARD-NUM                                   \n                                  TO WS-CARD-RID-CARDNUM                        \n      *             MOVE WS-CA-FIRST-CARD-ACCT-ID                               \n      *                           TO WS-CARD-RID-ACCT-ID                        \n                    PERFORM 9000-READ-FORWARD                                   \n                       THRU 9000-READ-FORWARD-EXIT                              \n                    PERFORM 1000-SEND-MAP                                       \n                       THRU 1000-SEND-MAP                                       \n                    GO TO COMMON-RETURN                                         \n           END-EVALUATE                                                         \n\n      * If we had an error setup error message to display and return            \n           IF INPUT-ERROR                                                       \n              MOVE WS-ERROR-MSG   TO CCARD-ERROR-MSG                            \n              MOVE LIT-THISPGM     TO CDEMO-FROM-PROGRAM                        \n              MOVE LIT-THISMAPSET  TO CDEMO-LAST-MAPSET                         \n              MOVE LIT-THISMAP     TO CDEMO-LAST-MAP                            \n\n              MOVE LIT-THISPGM     TO CCARD-NEXT-PROG                           \n              MOVE LIT-THISMAPSET  TO CCARD-NEXT-MAPSET                         \n              MOVE LIT-THISMAP     TO CCARD-NEXT-MAP                            \n      *       PERFORM 1000-SEND-MAP                                             \n      *          THRU 1000-SEND-MAP                                             \n              GO TO COMMON-RETURN                                               \n           END-IF                                                               \n\n           MOVE LIT-THISPGM        TO CCARD-NEXT-PROG                           \n           GO TO COMMON-RETURN                                                  \n           .\n</code></pre>"},{"location":"COCRDLIC.html#common-return","title":"COMMON-RETURN","text":"<p>This paragraph handles the program's return logic, preparing the communication area (COMMAREA) before returning control to CICS. It stores transaction context information including the current transaction ID, program name, mapset, and map in the common communication area. The paragraph then combines the standard CardDemo communication area with this program's specific communication area into a single working storage area (WS-COMMAREA). Finally, it executes a CICS RETURN command that specifies the transaction ID to maintain program control and passes the prepared communication area to preserve state information between transactions.</p> Code <pre><code>MOVE  LIT-THISTRANID TO CDEMO-FROM-TRANID                            \n           MOVE  LIT-THISPGM     TO CDEMO-FROM-PROGRAM                          \n           MOVE  LIT-THISMAPSET  TO CDEMO-LAST-MAPSET                           \n           MOVE  LIT-THISMAP     TO CDEMO-LAST-MAP                              \n           MOVE  CARDDEMO-COMMAREA    TO WS-COMMAREA                            \n           MOVE  WS-THIS-PROGCOMMAREA TO                                        \n                  WS-COMMAREA(LENGTH OF CARDDEMO-COMMAREA + 1:                  \n                               LENGTH OF WS-THIS-PROGCOMMAREA )                 \n\n\n           EXEC CICS RETURN                                                     \n                TRANSID (LIT-THISTRANID)                                        \n                COMMAREA (WS-COMMAREA)                                          \n                LENGTH(LENGTH OF WS-COMMAREA)                                   \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COCRDLIC.html#0000-main-exit","title":"0000-MAIN-EXIT","text":"<p>This paragraph serves as a standard exit point for the program, providing a clean termination point that can be called from various parts of the program when processing needs to end. It contains only the EXIT statement followed by a period, which marks the end of the paragraph. This is a common COBOL programming pattern used to centralize program termination logic.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#1000-send-map","title":"1000-SEND-MAP","text":"<p>This paragraph orchestrates the initialization and display of the card listing screen. It follows a sequential process by first initializing the screen, setting up the array elements for displaying multiple card records, configuring the visual attributes for the array elements, establishing screen-level attributes, preparing any user messages, and finally sending the completed screen to the terminal. This structured approach ensures the screen is properly formatted with appropriate visual cues and populated with the correct data before being presented to the user.</p> Code <pre><code>PERFORM 1100-SCREEN-INIT                                             \n              THRU 1100-SCREEN-INIT-EXIT                                        \n           PERFORM 1200-SCREEN-ARRAY-INIT                                       \n              THRU 1200-SCREEN-ARRAY-INIT-EXIT                                  \n           PERFORM 1250-SETUP-ARRAY-ATTRIBS                                     \n              THRU 1250-SETUP-ARRAY-ATTRIBS-EXIT                                \n           PERFORM 1300-SETUP-SCREEN-ATTRS                                      \n              THRU 1300-SETUP-SCREEN-ATTRS-EXIT                                 \n           PERFORM 1400-SETUP-MESSAGE                                           \n              THRU 1400-SETUP-MESSAGE-EXIT                                      \n           PERFORM 1500-SEND-SCREEN                                             \n              THRU 1500-SEND-SCREEN-EXIT                                        \n           .\n</code></pre>"},{"location":"COCRDLIC.html#1000-send-map-exit","title":"1000-SEND-MAP-EXIT","text":"<p>This paragraph serves as an exit point for the 1000-SEND-MAP routine in the COCRDLIC program. It provides a clean termination point for the routine that handles displaying the credit card listing interface to users.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#1100-screen-init","title":"1100-SCREEN-INIT","text":"<p>This paragraph initializes the screen display for the credit card listing interface. It clears the output area, retrieves the current date and time, and populates standard header information including titles, transaction ID, program name, current date (in MM/DD/YY format), and current time (in HH:MM:SS format). It also sets the page number from a working storage variable and initializes the information message area with no message and highlighted display attributes. This setup creates a consistent user interface header before specific card listing data is displayed.</p> Code <pre><code>MOVE LOW-VALUES             TO CCRDLIAO                              \n\n           MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA                       \n\n           MOVE CCDA-TITLE01           TO TITLE01O OF CCRDLIAO                  \n           MOVE CCDA-TITLE02           TO TITLE02O OF CCRDLIAO                  \n           MOVE LIT-THISTRANID         TO TRNNAMEO OF CCRDLIAO                  \n           MOVE LIT-THISPGM            TO PGMNAMEO OF CCRDLIAO                  \n\n           MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA                       \n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM                         \n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD                         \n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY                         \n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF CCRDLIAO                  \n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH                         \n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM                         \n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS                         \n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF CCRDLIAO                  \n      *    PAGE NUMBER                                                          \n      *                                                                         \n           MOVE WS-CA-SCREEN-NUM       TO PAGENOO  OF CCRDLIAO                  \n\n           SET WS-NO-INFO-MESSAGE      TO TRUE                                  \n           MOVE WS-INFO-MSG            TO INFOMSGO OF CCRDLIAO                  \n           MOVE DFHBMDAR               TO INFOMSGC OF CCRDLIAO                  \n           .\n</code></pre>"},{"location":"COCRDLIC.html#1100-screen-init-exit","title":"1100-SCREEN-INIT-EXIT","text":"<p>This paragraph serves as an exit point for the screen initialization routine in the COCRDLIC program. It provides a clean termination point for the 1100-SCREEN-INIT section, allowing the program to return control to the calling routine after completing the screen initialization process.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#1200-screen-array-init","title":"1200-SCREEN-ARRAY-INIT","text":"<p>This paragraph populates the credit card listing display screen with data from working storage arrays. For each of the seven possible card entries on the screen, it checks if the corresponding array element contains data (not LOW-VALUES). When data exists, it transfers the selection field, account number, card number, and card status from working storage arrays to their corresponding screen output fields. The code follows a repetitive pattern for each of the seven possible display rows, with a comment at the top suggesting that this repetitive structure could be improved through the use of REDEFINES. This paragraph is responsible for formatting the paginated display of credit card information that users see when browsing cards in the system.</p> Code <pre><code>*    USE REDEFINES AND CLEAN UP REPETITIVE CODE !!                        \n           IF   WS-EACH-CARD(1)            EQUAL LOW-VALUES                     \n              CONTINUE                                                          \n           ELSE                                                                 \n              MOVE WS-EDIT-SELECT(1)       TO CRDSEL1O OF CCRDLIAO              \n              MOVE WS-ROW-ACCTNO(1)        TO ACCTNO1O OF CCRDLIAO              \n              MOVE WS-ROW-CARD-NUM(1)      TO CRDNUM1O OF CCRDLIAO              \n              MOVE WS-ROW-CARD-STATUS(1)   TO CRDSTS1O OF CCRDLIAO              \n           END-IF                                                               \n\n           IF   WS-EACH-CARD(2)        EQUAL LOW-VALUES                         \n              CONTINUE                                                          \n           ELSE                                                                 \n              MOVE WS-EDIT-SELECT(2)       TO CRDSEL2O OF CCRDLIAO              \n              MOVE WS-ROW-ACCTNO(2)        TO ACCTNO2O OF CCRDLIAO              \n              MOVE WS-ROW-CARD-NUM(2)      TO CRDNUM2O OF CCRDLIAO              \n              MOVE WS-ROW-CARD-STATUS(2)   TO CRDSTS2O OF CCRDLIAO              \n           END-IF                                                               \n\n           IF   WS-EACH-CARD(3)        EQUAL LOW-VALUES                         \n              CONTINUE                                                          \n           ELSE                                                                 \n              MOVE WS-EDIT-SELECT(3)       TO CRDSEL3O OF CCRDLIAO              \n              MOVE WS-ROW-ACCTNO(3)        TO ACCTNO3O OF CCRDLIAO              \n              MOVE WS-ROW-CARD-NUM(3)      TO CRDNUM3O OF CCRDLIAO              \n              MOVE WS-ROW-CARD-STATUS(3)   TO CRDSTS3O OF CCRDLIAO              \n           END-IF                                                               \n\n           IF   WS-EACH-CARD(4)        EQUAL LOW-VALUES                         \n              CONTINUE                                                          \n           ELSE                                                                 \n              MOVE WS-EDIT-SELECT(4)       TO CRDSEL4O OF CCRDLIAO              \n              MOVE WS-ROW-ACCTNO(4)        TO ACCTNO4O OF CCRDLIAO              \n              MOVE WS-ROW-CARD-NUM(4)      TO CRDNUM4O OF CCRDLIAO              \n              MOVE WS-ROW-CARD-STATUS(4)   TO CRDSTS4O OF CCRDLIAO              \n           END-IF                                                               \n\n           IF   WS-EACH-CARD(5)        EQUAL LOW-VALUES                         \n              CONTINUE                                                          \n           ELSE                                                                 \n              MOVE WS-EDIT-SELECT(5)       TO CRDSEL5O OF CCRDLIAO              \n              MOVE WS-ROW-ACCTNO(5)        TO ACCTNO5O OF CCRDLIAO              \n              MOVE WS-ROW-CARD-NUM(5)      TO CRDNUM5O OF CCRDLIAO              \n              MOVE WS-ROW-CARD-STATUS(5)   TO CRDSTS5O OF CCRDLIAO              \n           END-IF                                                               \n\n\n           IF   WS-EACH-CARD(6)        EQUAL LOW-VALUES                         \n              CONTINUE                                                          \n           ELSE                                                                 \n              MOVE WS-EDIT-SELECT(6)       TO CRDSEL6O OF CCRDLIAO              \n              MOVE WS-ROW-ACCTNO(6)        TO ACCTNO6O OF CCRDLIAO              \n              MOVE WS-ROW-CARD-NUM(6)      TO CRDNUM6O OF CCRDLIAO              \n              MOVE WS-ROW-CARD-STATUS(6)   TO CRDSTS6O OF CCRDLIAO              \n           END-IF                                                               \n\n           IF   WS-EACH-CARD(7)        EQUAL LOW-VALUES                         \n              CONTINUE                                                          \n           ELSE                                                                 \n              MOVE WS-EDIT-SELECT(7)       TO CRDSEL7O OF CCRDLIAO              \n              MOVE WS-ROW-ACCTNO(7)        TO ACCTNO7O OF CCRDLIAO              \n              MOVE WS-ROW-CARD-NUM(7)      TO CRDNUM7O OF CCRDLIAO              \n              MOVE WS-ROW-CARD-STATUS(7)   TO CRDSTS7O OF CCRDLIAO              \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDLIC.html#1200-screen-array-init-exit","title":"1200-SCREEN-ARRAY-INIT-EXIT","text":"<p>This paragraph serves as an exit point for the 1200-SCREEN-ARRAY-INIT routine. It simply marks the end of the routine with no additional processing, allowing the program to return control to the calling section after the screen array initialization is complete.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#1250-setup-array-attribs","title":"1250-SETUP-ARRAY-ATTRIBS","text":"<p>This paragraph configures the display attributes for the card selection fields in the card listing screen. For each of the seven possible card rows on the screen, it determines whether the selection field should be protected or unprotected based on data availability and application state. When a row contains card data and selection is allowed, the field is made input-capable (DFHBMFSE). Otherwise, it's protected (DFHBMPRO/DFHBMPRF). The paragraph also handles error highlighting by setting fields to red (DFHRED) when validation errors occur and positions the cursor at the first error field. The code includes a comment suggesting that this repetitive logic could be improved through the use of REDEFINES. There's also a stray \"I\" character in the fourth row's logic that appears to be a typo.</p> Code <pre><code>*    USE REDEFINES AND CLEAN UP REPETITIVE CODE !!                        \n\n           IF   WS-EACH-CARD(1)            EQUAL LOW-VALUES                     \n           OR   FLG-PROTECT-SELECT-ROWS-YES                                     \n              MOVE DFHBMPRF                TO CRDSEL1A OF CCRDLIAI              \n           ELSE                                                                 \n              IF WS-ROW-CRDSELECT-ERROR(1) = '1'                                \n                 MOVE DFHRED               TO CRDSEL1C OF CCRDLIAO              \n                 IF WS-EDIT-SELECT(1) = SPACE OR LOW-VALUES                     \n                    MOVE '*'               TO CRDSEL1O OF CCRDLIAO              \n                 END-IF                                                         \n              END-IF                                                            \n              MOVE DFHBMFSE                TO CRDSEL1A OF CCRDLIAI              \n           END-IF                                                               \n\n           IF   WS-EACH-CARD(2)            EQUAL LOW-VALUES                     \n           OR   FLG-PROTECT-SELECT-ROWS-YES                                     \n              MOVE DFHBMPRO                TO CRDSEL2A OF CCRDLIAI              \n           ELSE                                                                 \n              IF WS-ROW-CRDSELECT-ERROR(2) = '1'                                \n                 MOVE DFHRED               TO CRDSEL2C OF CCRDLIAO              \n                 MOVE -1                   TO CRDSEL2L OF CCRDLIAI              \n              END-IF                                                            \n              MOVE DFHBMFSE                TO CRDSEL2A OF CCRDLIAI              \n           END-IF                                                               \n\n           IF   WS-EACH-CARD(3)            EQUAL LOW-VALUES                     \n           OR   FLG-PROTECT-SELECT-ROWS-YES                                     \n              MOVE DFHBMPRO                TO CRDSEL3A OF CCRDLIAI              \n\n           ELSE                                                                 \n              IF WS-ROW-CRDSELECT-ERROR(3) = '1'                                \n                 MOVE DFHRED               TO CRDSEL3C OF CCRDLIAO              \n                 MOVE -1                   TO CRDSEL3L OF CCRDLIAI              \n              END-IF                                                            \n              MOVE DFHBMFSE                TO CRDSEL3A OF CCRDLIAI              \n           END-IF                                                               \n\n           IF   WS-EACH-CARD(4)            EQUAL LOW-VALUES                     \n           OR   FLG-PROTECT-SELECT-ROWS-YES                                     \n              MOVE DFHBMPRO                TO CRDSEL4A OF CCRDLIAI              \n              I                                                                 \n           ELSE                                                                 \n              IF WS-ROW-CRDSELECT-ERROR(4) = '1'                                \n                 MOVE DFHRED               TO CRDSEL4C OF CCRDLIAO              \n                 MOVE -1                   TO CRDSEL4L OF CCRDLIAI              \n              END-IF                                                            \n              MOVE DFHBMFSE                TO CRDSEL4A OF CCRDLIAI              \n           END-IF                                                               \n\n           IF   WS-EACH-CARD(5)            EQUAL LOW-VALUES                     \n           OR   FLG-PROTECT-SELECT-ROWS-YES                                     \n              MOVE DFHBMPRO                TO CRDSEL5A OF CCRDLIAI              \n           ELSE                                                                 \n              IF WS-ROW-CRDSELECT-ERROR(5) = '1'                                \n                 MOVE DFHRED               TO CRDSEL5C OF CCRDLIAO              \n                 MOVE -1                   TO CRDSEL5L OF CCRDLIAI              \n              END-IF                                                            \n              MOVE DFHBMFSE                TO CRDSEL5A OF CCRDLIAI              \n           END-IF                                                               \n\n           IF   WS-EACH-CARD(6)            EQUAL LOW-VALUES                     \n           OR   FLG-PROTECT-SELECT-ROWS-YES                                     \n              MOVE DFHBMPRO                TO CRDSEL6A OF CCRDLIAI              \n\n           ELSE                                                                 \n              IF WS-ROW-CRDSELECT-ERROR(6) = '1'                                \n                 MOVE DFHRED               TO CRDSEL6C OF CCRDLIAO              \n                 MOVE -1                   TO CRDSEL6L OF CCRDLIAI              \n              END-IF                                                            \n              MOVE DFHBMFSE                TO CRDSEL6A OF CCRDLIAI              \n           END-IF                                                               \n\n           IF   WS-EACH-CARD(7)            EQUAL LOW-VALUES                     \n           OR   FLG-PROTECT-SELECT-ROWS-YES                                     \n              MOVE DFHBMPRO                TO CRDSEL7A OF CCRDLIAI              \n           ELSE                                                                 \n              IF WS-ROW-CRDSELECT-ERROR(7) = '1'                                \n                 MOVE DFHRED               TO CRDSEL7C OF CCRDLIAO              \n                 MOVE -1                   TO CRDSEL7L OF CCRDLIAI              \n              END-IF                                                            \n              MOVE DFHBMFSE                TO CRDSEL7A OF CCRDLIAI              \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDLIC.html#1250-setup-array-attribs-exit","title":"1250-SETUP-ARRAY-ATTRIBS-EXIT","text":"<p>This paragraph serves as an exit point for the 1250-SETUP-ARRAY-ATTRIBS routine. It provides a clean termination point for the routine that sets up display attributes for the card listing array, allowing the program to return control to the calling routine after attribute setup is complete.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#1300-setup-screen-attrs","title":"1300-SETUP-SCREEN-ATTRS","text":"<p>This paragraph initializes and configures the screen attributes for the credit card listing interface. It handles the setup of search criteria fields (account ID and card number) based on various conditions including previous user input, validation status, and navigation context. The paragraph performs three main functions:</p> <ol> <li> <p>Initializes search criteria fields by evaluating the current state of filters and preserving valid user inputs. It determines whether to display previously entered values or clear the fields based on validation flags and program flow.</p> </li> <li> <p>Sets cursor positioning and highlighting for error conditions by applying red color attributes to invalid input fields (account ID or card number) that failed validation.</p> </li> <li> <p>Establishes default cursor positioning at the account ID field when no errors are present, improving user experience by placing the cursor at the logical starting point for new searches.</p> </li> </ol> <p>The code uses CICS screen attribute bytes (like DFHBMFSE for field selection and DFHRED for error highlighting) to control the visual presentation of the interface elements based on the current application state.</p> Code <pre><code>*    INITIALIZE SEARCH CRITERIA                                           \n           IF EIBCALEN = 0                                                      \n           OR (CDEMO-PGM-ENTER                                                  \n           AND CDEMO-FROM-PROGRAM = LIT-MENUPGM)                                \n              CONTINUE                                                          \n           ELSE                                                                 \n              EVALUATE TRUE                                                     \n                  WHEN FLG-ACCTFILTER-ISVALID                                   \n                  WHEN FLG-ACCTFILTER-NOT-OK                                    \n                     MOVE CC-ACCT-ID   TO ACCTSIDO OF CCRDLIAO                  \n                     MOVE DFHBMFSE     TO ACCTSIDA OF CCRDLIAI                  \n                  WHEN CDEMO-ACCT-ID = 0                                        \n                     MOVE LOW-VALUES   TO ACCTSIDO OF CCRDLIAO                  \n                  WHEN OTHER                                                    \n                    MOVE CDEMO-ACCT-ID TO ACCTSIDO OF CCRDLIAO                  \n                    MOVE DFHBMFSE      TO ACCTSIDA OF CCRDLIAI                  \n              END-EVALUATE                                                      \n\n              EVALUATE TRUE                                                     \n                  WHEN FLG-CARDFILTER-ISVALID                                   \n                  WHEN FLG-CARDFILTER-NOT-OK                                    \n                     MOVE CC-CARD-NUM  TO CARDSIDO OF CCRDLIAO                  \n                     MOVE DFHBMFSE     TO CARDSIDA OF CCRDLIAI                  \n                  WHEN CDEMO-CARD-NUM = 0                                       \n                     MOVE LOW-VALUES   TO CARDSIDO OF CCRDLIAO                  \n                  WHEN OTHER                                                    \n                    MOVE CDEMO-CARD-NUM                                         \n                                       TO CARDSIDO OF CCRDLIAO                  \n                    MOVE DFHBMFSE      TO CARDSIDA OF CCRDLIAI                  \n              END-EVALUATE                                                      \n           END-IF                                                               \n\n      *    POSITION CURSOR                                                      \n\n           IF FLG-ACCTFILTER-NOT-OK                                             \n              MOVE  DFHRED             TO ACCTSIDC OF CCRDLIAO                  \n              MOVE  -1                 TO ACCTSIDL OF CCRDLIAI                  \n           END-IF                                                               \n\n           IF FLG-CARDFILTER-NOT-OK                                             \n              MOVE  DFHRED             TO CARDSIDC OF CCRDLIAO                  \n              MOVE  -1                 TO CARDSIDL OF CCRDLIAI                  \n           END-IF                                                               \n\n      *    IF NO ERRORS POSITION CURSOR AT ACCTID                               \n\n           IF INPUT-OK                                                          \n             MOVE   -1                 TO ACCTSIDL OF CCRDLIAI                  \n           END-IF                                                               \n\n\n           .\n</code></pre>"},{"location":"COCRDLIC.html#1300-setup-screen-attrs-exit","title":"1300-SETUP-SCREEN-ATTRS-EXIT","text":"<p>This paragraph serves as an exit point for the 1300-SETUP-SCREEN-ATTRS routine. It's a simple exit paragraph that marks the end of the screen attributes setup process, allowing the program to return control to the calling routine.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#1400-setup-message","title":"1400-SETUP-MESSAGE","text":"<p>This paragraph handles the setup and display of appropriate messages to the user based on various navigation and filtering conditions in the card listing screen. It evaluates multiple scenarios to determine what message should be displayed:</p> <ol> <li>When filter validation has failed (account or card number), it continues without changing the existing error message</li> <li>When the user presses PF7 (backward) but is already on the first page, it displays \"NO PREVIOUS PAGES TO DISPLAY\"</li> <li>When the user presses PF8 (forward) but there are no more pages and the last page is already shown, it displays \"NO MORE PAGES TO DISPLAY\"</li> <li>When the user presses PF8 and there are no more pages but the last page flag isn't set, it sets the last page indicator and displays record action information</li> <li>When there are more pages available, it displays information about record actions</li> </ol> <p>The paragraph then moves the appropriate message to the screen fields, handling both error messages and informational messages with proper formatting. This logic ensures users receive clear feedback about pagination limits and available actions while browsing card records.</p> Code <pre><code>*    SETUP MESSAGE                                                        \n           EVALUATE TRUE                                                        \n                WHEN FLG-ACCTFILTER-NOT-OK                                      \n                WHEN FLG-CARDFILTER-NOT-OK                                      \n                  CONTINUE                                                      \n                WHEN CCARD-AID-PFK07                                            \n                    AND CA-FIRST-PAGE                                           \n                  MOVE 'NO PREVIOUS PAGES TO DISPLAY'                           \n                  TO WS-ERROR-MSG                                               \n                WHEN CCARD-AID-PFK08                                            \n                 AND CA-NEXT-PAGE-NOT-EXISTS                                    \n                 AND CA-LAST-PAGE-SHOWN                                         \n                  MOVE 'NO MORE PAGES TO DISPLAY'                               \n                  TO WS-ERROR-MSG                                               \n                WHEN CCARD-AID-PFK08                                            \n                 AND CA-NEXT-PAGE-NOT-EXISTS                                    \n                  SET WS-INFORM-REC-ACTIONS TO TRUE                             \n                  IF  CA-LAST-PAGE-NOT-SHOWN                                    \n                  AND CA-NEXT-PAGE-NOT-EXISTS                                   \n                      SET CA-LAST-PAGE-SHOWN TO TRUE                            \n                  END-IF                                                        \n                WHEN WS-NO-INFO-MESSAGE                                         \n                WHEN CA-NEXT-PAGE-EXISTS                                        \n                  SET WS-INFORM-REC-ACTIONS TO TRUE                             \n                WHEN OTHER                                                      \n                   SET WS-NO-INFO-MESSAGE TO TRUE                               \n           END-EVALUATE                                                         \n\n           MOVE WS-ERROR-MSG          TO ERRMSGO OF CCRDLIAO                    \n\n           IF  NOT WS-NO-INFO-MESSAGE                                           \n           AND NOT WS-NO-RECORDS-FOUND                                          \n              MOVE WS-INFO-MSG        TO INFOMSGO OF CCRDLIAO                   \n              MOVE DFHNEUTR           TO INFOMSGC OF CCRDLIAO                   \n           END-IF                                                               \n\n           .\n</code></pre>"},{"location":"COCRDLIC.html#1400-setup-message-exit","title":"1400-SETUP-MESSAGE-EXIT","text":"<p>This paragraph serves as an exit point for the message setup routine in the COCRDLIC program. It provides a clean termination point for the message handling logic, allowing the program to return control to the calling routine after message processing has been completed.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#1500-send-screen","title":"1500-SEND-SCREEN","text":"<p>This paragraph sends the credit card listing screen to the terminal using CICS SEND MAP command. It displays the screen defined by LIT-THISMAP within the LIT-THISMAPSET mapset, populating it with data from the CCRDLIAO structure. The CURSOR parameter positions the cursor at a predefined location, while ERASE clears the screen before displaying the new content. The FREEKB option unlocks the keyboard for user input, and the operation's response code is captured in WS-RESP-CD for error handling.</p> Code <pre><code>EXEC CICS SEND MAP(LIT-THISMAP)                                      \n                          MAPSET(LIT-THISMAPSET)                                \n                          FROM(CCRDLIAO)                                        \n                          CURSOR                                                \n                          ERASE                                                 \n                          RESP(WS-RESP-CD)                                      \n                          FREEKB                                                \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COCRDLIC.html#1500-send-screen-exit","title":"1500-SEND-SCREEN-EXIT","text":"<p>This paragraph serves as an exit point for the 1500-SEND-SCREEN routine in the COCRDLIC program. It provides a clean termination point for the screen sending process, allowing control to return to the calling routine after the card listing screen has been prepared and sent to the user interface.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#2000-receive-map","title":"2000-RECEIVE-MAP","text":"<p>This paragraph handles the initial processing of user input from the screen. It first calls the 2100-RECEIVE-SCREEN paragraph to capture the data entered by the user, then passes that data to the 2200-EDIT-INPUTS paragraph which validates the input values. This two-step process separates the concerns of data collection and data validation, ensuring all user inputs are properly received and checked before further processing occurs.</p> Code <pre><code>PERFORM 2100-RECEIVE-SCREEN                                          \n              THRU 2100-RECEIVE-SCREEN-EXIT                                     \n\n           PERFORM 2200-EDIT-INPUTS                                             \n            THRU   2200-EDIT-INPUTS-EXIT                                        \n           .\n</code></pre>"},{"location":"COCRDLIC.html#2000-receive-map-exit","title":"2000-RECEIVE-MAP-EXIT","text":"<p>This paragraph serves as an exit point for the 2000-RECEIVE-MAP section of the COCRDLIC program. It provides a clean termination point for the section that handles receiving user input from the screen map, allowing control to return to the calling routine after map processing is complete.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#2100-receive-screen","title":"2100-RECEIVE-SCREEN","text":"<p>This paragraph receives user input from the screen using CICS RECEIVE MAP command and processes the data entered by the user. It captures the account ID and card number filters entered by the user and stores them in the CC-ACCT-ID and CC-CARD-NUM fields respectively. Additionally, it retrieves the selection indicators (likely checkboxes or action codes) for up to 7 card records displayed on the screen, storing them in the WS-EDIT-SELECT array for subsequent processing. This paragraph is a key part of the program's user interaction handling, collecting the input that will determine which filtering or selection actions to perform.</p> Code <pre><code>EXEC CICS RECEIVE MAP(LIT-THISMAP)                                   \n                          MAPSET(LIT-THISMAPSET)                                \n                          INTO(CCRDLIAI)                                        \n                          RESP(WS-RESP-CD)                                      \n           END-EXEC                                                             \n\n           MOVE ACCTSIDI OF CCRDLIAI  TO CC-ACCT-ID                             \n           MOVE CARDSIDI OF CCRDLIAI  TO CC-CARD-NUM                            \n\n           MOVE CRDSEL1I OF CCRDLIAI  TO WS-EDIT-SELECT(1)                      \n           MOVE CRDSEL2I OF CCRDLIAI  TO WS-EDIT-SELECT(2)                      \n           MOVE CRDSEL3I OF CCRDLIAI  TO WS-EDIT-SELECT(3)                      \n           MOVE CRDSEL4I OF CCRDLIAI  TO WS-EDIT-SELECT(4)                      \n           MOVE CRDSEL5I OF CCRDLIAI  TO WS-EDIT-SELECT(5)                      \n           MOVE CRDSEL6I OF CCRDLIAI  TO WS-EDIT-SELECT(6)                      \n           MOVE CRDSEL7I OF CCRDLIAI  TO WS-EDIT-SELECT(7)                      \n           .\n</code></pre>"},{"location":"COCRDLIC.html#2100-receive-screen-exit","title":"2100-RECEIVE-SCREEN-EXIT","text":"<p>This paragraph serves as an exit point for the 2100-RECEIVE-SCREEN routine in the COCRDLIC program. It provides a clean termination point for the screen receiving process, allowing control to return to the calling routine after the screen input has been processed.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#2200-edit-inputs","title":"2200-EDIT-INPUTS","text":"<p>This paragraph validates user inputs for the card listing screen. It first sets the input status to valid and allows row selection. Then it performs three validation routines in sequence: account number validation (2210), card number validation (2220), and validation of the array of selectable card records (2250). This ensures all user inputs are properly validated before processing continues, maintaining data integrity and preventing invalid operations.</p> Code <pre><code>SET INPUT-OK                   TO TRUE                               \n           SET FLG-PROTECT-SELECT-ROWS-NO TO TRUE                               \n\n           PERFORM 2210-EDIT-ACCOUNT                                            \n              THRU 2210-EDIT-ACCOUNT-EXIT                                       \n\n           PERFORM 2220-EDIT-CARD                                               \n              THRU 2220-EDIT-CARD-EXIT                                          \n\n           PERFORM 2250-EDIT-ARRAY                                              \n              THRU 2250-EDIT-ARRAY-EXIT                                         \n           .\n</code></pre>"},{"location":"COCRDLIC.html#2200-edit-inputs-exit","title":"2200-EDIT-INPUTS-EXIT","text":"<p>This paragraph serves as an exit point for the input validation routine in the COCRDLIC program. It marks the end of the 2200-EDIT-INPUTS section, which validates user inputs for account ID and card number filters before processing card listing requests.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#2210-edit-account","title":"2210-EDIT-ACCOUNT","text":"<p>This paragraph validates the account ID filter input for the card listing screen. It first checks if the account ID is blank or empty, setting a flag to indicate no account filter is being applied. If an account ID is provided, it validates that the input is numeric and properly formatted (must be an 11-digit number). When validation fails, it sets error flags, displays an appropriate error message, and clears the account ID field. For valid account IDs, it moves the value to the CDEMO-ACCT-ID field and sets a flag indicating a valid account filter is in place. This validation ensures proper filtering of card records by account ID and prevents processing with invalid filter criteria.</p> Code <pre><code>SET FLG-ACCTFILTER-BLANK TO TRUE                                     \n\n      *    Not supplied                                                         \n           IF CC-ACCT-ID   EQUAL LOW-VALUES                                     \n           OR CC-ACCT-ID   EQUAL SPACES                                         \n           OR CC-ACCT-ID-N EQUAL ZEROS                                          \n              SET FLG-ACCTFILTER-BLANK  TO TRUE                                 \n              MOVE ZEROES       TO CDEMO-ACCT-ID                                \n              GO TO  2210-EDIT-ACCOUNT-EXIT                                     \n           END-IF                                                               \n      *                                                                         \n      *    Not numeric                                                          \n      *    Not 11 characters                                                    \n           IF CC-ACCT-ID  IS NOT NUMERIC                                        \n              SET INPUT-ERROR TO TRUE                                           \n              SET FLG-ACCTFILTER-NOT-OK TO TRUE                                 \n              SET FLG-PROTECT-SELECT-ROWS-YES TO TRUE                           \n              MOVE                                                              \n              'ACCOUNT FILTER,IF SUPPLIED MUST BE A 11 DIGIT NUMBER'            \n                              TO WS-ERROR-MSG                                   \n              MOVE ZERO       TO CDEMO-ACCT-ID                                  \n              GO TO 2210-EDIT-ACCOUNT-EXIT                                      \n           ELSE                                                                 \n              MOVE CC-ACCT-ID TO CDEMO-ACCT-ID                                  \n              SET FLG-ACCTFILTER-ISVALID TO TRUE                                \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDLIC.html#2210-edit-account-exit","title":"2210-EDIT-ACCOUNT-EXIT","text":"<p>This paragraph serves as an exit point for the account validation routine. It marks the end of the account number editing process, allowing the program to return control to the calling paragraph after account validation is complete.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#2220-edit-card","title":"2220-EDIT-CARD","text":"<p>This paragraph validates the card number filter input provided by the user. It first checks if the card number is blank, empty, or zero, in which case it sets a flag indicating no card filter is being applied and clears the card number field. If a card number is provided, it verifies that the input is numeric and 16 digits long. When the input fails validation, it sets error flags, displays an appropriate error message to the user, clears the card number field, and prevents row selection. If the card number passes validation, it stores the numeric value in the CDEMO-CARD-NUM field and sets a flag indicating the card filter is valid. This validation ensures that only properly formatted card numbers are used for filtering the displayed records.</p> Code <pre><code>*    Not numeric                                                          \n      *    Not 16 characters                                                    \n           SET FLG-CARDFILTER-BLANK TO TRUE                                     \n\n      *    Not supplied                                                         \n           IF CC-CARD-NUM   EQUAL LOW-VALUES                                    \n           OR CC-CARD-NUM   EQUAL SPACES                                        \n           OR CC-CARD-NUM-N EQUAL ZEROS                                         \n              SET FLG-CARDFILTER-BLANK  TO TRUE                                 \n              MOVE ZEROES       TO CDEMO-CARD-NUM                               \n              GO TO  2220-EDIT-CARD-EXIT                                        \n           END-IF                                                               \n      *                                                                         \n      *    Not numeric                                                          \n      *    Not 16 characters                                                    \n           IF CC-CARD-NUM  IS NOT NUMERIC                                       \n              SET INPUT-ERROR TO TRUE                                           \n              SET FLG-CARDFILTER-NOT-OK TO TRUE                                 \n              SET FLG-PROTECT-SELECT-ROWS-YES TO TRUE                           \n              IF WS-ERROR-MSG-OFF                                               \n                 MOVE                                                           \n              'CARD ID FILTER,IF SUPPLIED MUST BE A 16 DIGIT NUMBER'            \n                              TO WS-ERROR-MSG                                   \n              END-IF                                                            \n              MOVE ZERO       TO CDEMO-CARD-NUM                                 \n              GO TO 2220-EDIT-CARD-EXIT                                         \n           ELSE                                                                 \n              MOVE CC-CARD-NUM-N TO CDEMO-CARD-NUM                              \n              SET FLG-CARDFILTER-ISVALID TO TRUE                                \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDLIC.html#2220-edit-card-exit","title":"2220-EDIT-CARD-EXIT","text":"<p>This paragraph serves as an exit point for the EDIT-CARD routine in the COCRDLIC program. It provides a clean termination point for the card editing process, allowing the program flow to return to the calling routine after card validation and processing has been completed.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#2250-edit-array","title":"2250-EDIT-ARRAY","text":"<p>This paragraph validates user selections in the card listing screen. It first checks if there are any existing input errors before proceeding. It then counts how many cards have been selected with either 'S' (select) or 'U' (update) actions. If more than one card is selected, it flags this as an error and marks the selected rows in an error tracking array. The code then processes each of the 7 possible card rows on the screen, validating that any selection codes are valid ('S' or 'U' or blank) and tracking which row was selected. For any invalid selection codes, it sets appropriate error flags and error messages. This ensures users can only select one card at a time for further processing and that they use valid selection codes.</p> Code <pre><code>IF INPUT-ERROR                                                       \n              GO TO 2250-EDIT-ARRAY-EXIT                                        \n           END-IF                                                               \n\n           INSPECT  WS-EDIT-SELECT-FLAGS                                        \n           TALLYING I                                                           \n           FOR ALL 'S'                                                          \n               ALL 'U'                                                          \n\n           IF I &gt; +1                                                            \n               SET INPUT-ERROR      TO TRUE                                     \n               SET WS-MORE-THAN-1-ACTION TO TRUE                                \n\n               MOVE WS-EDIT-SELECT-FLAGS                                        \n                                   TO WS-EDIT-SELECT-ERROR-FLAGS                \n               INSPECT WS-EDIT-SELECT-ERROR-FLAGS                               \n                 REPLACING ALL 'S' BY '1'                                       \n                           ALL 'U' BY '1'                                       \n                 CHARACTERS        BY '0'                                       \n\n           END-IF                                                               \n\n           MOVE ZERO TO I-SELECTED                                              \n\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I &gt; 7                            \n               EVALUATE TRUE                                                    \n                 WHEN SELECT-OK(I)                                              \n                   MOVE I TO I-SELECTED                                         \n                   IF WS-MORE-THAN-1-ACTION                                     \n                      MOVE '1' TO WS-ROW-CRDSELECT-ERROR(I)                     \n                   END-IF                                                       \n                 WHEN SELECT-BLANK(I)                                           \n                   CONTINUE                                                     \n                 WHEN OTHER                                                     \n                   SET INPUT-ERROR TO TRUE                                      \n                   MOVE '1' TO WS-ROW-CRDSELECT-ERROR(I)                        \n                   IF WS-ERROR-MSG-OFF                                          \n                      SET WS-INVALID-ACTION-CODE TO TRUE                        \n                   END-IF                                                       \n              END-EVALUATE                                                      \n           END-PERFORM                                                          \n\n           .\n</code></pre>"},{"location":"COCRDLIC.html#2250-edit-array-exit","title":"2250-EDIT-ARRAY-EXIT","text":"<p>This paragraph serves as an exit point for the EDIT-ARRAY routine in the COCRDLIC program. It marks the end of the array editing logic that likely handles the filtering and preparation of credit card records for display. The paragraph contains only the EXIT statement, which returns control to the calling routine after the array processing is complete.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#9000-read-forward","title":"9000-READ-FORWARD","text":"<p>This paragraph implements forward pagination through credit card records in the CardDemo application. It starts a browse operation on the card file using the current card number as a key, then reads records sequentially forward, populating a screen buffer with up to 7 card records (the maximum screen lines). </p> <p>The routine filters records based on criteria defined elsewhere in the program, tracking the first and last card displayed on the current page. It also performs a look-ahead read after filling the screen to determine if more pages exist, setting appropriate flags for navigation controls.</p> <p>The paragraph handles various response conditions including normal processing, end-of-file conditions, and error scenarios. When the end of file is reached, it sets appropriate status flags and displays a \"NO MORE RECORDS TO SHOW\" message. For empty result sets, it sets a special flag indicating no records were found. Any unexpected errors during file operations are captured with detailed information for error reporting.</p> Code <pre><code>MOVE LOW-VALUES           TO WS-ALL-ROWS                             \n\n      *****************************************************************         \n      *    Start Browse                                                         \n      *****************************************************************         \n           EXEC CICS STARTBR                                                    \n                DATASET(LIT-CARD-FILE)                                          \n                RIDFLD(WS-CARD-RID-CARDNUM)                                     \n                KEYLENGTH(LENGTH OF WS-CARD-RID-CARDNUM)                        \n                GTEQ                                                            \n                RESP(WS-RESP-CD)                                                \n                RESP2(WS-REAS-CD)                                               \n           END-EXEC                                                             \n      *****************************************************************         \n      *    Loop through records and fetch max screen records                    \n      *****************************************************************         \n           MOVE ZEROES TO WS-SCRN-COUNTER                                       \n           SET CA-NEXT-PAGE-EXISTS    TO TRUE                                   \n           SET MORE-RECORDS-TO-READ   TO TRUE                                   \n\n           PERFORM UNTIL READ-LOOP-EXIT                                         \n\n           EXEC CICS READNEXT                                                   \n                DATASET(LIT-CARD-FILE)                                          \n                INTO (CARD-RECORD)                                              \n                LENGTH(LENGTH OF CARD-RECORD)                                   \n                RIDFLD(WS-CARD-RID-CARDNUM)                                     \n                KEYLENGTH(LENGTH OF WS-CARD-RID-CARDNUM)                        \n                RESP(WS-RESP-CD)                                                \n                RESP2(WS-REAS-CD)                                               \n           END-EXEC                                                             \n\n           EVALUATE WS-RESP-CD                                                  \n               WHEN DFHRESP(NORMAL)                                             \n               WHEN DFHRESP(DUPREC)                                             \n                   PERFORM 9500-FILTER-RECORDS                                  \n                      THRU 9500-FILTER-RECORDS-EXIT                             \n\n                   IF WS-DONOT-EXCLUDE-THIS-RECORD                              \n                      ADD 1             TO WS-SCRN-COUNTER                      \n\n                      MOVE CARD-NUM     TO WS-ROW-CARD-NUM(                     \n                      WS-SCRN-COUNTER)                                          \n                      MOVE CARD-ACCT-ID TO                                      \n                      WS-ROW-ACCTNO(WS-SCRN-COUNTER)                            \n                      MOVE CARD-ACTIVE-STATUS                                   \n                                        TO WS-ROW-CARD-STATUS(                  \n                                        WS-SCRN-COUNTER)                        \n\n                      IF WS-SCRN-COUNTER = 1                                    \n                         MOVE CARD-ACCT-ID                                      \n                                        TO WS-CA-FIRST-CARD-ACCT-ID             \n                         MOVE CARD-NUM  TO WS-CA-FIRST-CARD-NUM                 \n                         IF   WS-CA-SCREEN-NUM = 0                              \n                           ADD   +1     TO WS-CA-SCREEN-NUM                     \n                         ELSE                                                   \n                           CONTINUE                                             \n                         END-IF                                                 \n                      ELSE                                                      \n                         CONTINUE                                               \n                      END-IF                                                    \n                   ELSE                                                         \n                       CONTINUE                                                 \n                   END-IF                                                       \n      ******************************************************************        \n      *            Max Screen size                                              \n      ******************************************************************        \n                   IF WS-SCRN-COUNTER = WS-MAX-SCREEN-LINES                     \n                      SET READ-LOOP-EXIT  TO TRUE                               \n\n                      MOVE CARD-ACCT-ID     TO WS-CA-LAST-CARD-ACCT-ID          \n                      MOVE CARD-NUM         TO WS-CA-LAST-CARD-NUM              \n\n                      EXEC CICS READNEXT                                        \n                        DATASET(LIT-CARD-FILE)                                  \n                        INTO (CARD-RECORD)                                      \n                        LENGTH(LENGTH OF CARD-RECORD)                           \n                        RIDFLD(WS-CARD-RID-CARDNUM)                             \n                        KEYLENGTH(LENGTH OF WS-CARD-RID-CARDNUM)                \n                        RESP(WS-RESP-CD)                                        \n                        RESP2(WS-REAS-CD)                                       \n                      END-EXEC                                                  \n\n                      EVALUATE WS-RESP-CD                                       \n                         WHEN DFHRESP(NORMAL)                                   \n                         WHEN DFHRESP(DUPREC)                                   \n                              SET CA-NEXT-PAGE-EXISTS                           \n                                                TO TRUE                         \n                              MOVE CARD-ACCT-ID TO                              \n                                   WS-CA-LAST-CARD-ACCT-ID                      \n                              MOVE CARD-NUM     TO WS-CA-LAST-CARD-NUM          \n                        WHEN DFHRESP(ENDFILE)                                   \n                            SET CA-NEXT-PAGE-NOT-EXISTS     TO TRUE             \n\n                            IF WS-ERROR-MSG-OFF                                 \n                                MOVE 'NO MORE RECORDS TO SHOW'                  \n                                                TO WS-ERROR-MSG                 \n                            END-IF                                              \n                            WHEN OTHER                                          \n      *                     This is some kind of error. Change to END BR        \n      *                     And exit                                            \n                            SET READ-LOOP-EXIT      TO TRUE                     \n                            MOVE 'READ'              TO ERROR-OPNAME            \n                            MOVE LIT-CARD-FILE       TO ERROR-FILE              \n                            MOVE WS-RESP-CD          TO ERROR-RESP              \n                            MOVE WS-REAS-CD          TO ERROR-RESP2             \n                          MOVE WS-FILE-ERROR-MESSAGE TO WS-ERROR-MSG            \n                      END-EVALUATE                                              \n                  END-IF                                                        \n               WHEN DFHRESP(ENDFILE)                                            \n                  SET READ-LOOP-EXIT              TO TRUE                       \n                  SET CA-NEXT-PAGE-NOT-EXISTS     TO TRUE                       \n                  MOVE CARD-ACCT-ID     TO WS-CA-LAST-CARD-ACCT-ID              \n                  MOVE CARD-NUM         TO WS-CA-LAST-CARD-NUM                  \n                  IF WS-ERROR-MSG-OFF                                           \n                     MOVE 'NO MORE RECORDS TO SHOW'  TO WS-ERROR-MSG            \n                  END-IF                                                        \n                  IF WS-CA-SCREEN-NUM = 1                                       \n                  AND WS-SCRN-COUNTER = 0                                       \n      *               MOVE 'NO RECORDS TO SHOW'  TO WS-ERROR-MSG                \n                      SET WS-NO-RECORDS-FOUND    TO TRUE                        \n                  END-IF                                                        \n               WHEN OTHER                                                       \n      *           This is some kind of error. Change to END BR                  \n      *           And exit                                                      \n                  SET READ-LOOP-EXIT             TO TRUE                        \n                  MOVE 'READ'                     TO ERROR-OPNAME               \n                  MOVE LIT-CARD-FILE              TO ERROR-FILE                 \n                  MOVE WS-RESP-CD                 TO ERROR-RESP                 \n                  MOVE WS-REAS-CD                 TO ERROR-RESP2                \n                  MOVE WS-FILE-ERROR-MESSAGE      TO WS-ERROR-MSG               \n           END-EVALUATE                                                         \n           END-PERFORM                                                          \n\n           EXEC CICS ENDBR FILE(LIT-CARD-FILE)                                  \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COCRDLIC.html#9000-read-forward-exit","title":"9000-READ-FORWARD-EXIT","text":"<p>This paragraph serves as an exit point for the forward reading process in the card listing functionality. It's a simple exit paragraph that marks the end of the forward reading logic, allowing the program to return control to the calling section after completing the forward navigation through card records.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#9100-read-backwards","title":"9100-READ-BACKWARDS","text":"<p>This paragraph implements backward pagination functionality for the card listing screen. It reads records in reverse order from the CARDDAT file to populate the previous page of card records. The process starts by initializing variables and beginning a browse operation at the current first record position. It then reads records in reverse sequence (using READPREV) to fill the screen from bottom to top, applying any active filters to determine which records to display. The paragraph maintains tracking of the first record on the new page for future navigation purposes. Error handling is implemented throughout the process to catch and report any file access issues. The maximum number of records displayed is controlled by WS-MAX-SCREEN-LINES, and the routine stops reading when this limit is reached or when no more records are available.</p> Code <pre><code>MOVE LOW-VALUES           TO WS-ALL-ROWS                             \n\n           MOVE WS-CA-FIRST-CARDKEY  TO WS-CA-LAST-CARDKEY                      \n\n      *****************************************************************         \n      *    Start Browse                                                         \n      *****************************************************************         \n           EXEC CICS STARTBR                                                    \n                DATASET(LIT-CARD-FILE)                                          \n                RIDFLD(WS-CARD-RID-CARDNUM)                                     \n                KEYLENGTH(LENGTH OF WS-CARD-RID-CARDNUM)                        \n                GTEQ                                                            \n                RESP(WS-RESP-CD)                                                \n                RESP2(WS-REAS-CD)                                               \n           END-EXEC                                                             \n      *****************************************************************         \n      *    Loop through records and fetch max screen records                    \n      *****************************************************************         \n           COMPUTE WS-SCRN-COUNTER =                                            \n                                   WS-MAX-SCREEN-LINES + 1                      \n           END-COMPUTE                                                          \n           SET CA-NEXT-PAGE-EXISTS    TO TRUE                                   \n           SET MORE-RECORDS-TO-READ   TO TRUE                                   \n\n      *****************************************************************         \n      *    Now we show the records from previous set.                           \n      *****************************************************************         \n\n           EXEC CICS READPREV                                                   \n                DATASET(LIT-CARD-FILE)                                          \n                INTO (CARD-RECORD)                                              \n                LENGTH(LENGTH OF CARD-RECORD)                                   \n                RIDFLD(WS-CARD-RID-CARDNUM)                                     \n                KEYLENGTH(LENGTH OF WS-CARD-RID-CARDNUM)                        \n                RESP(WS-RESP-CD)                                                \n                RESP2(WS-REAS-CD)                                               \n           END-EXEC                                                             \n\n           EVALUATE WS-RESP-CD                                                  \n               WHEN DFHRESP(NORMAL)                                             \n               WHEN DFHRESP(DUPREC)                                             \n                   SUBTRACT 1          FROM WS-SCRN-COUNTER                     \n               WHEN OTHER                                                       \n      *           This is some kind of error. Change to END BR                  \n      *           And exit                                                      \n                  SET READ-LOOP-EXIT             TO TRUE                        \n                  MOVE 'READ'                     TO ERROR-OPNAME               \n                  MOVE LIT-CARD-FILE              TO ERROR-FILE                 \n                  MOVE WS-RESP-CD                 TO ERROR-RESP                 \n                  MOVE WS-REAS-CD                 TO ERROR-RESP2                \n                  MOVE WS-FILE-ERROR-MESSAGE      TO WS-ERROR-MSG               \n                  GO TO 9100-READ-BACKWARDS-EXIT                                \n           END-EVALUATE                                                         \n\n           PERFORM UNTIL READ-LOOP-EXIT                                         \n\n           EXEC CICS READPREV                                                   \n                DATASET(LIT-CARD-FILE)                                          \n                INTO (CARD-RECORD)                                              \n                LENGTH(LENGTH OF CARD-RECORD)                                   \n                RIDFLD(WS-CARD-RID-CARDNUM)                                     \n                KEYLENGTH(LENGTH OF WS-CARD-RID-CARDNUM)                        \n                RESP(WS-RESP-CD)                                                \n                RESP2(WS-REAS-CD)                                               \n           END-EXEC                                                             \n\n           EVALUATE WS-RESP-CD                                                  \n               WHEN DFHRESP(NORMAL)                                             \n               WHEN DFHRESP(DUPREC)                                             \n                   PERFORM 9500-FILTER-RECORDS                                  \n                      THRU 9500-FILTER-RECORDS-EXIT                             \n                   IF WS-DONOT-EXCLUDE-THIS-RECORD                              \n                      MOVE CARD-NUM                                             \n                                  TO WS-ROW-CARD-NUM(WS-SCRN-COUNTER)           \n                      MOVE CARD-ACCT-ID                                         \n                                  TO WS-ROW-ACCTNO(WS-SCRN-COUNTER)             \n                      MOVE CARD-ACTIVE-STATUS                                   \n                                  TO                                            \n                                  WS-ROW-CARD-STATUS(WS-SCRN-COUNTER)           \n\n                      SUBTRACT 1  FROM WS-SCRN-COUNTER                          \n                      IF WS-SCRN-COUNTER = 0                                    \n                         SET READ-LOOP-EXIT  TO TRUE                            \n\n                         MOVE CARD-ACCT-ID                                      \n                                  TO WS-CA-FIRST-CARD-ACCT-ID                   \n                         MOVE CARD-NUM                                          \n                                  TO WS-CA-FIRST-CARD-NUM                       \n                      ELSE                                                      \n                         CONTINUE                                               \n                      END-IF                                                    \n                   ELSE                                                         \n                       CONTINUE                                                 \n                   END-IF                                                       \n\n               WHEN OTHER                                                       \n      *           This is some kind of error. Change to END BR                  \n      *           And exit                                                      \n                  SET READ-LOOP-EXIT             TO TRUE                        \n                  MOVE 'READ'                     TO ERROR-OPNAME               \n                  MOVE LIT-CARD-FILE              TO ERROR-FILE                 \n                  MOVE WS-RESP-CD                 TO ERROR-RESP                 \n                  MOVE WS-REAS-CD                 TO ERROR-RESP2                \n                  MOVE WS-FILE-ERROR-MESSAGE      TO WS-ERROR-MSG               \n           END-EVALUATE                                                         \n           END-PERFORM                                                          \n           .\n</code></pre>"},{"location":"COCRDLIC.html#9100-read-backwards-exit","title":"9100-READ-BACKWARDS-EXIT","text":"<p>This paragraph terminates a backward browsing operation on the card file. It issues an ENDBR (End Browse) CICS command to release resources associated with the browse operation on the LIT-CARD-FILE, then exits the paragraph. This is typically called after completing a backward navigation through card records to ensure proper cleanup of CICS resources.</p> Code <pre><code>EXEC CICS                                                            \n                ENDBR FILE(LIT-CARD-FILE)                                       \n           END-EXEC                                                             \n\n           EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDLIC.html#9500-filter-records","title":"9500-FILTER-RECORDS","text":"<p>This paragraph filters credit card records based on user-specified criteria. It first sets a flag indicating the record should be included by default. Then it performs two separate filter checks: first by account ID (if an account filter is active) and then by card number (if a card number filter is active). If either filter is active and the current record doesn't match the filter criteria, the record is marked for exclusion and processing exits the paragraph. If no filters are active or if the record matches all active filter criteria, the record remains included for display in the card listing.</p> Code <pre><code>SET WS-DONOT-EXCLUDE-THIS-RECORD TO TRUE                             \n\n           IF FLG-ACCTFILTER-ISVALID                                            \n              IF  CARD-ACCT-ID = CC-ACCT-ID                                     \n                  CONTINUE                                                      \n              ELSE                                                              \n                  SET WS-EXCLUDE-THIS-RECORD  TO TRUE                           \n                  GO TO 9500-FILTER-RECORDS-EXIT                                \n              END-IF                                                            \n           ELSE                                                                 \n             CONTINUE                                                           \n           END-IF                                                               \n\n           IF FLG-CARDFILTER-ISVALID                                            \n              IF  CARD-NUM = CC-CARD-NUM-N                                      \n                  CONTINUE                                                      \n              ELSE                                                              \n                  SET WS-EXCLUDE-THIS-RECORD TO TRUE                            \n                  GO TO 9500-FILTER-RECORDS-EXIT                                \n              END-IF                                                            \n           ELSE                                                                 \n             CONTINUE                                                           \n           END-IF                                                               \n\n           .\n</code></pre>"},{"location":"COCRDLIC.html#9500-filter-records-exit","title":"9500-FILTER-RECORDS-EXIT","text":"<p>This paragraph serves as an exit point for the record filtering process in the COCRDLIC program. It includes a copybook 'CSSTRPFY' which contains common code for storing PF key information when the user exits this section of the program. The comment at the end warns that this is a plain text exit that should not be used in production environments, suggesting it may lack proper security measures or error handling needed for production code.</p> Code <pre><code>EXIT                                                                 \n           .                                                                    \n\n      *****************************************************************\n      *Common code to store PFKey                                      \n      *****************************************************************\n       COPY 'CSSTRPFY'\n           .\n\n      *****************************************************************         \n      * Plain text exit - Dont use in production                      *         \n      *****************************************************************\n</code></pre>"},{"location":"COCRDLIC.html#send-plain-text","title":"SEND-PLAIN-TEXT","text":"<p>This paragraph sends an error message to the user's terminal screen using CICS commands. It displays the contents of WS-ERROR-MSG field, erases the current screen content, frees the keyboard for user input, and then returns control to CICS. This is a standard error handling routine used to communicate issues to the user before terminating the current transaction.</p> Code <pre><code>EXEC CICS SEND TEXT                                                  \n                     FROM(WS-ERROR-MSG)                                         \n                     LENGTH(LENGTH OF WS-ERROR-MSG)                             \n                     ERASE                                                      \n                     FREEKB                                                     \n           END-EXEC                                                             \n\n           EXEC CICS RETURN                                                     \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COCRDLIC.html#send-plain-text-exit","title":"SEND-PLAIN-TEXT-EXIT","text":"<p>This paragraph serves as an exit point for displaying long text messages, primarily intended for debugging purposes. It is not meant to be used during normal program operation but rather as a diagnostic tool for developers. The comment block clearly indicates this is a specialized function that should be avoided in regular program execution.</p> Code <pre><code>EXIT                                                                 \n           .                                                                    \n      *****************************************************************         \n      * Display Long text and exit                                    *         \n      * This is primarily for debugging and should not be used in     *         \n      * regular course                                                *         \n      *****************************************************************\n</code></pre>"},{"location":"COCRDLIC.html#send-long-text","title":"SEND-LONG-TEXT","text":"<p>This paragraph sends an error or information message to the user interface and terminates the transaction. It uses the CICS SEND TEXT command to display the contents of the WS-LONG-MSG field, clearing the screen (ERASE) and unlocking the keyboard (FREEKB). After displaying the message, it immediately returns control to CICS, effectively ending the current transaction. This is typically used for displaying error messages or important notifications that require the user to acknowledge before continuing with another operation.</p> Code <pre><code>EXEC CICS SEND TEXT                                                  \n                     FROM(WS-LONG-MSG)                                          \n                     LENGTH(LENGTH OF WS-LONG-MSG)                              \n                     ERASE                                                      \n                     FREEKB                                                     \n           END-EXEC                                                             \n\n           EXEC CICS RETURN                                                     \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COCRDLIC.html#send-long-text-exit","title":"SEND-LONG-TEXT-EXIT","text":"<p>This paragraph serves as an exit point for the SEND-LONG-TEXT routine in the COCRDLIC program. It provides a clean termination point for the routine that handles displaying extended text information in the credit card listing interface. The paragraph includes version control information showing this code is part of CardDemo version 1.0-15-g27d6c6f-68, dated July 19, 2022.</p> Code <pre><code>EXIT                                                                 \n           .                                                                    \n\n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:33 CDT\n      *\n</code></pre>"},{"location":"COCRDSLC.html","title":"COCRDSLC","text":""},{"location":"COCRDSLC.html#overview","title":"Overview","text":"<p>This program, COCRDSLC, is a CICS-based business logic component of the CardDemo application that handles credit card detail requests. It allows users to view detailed information about a specific credit card by accepting account and card number inputs. The program retrieves card information from a card data file using the provided identifiers and displays details such as the embossed name, expiration date, and card status.</p> <p>The program supports navigation from other screens in the application, particularly from the credit card list screen (COCRDLIC), and provides appropriate validation of input parameters. It performs field-level validations to ensure account numbers are 11-digit numeric values and card numbers are 16-digit numeric values. The program handles various error conditions, including invalid inputs and record not found scenarios, displaying appropriate error messages to guide the user.</p> <p>The application follows a structured approach with clear separation between screen handling, input processing, data retrieval, and error management functions. It integrates with the broader CardDemo application through a common communication area structure and supports standard PF key navigation, including PF3 for returning to the previous screen or main menu.</p>"},{"location":"COCRDSLC.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COCRDSLC</code></p>"},{"location":"COCRDSLC.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant Main as 0000-MAIN\n    participant SendMap as 1000-SEND-MAP\n    participant ProcessInputs as 2000-PROCESS-INPUTS\n    participant ReadData as 9000-READ-DATA\n    participant CardFile as Card File\n\n    User-&gt;&gt;Main: Start transaction\n\n    Main-&gt;&gt;Main: Initialize work areas\n    Main-&gt;&gt;Main: Store context\n    Main-&gt;&gt;Main: Process communication area\n\n    alt PF3 pressed\n        Main-&gt;&gt;User: Return to previous screen\n    else Coming from credit card list screen\n        Main-&gt;&gt;ReadData: Read card details\n        ReadData-&gt;&gt;CardFile: READ using card number\n        CardFile--&gt;&gt;ReadData: Card record\n        ReadData--&gt;&gt;Main: Card details\n        Main-&gt;&gt;SendMap: Display card details\n        SendMap--&gt;&gt;User: Show card details screen\n    else Initial entry\n        Main-&gt;&gt;SendMap: Display input screen\n        SendMap--&gt;&gt;User: Show input screen\n    else Re-entry after input\n        Main-&gt;&gt;ProcessInputs: Process user inputs\n        ProcessInputs-&gt;&gt;ProcessInputs: Receive map data\n        ProcessInputs-&gt;&gt;ProcessInputs: Validate account ID\n        ProcessInputs-&gt;&gt;ProcessInputs: Validate card number\n\n        alt Input valid\n            ProcessInputs--&gt;&gt;Main: Valid input\n            Main-&gt;&gt;ReadData: Read card details\n            ReadData-&gt;&gt;CardFile: READ using card number\n\n            alt Record found\n                CardFile--&gt;&gt;ReadData: Card record\n                ReadData--&gt;&gt;Main: Card details\n                Main-&gt;&gt;SendMap: Display card details\n                SendMap--&gt;&gt;User: Show card details screen\n            else Record not found\n                CardFile--&gt;&gt;ReadData: NOTFND response\n                ReadData--&gt;&gt;Main: Error - record not found\n                Main-&gt;&gt;SendMap: Display error message\n                SendMap--&gt;&gt;User: Show error message\n            end\n        else Input invalid\n            ProcessInputs--&gt;&gt;Main: Invalid input\n            Main-&gt;&gt;SendMap: Display error message\n            SendMap--&gt;&gt;User: Show error message\n        end\n    end\n\n    Main-&gt;&gt;Main: Return to CICS</code></pre>"},{"location":"COCRDSLC.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>COCRDSL</code></li> <li><code>CVCUS01Y</code></li> <li><code>DFHAID</code></li> <li><code>CVACT01Y</code></li> <li><code>CSUSR01Y</code></li> <li><code>COCOM01Y</code></li> <li><code>CVCRD01Y</code></li> <li><code>CSSTRPFY</code></li> <li><code>DFHBMSCA</code></li> <li><code>CVACT03Y</code></li> <li><code>CVACT02Y</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG02Y</code></li> <li><code>CSMSG01Y</code></li> </ul>"},{"location":"COCRDSLC.html#environment-division","title":"Environment Division","text":""},{"location":"COCRDSLC.html#input-output-section","title":"INPUT-OUTPUT SECTION","text":"<p>This section would typically contain file-related configuration details for the COCRDSLC program, including file assignments, record descriptions, and access methods for the card data files used in the credit card detail request processing. However, the provided snippet is empty, suggesting that the program may handle all its data access through CICS commands rather than direct file access statements, or that the INPUT-OUTPUT SECTION might be defined elsewhere in the program structure.</p> Code"},{"location":"COCRDSLC.html#data-division","title":"Data Division","text":""},{"location":"COCRDSLC.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage Section defines the data structures used in the COCRDSLC program for handling credit card detail requests. It contains several key components:</p> <ol> <li>CICS processing variables for handling responses and transaction IDs</li> <li>Input validation flags for tracking the status of account and card number validations</li> <li>Output edit variables for formatting and processing card details including account ID, card number, CVV code, embossed name, status, and expiration date</li> <li>File handling structures including record identifiers and error message formatting</li> <li>Message construction fields for user feedback, including informational messages and error conditions</li> <li>Program constants and literals defining program names, transaction IDs, mapsets, and file names</li> <li>References to several copybooks that provide additional data structures:</li> <li>CVCRD01Y for card-related data</li> <li>COCOM01Y for application communication area</li> <li>Standard IBM copybooks for CICS functionality</li> <li>Screen layout definitions (COCRDSL)</li> <li>Date handling (CSDAT01Y)</li> <li>Message formatting (CSMSG01Y, CSMSG02Y)</li> <li>User data (CSUSR01Y)</li> <li>Record layouts for cards (CVACT02Y) and customers (CVCUS01Y)</li> </ol> <p>The section includes comprehensive status flags and condition names to track validation states and error conditions throughout the card detail retrieval process.</p> Code <pre><code>01  WS-MISC-STORAGE.                                                     \n      ******************************************************************        \n      * General CICS related                                                    \n      ******************************************************************        \n         05 WS-CICS-PROCESSNG-VARS.                                             \n            07 WS-RESP-CD                          PIC S9(09) COMP              \n                                                   VALUE ZEROS.                 \n            07 WS-REAS-CD                          PIC S9(09) COMP              \n                                                   VALUE ZEROS.                 \n            07 WS-TRANID                           PIC X(4)                     \n                                                   VALUE SPACES.                \n      ******************************************************************        \n      *      Input edits                                                        \n      ******************************************************************        \n\n         05  WS-INPUT-FLAG                         PIC X(1).                    \n           88  INPUT-OK                            VALUE '0'.                   \n           88  INPUT-ERROR                         VALUE '1'.                   \n           88  INPUT-PENDING                       VALUE LOW-VALUES.            \n         05  WS-EDIT-ACCT-FLAG                     PIC X(1).                    \n           88  FLG-ACCTFILTER-NOT-OK               VALUE '0'.                   \n           88  FLG-ACCTFILTER-ISVALID              VALUE '1'.                   \n           88  FLG-ACCTFILTER-BLANK                VALUE ' '.                   \n         05  WS-EDIT-CARD-FLAG                     PIC X(1).                    \n           88  FLG-CARDFILTER-NOT-OK               VALUE '0'.                   \n           88  FLG-CARDFILTER-ISVALID             VALUE '1'.                    \n           88  FLG-CARDFILTER-BLANK                VALUE ' '.                   \n         05  WS-RETURN-FLAG                        PIC X(1).                    \n           88  WS-RETURN-FLAG-OFF                  VALUE LOW-VALUES.            \n           88  WS-RETURN-FLAG-ON                   VALUE '1'.                   \n         05  WS-PFK-FLAG                           PIC X(1).                    \n           88  PFK-VALID                           VALUE '0'.                   \n           88  PFK-INVALID                         VALUE '1'.                   \n      ******************************************************************        \n      * Output edits                                                            \n      ******************************************************************        \n         05 CICS-OUTPUT-EDIT-VARS.                                              \n           10  CARD-ACCT-ID-X                      PIC X(11).                   \n           10  CARD-ACCT-ID-N REDEFINES CARD-ACCT-ID-X                          \n                                                   PIC 9(11).                   \n           10  CARD-CVV-CD-X                       PIC X(03).                   \n           10  CARD-CVV-CD-N REDEFINES  CARD-CVV-CD-X                           \n                                                   PIC 9(03).                   \n           10  CARD-CARD-NUM-X                     PIC X(16).                   \n           10  CARD-CARD-NUM-N REDEFINES  CARD-CARD-NUM-X                       \n                                                   PIC 9(16).                   \n           10  CARD-NAME-EMBOSSED-X                PIC X(50).                   \n           10  CARD-STATUS-X                       PIC X.                       \n           10  CARD-EXPIRAION-DATE-X               PIC X(10).                   \n           10  FILLER REDEFINES CARD-EXPIRAION-DATE-X.                          \n               20 CARD-EXPIRY-YEAR                 PIC X(4).                    \n               20 FILLER                           PIC X(1).                    \n               20 CARD-EXPIRY-MONTH                PIC X(2).                    \n               20 FILLER                           PIC X(1).                    \n               20 CARD-EXPIRY-DAY                  PIC X(2).                    \n           10  CARD-EXPIRAION-DATE-N REDEFINES                                  \n               CARD-EXPIRAION-DATE-X               PIC 9(10).                   \n\n      ******************************************************************        \n      *      File and data Handling                                             \n      ******************************************************************        \n         05  WS-CARD-RID.                                                       \n           10  WS-CARD-RID-CARDNUM                 PIC X(16).                   \n           10  WS-CARD-RID-ACCT-ID                 PIC 9(11).                   \n           10  WS-CARD-RID-ACCT-ID-X REDEFINES                                  \n                  WS-CARD-RID-ACCT-ID              PIC X(11).                   \n         05  WS-FILE-ERROR-MESSAGE.                                             \n           10  FILLER                              PIC X(12)                    \n                                                   VALUE 'File Error: '.        \n           10  ERROR-OPNAME                        PIC X(8)                     \n                                                   VALUE SPACES.                \n           10  FILLER                              PIC X(4)                     \n                                                   VALUE ' on '.                \n           10  ERROR-FILE                          PIC X(9)                     \n                                                   VALUE SPACES.                \n           10  FILLER                              PIC X(15)                    \n                                                   VALUE                        \n                                                   ' returned RESP '.           \n           10  ERROR-RESP                          PIC X(10)                    \n                                                   VALUE SPACES.                \n           10  FILLER                              PIC X(7)                     \n                                                   VALUE ',RESP2 '.             \n           10  ERROR-RESP2                         PIC X(10)                    \n                                                   VALUE SPACES.                \n          10  FILLER                               PIC X(5)                     \n                                                   VALUE SPACES.                \n      ******************************************************************        \n      *      Output Message Construction                                        \n      ******************************************************************        \n         05  WS-LONG-MSG                           PIC X(500).                  \n         05  WS-INFO-MSG                           PIC X(40).                   \n           88  WS-NO-INFO-MESSAGE                 VALUES                        \n                                                  SPACES LOW-VALUES.            \n           88  FOUND-CARDS-FOR-ACCOUNT             VALUE                        \n               '   Displaying requested details'.                               \n           88  WS-PROMPT-FOR-INPUT                 VALUE                        \n               'Please enter Account and Card Number'.                          \n\n         05  WS-RETURN-MSG                         PIC X(75).                   \n           88  WS-RETURN-MSG-OFF                   VALUE SPACES.                \n           88  WS-EXIT-MESSAGE                     VALUE                        \n               'PF03 pressed.Exiting              '.                            \n           88  WS-PROMPT-FOR-ACCT                  VALUE                        \n               'Account number not provided'.                                   \n           88  WS-PROMPT-FOR-CARD                  VALUE                        \n               'Card number not provided'.                                      \n           88  NO-SEARCH-CRITERIA-RECEIVED         VALUE                        \n               'No input received'.                                             \n           88  SEARCHED-ACCT-ZEROES                VALUE                        \n               'Account number must be a non zero 11 digit number'.             \n           88  SEARCHED-ACCT-NOT-NUMERIC           VALUE                        \n               'Account number must be a non zero 11 digit number'.             \n           88  SEARCHED-CARD-NOT-NUMERIC           VALUE                        \n               'Card number if supplied must be a 16 digit number'.             \n\n           88  DID-NOT-FIND-ACCT-IN-CARDXREF       VALUE                        \n               'Did not find this account in cards database'.                   \n           88  DID-NOT-FIND-ACCTCARD-COMBO         VALUE                        \n               'Did not find cards for this search condition'.                  \n           88  XREF-READ-ERROR                     VALUE                        \n               'Error reading Card Data File'.                                  \n           88  CODING-TO-BE-DONE                   VALUE                        \n               'Looks Good.... so far'.                                         \n      ******************************************************************        \n      *      Literals and Constants                                             \n      ******************************************************************        \n       01 WS-LITERALS.                                                          \n          05 LIT-THISPGM                           PIC X(8)                     \n                                                   VALUE 'COCRDSLC'.            \n          05 LIT-THISTRANID                        PIC X(4)                     \n                                                   VALUE 'CCDL'.                \n          05 LIT-THISMAPSET                        PIC X(8)                     \n                                                   VALUE 'COCRDSL '.            \n          05 LIT-THISMAP                           PIC X(7)                     \n                                                   VALUE 'CCRDSLA'.             \n          05 LIT-CCLISTPGM                         PIC X(8)                     \n                                                   VALUE 'COCRDLIC'.            \n          05 LIT-CCLISTTRANID                      PIC X(4)                     \n                                                   VALUE 'CCLI'.                \n          05 LIT-CCLISTMAPSET                      PIC X(7)                     \n                                                   VALUE 'COCRDLI'.             \n          05 LIT-CCLISTMAP                         PIC X(7)                     \n                                                   VALUE 'CCRDSLA'.             \n          05 LIT-MENUPGM                           PIC X(8)                     \n                                                   VALUE 'COMEN01C'.            \n          05 LIT-MENUTRANID                        PIC X(4)                     \n                                                   VALUE 'CM00'.                \n          05 LIT-MENUMAPSET                        PIC X(7)                     \n                                                   VALUE 'COMEN01'.             \n          05 LIT-MENUMAP                           PIC X(7)                     \n                                                   VALUE 'COMEN1A'.             \n          05 LIT-CARDFILENAME                      PIC X(8)                     \n                                                   VALUE 'CARDDAT '.            \n          05 LIT-CARDFILENAME-ACCT-PATH            PIC X(8)                     \n                                                   VALUE 'CARDAIX '.            \n      ******************************************************************        \n      *Other common working storage Variables                                   \n      ******************************************************************        \n       COPY CVCRD01Y.                                                           \n\n      ******************************************************************        \n      *Application Commmarea Copybook                                           \n       COPY COCOM01Y.                                                           \n\n       01 WS-THIS-PROGCOMMAREA.                                                 \n          05 CA-CALL-CONTEXT.                                                   \n             10 CA-FROM-PROGRAM                    PIC X(08).                   \n             10 CA-FROM-TRANID                     PIC X(04).                   \n\n       01  WS-COMMAREA                             PIC X(2000).                 \n\n      *IBM SUPPLIED COPYBOOKS                                                   \n       COPY DFHBMSCA.                                                           \n       COPY DFHAID.                                                             \n\n      *COMMON COPYBOOKS                                                         \n      *Screen Titles                                                            \n       COPY COTTL01Y.                                                           \n      *Credit Card Search Screen Layout                                         \n       COPY COCRDSL.                                                            \n\n      *Current Date                                                             \n       COPY CSDAT01Y.                                                           \n\n      *Common Messages                                                          \n       COPY CSMSG01Y.                                                           \n\n      *Abend Variables                                                          \n       COPY CSMSG02Y.                                                           \n\n      *Signed on user data                                                      \n       COPY CSUSR01Y.                                                           \n\n      *Dataset layouts                                                          \n      *ACCOUNT RECORD LAYOUT                                                    \n      *COPY CVACT01Y.                                                           \n\n      *CARD RECORD LAYOUT                                                       \n       COPY CVACT02Y.                                                           \n\n      *CARD XREF LAYOUT                                                         \n      *COPY CVACT03Y.                                                           \n\n      *CUSTOMER LAYOUT                                                          \n       COPY CVCUS01Y.\n</code></pre>"},{"location":"COCRDSLC.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This section defines the DFHCOMMAREA in the Linkage Section, which is the standard CICS communication area used to pass data between programs. It contains a single field defined as a variable-length array of characters that can expand from 1 to 32,767 bytes depending on the actual length passed (EIBCALEN). This flexible structure allows the program to receive communication data of varying sizes from calling programs within the CardDemo application.</p> Code <pre><code>01  DFHCOMMAREA.                                                         \n         05  FILLER                                PIC X(1)                     \n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n</code></pre>"},{"location":"COCRDSLC.html#procedure-division","title":"Procedure Division","text":""},{"location":"COCRDSLC.html#0000-main","title":"0000-MAIN","text":"<p>This paragraph serves as the main control flow for the COCRDSLC program, handling program initialization, navigation, and processing logic. It begins by setting up error handling through CICS HANDLE ABEND and initializing work areas. The code then preserves program context, processes any passed communication area data, and validates function key inputs (accepting only ENTER and PF3).</p> <p>The core of the paragraph is an EVALUATE statement that directs program flow based on user actions: - When PF3 is pressed, it transfers control back to the calling program or main menu - When entering from the credit card list screen (COCRDLIC), it processes the already validated account and card numbers - When entering from other contexts, it displays the initial input screen - When re-entering after input, it validates the data, reads card details if valid, and redisplays the screen</p> <p>The paragraph implements navigation logic between screens in the CardDemo application, maintaining context through the communication area. It also includes error handling to ensure appropriate messages are displayed when validation fails or unexpected conditions occur.</p> Code <pre><code>EXEC CICS HANDLE ABEND                                               \n                     LABEL(ABEND-ROUTINE)                                       \n           END-EXEC                                                             \n\n           INITIALIZE CC-WORK-AREA                                              \n                      WS-MISC-STORAGE                                           \n                      WS-COMMAREA                                               \n      *****************************************************************         \n      * Store our context                                                       \n      *****************************************************************         \n           MOVE LIT-THISTRANID       TO WS-TRANID                               \n      *****************************************************************         \n      * Ensure error message is cleared                               *         \n      *****************************************************************         \n           SET WS-RETURN-MSG-OFF  TO TRUE                                       \n      *****************************************************************         \n      * Store passed data if  any                *                              \n      *****************************************************************         \n           IF EIBCALEN IS EQUAL TO 0                                            \n               OR (CDEMO-FROM-PROGRAM = LIT-MENUPGM\n               AND NOT CDEMO-PGM-REENTER)                               \n              INITIALIZE CARDDEMO-COMMAREA                                      \n                         WS-THIS-PROGCOMMAREA                                   \n           ELSE                                                                 \n              MOVE DFHCOMMAREA (1:LENGTH OF CARDDEMO-COMMAREA)  TO              \n                                CARDDEMO-COMMAREA                               \n              MOVE DFHCOMMAREA(LENGTH OF CARDDEMO-COMMAREA + 1:                 \n                               LENGTH OF WS-THIS-PROGCOMMAREA ) TO              \n                                WS-THIS-PROGCOMMAREA                            \n           END-IF                                                               \n      *****************************************************************         \n      * Remap PFkeys as needed.                                                 \n      * Store the Mapped PF Key                                                 \n      *****************************************************************         \n           PERFORM YYYY-STORE-PFKEY                                             \n              THRU YYYY-STORE-PFKEY-EXIT                                        \n      *****************************************************************         \n      * Check the AID to see if its valid at this point               *         \n      * F3 - Exit                                                               \n      * Enter show screen again                                                 \n      *****************************************************************         \n           SET PFK-INVALID TO TRUE                                              \n           IF CCARD-AID-ENTER OR                                                \n              CCARD-AID-PFK03                                                   \n              SET PFK-VALID TO TRUE                                             \n           END-IF                                                               \n\n           IF PFK-INVALID                                                       \n              SET CCARD-AID-ENTER TO TRUE                                       \n           END-IF                                                               \n\n      *****************************************************************         \n      * Decide what to do based on inputs received                              \n      *****************************************************************         \n           EVALUATE TRUE                                                        \n              WHEN CCARD-AID-PFK03                                              \n      ******************************************************************        \n      *            XCTL TO CALLING PROGRAM OR MAIN MENU                         \n      ******************************************************************        \n                   IF CDEMO-FROM-TRANID    EQUAL LOW-VALUES                     \n                   OR CDEMO-FROM-TRANID    EQUAL SPACES                         \n                      MOVE LIT-MENUTRANID  TO CDEMO-TO-TRANID                   \n                   ELSE                                                         \n                      MOVE CDEMO-FROM-TRANID  TO CDEMO-TO-TRANID                \n                   END-IF                                                       \n\n                   IF CDEMO-FROM-PROGRAM   EQUAL LOW-VALUES                     \n                   OR CDEMO-FROM-PROGRAM   EQUAL SPACES                         \n                      MOVE LIT-MENUPGM     TO CDEMO-TO-PROGRAM                  \n                   ELSE                                                         \n                      MOVE CDEMO-FROM-PROGRAM TO CDEMO-TO-PROGRAM               \n                   END-IF                                                       \n\n                   MOVE LIT-THISTRANID     TO CDEMO-FROM-TRANID                 \n                   MOVE LIT-THISPGM        TO CDEMO-FROM-PROGRAM                \n\n                   SET  CDEMO-USRTYP-USER  TO TRUE                              \n                   SET  CDEMO-PGM-ENTER    TO TRUE                              \n                   MOVE LIT-THISMAPSET     TO CDEMO-LAST-MAPSET                 \n                   MOVE LIT-THISMAP        TO CDEMO-LAST-MAP                    \n      *                                                                         \n                   EXEC CICS XCTL                                               \n                             PROGRAM (CDEMO-TO-PROGRAM)                         \n                             COMMAREA(CARDDEMO-COMMAREA)                        \n                   END-EXEC                                                     \n      ******************************************************************        \n      *            COMING FROM CREDIT CARD LIST SCREEN                          \n      *            SELECTION CRITERIA ALREADY VALIDATED                         \n      ******************************************************************        \n              WHEN CDEMO-PGM-ENTER                                              \n               AND CDEMO-FROM-PROGRAM  EQUAL LIT-CCLISTPGM                      \n                   SET INPUT-OK TO TRUE                                         \n                   MOVE CDEMO-ACCT-ID       TO CC-ACCT-ID-N                     \n                   MOVE CDEMO-CARD-NUM      TO CC-CARD-NUM-N                    \n                   PERFORM 9000-READ-DATA                                       \n                      THRU 9000-READ-DATA-EXIT                                  \n                   PERFORM 1000-SEND-MAP                                        \n                     THRU 1000-SEND-MAP-EXIT                                    \n                   GO TO COMMON-RETURN                                          \n              WHEN CDEMO-PGM-ENTER                                              \n      ******************************************************************        \n      *            COMING FROM SOME OTHER CONTEXT                               \n      *            SELECTION CRITERIA TO BE GATHERED                            \n      ******************************************************************        \n                   PERFORM 1000-SEND-MAP THRU                                   \n                           1000-SEND-MAP-EXIT                                   \n                   GO TO COMMON-RETURN                                          \n              WHEN CDEMO-PGM-REENTER                                            \n                   PERFORM 2000-PROCESS-INPUTS                                  \n                      THRU 2000-PROCESS-INPUTS-EXIT                             \n                   IF INPUT-ERROR                                               \n                      PERFORM 1000-SEND-MAP                                     \n                         THRU 1000-SEND-MAP-EXIT                                \n                      GO TO COMMON-RETURN                                       \n                   ELSE                                                         \n                      PERFORM 9000-READ-DATA                                    \n                         THRU 9000-READ-DATA-EXIT                               \n                      PERFORM 1000-SEND-MAP                                     \n                         THRU 1000-SEND-MAP-EXIT                                \n                      GO TO COMMON-RETURN                                       \n\n                   END-IF                                                       \n\n              WHEN OTHER                                                        \n                   MOVE LIT-THISPGM    TO ABEND-CULPRIT                         \n                   MOVE '0001'         TO ABEND-CODE                            \n                   MOVE SPACES         TO ABEND-REASON                          \n                   MOVE 'UNEXPECTED DATA SCENARIO'                              \n                                       TO WS-RETURN-MSG                         \n                   PERFORM SEND-PLAIN-TEXT                                      \n                      THRU SEND-PLAIN-TEXT-EXIT                                 \n           END-EVALUATE                                                         \n\n\n      * If we had an error setup error message that slipped through             \n      * Display and return                                                      \n           IF INPUT-ERROR                                                       \n              MOVE WS-RETURN-MSG  TO CCARD-ERROR-MSG                            \n              PERFORM 1000-SEND-MAP                                             \n                 THRU 1000-SEND-MAP-EXIT                                        \n              GO TO COMMON-RETURN                                               \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDSLC.html#common-return","title":"COMMON-RETURN","text":"<p>This paragraph handles the common return logic for the program, preparing the communication area before returning control to CICS. It first moves any return message to the error message field in the card data structure. Then it constructs a composite communication area by copying the standard CardDemo communication area to the working storage area, followed by appending this program's specific communication area data. Finally, it executes a CICS RETURN command that specifies the same transaction ID for continuation, passes the constructed communication area, and specifies its length. This ensures that both application-wide and program-specific context is preserved when control returns to the user or when the transaction is restarted.</p> Code <pre><code>MOVE WS-RETURN-MSG     TO CCARD-ERROR-MSG                            \n\n           MOVE  CARDDEMO-COMMAREA    TO WS-COMMAREA                            \n           MOVE  WS-THIS-PROGCOMMAREA TO                                        \n                  WS-COMMAREA(LENGTH OF CARDDEMO-COMMAREA + 1:                  \n                               LENGTH OF WS-THIS-PROGCOMMAREA )                 \n\n           EXEC CICS RETURN                                                     \n                TRANSID (LIT-THISTRANID)                                        \n                COMMAREA (WS-COMMAREA)                                          \n                LENGTH(LENGTH OF WS-COMMAREA)                                   \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COCRDSLC.html#0000-main-exit","title":"0000-MAIN-EXIT","text":"<p>This paragraph serves as the exit point for the program, marking the end of a logical processing block. It's a standard COBOL construct used to terminate the current paragraph's execution and return control to the calling routine.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDSLC.html#1000-send-map","title":"1000-SEND-MAP","text":"<p>This paragraph orchestrates the process of preparing and sending the credit card detail screen to the user. It follows a structured sequence by first initializing the screen (1100-SCREEN-INIT), then setting up the screen variables with appropriate data values (1200-SETUP-SCREEN-VARS), configuring the screen attributes for proper display formatting (1300-SETUP-SCREEN-ATTRS), and finally sending the completed screen to the terminal (1400-SEND-SCREEN). This modular approach separates the different aspects of screen preparation and display into distinct, reusable components.</p> Code <pre><code>PERFORM 1100-SCREEN-INIT                                             \n              THRU 1100-SCREEN-INIT-EXIT                                        \n           PERFORM 1200-SETUP-SCREEN-VARS                                       \n              THRU 1200-SETUP-SCREEN-VARS-EXIT                                  \n           PERFORM 1300-SETUP-SCREEN-ATTRS                                      \n              THRU 1300-SETUP-SCREEN-ATTRS-EXIT                                 \n           PERFORM 1400-SEND-SCREEN                                             \n              THRU 1400-SEND-SCREEN-EXIT                                        \n           .\n</code></pre>"},{"location":"COCRDSLC.html#1000-send-map-exit","title":"1000-SEND-MAP-EXIT","text":"<p>This paragraph serves as an exit point for the SEND-MAP routine in the COCRDSLC program. It marks the end of the map sending process and provides a clean return point for control flow when the program has completed displaying the credit card details screen to the user.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDSLC.html#1100-screen-init","title":"1100-SCREEN-INIT","text":"<p>This paragraph initializes the screen display for the credit card detail screen. It clears the output area by setting it to LOW-VALUES, then retrieves the current date and time. The paragraph populates the screen header with application titles from the communication area, sets the transaction ID and program name, and formats the current date (MM/DD/YY) and time (HH:MM:SS) for display in the screen header. This establishes the standard header information that appears at the top of the screen before any card-specific data is displayed.</p> Code <pre><code>MOVE LOW-VALUES TO CCRDSLAO                                          \n\n           MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA                       \n\n           MOVE CCDA-TITLE01           TO TITLE01O OF CCRDSLAO                  \n           MOVE CCDA-TITLE02           TO TITLE02O OF CCRDSLAO                  \n           MOVE LIT-THISTRANID         TO TRNNAMEO OF CCRDSLAO                  \n           MOVE LIT-THISPGM            TO PGMNAMEO OF CCRDSLAO                  \n\n           MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA                       \n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM                         \n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD                         \n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY                         \n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF CCRDSLAO                  \n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH                         \n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM                         \n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS                         \n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF CCRDSLAO                  \n\n           .\n</code></pre>"},{"location":"COCRDSLC.html#1100-screen-init-exit","title":"1100-SCREEN-INIT-EXIT","text":"<p>This paragraph serves as an exit point for the screen initialization routine in the COCRDSLC program. It marks the end of the screen initialization process and allows the program flow to return to the calling section.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDSLC.html#1200-setup-screen-vars","title":"1200-SETUP-SCREEN-VARS","text":"<p>This paragraph initializes and populates the screen variables for the credit card detail display. It first checks if the program was called with parameters (EIBCALEN). If not, it sets a prompt for user input. Otherwise, it processes the incoming account and card information, transferring values from the communication area to the screen fields. When account or card numbers are zero, it sets the corresponding screen fields to LOW-VALUES. If card data was successfully found (FOUND-CARDS-FOR-ACCOUNT), it populates the display fields with card details including the embossed name, expiration date (split into month and year components), and card status. The paragraph concludes by setting appropriate informational or error messages on the screen based on the processing status.</p> Code <pre><code>*    INITIALIZE SEARCH CRITERIA                                           \n           IF EIBCALEN = 0                                                      \n              SET  WS-PROMPT-FOR-INPUT TO TRUE                                  \n           ELSE                                                                 \n              IF CDEMO-ACCT-ID = 0                                              \n                 MOVE LOW-VALUES   TO ACCTSIDO OF CCRDSLAO                      \n              ELSE                                                              \n                 MOVE CC-ACCT-ID   TO ACCTSIDO OF CCRDSLAO                      \n              END-IF                                                            \n\n              IF CDEMO-CARD-NUM = 0                                             \n                MOVE LOW-VALUES   TO CARDSIDO OF CCRDSLAO                       \n              ELSE                                                              \n                MOVE CC-CARD-NUM  TO CARDSIDO OF CCRDSLAO                       \n              END-IF                                                            \n\n              IF FOUND-CARDS-FOR-ACCOUNT                                        \n                 MOVE CARD-EMBOSSED-NAME                                        \n                                        TO CRDNAMEO OF CCRDSLAO                 \n                 MOVE CARD-EXPIRAION-DATE                                       \n                                        TO CARD-EXPIRAION-DATE-X                \n\n                 MOVE CARD-EXPIRY-MONTH TO EXPMONO  OF CCRDSLAO                 \n\n                 MOVE CARD-EXPIRY-YEAR  TO EXPYEARO OF CCRDSLAO                 \n\n                 MOVE CARD-ACTIVE-STATUS TO CRDSTCDO OF CCRDSLAO                \n              END-IF                                                            \n            END-IF                                                              \n\n\n      *    SETUP MESSAGE                                                        \n           IF WS-NO-INFO-MESSAGE                                                \n             SET WS-PROMPT-FOR-INPUT TO TRUE                                    \n           END-IF                                                               \n\n           MOVE WS-RETURN-MSG          TO ERRMSGO OF CCRDSLAO                   \n\n           MOVE WS-INFO-MSG            TO INFOMSGO OF CCRDSLAO                  \n           .\n</code></pre>"},{"location":"COCRDSLC.html#1200-setup-screen-vars-exit","title":"1200-SETUP-SCREEN-VARS-EXIT","text":"<p>This paragraph serves as an exit point for the 1200-SETUP-SCREEN-VARS routine. It marks the end of the screen variable setup process in the COCRDSLC program, allowing the program flow to return to the calling section after screen variables have been properly initialized or configured.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDSLC.html#1300-setup-screen-attrs","title":"1300-SETUP-SCREEN-ATTRS","text":"<p>This paragraph configures the screen attributes for the credit card detail screen based on context and validation results. It determines whether input fields should be protected or unprotected depending on navigation flow - protecting fields when coming from the card list screen and making them editable otherwise. The paragraph handles cursor positioning logic, placing the cursor on the first field with an error or defaulting to the account ID field. It also manages color attributes for fields, highlighting validation errors in red, marking required fields with an asterisk when blank on reentry, and setting appropriate colors for information messages. This creates a user-friendly interface that guides users through error correction and data entry.</p> Code <pre><code>*    PROTECT OR UNPROTECT BASED ON CONTEXT                                \n           IF  CDEMO-LAST-MAPSET  EQUAL LIT-CCLISTMAPSET \n           AND CDEMO-FROM-PROGRAM EQUAL LIT-CCLISTPGM                           \n              MOVE DFHBMPRF     TO ACCTSIDA OF CCRDSLAI                         \n              MOVE DFHBMPRF     TO CARDSIDA OF CCRDSLAI                         \n           ELSE                                                                 \n              MOVE DFHBMFSE      TO ACCTSIDA OF CCRDSLAI                        \n              MOVE DFHBMFSE      TO CARDSIDA OF CCRDSLAI                        \n           END-IF                                                               \n\n      *    POSITION CURSOR                                                      \n           EVALUATE TRUE                                                        \n              WHEN FLG-ACCTFILTER-NOT-OK                                        \n              WHEN FLG-ACCTFILTER-BLANK                                         \n                   MOVE -1             TO ACCTSIDL OF CCRDSLAI                  \n              WHEN FLG-CARDFILTER-NOT-OK                                        \n              WHEN FLG-CARDFILTER-BLANK                                         \n                   MOVE -1             TO CARDSIDL OF CCRDSLAI                  \n              WHEN OTHER                                                        \n                   MOVE -1             TO ACCTSIDL OF CCRDSLAI                  \n           END-EVALUATE                                                         \n\n      *    SETUP COLOR                                                          \n           IF  CDEMO-LAST-MAPSET   EQUAL LIT-CCLISTMAPSET\n           AND CDEMO-FROM-PROGRAM  EQUAL LIT-CCLISTPGM                          \n              MOVE DFHDFCOL     TO ACCTSIDC OF CCRDSLAO                         \n              MOVE DFHDFCOL     TO CARDSIDC OF CCRDSLAO                         \n           END-IF                                                               \n\n           IF FLG-ACCTFILTER-NOT-OK                                             \n              MOVE DFHRED              TO ACCTSIDC OF CCRDSLAO                  \n           END-IF                                                               \n\n           IF FLG-CARDFILTER-NOT-OK                                             \n              MOVE DFHRED              TO CARDSIDC OF CCRDSLAO                  \n           END-IF                                                               \n\n           IF  FLG-ACCTFILTER-BLANK                                             \n           AND CDEMO-PGM-REENTER                                                \n               MOVE '*'                TO ACCTSIDO OF CCRDSLAO                  \n               MOVE DFHRED             TO ACCTSIDC OF CCRDSLAO                  \n           END-IF                                                               \n\n           IF  FLG-CARDFILTER-BLANK                                             \n           AND CDEMO-PGM-REENTER                                                \n               MOVE '*'                TO CARDSIDO OF CCRDSLAO                  \n               MOVE DFHRED             TO CARDSIDC OF CCRDSLAO                  \n           END-IF                                                               \n\n           IF  WS-NO-INFO-MESSAGE                                               \n               MOVE DFHBMDAR           TO INFOMSGC OF CCRDSLAO                  \n           ELSE                                                                 \n               MOVE DFHNEUTR           TO INFOMSGC OF CCRDSLAO                  \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDSLC.html#1300-setup-screen-attrs-exit","title":"1300-SETUP-SCREEN-ATTRS-EXIT","text":"<p>This paragraph serves as an exit point for the screen attribute setup routine in the COCRDSLC program. It marks the end of the 1300-SETUP-SCREEN-ATTRS section, allowing the program to return control to the calling section after screen attributes have been configured for the credit card detail display.</p> Code <pre><code>EXIT.\n</code></pre>"},{"location":"COCRDSLC.html#1400-send-screen","title":"1400-SEND-SCREEN","text":"<p>This paragraph handles the screen display functionality for the credit card detail screen. It sets up the next map and mapset values in the common communication area, indicating the program should be re-entered after the screen is displayed. The paragraph then uses a CICS SEND MAP command to display the screen to the user, positioning the cursor appropriately, clearing the previous screen content (ERASE), and freeing the keyboard for user input. The response code from this operation is captured in WS-RESP-CD for potential error handling.</p> Code <pre><code>MOVE LIT-THISMAPSET         TO CCARD-NEXT-MAPSET                     \n           MOVE LIT-THISMAP            TO CCARD-NEXT-MAP                        \n           SET  CDEMO-PGM-REENTER TO TRUE                                       \n\n           EXEC CICS SEND MAP(CCARD-NEXT-MAP)                                   \n                          MAPSET(CCARD-NEXT-MAPSET)                             \n                          FROM(CCRDSLAO)                                        \n                          CURSOR                                                \n                          ERASE                                                 \n                          FREEKB                                                \n                          RESP(WS-RESP-CD)                                      \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COCRDSLC.html#1400-send-screen-exit","title":"1400-SEND-SCREEN-EXIT","text":"<p>This paragraph serves as an exit point for the SEND-SCREEN routine in the COCRDSLC program. It provides a clean termination point for the screen display logic, allowing the program to return control to the calling routine after the credit card detail screen has been formatted and sent to the user terminal.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDSLC.html#2000-process-inputs","title":"2000-PROCESS-INPUTS","text":"<p>This paragraph handles the initial processing of user inputs from the screen. It first receives the map data from the user interface, then validates the input fields through the edit map inputs routine. After validation, it sets up the communication area with any error messages generated during validation and prepares for the next screen interaction by setting the program, mapset, and map names to the current program's values, ensuring the application will return to this same screen after processing.</p> Code <pre><code>PERFORM 2100-RECEIVE-MAP                                             \n              THRU 2100-RECEIVE-MAP-EXIT                                        \n           PERFORM 2200-EDIT-MAP-INPUTS                                         \n              THRU 2200-EDIT-MAP-INPUTS-EXIT                                    \n           MOVE WS-RETURN-MSG  TO CCARD-ERROR-MSG                               \n           MOVE LIT-THISPGM    TO CCARD-NEXT-PROG                               \n           MOVE LIT-THISMAPSET TO CCARD-NEXT-MAPSET                             \n           MOVE LIT-THISMAP    TO CCARD-NEXT-MAP                                \n           .\n</code></pre>"},{"location":"COCRDSLC.html#2000-process-inputs-exit","title":"2000-PROCESS-INPUTS-EXIT","text":"<p>This paragraph serves as an exit point for the 2000-PROCESS-INPUTS section, marking the end of input processing logic. It provides a clean termination point for the section that handles validation and processing of account and card number inputs in the credit card detail request flow.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDSLC.html#2100-receive-map","title":"2100-RECEIVE-MAP","text":"<p>This paragraph receives user input from the screen map named in LIT-THISMAP within the mapset LIT-THISMAPSET. The data is stored in the CCRDSLAI structure, which likely contains the fields displayed on the credit card detail screen. The paragraph captures both response and reason codes in WS-RESP-CD and WS-REAS-CD respectively, which will be used elsewhere in the program to determine if the receive operation was successful or to handle any errors that occurred during the operation.</p> Code <pre><code>EXEC CICS RECEIVE MAP(LIT-THISMAP)                                   \n                     MAPSET(LIT-THISMAPSET)                                     \n                     INTO(CCRDSLAI)                                             \n                     RESP(WS-RESP-CD)                                           \n                     RESP2(WS-REAS-CD)                                          \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COCRDSLC.html#2100-receive-map-exit","title":"2100-RECEIVE-MAP-EXIT","text":"<p>This paragraph serves as an exit point for the RECEIVE-MAP routine in the COCRDSLC program. It marks the end of the map receiving process where user input from the credit card detail screen is captured. The paragraph contains only the EXIT statement, which transfers control back to the calling routine after the map receiving operations are complete.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDSLC.html#2200-edit-map-inputs","title":"2200-EDIT-MAP-INPUTS","text":"<p>This paragraph processes and validates user input from the credit card detail screen. It first sets flags to indicate valid input status, then handles the account ID and card number fields by converting asterisks or spaces to low-values (which indicates no filter). The code then performs individual field validation by calling separate paragraphs for account and card number validation. Finally, it performs cross-field validation to determine if no search criteria were provided (both fields blank). This validation logic ensures proper input formatting before attempting to retrieve card details from the database.</p> Code <pre><code>SET INPUT-OK                  TO TRUE                                \n           SET FLG-CARDFILTER-ISVALID    TO TRUE                                \n           SET FLG-ACCTFILTER-ISVALID    TO TRUE                                \n\n      *    REPLACE * WITH LOW-VALUES                                            \n           IF  ACCTSIDI OF CCRDSLAI = '*'                                       \n           OR  ACCTSIDI OF CCRDSLAI = SPACES                                    \n               MOVE LOW-VALUES           TO  CC-ACCT-ID                         \n           ELSE                                                                 \n               MOVE ACCTSIDI OF CCRDSLAI TO  CC-ACCT-ID                         \n           END-IF                                                               \n\n           IF  CARDSIDI OF CCRDSLAI = '*'                                       \n           OR  CARDSIDI OF CCRDSLAI = SPACES                                    \n               MOVE LOW-VALUES           TO  CC-CARD-NUM                        \n           ELSE                                                                 \n               MOVE CARDSIDI OF CCRDSLAI TO  CC-CARD-NUM                        \n           END-IF                                                               \n\n      *    INDIVIDUAL FIELD EDITS                                               \n           PERFORM 2210-EDIT-ACCOUNT                                            \n              THRU 2210-EDIT-ACCOUNT-EXIT                                       \n\n           PERFORM 2220-EDIT-CARD                                               \n              THRU 2220-EDIT-CARD-EXIT                                          \n\n      *    CROSS FIELD EDITS                                                    \n           IF  FLG-ACCTFILTER-BLANK                                             \n           AND FLG-CARDFILTER-BLANK                                             \n               SET NO-SEARCH-CRITERIA-RECEIVED TO TRUE                          \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDSLC.html#2200-edit-map-inputs-exit","title":"2200-EDIT-MAP-INPUTS-EXIT","text":"<p>This paragraph serves as an exit point for the 2200-EDIT-MAP-INPUTS routine. It marks the end of the input validation logic for the credit card detail screen, allowing the program flow to return to the calling section after input field validation is complete.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDSLC.html#2210-edit-account","title":"2210-EDIT-ACCOUNT","text":"<p>This paragraph validates the account ID input field for the credit card detail screen. It performs several checks: first determining if the account ID is empty (blank, low-values, or zeros), in which case it sets an input error flag and prompts the user for an account number. Next, it verifies that the account ID is both numeric and 11 digits in length. If these validations fail, it sets appropriate error flags and generates an error message. When the account ID passes all validations, it moves the value to the CDEMO-ACCT-ID field and sets a flag indicating the account filter is valid. The paragraph uses control flags to manage error handling and conditional message display based on the application's current state.</p> Code <pre><code>SET FLG-ACCTFILTER-NOT-OK TO TRUE                                    \n\n      *    Not supplied                                                         \n           IF CC-ACCT-ID   EQUAL LOW-VALUES                                     \n           OR CC-ACCT-ID   EQUAL SPACES                                         \n           OR CC-ACCT-ID-N EQUAL ZEROS                                          \n              SET INPUT-ERROR           TO TRUE                                 \n              SET FLG-ACCTFILTER-BLANK  TO TRUE                                 \n              IF WS-RETURN-MSG-OFF                                              \n                 SET WS-PROMPT-FOR-ACCT TO TRUE                                 \n              END-IF                                                            \n              MOVE ZEROES       TO CDEMO-ACCT-ID                                \n              GO TO  2210-EDIT-ACCOUNT-EXIT                                     \n           END-IF                                                               \n      *                                                                         \n      *    Not numeric                                                          \n      *    Not 11 characters                                                    \n           IF CC-ACCT-ID  IS NOT NUMERIC                                        \n              SET INPUT-ERROR TO TRUE                                           \n              SET FLG-ACCTFILTER-NOT-OK TO TRUE                                 \n              IF WS-RETURN-MSG-OFF                                              \n                MOVE                                                            \n              'ACCOUNT FILTER,IF SUPPLIED MUST BE A 11 DIGIT NUMBER'            \n                              TO WS-RETURN-MSG                                  \n              END-IF                                                            \n              MOVE ZERO       TO CDEMO-ACCT-ID                                  \n              GO TO 2210-EDIT-ACCOUNT-EXIT                                      \n           ELSE                                                                 \n              MOVE CC-ACCT-ID TO CDEMO-ACCT-ID                                  \n              SET FLG-ACCTFILTER-ISVALID TO TRUE                                \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDSLC.html#2210-edit-account-exit","title":"2210-EDIT-ACCOUNT-EXIT","text":"<p>This paragraph serves as an exit point for the account number validation routine. It marks the end of the account number editing process, allowing the program to continue with the next processing step after account validation is complete.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDSLC.html#2220-edit-card","title":"2220-EDIT-CARD","text":"<p>This paragraph validates the credit card number input in the card detail request screen. It performs several checks: first, it verifies if the card number was provided at all (checking for spaces, low-values, or zeros). If the card number is missing, it sets appropriate error flags, prompts the user to enter a card number (if message display is enabled), and exits the validation routine. If a card number was entered, it then checks if the value is numeric and 16 digits long. When the input fails this validation, it sets error flags and displays a message informing the user that the card ID must be a 16-digit number. If the card number passes all validations, it moves the numeric value to the CDEMO-CARD-NUM field and sets a flag indicating the card filter is valid. This validation is critical for ensuring proper record retrieval from the card data file.</p> Code <pre><code>*    Not numeric                                                          \n      *    Not 16 characters                                                    \n           SET FLG-CARDFILTER-NOT-OK TO TRUE                                    \n\n      *    Not supplied                                                         \n           IF CC-CARD-NUM   EQUAL LOW-VALUES                                    \n           OR CC-CARD-NUM   EQUAL SPACES                                        \n           OR CC-CARD-NUM-N EQUAL ZEROS                                         \n              SET INPUT-ERROR           TO TRUE                                 \n              SET FLG-CARDFILTER-BLANK  TO TRUE                                 \n              IF WS-RETURN-MSG-OFF                                              \n                 SET WS-PROMPT-FOR-CARD TO TRUE                                 \n              END-IF                                                            \n\n              MOVE ZEROES       TO CDEMO-CARD-NUM                               \n              GO TO  2220-EDIT-CARD-EXIT                                        \n           END-IF                                                               \n      *                                                                         \n      *    Not numeric                                                          \n      *    Not 16 characters                                                    \n           IF CC-CARD-NUM  IS NOT NUMERIC                                       \n              SET INPUT-ERROR TO TRUE                                           \n              SET FLG-CARDFILTER-NOT-OK TO TRUE                                 \n              IF WS-RETURN-MSG-OFF                                              \n                 MOVE                                                           \n              'CARD ID FILTER,IF SUPPLIED MUST BE A 16 DIGIT NUMBER'            \n                              TO WS-RETURN-MSG                                  \n              END-IF                                                            \n              MOVE ZERO       TO CDEMO-CARD-NUM                                 \n              GO TO 2220-EDIT-CARD-EXIT                                         \n           ELSE                                                                 \n              MOVE CC-CARD-NUM-N TO CDEMO-CARD-NUM                              \n              SET FLG-CARDFILTER-ISVALID TO TRUE                                \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDSLC.html#2220-edit-card-exit","title":"2220-EDIT-CARD-EXIT","text":"<p>This paragraph serves as an exit point for the card editing process in the COCRDSLC program. It marks the end of the card validation and editing logic, providing a clean return point for the program flow after completing the validation checks on the credit card information.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDSLC.html#9000-read-data","title":"9000-READ-DATA","text":"<p>This paragraph calls the 9100-GETCARD-BYACCTCARD routine to retrieve credit card details based on the account and card number inputs. It serves as a wrapper for the actual data retrieval logic, maintaining the program's structured approach to data access.</p> Code <pre><code>PERFORM 9100-GETCARD-BYACCTCARD                                      \n              THRU 9100-GETCARD-BYACCTCARD-EXIT                                 \n           .\n</code></pre>"},{"location":"COCRDSLC.html#9000-read-data-exit","title":"9000-READ-DATA-EXIT","text":"<p>This paragraph serves as an exit point for the data reading routine in the COCRDSLC program. It provides a clean termination point for the 9000-READ-DATA section, allowing control to return to the calling routine after data retrieval operations have been completed.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDSLC.html#9100-getcard-byacctcard","title":"9100-GETCARD-BYACCTCARD","text":"<p>This paragraph retrieves a credit card record from the card file using the card number as the key. It performs a CICS READ operation on the card file and evaluates the response code to determine the outcome. If the read is successful, it sets a flag indicating that cards were found for the account. If the record is not found, it sets error flags for both account and card filters and potentially sets a message indicating the account/card combination was not found. For other error conditions, it captures detailed error information including operation name, file name, and response codes to generate an appropriate error message. The paragraph handles all possible outcomes of the file read operation with appropriate error handling.</p> Code <pre><code>*    Read the Card file                                                   \n      *                                                                         \n      *    MOVE CC-ACCT-ID-N      TO WS-CARD-RID-ACCT-ID                        \n           MOVE CC-CARD-NUM       TO WS-CARD-RID-CARDNUM                        \n\n           EXEC CICS READ                                                       \n                FILE      (LIT-CARDFILENAME)                                    \n                RIDFLD    (WS-CARD-RID-CARDNUM)                                 \n                KEYLENGTH (LENGTH OF WS-CARD-RID-CARDNUM)                       \n                INTO      (CARD-RECORD)                                         \n                LENGTH    (LENGTH OF CARD-RECORD)                               \n                RESP      (WS-RESP-CD)                                          \n                RESP2     (WS-REAS-CD)                                          \n           END-EXEC                                                             \n\n           EVALUATE WS-RESP-CD                                                  \n               WHEN DFHRESP(NORMAL)                                             \n                  SET FOUND-CARDS-FOR-ACCOUNT TO TRUE                           \n               WHEN DFHRESP(NOTFND)                                             \n                  SET INPUT-ERROR                    TO TRUE                    \n                  SET FLG-ACCTFILTER-NOT-OK          TO TRUE                    \n                  SET FLG-CARDFILTER-NOT-OK          TO TRUE                    \n                  IF  WS-RETURN-MSG-OFF                                         \n                      SET DID-NOT-FIND-ACCTCARD-COMBO TO TRUE                   \n                  END-IF                                                        \n               WHEN OTHER                                                       \n                  SET INPUT-ERROR                    TO TRUE                    \n                  IF  WS-RETURN-MSG-OFF                                         \n                      SET FLG-ACCTFILTER-NOT-OK      TO TRUE                    \n                  END-IF                                                        \n                  MOVE 'READ'                        TO ERROR-OPNAME            \n                  MOVE LIT-CARDFILENAME                TO ERROR-FILE            \n                  MOVE WS-RESP-CD                    TO ERROR-RESP              \n                  MOVE WS-REAS-CD                    TO ERROR-RESP2             \n                  MOVE WS-FILE-ERROR-MESSAGE         TO WS-RETURN-MSG           \n           END-EVALUATE                                                         \n           .\n</code></pre>"},{"location":"COCRDSLC.html#9100-getcard-byacctcard-exit","title":"9100-GETCARD-BYACCTCARD-EXIT","text":"<p>This paragraph serves as the exit point for the GETCARD-BYACCTCARD routine. It marks the end of the process that retrieves credit card details using account and card number identifiers. The paragraph contains only the EXIT statement, which returns control to the calling routine after the card retrieval operation has completed.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDSLC.html#9150-getcard-byacct","title":"9150-GETCARD-BYACCT","text":"<p>This paragraph retrieves a credit card record from the card file using the account ID as the access key through an alternate index. It executes a CICS READ command against the card file's account path (LIT-CARDFILENAME-ACCT-PATH) using the account ID stored in WS-CARD-RID-ACCT-ID as the key. The paragraph then evaluates the response code from the read operation and sets appropriate flags based on the outcome. If the read is successful (NORMAL response), it sets the FOUND-CARDS-FOR-ACCOUNT flag. If the record is not found, it sets error flags indicating the account filter is invalid and the account was not found in the card cross-reference. For any other response, it sets error flags and populates error information fields with details about the failed operation, including the operation name, file name, response code, and reason code, and prepares an error message for display to the user.</p> Code <pre><code>*    Read the Card file. Access via alternate index ACCTID                \n      *                                                                         \n           EXEC CICS READ                                                       \n                FILE      (LIT-CARDFILENAME-ACCT-PATH)                          \n                RIDFLD    (WS-CARD-RID-ACCT-ID)                                 \n                KEYLENGTH (LENGTH OF WS-CARD-RID-ACCT-ID)                       \n                INTO      (CARD-RECORD)                                         \n                LENGTH    (LENGTH OF CARD-RECORD)                               \n                RESP      (WS-RESP-CD)                                          \n                RESP2     (WS-REAS-CD)                                          \n           END-EXEC                                                             \n\n           EVALUATE WS-RESP-CD                                                  \n               WHEN DFHRESP(NORMAL)                                             \n                  SET FOUND-CARDS-FOR-ACCOUNT TO TRUE                           \n               WHEN DFHRESP(NOTFND)                                             \n                  SET INPUT-ERROR                 TO TRUE                       \n                  SET FLG-ACCTFILTER-NOT-OK                TO TRUE              \n                  SET DID-NOT-FIND-ACCT-IN-CARDXREF TO TRUE                     \n               WHEN OTHER                                                       \n                  SET INPUT-ERROR                 TO TRUE                       \n                  SET FLG-ACCTFILTER-NOT-OK                TO TRUE              \n                  MOVE 'READ'                     TO ERROR-OPNAME               \n                  MOVE LIT-CARDFILENAME-ACCT-PATH TO ERROR-FILE                 \n                  MOVE WS-RESP-CD                 TO ERROR-RESP                 \n                  MOVE WS-REAS-CD                 TO ERROR-RESP2                \n                  MOVE WS-FILE-ERROR-MESSAGE      TO WS-RETURN-MSG              \n           END-EVALUATE                                                         \n           .\n</code></pre>"},{"location":"COCRDSLC.html#9150-getcard-byacct-exit","title":"9150-GETCARD-BYACCT-EXIT","text":"<p>This paragraph serves as an exit point for the GETCARD-BYACCT routine. It includes a comment block explaining that there's functionality to display long text for debugging purposes, but notes that this debugging feature should not be used during normal program operation. The paragraph is minimally implemented with just an EXIT statement followed by a period.</p> Code <pre><code>EXIT                                                                 \n           .                                                                    \n\n\n      *****************************************************************         \n      * Display Long text and exit                                    *         \n      * This is primarily for debugging and should not be used in     *         \n      * regular course                                                *         \n      *****************************************************************\n</code></pre>"},{"location":"COCRDSLC.html#send-long-text","title":"SEND-LONG-TEXT","text":"<p>This paragraph sends an extended message to the user's terminal screen using CICS SEND TEXT command. It displays the content stored in the WS-LONG-MSG field, clears the screen (ERASE), and unlocks the keyboard (FREEKB). After sending the message, it returns control to CICS, effectively ending the current transaction. This functionality is typically used for displaying detailed error messages or informational text that requires more space than standard screen fields.</p> Code <pre><code>EXEC CICS SEND TEXT                                                  \n                     FROM(WS-LONG-MSG)                                          \n                     LENGTH(LENGTH OF WS-LONG-MSG)                              \n                     ERASE                                                      \n                     FREEKB                                                     \n           END-EXEC                                                             \n\n           EXEC CICS RETURN                                                     \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COCRDSLC.html#send-long-text-exit","title":"SEND-LONG-TEXT-EXIT","text":"<p>This paragraph serves as a placeholder exit point for the SEND-LONG-TEXT routine in the COCRDSLC program. It contains a warning comment indicating that this is a plain text implementation that should not be used in production environments. This suggests it may be a simplified or unencrypted version of text handling that lacks proper security measures required for production use.</p> Code <pre><code>EXIT                                                                 \n           .                                                                    \n\n      *****************************************************************         \n      * Plain text exit - Dont use in production                      *         \n      *****************************************************************\n</code></pre>"},{"location":"COCRDSLC.html#send-plain-text","title":"SEND-PLAIN-TEXT","text":"<p>This paragraph sends a plain text message to the user's terminal screen. It uses the CICS SEND TEXT command to display the contents of the WS-RETURN-MSG field, specifying the length of the message, clearing the screen (ERASE), and freeing the keyboard (FREEKB). After sending the message, it executes a CICS RETURN command to end the transaction and return control to CICS. This functionality is typically used for displaying error messages or informational text when normal screen formatting isn't required.</p> Code <pre><code>EXEC CICS SEND TEXT                                                  \n                     FROM(WS-RETURN-MSG)                                        \n                     LENGTH(LENGTH OF WS-RETURN-MSG)                            \n                     ERASE                                                      \n                     FREEKB                                                     \n           END-EXEC                                                             \n\n           EXEC CICS RETURN                                                     \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COCRDSLC.html#send-plain-text-exit","title":"SEND-PLAIN-TEXT-EXIT","text":"<p>This paragraph serves as an exit point for the SEND-PLAIN-TEXT routine in the COCRDSLC program. It incorporates a copybook named 'CSSTRPFY' which contains common code for storing PF key information. This is part of the program's navigation handling mechanism, ensuring that function key inputs from the user interface are properly captured and preserved for subsequent processing.</p> Code <pre><code>EXIT                                                                 \n           .                                                                    \n      ******************************************************************        \n      *Common code to store PFKey\n      ******************************************************************\n       COPY 'CSSTRPFY'\n           .\n</code></pre>"},{"location":"COCRDSLC.html#abend-routine","title":"ABEND-ROUTINE","text":"<p>This paragraph handles unexpected abend (abnormal end) conditions in the COCRDSLC program. If no specific abend message has been set (ABEND-MSG equals LOW-VALUES), it sets a default message indicating an unexpected abend occurred. It then identifies the current program as the source of the error by storing the program name in ABEND-CULPRIT. The routine sends the abend information to the user's terminal using CICS SEND, cancels any existing abend handling with CICS HANDLE ABEND CANCEL, and finally forces a controlled termination of the program with a specific abend code ('9999') using CICS ABEND. This provides a graceful error handling mechanism that displays useful diagnostic information before terminating the program when unexpected errors occur.</p> Code <pre><code>IF ABEND-MSG EQUAL LOW-VALUES                                        \n              MOVE 'UNEXPECTED ABEND OCCURRED.' TO ABEND-MSG                    \n           END-IF                                                               \n\n           MOVE LIT-THISPGM       TO ABEND-CULPRIT                              \n\n           EXEC CICS SEND                                                       \n                            FROM (ABEND-DATA)                                   \n                            LENGTH(LENGTH OF ABEND-DATA)                        \n                            NOHANDLE                                            \n           END-EXEC                                                             \n\n           EXEC CICS HANDLE ABEND                                               \n                CANCEL                                                          \n           END-EXEC                                                             \n\n           EXEC CICS ABEND                                                      \n                ABCODE('9999')                                                  \n           END-EXEC                                                             \n           .                                                                    \n\n\n\n\n\n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:33 CDT\n      *\n</code></pre>"},{"location":"COCRDUPC.html","title":"COCRDUPC","text":""},{"location":"COCRDUPC.html#overview","title":"Overview","text":"<p>This program, COCRDUPC, is a business logic component of the CardDemo application that handles credit card detail updates. It provides a CICS transaction interface for users to modify credit card information such as the embossed name, expiration date, and active status. The program follows a structured workflow where it first retrieves card details based on account and card number inputs, displays them to the user, validates any changes made, and then updates the card record in the database after confirmation. It includes comprehensive input validation for all fields, handles various error conditions (such as record locking issues or concurrent updates), and provides appropriate user feedback through status messages. The program integrates with other components of the CardDemo system through a shared communication area and maintains proper transaction integrity using CICS commands for reading, updating, and synchronizing data operations.</p>"},{"location":"COCRDUPC.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COCRDUPC</code></p>"},{"location":"COCRDUPC.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant Main as 0000-MAIN\n    participant ProcessInputs as 1000-PROCESS-INPUTS\n    participant DecideAction as 2000-DECIDE-ACTION\n    participant SendMap as 3000-SEND-MAP\n    participant ReadData as 9000-READ-DATA\n    participant WriteProcessing as 9200-WRITE-PROCESSING\n    participant CICS as CICS System\n\n    User-&gt;&gt;Main: Start transaction\n    activate Main\n\n    Main-&gt;&gt;CICS: HANDLE ABEND\n    Main-&gt;&gt;Main: Initialize working storage\n\n    alt First time entry or from menu\n        Main-&gt;&gt;Main: Initialize commarea\n        Main-&gt;&gt;SendMap: Display initial screen\n        SendMap--&gt;&gt;User: Show search screen\n    else Coming from card list screen\n        Main-&gt;&gt;ReadData: Fetch card details\n        ReadData-&gt;&gt;CICS: READ card file\n        CICS--&gt;&gt;ReadData: Return card data\n        Main-&gt;&gt;SendMap: Display card details\n        SendMap--&gt;&gt;User: Show card details\n    else Processing user input\n        Main-&gt;&gt;ProcessInputs: Process map inputs\n        activate ProcessInputs\n        ProcessInputs-&gt;&gt;CICS: RECEIVE MAP\n        CICS--&gt;&gt;ProcessInputs: Return user input\n        ProcessInputs-&gt;&gt;ProcessInputs: Validate inputs\n        deactivate ProcessInputs\n\n        Main-&gt;&gt;DecideAction: Determine next action\n        activate DecideAction\n\n        alt No details fetched yet\n            DecideAction-&gt;&gt;ReadData: Retrieve card data\n            ReadData-&gt;&gt;CICS: READ card file\n            CICS--&gt;&gt;ReadData: Return card data\n        else Changes made and confirmed\n            DecideAction-&gt;&gt;WriteProcessing: Update card record\n            activate WriteProcessing\n            WriteProcessing-&gt;&gt;CICS: READ with UPDATE\n            CICS--&gt;&gt;WriteProcessing: Return locked record\n            WriteProcessing-&gt;&gt;WriteProcessing: Check for concurrent changes\n            WriteProcessing-&gt;&gt;CICS: REWRITE record\n            CICS--&gt;&gt;WriteProcessing: Update confirmation\n            deactivate WriteProcessing\n        end\n\n        deactivate DecideAction\n\n        Main-&gt;&gt;SendMap: Display appropriate screen\n        SendMap--&gt;&gt;User: Show updated screen\n    end\n\n    alt User pressed PF03 or finished\n        Main-&gt;&gt;CICS: SYNCPOINT\n        Main-&gt;&gt;CICS: XCTL to next program\n    else Continue processing\n        Main-&gt;&gt;CICS: RETURN with commarea\n    end\n\n    deactivate Main</code></pre>"},{"location":"COCRDUPC.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>DFHAID</code></li> <li><code>CVCUS01Y</code></li> <li><code>CVACT01Y</code></li> <li><code>CSUSR01Y</code></li> <li><code>COCOM01Y</code></li> <li><code>CVCRD01Y</code></li> <li><code>CSSTRPFY</code></li> <li><code>DFHBMSCA</code></li> <li><code>CVACT03Y</code></li> <li><code>CVACT02Y</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG02Y</code></li> <li><code>CSMSG01Y</code></li> <li><code>COCRDUP</code></li> </ul>"},{"location":"COCRDUPC.html#environment-division","title":"Environment Division","text":""},{"location":"COCRDUPC.html#input-output-section","title":"INPUT-OUTPUT SECTION","text":"<p>This section would typically contain the INPUT-OUTPUT SECTION of the COCRDUPC program, which would define file assignments and external resources used by the program. However, the provided snippet is empty, suggesting that this program likely doesn't directly interact with physical files but instead relies on CICS commands for data access and manipulation. This is consistent with the program's role as a CICS transaction interface for credit card updates, where data access would be handled through CICS services rather than direct file operations.</p> Code"},{"location":"COCRDUPC.html#data-division","title":"Data Division","text":""},{"location":"COCRDUPC.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This working storage section defines the data structures used in the COCRDUPC program for credit card detail updates. It contains several key components:</p> <ol> <li>CICS processing variables for handling responses and transaction IDs</li> <li>Extensive input validation flags and fields for each card attribute (account number, card number, embossed name, status, expiration date)</li> <li>Data conversion fields for numeric/alphanumeric transformations</li> <li>File handling structures including record identifiers and error message formatting</li> <li>Message construction areas for user feedback, including predefined status messages for various scenarios (success, validation errors, record locking)</li> <li>Program constants and literals defining transaction IDs, program names, mapsets, and valid character sets</li> <li>A program-specific communication area (WS-THIS-PROGCOMMAREA) that maintains both old and new card details to track changes</li> <li>References to numerous copybooks for common structures including card record layouts, screen definitions, date handling, and user information</li> </ol> <p>The section is particularly focused on supporting the validation and update workflow, with comprehensive error handling for all possible input conditions and database operations.</p> Code <pre><code>01  WS-MISC-STORAGE.                                                     \n      ******************************************************************        \n      * General CICS related                                                    \n      ******************************************************************        \n         05 WS-CICS-PROCESSNG-VARS.                                             \n            07 WS-RESP-CD                          PIC S9(09) COMP              \n                                                   VALUE ZEROS.                 \n            07 WS-REAS-CD                          PIC S9(09) COMP              \n                                                   VALUE ZEROS.                 \n            07 WS-TRANID                           PIC X(4)                     \n                                                   VALUE SPACES.                \n            07 WS-UCTRANS                          PIC X(4)                     \n                                                   VALUE SPACES.                \n      ******************************************************************        \n      *      Input edits                                                        \n      ******************************************************************        \n\n         05  WS-INPUT-FLAG                         PIC X(1).                    \n           88  INPUT-OK                            VALUE '0'.                   \n           88  INPUT-ERROR                         VALUE '1'.                   \n           88  INPUT-PENDING                       VALUE LOW-VALUES.            \n         05  WS-EDIT-ACCT-FLAG                     PIC X(1).                    \n           88  FLG-ACCTFILTER-NOT-OK               VALUE '0'.                   \n           88  FLG-ACCTFILTER-ISVALID              VALUE '1'.                   \n           88  FLG-ACCTFILTER-BLANK                VALUE ' '.                   \n         05  WS-EDIT-CARD-FLAG                     PIC X(1).                    \n           88  FLG-CARDFILTER-NOT-OK               VALUE '0'.                   \n           88  FLG-CARDFILTER-ISVALID             VALUE '1'.                    \n           88  FLG-CARDFILTER-BLANK                VALUE ' '.                   \n         05  WS-EDIT-CARDNAME-FLAG                 PIC X(1).                    \n           88  FLG-CARDNAME-NOT-OK                 VALUE '0'.                   \n           88  FLG-CARDNAME-ISVALID                VALUE '1'.                   \n           88  FLG-CARDNAME-BLANK                  VALUE ' '.                   \n         05  WS-EDIT-CARDSTATUS-FLAG              PIC X(1).                     \n           88  FLG-CARDSTATUS-NOT-OK               VALUE '0'.                   \n           88  FLG-CARDSTATUS-ISVALID              VALUE '1'.                   \n           88  FLG-CARDSTATUS-BLANK                VALUE ' '.                   \n         05  WS-EDIT-CARDEXPMON-FLAG              PIC X(1).                     \n           88  FLG-CARDEXPMON-NOT-OK               VALUE '0'.                   \n           88  FLG-CARDEXPMON-ISVALID              VALUE '1'.                   \n           88  FLG-CARDEXPMON-BLANK                VALUE ' '.                   \n         05  WS-EDIT-CARDEXPYEAR-FLAG             PIC X(1).                     \n           88  FLG-CARDEXPYEAR-NOT-OK              VALUE '0'.                   \n           88  FLG-CARDEXPYEAR-ISVALID             VALUE '1'.                   \n           88  FLG-CARDEXPYEAR-BLANK               VALUE ' '.                   \n         05  WS-RETURN-FLAG                        PIC X(1).                    \n           88  WS-RETURN-FLAG-OFF                  VALUE LOW-VALUES.            \n           88  WS-RETURN-FLAG-ON                   VALUE '1'.                   \n         05  WS-PFK-FLAG                           PIC X(1).                    \n           88  PFK-VALID                           VALUE '0'.                   \n           88  PFK-INVALID                         VALUE '1'.                   \n         05  CARD-NAME-CHECK                       PIC X(50)                    \n                                                   VALUE LOW-VALUES.            \n         05  FLG-YES-NO-CHECK                      PIC X(1)                     \n                                                   VALUE 'N'.                   \n           88 FLG-YES-NO-VALID                     VALUES 'Y', 'N'.             \n         05  CARD-MONTH-CHECK                      PIC X(2).                    \n         05  CARD-MONTH-CHECK-N REDEFINES                                       \n             CARD-MONTH-CHECK                      PIC 9(2).                    \n             88 VALID-MONTH                        VALUES 1 THRU 12.            \n         05  CARD-YEAR-CHECK                      PIC X(4).                     \n         05  CARD-YEAR-CHECK-N REDEFINES                                        \n             CARD-YEAR-CHECK                      PIC 9(4).                     \n             88 VALID-YEAR                        VALUES 1950 THRU 2099.        \n      ******************************************************************        \n      * Output edits                                                            \n      ******************************************************************        \n         05 CICS-OUTPUT-EDIT-VARS.                                              \n           10  CARD-ACCT-ID-X                      PIC X(11).                   \n           10  CARD-ACCT-ID-N REDEFINES CARD-ACCT-ID-X                          \n                                                   PIC 9(11).                   \n           10  CARD-CVV-CD-X                       PIC X(03).                   \n           10  CARD-CVV-CD-N REDEFINES  CARD-CVV-CD-X                           \n                                                   PIC 9(03).                   \n           10  CARD-CARD-NUM-X                     PIC X(16).                   \n           10  CARD-CARD-NUM-N REDEFINES  CARD-CARD-NUM-X                       \n                                                   PIC 9(16).                   \n           10  CARD-NAME-EMBOSSED-X                PIC X(50).                   \n           10  CARD-STATUS-X                       PIC X.                       \n           10  CARD-EXPIRAION-DATE-X               PIC X(10).                   \n           10  FILLER REDEFINES CARD-EXPIRAION-DATE-X.                          \n               20 CARD-EXPIRY-YEAR                 PIC X(4).                    \n               20 FILLER                           PIC X(1).                    \n               20 CARD-EXPIRY-MONTH                PIC X(2).                    \n               20 FILLER                           PIC X(1).                    \n               20 CARD-EXPIRY-DAY                  PIC X(2).                    \n           10  CARD-EXPIRAION-DATE-N REDEFINES                                  \n               CARD-EXPIRAION-DATE-X               PIC 9(10).                   \n\n      ******************************************************************        \n      *      File and data Handling                                             \n      ******************************************************************        \n         05  WS-CARD-RID.                                                       \n           10  WS-CARD-RID-CARDNUM                 PIC X(16).                   \n           10  WS-CARD-RID-ACCT-ID                 PIC 9(11).                   \n           10  WS-CARD-RID-ACCT-ID-X REDEFINES                                  \n                  WS-CARD-RID-ACCT-ID              PIC X(11).                   \n         05  WS-FILE-ERROR-MESSAGE.                                             \n           10  FILLER                              PIC X(12)                    \n                                                   VALUE 'File Error: '.        \n           10  ERROR-OPNAME                        PIC X(8)                     \n                                                   VALUE SPACES.                \n           10  FILLER                              PIC X(4)                     \n                                                   VALUE ' on '.                \n           10  ERROR-FILE                          PIC X(9)                     \n                                                   VALUE SPACES.                \n           10  FILLER                              PIC X(15)                    \n                                                   VALUE                        \n                                                   ' returned RESP '.           \n           10  ERROR-RESP                          PIC X(10)                    \n                                                   VALUE SPACES.                \n           10  FILLER                              PIC X(7)                     \n                                                   VALUE ',RESP2 '.             \n           10  ERROR-RESP2                         PIC X(10)                    \n                                                   VALUE SPACES.                \n          10  FILLER                               PIC X(5)                     \n                                                   VALUE SPACES.                \n      ******************************************************************        \n      *      Output Message Construction                                        \n      ******************************************************************        \n         05  WS-LONG-MSG                           PIC X(500).                  \n         05  WS-INFO-MSG                           PIC X(40).                   \n           88  WS-NO-INFO-MESSAGE                 VALUES                        \n                                                  SPACES LOW-VALUES.            \n           88  FOUND-CARDS-FOR-ACCOUNT             VALUE                        \n               'Details of selected card shown above'.                          \n           88  PROMPT-FOR-SEARCH-KEYS              VALUE                        \n               'Please enter Account and Card Number'.                          \n           88  PROMPT-FOR-CHANGES                  VALUE                        \n               'Update card details presented above.'.                          \n           88  PROMPT-FOR-CONFIRMATION             VALUE                        \n               'Changes validated.Press F5 to save'.                            \n           88  CONFIRM-UPDATE-SUCCESS              VALUE                        \n               'Changes committed to database'.                                 \n           88  INFORM-FAILURE                      VALUE                        \n               'Changes unsuccessful. Please try again'.                        \n\n         05  WS-RETURN-MSG                         PIC X(75).                   \n           88  WS-RETURN-MSG-OFF                   VALUE SPACES.                \n           88  WS-EXIT-MESSAGE                     VALUE                        \n               'PF03 pressed.Exiting              '.                            \n           88  WS-PROMPT-FOR-ACCT                  VALUE                        \n               'Account number not provided'.                                   \n           88  WS-PROMPT-FOR-CARD                  VALUE                        \n               'Card number not provided'.                                      \n           88  WS-PROMPT-FOR-NAME                  VALUE                        \n               'Card name not provided'.                                        \n           88  WS-NAME-MUST-BE-ALPHA               VALUE                        \n               'Card name can only contain alphabets and spaces'.               \n           88  NO-SEARCH-CRITERIA-RECEIVED         VALUE                        \n               'No input received'.                                             \n           88  NO-CHANGES-DETECTED                 VALUE                        \n               'No change detected with respect to values fetched.'.            \n           88  SEARCHED-ACCT-ZEROES                VALUE                        \n               'Account number must be a non zero 11 digit number'.             \n           88  SEARCHED-ACCT-NOT-NUMERIC           VALUE                        \n               'Account number must be a non zero 11 digit number'.             \n           88  SEARCHED-CARD-NOT-NUMERIC           VALUE                        \n               'Card number if supplied must be a 16 digit number'.             \n           88  CARD-STATUS-MUST-BE-YES-NO          VALUE                        \n               'Card Active Status must be Y or N'.                             \n           88  CARD-EXPIRY-MONTH-NOT-VALID          VALUE                       \n               'Card expiry month must be between 1 and 12'.                    \n           88  CARD-EXPIRY-YEAR-NOT-VALID          VALUE                        \n               'Invalid card expiry year'.                                      \n           88  DID-NOT-FIND-ACCT-IN-CARDXREF       VALUE                        \n               'Did not find this account in cards database'.                   \n           88  DID-NOT-FIND-ACCTCARD-COMBO         VALUE                        \n               'Did not find cards for this search condition'.                  \n           88  COULD-NOT-LOCK-FOR-UPDATE           VALUE                        \n               'Could not lock record for update'.                              \n           88  DATA-WAS-CHANGED-BEFORE-UPDATE      VALUE                        \n               'Record changed by some one else. Please review'.                \n           88  LOCKED-BUT-UPDATE-FAILED            VALUE                        \n               'Update of record failed'.                                       \n           88  XREF-READ-ERROR                     VALUE                        \n               'Error reading Card Data File'.                                  \n           88  CODING-TO-BE-DONE                   VALUE                        \n               'Looks Good.... so far'.                                         \n      ******************************************************************        \n      *      Literals and Constants                                             \n      ******************************************************************        \n       01 WS-LITERALS.                                                          \n          05 LIT-THISPGM                           PIC X(8)                     \n                                                   VALUE 'COCRDUPC'.            \n          05 LIT-THISTRANID                        PIC X(4)                     \n                                                   VALUE 'CCUP'.                \n          05 LIT-THISMAPSET                        PIC X(8)                     \n                                                   VALUE 'COCRDUP '.            \n          05 LIT-THISMAP                           PIC X(7)                     \n                                                   VALUE 'CCRDUPA'.             \n          05 LIT-CCLISTPGM                         PIC X(8)                     \n                                                   VALUE 'COCRDLIC'.            \n          05 LIT-CCLISTTRANID                      PIC X(4)                     \n                                                   VALUE 'CCLI'.                \n          05 LIT-CCLISTMAPSET                      PIC X(7)                     \n                                                   VALUE 'COCRDLI'.             \n          05 LIT-CCLISTMAP                         PIC X(7)                     \n                                                   VALUE 'CCRDSLA'.             \n          05 LIT-MENUPGM                           PIC X(8)                     \n                                                   VALUE 'COMEN01C'.            \n          05 LIT-MENUTRANID                        PIC X(4)                     \n                                                   VALUE 'CM00'.                \n          05 LIT-MENUMAPSET                        PIC X(7)                     \n                                                   VALUE 'COMEN01'.             \n          05 LIT-MENUMAP                           PIC X(7)                     \n                                                   VALUE 'COMEN1A'.             \n          05  LIT-CARDDTLPGM                       PIC X(8)                     \n                                                   VALUE 'COCRDSLC'.            \n          05  LIT-CARDDTLTRANID                    PIC X(4)                     \n                                                   VALUE 'CCDL'.                \n          05  LIT-CARDDTLMAPSET                    PIC X(7)                     \n                                                   VALUE 'COCRDSL'.             \n          05  LIT-CARDDTLMAP                       PIC X(7)                     \n                                                   VALUE 'CCRDSLA'.             \n          05 LIT-CARDFILENAME                      PIC X(8)                     \n                                                   VALUE 'CARDDAT '.            \n          05 LIT-CARDFILENAME-ACCT-PATH            PIC X(8)                     \n                                                   VALUE 'CARDAIX '.            \n          05 LIT-ALL-ALPHA-FROM                    PIC X(52)                    \n             VALUE                                                              \n             'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.            \n          05 LIT-ALL-SPACES-TO                     PIC X(52)                    \n                                                   VALUE SPACES.                \n          05 LIT-UPPER                             PIC X(26)                    \n                                 VALUE 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.            \n          05 LIT-LOWER                             PIC X(26)                    \n                                 VALUE 'abcdefghijklmnopqrstuvwxyz'.            \n\n      ******************************************************************        \n      *Other common working storage Variables                                   \n      ******************************************************************        \n       COPY CVCRD01Y.                                                           \n\n      ******************************************************************        \n      *Application Commmarea Copybook                                           \n       COPY COCOM01Y.                                                           \n\n       01 WS-THIS-PROGCOMMAREA.                                                 \n          05 CARD-UPDATE-SCREEN-DATA.                                           \n             10 CCUP-CHANGE-ACTION                 PIC X(1)                     \n                                                   VALUE LOW-VALUES.            \n                88 CCUP-DETAILS-NOT-FETCHED        VALUES                       \n                                                   LOW-VALUES,                  \n                                                   SPACES.                      \n                88 CCUP-SHOW-DETAILS               VALUE 'S'.                   \n                88 CCUP-CHANGES-MADE               VALUES 'E', 'N'              \n                                                        , 'C', 'L'              \n                                                        , 'F'.                  \n                88 CCUP-CHANGES-NOT-OK             VALUE 'E'.                   \n                88 CCUP-CHANGES-OK-NOT-CONFIRMED   VALUE 'N'.                   \n                88 CCUP-CHANGES-OKAYED-AND-DONE    VALUE 'C'.                   \n                88 CCUP-CHANGES-FAILED             VALUES 'L', 'F'.             \n                88 CCUP-CHANGES-OKAYED-LOCK-ERROR  VALUE 'L'.                   \n                88 CCUP-CHANGES-OKAYED-BUT-FAILED  VALUE 'F'.                   \n          05 CCUP-OLD-DETAILS.                                                  \n             10 CCUP-OLD-ACCTID                    PIC X(11).                   \n             10 CCUP-OLD-CARDID                    PIC X(16).                   \n             10 CCUP-OLD-CVV-CD                    PIC X(3).                    \n             10 CCUP-OLD-CARDDATA.                                              \n                20 CCUP-OLD-CRDNAME                PIC X(50).                   \n                20 CCUP-OLD-EXPIRAION-DATE.                                     \n                   25 CCUP-OLD-EXPYEAR             PIC X(4).                    \n                   25 CCUP-OLD-EXPMON              PIC X(2).                    \n                   25 CCUP-OLD-EXPDAY              PIC X(2).                    \n                20 CCUP-OLD-CRDSTCD                PIC X(1).                    \n\n          05 CCUP-NEW-DETAILS.                                                  \n             10 CCUP-NEW-ACCTID                    PIC X(11).                   \n             10 CCUP-NEW-CARDID                    PIC X(16).                   \n             10 CCUP-NEW-CVV-CD                    PIC X(3).                    \n             10 CCUP-NEW-CARDDATA.                                              \n                20 CCUP-NEW-CRDNAME                PIC X(50).                   \n                20 CCUP-NEW-EXPIRAION-DATE.                                     \n                   25 CCUP-NEW-EXPYEAR             PIC X(4).                    \n                   25 CCUP-NEW-EXPMON              PIC X(2).                    \n                   25 CCUP-NEW-EXPDAY              PIC X(2).                    \n                20 CCUP-NEW-CRDSTCD                PIC X(1).                    \n          05 CARD-UPDATE-RECORD.                                                \n             10 CARD-UPDATE-NUM                   PIC X(16).                    \n             10 CARD-UPDATE-ACCT-ID               PIC 9(11).                    \n             10 CARD-UPDATE-CVV-CD                PIC 9(03).                    \n             10 CARD-UPDATE-EMBOSSED-NAME         PIC X(50).                    \n             10 CARD-UPDATE-EXPIRAION-DATE        PIC X(10).                    \n             10 CARD-UPDATE-ACTIVE-STATUS         PIC X(01).                    \n             10 FILLER                            PIC X(59).                    \n\n\n       01  WS-COMMAREA                             PIC X(2000).                 \n\n      *IBM SUPPLIED COPYBOOKS                                                   \n       COPY DFHBMSCA.                                                           \n       COPY DFHAID.                                                             \n\n      *COMMON COPYBOOKS                                                         \n      *Screen Titles                                                            \n       COPY COTTL01Y.                                                           \n      *Credit Card Update Screen Layout                                         \n       COPY COCRDUP.                                                            \n\n      *Current Date                                                             \n       COPY CSDAT01Y.                                                           \n\n      *Common Messages                                                          \n       COPY CSMSG01Y.                                                           \n\n      *Abend Variables                                                          \n       COPY CSMSG02Y.                                                           \n\n      *Signed on user data                                                      \n       COPY CSUSR01Y.                                                           \n\n      *Dataset layouts                                                          \n      *ACCOUNT RECORD LAYOUT                                                    \n      *COPY CVACT01Y.                                                           \n\n      *CARD RECORD LAYOUT                                                       \n       COPY CVACT02Y.                                                           \n\n      *CARD XREF LAYOUT                                                         \n      *COPY CVACT03Y.                                                           \n\n      *CUSTOMER LAYOUT                                                          \n       COPY CVCUS01Y.\n</code></pre>"},{"location":"COCRDUPC.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This linkage section defines the DFHCOMMAREA structure used for communication between CICS programs. It contains a single field defined as a variable-length array of 1-byte elements that can expand from 1 to 32,767 bytes depending on the actual length passed in EIBCALEN (CICS Executive Interface Block Communication Area Length). This flexible structure allows the program to receive and process communication areas of different sizes from calling programs within the CardDemo credit card update functionality.</p> Code <pre><code>01  DFHCOMMAREA.                                                         \n         05  FILLER                                PIC X(1)                     \n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n</code></pre>"},{"location":"COCRDUPC.html#procedure-division","title":"Procedure Division","text":""},{"location":"COCRDUPC.html#0000-main","title":"0000-MAIN","text":"<p>This paragraph serves as the main control flow for the COCRDUPC program, handling the credit card update functionality. It initializes working storage, establishes error handling, and manages program state through a commarea. The paragraph processes user navigation through various program states by evaluating PF keys and program conditions. Key functions include: handling program exit (PF03), retrieving card details when coming from the card list screen (PF12), presenting initial entry screens, processing user inputs after card details are displayed, and managing the workflow between data entry, validation, and confirmation states. The code maintains context between screens by preserving program state in the commarea and handles transaction integrity with CICS SYNCPOINT commands when exiting to other programs.</p> Code <pre><code>EXEC CICS HANDLE ABEND                                               \n                     LABEL(ABEND-ROUTINE)                                       \n           END-EXEC                                                             \n\n           INITIALIZE CC-WORK-AREA                                              \n                      WS-MISC-STORAGE                                           \n                      WS-COMMAREA                                               \n      *****************************************************************         \n      * Store our context                                                       \n      *****************************************************************         \n           MOVE LIT-THISTRANID       TO WS-TRANID                               \n      *****************************************************************         \n      * Ensure error message is cleared                               *         \n      *****************************************************************         \n           SET WS-RETURN-MSG-OFF  TO TRUE                                       \n      *****************************************************************         \n      * Store passed data if  any                *                              \n      *****************************************************************         \n           IF EIBCALEN IS EQUAL TO 0                                            \n               OR (CDEMO-FROM-PROGRAM = LIT-MENUPGM                             \n               AND NOT CDEMO-PGM-REENTER)                                       \n              INITIALIZE CARDDEMO-COMMAREA                                      \n                         WS-THIS-PROGCOMMAREA                                   \n              SET CDEMO-PGM-ENTER TO TRUE                                       \n              SET CCUP-DETAILS-NOT-FETCHED TO TRUE                              \n           ELSE                                                                 \n              MOVE DFHCOMMAREA (1:LENGTH OF CARDDEMO-COMMAREA)  TO              \n                                CARDDEMO-COMMAREA                               \n              MOVE DFHCOMMAREA(LENGTH OF CARDDEMO-COMMAREA + 1:                 \n                               LENGTH OF WS-THIS-PROGCOMMAREA ) TO              \n                                WS-THIS-PROGCOMMAREA                            \n           END-IF                                                               \n      *****************************************************************         \n      * Remap PFkeys as needed.                                                 \n      * Store the Mapped PF Key                                                 \n      *****************************************************************         \n           PERFORM YYYY-STORE-PFKEY                                             \n              THRU YYYY-STORE-PFKEY-EXIT                                        \n      *****************************************************************         \n      * Check the AID to see if its valid at this point               *         \n      * F3 - Exit                                                               \n      * Enter show screen again                                                 \n      *****************************************************************         \n           SET PFK-INVALID TO TRUE                                              \n           IF CCARD-AID-ENTER OR                                                \n              CCARD-AID-PFK03 OR                                                \n              (CCARD-AID-PFK05 AND CCUP-CHANGES-OK-NOT-CONFIRMED)               \n                              OR                                                \n              (CCARD-AID-PFK12 AND NOT CCUP-DETAILS-NOT-FETCHED)                \n              SET PFK-VALID TO TRUE                                             \n           END-IF                                                               \n\n           IF PFK-INVALID                                                       \n              SET CCARD-AID-ENTER TO TRUE                                       \n           END-IF                                                               \n\n      *****************************************************************         \n      * Decide what to do based on inputs received                              \n      *****************************************************************         \n           EVALUATE TRUE                                                        \n      ******************************************************************        \n      *       USER PRESSES PF03 TO EXIT                                         \n      *  OR   USER IS DONE WITH UPDATE                                          \n      *            XCTL TO CALLING PROGRAM OR MAIN MENU                         \n      ******************************************************************        \n              WHEN CCARD-AID-PFK03                                              \n              WHEN (CCUP-CHANGES-OKAYED-AND-DONE                                \n               AND  CDEMO-LAST-MAPSET   EQUAL LIT-CCLISTMAPSET)                 \n              WHEN (CCUP-CHANGES-FAILED                                         \n               AND  CDEMO-LAST-MAPSET   EQUAL LIT-CCLISTMAPSET)                 \n                   SET CCARD-AID-PFK03     TO TRUE                              \n\n                   IF CDEMO-FROM-TRANID    EQUAL LOW-VALUES                     \n                   OR CDEMO-FROM-TRANID    EQUAL SPACES                         \n                      MOVE LIT-MENUTRANID  TO CDEMO-TO-TRANID                   \n                   ELSE                                                         \n                      MOVE CDEMO-FROM-TRANID  TO CDEMO-TO-TRANID                \n                   END-IF                                                       \n\n                   IF CDEMO-FROM-PROGRAM   EQUAL LOW-VALUES                     \n                   OR CDEMO-FROM-PROGRAM   EQUAL SPACES                         \n                      MOVE LIT-MENUPGM     TO CDEMO-TO-PROGRAM                  \n                   ELSE                                                         \n                      MOVE CDEMO-FROM-PROGRAM TO CDEMO-TO-PROGRAM               \n                   END-IF                                                       \n\n                   MOVE LIT-THISTRANID     TO CDEMO-FROM-TRANID                 \n                   MOVE LIT-THISPGM        TO CDEMO-FROM-PROGRAM                \n\n                   IF CDEMO-LAST-MAPSET    EQUAL LIT-CCLISTMAPSET               \n                       MOVE ZEROS          TO CDEMO-ACCT-ID                     \n                                              CDEMO-CARD-NUM                    \n                   END-IF                                                       \n\n                   SET  CDEMO-USRTYP-USER  TO TRUE                              \n                   SET  CDEMO-PGM-ENTER    TO TRUE                              \n                   MOVE LIT-THISMAPSET     TO CDEMO-LAST-MAPSET                 \n                   MOVE LIT-THISMAP        TO CDEMO-LAST-MAP                    \n\n                   EXEC CICS                                                    \n                        SYNCPOINT                                               \n                   END-EXEC                                                     \n      *                                                                         \n                   EXEC CICS XCTL                                               \n                        PROGRAM (CDEMO-TO-PROGRAM)                              \n                        COMMAREA(CARDDEMO-COMMAREA)                             \n                   END-EXEC                                                     \n      ******************************************************************        \n      *       USER CAME FROM CREDIT CARD LIST SCREEN                            \n      *            SO WE ALREADY HAVE THE FILTER KEYS                           \n      *            FETCH THE ASSSOCIATED CARD DETAILS FOR UPDATE                \n      ******************************************************************        \n              WHEN CDEMO-PGM-ENTER                                              \n               AND CDEMO-FROM-PROGRAM  EQUAL LIT-CCLISTPGM                      \n              WHEN CCARD-AID-PFK12                                              \n               AND CDEMO-FROM-PROGRAM  EQUAL LIT-CCLISTPGM                      \n                   SET CDEMO-PGM-REENTER    TO TRUE                             \n                   SET INPUT-OK             TO TRUE                             \n                   SET FLG-ACCTFILTER-ISVALID  TO TRUE                          \n                   SET FLG-CARDFILTER-ISVALID  TO TRUE                          \n                   MOVE CDEMO-ACCT-ID       TO CC-ACCT-ID-N                     \n                   MOVE CDEMO-CARD-NUM      TO CC-CARD-NUM-N                    \n                   PERFORM 9000-READ-DATA                                       \n                      THRU 9000-READ-DATA-EXIT                                  \n                   SET CCUP-SHOW-DETAILS TO TRUE                                \n                   PERFORM 3000-SEND-MAP                                        \n                      THRU 3000-SEND-MAP-EXIT                                   \n                   GO TO COMMON-RETURN                                          \n      ******************************************************************        \n      *       FRESH ENTRY INTO PROGRAM                                          \n      *            ASK THE USER FOR THE KEYS TO FETCH CARD TO BE UPDATED        \n      ******************************************************************        \n              WHEN CCUP-DETAILS-NOT-FETCHED                                     \n               AND CDEMO-PGM-ENTER                                              \n              WHEN CDEMO-FROM-PROGRAM   EQUAL LIT-MENUPGM                       \n               AND NOT CDEMO-PGM-REENTER                                        \n                   INITIALIZE WS-THIS-PROGCOMMAREA                              \n                   PERFORM 3000-SEND-MAP THRU                                   \n                           3000-SEND-MAP-EXIT                                   \n                   SET CDEMO-PGM-REENTER        TO TRUE                         \n                   SET CCUP-DETAILS-NOT-FETCHED TO TRUE                         \n                   GO TO COMMON-RETURN                                          \n      ******************************************************************        \n      *       CARD DATA CHANGES REVIEWED, OKAYED AND DONE SUCESSFULLY           \n      *            RESET THE SEARCH KEYS                                        \n      *            ASK THE USER FOR FRESH SEARCH CRITERIA                       \n      ******************************************************************        \n              WHEN CCUP-CHANGES-OKAYED-AND-DONE                                 \n              WHEN CCUP-CHANGES-FAILED                                          \n                   INITIALIZE WS-THIS-PROGCOMMAREA                              \n                              WS-MISC-STORAGE                                   \n                              CDEMO-ACCT-ID                                     \n                              CDEMO-CARD-NUM                                    \n                   SET CDEMO-PGM-ENTER            TO TRUE                       \n                   PERFORM 3000-SEND-MAP THRU                                   \n                           3000-SEND-MAP-EXIT                                   \n                   SET CDEMO-PGM-REENTER          TO TRUE                       \n                   SET CCUP-DETAILS-NOT-FETCHED   TO TRUE                       \n                   GO TO COMMON-RETURN                                          \n      ******************************************************************        \n      *      CARD DATA HAS BEEN PRESENTED TO USER                               \n      *            CHECK THE USER INPUTS                                        \n      *            DECIDE WHAT TO DO                                            \n      *            PRESENT NEXT STEPS TO USER                                   \n      ******************************************************************        \n              WHEN OTHER                                                        \n                   PERFORM 1000-PROCESS-INPUTS                                  \n                      THRU 1000-PROCESS-INPUTS-EXIT                             \n                   PERFORM 2000-DECIDE-ACTION                                   \n                      THRU 2000-DECIDE-ACTION-EXIT                              \n                   PERFORM 3000-SEND-MAP                                        \n                      THRU 3000-SEND-MAP-EXIT                                   \n                   GO TO COMMON-RETURN                                          \n           END-EVALUATE                                                         \n           .\n</code></pre>"},{"location":"COCRDUPC.html#common-return","title":"COMMON-RETURN","text":"<p>This paragraph handles the program's return logic by first copying the return message to the error message field in the communication area. It then preserves both the common CardDemo communication area and this program's specific communication area by concatenating them together into a combined working storage area. Finally, it executes a CICS RETURN command that maintains the same transaction ID and passes back the combined communication area, ensuring that both shared and program-specific data are preserved for the next program invocation.</p> Code <pre><code>MOVE WS-RETURN-MSG     TO CCARD-ERROR-MSG                            \n\n           MOVE  CARDDEMO-COMMAREA    TO WS-COMMAREA                            \n           MOVE  WS-THIS-PROGCOMMAREA TO                                        \n                  WS-COMMAREA(LENGTH OF CARDDEMO-COMMAREA + 1:                  \n                               LENGTH OF WS-THIS-PROGCOMMAREA )                 \n\n           EXEC CICS RETURN                                                     \n                TRANSID (LIT-THISTRANID)                                        \n                COMMAREA (WS-COMMAREA)                                          \n                LENGTH(LENGTH OF WS-COMMAREA)                                   \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COCRDUPC.html#0000-main-exit","title":"0000-MAIN-EXIT","text":"<p>This paragraph serves as the exit point for the program. It's a simple termination point that marks the end of a processing section, allowing control to return to the calling routine. This is a standard COBOL structural element used to properly end program flow in the credit card update process.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1000-process-inputs","title":"1000-PROCESS-INPUTS","text":"<p>This paragraph orchestrates the initial input processing workflow for the credit card update transaction. It first calls the 1100-RECEIVE-MAP paragraph to retrieve user input from the screen, then performs validation of the input data through the 1200-EDIT-MAP-INPUTS paragraph. After validation, it captures any error messages in the communication area and sets up the program flow to return to the same screen by configuring the next program, mapset, and map names to the current ones. This ensures proper handling of input errors by returning the user to the same screen with appropriate feedback.</p> Code <pre><code>PERFORM 1100-RECEIVE-MAP                                             \n              THRU 1100-RECEIVE-MAP-EXIT                                        \n           PERFORM 1200-EDIT-MAP-INPUTS                                         \n              THRU 1200-EDIT-MAP-INPUTS-EXIT                                    \n           MOVE WS-RETURN-MSG  TO CCARD-ERROR-MSG                               \n           MOVE LIT-THISPGM    TO CCARD-NEXT-PROG                               \n           MOVE LIT-THISMAPSET TO CCARD-NEXT-MAPSET                             \n           MOVE LIT-THISMAP    TO CCARD-NEXT-MAP                                \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1000-process-inputs-exit","title":"1000-PROCESS-INPUTS-EXIT","text":"<p>This paragraph serves as an exit point for the 1000-PROCESS-INPUTS section of the COCRDUPC program. It marks the end of the input processing logic for credit card detail updates, allowing the program flow to return to the calling section after input validation and processing has been completed.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1100-receive-map","title":"1100-RECEIVE-MAP","text":"<p>This paragraph receives user input from a CICS map and processes it for credit card updates. It first executes a CICS RECEIVE command to capture the data entered by the user into the CCRDUPAI structure. The paragraph then initializes the CCUP-NEW-DETAILS structure and processes each input field from the map. For each field (account ID, card number, card name, status code, and expiration date components), it applies consistent validation logic - if the field contains an asterisk or spaces, it's replaced with LOW-VALUES; otherwise, the entered value is stored. The paragraph handles both identification fields (account and card numbers) by storing them in both the CC fields (likely for record lookup) and the CCUP-NEW fields (for update processing). This ensures proper handling of user inputs before validation and database update operations occur in subsequent paragraphs.</p> Code <pre><code>EXEC CICS RECEIVE MAP(LIT-THISMAP)                                   \n                     MAPSET(LIT-THISMAPSET)                                     \n                     INTO(CCRDUPAI)                                             \n                     RESP(WS-RESP-CD)                                           \n                     RESP2(WS-REAS-CD)                                          \n           END-EXEC                                                             \n\n           INITIALIZE CCUP-NEW-DETAILS                                          \n\n      *    REPLACE * WITH LOW-VALUES                                            \n           IF  ACCTSIDI OF CCRDUPAI = '*'                                       \n           OR  ACCTSIDI OF CCRDUPAI = SPACES                                    \n               MOVE LOW-VALUES           TO  CC-ACCT-ID                         \n                                             CCUP-NEW-ACCTID                    \n           ELSE                                                                 \n               MOVE ACCTSIDI OF CCRDUPAI TO  CC-ACCT-ID                         \n                                             CCUP-NEW-ACCTID                    \n           END-IF                                                               \n\n           IF  CARDSIDI OF CCRDUPAI = '*'                                       \n           OR  CARDSIDI OF CCRDUPAI = SPACES                                    \n               MOVE LOW-VALUES           TO  CC-CARD-NUM                        \n                                             CCUP-NEW-CARDID                    \n           ELSE                                                                 \n               MOVE CARDSIDI OF CCRDUPAI TO  CC-CARD-NUM                        \n                                             CCUP-NEW-CARDID                    \n           END-IF                                                               \n\n           IF  CRDNAMEI OF CCRDUPAI = '*'                                       \n           OR  CRDNAMEI OF CCRDUPAI = SPACES                                    \n               MOVE LOW-VALUES           TO  CCUP-NEW-CRDNAME                   \n           ELSE                                                                 \n               MOVE CRDNAMEI OF CCRDUPAI TO  CCUP-NEW-CRDNAME                   \n           END-IF                                                               \n\n           IF  CRDSTCDI OF CCRDUPAI = '*'                                       \n           OR  CRDSTCDI OF CCRDUPAI = SPACES                                    \n               MOVE LOW-VALUES           TO  CCUP-NEW-CRDSTCD                   \n           ELSE                                                                 \n               MOVE CRDSTCDI OF CCRDUPAI TO  CCUP-NEW-CRDSTCD                   \n           END-IF                                                               \n\n           MOVE EXPDAYI     OF CCRDUPAI  TO  CCUP-NEW-EXPDAY                    \n\n           IF  EXPMONI OF CCRDUPAI = '*'                                        \n           OR  EXPMONI OF CCRDUPAI = SPACES                                     \n               MOVE LOW-VALUES           TO  CCUP-NEW-EXPMON                    \n           ELSE                                                                 \n               MOVE EXPMONI OF CCRDUPAI  TO  CCUP-NEW-EXPMON                    \n           END-IF                                                               \n\n           IF  EXPYEARI OF CCRDUPAI = '*'                                       \n           OR  EXPYEARI OF CCRDUPAI = SPACES                                    \n               MOVE LOW-VALUES           TO  CCUP-NEW-EXPYEAR                   \n           ELSE                                                                 \n               MOVE EXPYEARI OF CCRDUPAI TO  CCUP-NEW-EXPYEAR                   \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1100-receive-map-exit","title":"1100-RECEIVE-MAP-EXIT","text":"<p>This paragraph serves as an exit point for the 1100-RECEIVE-MAP section of the COCRDUPC program. It marks the end of the map receiving process where user input from the CICS screen is captured for credit card update operations. The paragraph contains only the EXIT statement followed by a period, indicating a clean termination point for this processing section before control is passed to the next logical section in the program flow.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1200-edit-map-inputs","title":"1200-EDIT-MAP-INPUTS","text":"<p>This paragraph handles the validation of user inputs when updating credit card details. It first checks if card details have been fetched yet. If not, it validates only the search criteria (account and card numbers) and exits. If card details have already been fetched, it copies the existing card data to working fields and checks if any changes were made by comparing the new data with the original data. When changes are detected and not yet confirmed or processed, it performs validation on each editable field: embossed name, card status, expiration month, and expiration year through separate validation routines. Based on validation results, it either marks the input as having errors or sets a flag indicating changes are valid but not yet confirmed. The paragraph maintains the state of the update process through various status flags to ensure proper workflow progression.</p> Code <pre><code>SET INPUT-OK                  TO TRUE                                \n\n           IF  CCUP-DETAILS-NOT-FETCHED                                         \n      *        VALIDATE THE SEARCH KEYS                                         \n               PERFORM 1210-EDIT-ACCOUNT                                        \n                  THRU 1210-EDIT-ACCOUNT-EXIT                                   \n\n               PERFORM 1220-EDIT-CARD                                           \n                  THRU 1220-EDIT-CARD-EXIT                                      \n\n               MOVE LOW-VALUES                 TO CCUP-NEW-CARDDATA             \n\n      *       IF THE SEARCH CONDITIONS HAVE PROBLEMS SKIP OTHER EDITS           \n               IF  FLG-ACCTFILTER-BLANK                                         \n               AND FLG-CARDFILTER-BLANK                                         \n                   SET NO-SEARCH-CRITERIA-RECEIVED TO TRUE                      \n               END-IF                                                           \n\n               GO TO 1200-EDIT-MAP-INPUTS-EXIT                                  \n\n           ELSE                                                                 \n               CONTINUE                                                         \n           END-IF                                                               \n\n      *    SEARCH KEYS ALREADY VALIDATED AND DATA FETCHED                       \n           SET FOUND-CARDS-FOR-ACCOUNT TO TRUE                                  \n           SET FLG-ACCTFILTER-ISVALID  TO TRUE                                  \n           SET FLG-CARDFILTER-ISVALID  TO TRUE                                  \n           MOVE CCUP-OLD-ACCTID     TO CDEMO-ACCT-ID                            \n           MOVE CCUP-OLD-CARDID     TO CDEMO-CARD-NUM                           \n           MOVE CCUP-OLD-CRDNAME    TO CARD-EMBOSSED-NAME                       \n           MOVE CCUP-OLD-CRDSTCD    TO CARD-ACTIVE-STATUS                       \n           MOVE CCUP-OLD-EXPDAY     TO CARD-EXPIRY-DAY                          \n           MOVE CCUP-OLD-EXPMON     TO CARD-EXPIRY-MONTH                        \n           MOVE CCUP-OLD-EXPYEAR    TO CARD-EXPIRY-YEAR                         \n\n      *    NEW DATA IS SAME AS OLD DATA                                         \n           IF  (FUNCTION UPPER-CASE(CCUP-NEW-CARDDATA) EQUAL                    \n                FUNCTION UPPER-CASE(CCUP-OLD-CARDDATA))                         \n               SET NO-CHANGES-DETECTED TO TRUE                                  \n           END-IF                                                               \n\n           IF  NO-CHANGES-DETECTED                                              \n           OR  CCUP-CHANGES-OK-NOT-CONFIRMED                                    \n           OR  CCUP-CHANGES-OKAYED-AND-DONE                                     \n               SET FLG-CARDNAME-ISVALID    TO TRUE                              \n               SET FLG-CARDSTATUS-ISVALID  TO TRUE                              \n               SET FLG-CARDEXPMON-ISVALID  TO TRUE                              \n               SET FLG-CARDEXPYEAR-ISVALID TO TRUE                              \n               GO TO 1200-EDIT-MAP-INPUTS-EXIT                                  \n           END-IF                                                               \n\n\n           SET CCUP-CHANGES-NOT-OK    TO TRUE                                   \n\n           PERFORM 1230-EDIT-NAME                                               \n              THRU 1230-EDIT-NAME-EXIT                                          \n\n           PERFORM 1240-EDIT-CARDSTATUS                                         \n              THRU 1240-EDIT-CARDSTATUS-EXIT                                    \n\n           PERFORM 1250-EDIT-EXPIRY-MON                                         \n              THRU 1250-EDIT-EXPIRY-MON-EXIT                                    \n\n           PERFORM 1260-EDIT-EXPIRY-YEAR                                        \n              THRU 1260-EDIT-EXPIRY-YEAR-EXIT                                   \n\n           IF INPUT-ERROR                                                       \n              CONTINUE                                                          \n           ELSE                                                                 \n              SET CCUP-CHANGES-OK-NOT-CONFIRMED TO TRUE                         \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1200-edit-map-inputs-exit","title":"1200-EDIT-MAP-INPUTS-EXIT","text":"<p>This paragraph serves as an exit point for the 1200-EDIT-MAP-INPUTS routine. It provides a clean termination point for the input validation logic, allowing the program to return control to the calling section after completing the validation of user inputs from the map.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1210-edit-account","title":"1210-EDIT-ACCOUNT","text":"<p>This paragraph validates the account ID input field for credit card updates. It first checks if the account ID is empty (spaces, low-values, or zeros) and sets appropriate error flags while prompting the user for an account if necessary. If an account ID is provided, it verifies that the value is numeric and 11 digits long. When validation fails, it clears the account ID fields and sets error indicators. Upon successful validation, it copies the account ID to the required program variables and marks the account filter as valid. The paragraph maintains error status flags and conditional messaging to guide the user through proper account ID entry.</p> Code <pre><code>SET FLG-ACCTFILTER-NOT-OK TO TRUE                                    \n\n      *    Not supplied                                                         \n           IF CC-ACCT-ID   EQUAL LOW-VALUES                                     \n           OR CC-ACCT-ID   EQUAL SPACES                                         \n           OR CC-ACCT-ID-N EQUAL ZEROS                                          \n              SET INPUT-ERROR           TO TRUE                                 \n              SET FLG-ACCTFILTER-BLANK  TO TRUE                                 \n              IF WS-RETURN-MSG-OFF                                              \n                 SET WS-PROMPT-FOR-ACCT TO TRUE                                 \n              END-IF                                                            \n              MOVE ZEROES       TO CDEMO-ACCT-ID                                \n              MOVE LOW-VALUES   TO CCUP-NEW-ACCTID                              \n              GO TO  1210-EDIT-ACCOUNT-EXIT                                     \n           END-IF                                                               \n      *                                                                         \n      *    Not numeric                                                          \n      *    Not 11 characters                                                    \n           IF CC-ACCT-ID  IS NOT NUMERIC                                        \n              SET INPUT-ERROR TO TRUE                                           \n              SET FLG-ACCTFILTER-NOT-OK TO TRUE                                 \n              IF WS-RETURN-MSG-OFF                                              \n                MOVE                                                            \n              'ACCOUNT FILTER,IF SUPPLIED MUST BE A 11 DIGIT NUMBER'            \n                              TO WS-RETURN-MSG                                  \n              END-IF                                                            \n              MOVE ZERO       TO CDEMO-ACCT-ID                                  \n              MOVE LOW-VALUES TO CCUP-NEW-ACCTID                                \n              GO TO 1210-EDIT-ACCOUNT-EXIT                                      \n           ELSE                                                                 \n              MOVE CC-ACCT-ID TO CDEMO-ACCT-ID                                  \n                                 CCUP-NEW-ACCTID                                \n              SET FLG-ACCTFILTER-ISVALID TO TRUE                                \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1210-edit-account-exit","title":"1210-EDIT-ACCOUNT-EXIT","text":"<p>This paragraph serves as an exit point for the account editing process. It's a simple paragraph marker that allows the program to return control to the calling routine after completing the account validation logic.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1220-edit-card","title":"1220-EDIT-CARD","text":"<p>This paragraph validates the credit card number input during the card update process. It performs several checks: first, it verifies if the card number was provided at all (checking for spaces, low-values, or zeros). If the card number is missing, it sets appropriate error flags, clears the card number fields, and prompts the user for input if messaging is enabled. If a card number is provided, it validates that the input is numeric and 16 digits long. When validation fails, it sets error flags, displays an error message if messaging is enabled, and clears the card number fields. When validation succeeds, it moves the card number to the appropriate program variables and sets a flag indicating the card number is valid. The paragraph is part of the input validation workflow that ensures data integrity before proceeding with card updates.</p> Code <pre><code>*    Not numeric                                                          \n      *    Not 16 characters                                                    \n           SET FLG-CARDFILTER-NOT-OK TO TRUE                                    \n\n      *    Not supplied                                                         \n           IF CC-CARD-NUM   EQUAL LOW-VALUES                                    \n           OR CC-CARD-NUM   EQUAL SPACES                                        \n           OR CC-CARD-NUM-N EQUAL ZEROS                                         \n              SET INPUT-ERROR           TO TRUE                                 \n              SET FLG-CARDFILTER-BLANK  TO TRUE                                 \n              IF WS-RETURN-MSG-OFF                                              \n                 SET WS-PROMPT-FOR-CARD TO TRUE                                 \n              END-IF                                                            \n\n              MOVE ZEROES        TO CDEMO-CARD-NUM                              \n                                   CCUP-NEW-CARDID                              \n              GO TO  1220-EDIT-CARD-EXIT                                        \n           END-IF                                                               \n      *                                                                         \n      *    Not numeric                                                          \n      *    Not 16 characters                                                    \n           IF CC-CARD-NUM  IS NOT NUMERIC                                       \n              SET INPUT-ERROR TO TRUE                                           \n              SET FLG-CARDFILTER-NOT-OK TO TRUE                                 \n              IF WS-RETURN-MSG-OFF                                              \n                 MOVE                                                           \n              'CARD ID FILTER,IF SUPPLIED MUST BE A 16 DIGIT NUMBER'            \n                                 TO WS-RETURN-MSG                               \n              END-IF                                                            \n              MOVE ZERO          TO CDEMO-CARD-NUM                              \n              MOVE LOW-VALUES    TO CCUP-NEW-CARDID                             \n              GO TO 1220-EDIT-CARD-EXIT                                         \n           ELSE                                                                 \n              MOVE CC-CARD-NUM-N TO CDEMO-CARD-NUM                              \n              MOVE CC-CARD-NUM   TO CCUP-NEW-CARDID                             \n              SET FLG-CARDFILTER-ISVALID TO TRUE                                \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1220-edit-card-exit","title":"1220-EDIT-CARD-EXIT","text":"<p>This paragraph serves as an exit point for the card editing process in the COCRDUPC program. It marks the end of the card validation and editing logic, allowing the program flow to return to the calling section after completing the validation of credit card details.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1230-edit-name","title":"1230-EDIT-NAME","text":"<p>This paragraph validates the credit card embossed name input. It first checks if the name field is empty (blank, zeros, or low-values), setting appropriate error flags and prompting the user to enter a name if needed. Then it performs character validation by converting all alphabetic characters to spaces and checking if anything remains - ensuring only alphabetic characters and spaces are allowed in the name field. If non-alphabetic characters are found, it sets error flags and provides a specific error message. When validation passes, it sets a flag indicating the card name is valid. The paragraph includes conditional error message handling based on the current message display settings.</p> Code <pre><code>*    Not BLANK                                                            \n           SET FLG-CARDNAME-NOT-OK      TO TRUE                                 \n\n      *    Not supplied                                                         \n           IF CCUP-NEW-CRDNAME   EQUAL LOW-VALUES                               \n           OR CCUP-NEW-CRDNAME   EQUAL SPACES                                   \n           OR CCUP-NEW-CRDNAME   EQUAL ZEROS                                    \n              SET INPUT-ERROR           TO TRUE                                 \n              SET FLG-CARDNAME-BLANK  TO TRUE                                   \n              IF WS-RETURN-MSG-OFF                                              \n                 SET WS-PROMPT-FOR-NAME TO TRUE                                 \n              END-IF                                                            \n              GO TO  1230-EDIT-NAME-EXIT                                        \n           END-IF                                                               \n\n      *    Only Alphabets and space allowed                                     \n           MOVE CCUP-NEW-CRDNAME        TO CARD-NAME-CHECK                      \n           INSPECT CARD-NAME-CHECK                                              \n             CONVERTING LIT-ALL-ALPHA-FROM                                      \n                     TO LIT-ALL-SPACES-TO                                       \n\n           IF FUNCTION LENGTH(FUNCTION TRIM(CARD-NAME-CHECK)) = 0               \n              CONTINUE                                                          \n           ELSE                                                                 \n              SET INPUT-ERROR           TO TRUE                                 \n              SET FLG-CARDNAME-NOT-OK   TO TRUE                                 \n              IF WS-RETURN-MSG-OFF                                              \n                 SET WS-NAME-MUST-BE-ALPHA  TO TRUE                             \n              END-IF                                                            \n              GO TO  1230-EDIT-NAME-EXIT                                        \n           END-IF                                                               \n\n           SET FLG-CARDNAME-ISVALID     TO TRUE                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1230-edit-name-exit","title":"1230-EDIT-NAME-EXIT","text":"<p>This paragraph serves as an exit point for the name editing routine in the credit card update process. It marks the end of the name validation logic, allowing the program to continue with the next step in the card update workflow after name field processing is complete.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1240-edit-cardstatus","title":"1240-EDIT-CARDSTATUS","text":"<p>This paragraph validates the card status input field in the credit card update process. It first checks if the card status value is provided, setting an error flag and appropriate message if the field is blank, spaces, or zeros. If a value is provided, it validates that the input is either 'Y' or 'N' by moving the input to a flag field and checking if it's valid. When validation fails, it sets error flags and a message indicating that card status must be either Yes or No. The paragraph includes conditional message handling based on the WS-RETURN-MSG-OFF flag, which controls whether error messages are displayed to the user. Valid inputs result in setting the FLG-CARDSTATUS-ISVALID flag before exiting the paragraph.</p> Code <pre><code>*    Must be Y or N                                                       \n           SET FLG-CARDSTATUS-NOT-OK      TO TRUE                               \n\n      *    Not supplied                                                         \n           IF CCUP-NEW-CRDSTCD   EQUAL LOW-VALUES                               \n           OR CCUP-NEW-CRDSTCD   EQUAL SPACES                                   \n           OR CCUP-NEW-CRDSTCD   EQUAL ZEROS                                    \n              SET INPUT-ERROR           TO TRUE                                 \n              SET FLG-CARDSTATUS-BLANK  TO TRUE                                 \n              IF WS-RETURN-MSG-OFF                                              \n                 SET CARD-STATUS-MUST-BE-YES-NO TO TRUE                         \n              END-IF                                                            \n              GO TO  1240-EDIT-CARDSTATUS-EXIT                                  \n           END-IF                                                               \n\n           MOVE CCUP-NEW-CRDSTCD          TO FLG-YES-NO-CHECK                   \n\n           IF FLG-YES-NO-VALID                                                  \n              SET FLG-CARDSTATUS-ISVALID  TO TRUE                               \n           ELSE                                                                 \n              SET INPUT-ERROR             TO TRUE                               \n              SET FLG-CARDSTATUS-NOT-OK   TO TRUE                               \n              IF WS-RETURN-MSG-OFF                                              \n                 SET CARD-STATUS-MUST-BE-YES-NO  TO TRUE                        \n              END-IF                                                            \n              GO TO  1240-EDIT-CARDSTATUS-EXIT                                  \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1240-edit-cardstatus-exit","title":"1240-EDIT-CARDSTATUS-EXIT","text":"<p>This paragraph serves as an exit point for the CARDSTATUS field validation routine. It marks the end of the validation logic for the card status field, allowing the program flow to return to the calling section after the validation checks have been completed.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1250-edit-expiry-mon","title":"1250-EDIT-EXPIRY-MON","text":"<p>This paragraph validates the credit card expiration month entered by the user. It first sets a flag indicating the month is invalid by default. The validation checks if the month is blank or not supplied (spaces, zeros, or low-values), in which case it sets appropriate error flags and exits. If a value is provided, it moves the input to a check field and verifies it's a valid month (1-12) using a predefined condition. When validation fails, it sets error flags and, if message display is enabled, sets a specific error message flag for invalid expiration month. The paragraph maintains validation state through multiple flags that can be used by the calling routine to determine appropriate action.</p> Code <pre><code>SET FLG-CARDEXPMON-NOT-OK      TO TRUE                               \n\n      *    Not supplied                                                         \n           IF CCUP-NEW-EXPMON   EQUAL LOW-VALUES                                \n           OR CCUP-NEW-EXPMON   EQUAL SPACES                                    \n           OR CCUP-NEW-EXPMON   EQUAL ZEROS                                     \n              SET INPUT-ERROR           TO TRUE                                 \n              SET FLG-CARDEXPMON-BLANK  TO TRUE                                 \n              IF WS-RETURN-MSG-OFF                                              \n                 SET CARD-EXPIRY-MONTH-NOT-VALID TO TRUE                        \n              END-IF                                                            \n              GO TO  1250-EDIT-EXPIRY-MON-EXIT                                  \n           END-IF                                                               \n\n      *    Must be numeric                                                      \n      *    Must be 1 to 12                                                      \n           MOVE CCUP-NEW-EXPMON           TO CARD-MONTH-CHECK                   \n\n           IF VALID-MONTH                                                       \n              SET FLG-CARDEXPMON-ISVALID  TO TRUE                               \n           ELSE                                                                 \n              SET INPUT-ERROR             TO TRUE                               \n              SET FLG-CARDEXPMON-NOT-OK   TO TRUE                               \n              IF WS-RETURN-MSG-OFF                                              \n                 SET CARD-EXPIRY-MONTH-NOT-VALID  TO TRUE                       \n              END-IF                                                            \n              GO TO  1250-EDIT-EXPIRY-MON-EXIT                                  \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1250-edit-expiry-mon-exit","title":"1250-EDIT-EXPIRY-MON-EXIT","text":"<p>This paragraph serves as an exit point for the expiration month validation routine. It marks the end of the validation logic for the credit card expiration month field, allowing the program to continue with the next processing step after validation is complete.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1260-edit-expiry-year","title":"1260-EDIT-EXPIRY-YEAR","text":"<p>This paragraph validates the expiration year field during credit card updates. It performs two key validation checks: first ensuring the field is not empty (not spaces, zeros, or low-values), and then verifying the year is numeric and within a valid range. If validation fails, it sets appropriate error flags (INPUT-ERROR and specific field error flags) and conditionally sets a user-friendly error message (CARD-EXPIRY-YEAR-NOT-VALID) if message display is enabled. The validation logic uses a VALID-YEAR condition, likely defined elsewhere, to determine if the supplied year meets business requirements. The paragraph exits immediately upon detecting any validation error, preventing further processing with invalid data.</p> Code <pre><code>*    Not supplied                                                         \n           IF CCUP-NEW-EXPYEAR   EQUAL LOW-VALUES                               \n           OR CCUP-NEW-EXPYEAR   EQUAL SPACES                                   \n           OR CCUP-NEW-EXPYEAR   EQUAL ZEROS                                    \n              SET INPUT-ERROR           TO TRUE                                 \n              SET FLG-CARDEXPYEAR-BLANK  TO TRUE                                \n              IF WS-RETURN-MSG-OFF                                              \n                 SET CARD-EXPIRY-YEAR-NOT-VALID TO TRUE                         \n              END-IF                                                            \n              GO TO  1260-EDIT-EXPIRY-YEAR-EXIT                                 \n           END-IF                                                               \n\n      *    Must be numeric                                                      \n      *    Must be 1 to 12                                                      \n\n           SET FLG-CARDEXPYEAR-NOT-OK      TO TRUE                              \n\n           MOVE CCUP-NEW-EXPYEAR           TO CARD-YEAR-CHECK                   \n\n           IF VALID-YEAR                                                        \n              SET FLG-CARDEXPYEAR-ISVALID  TO TRUE                              \n           ELSE                                                                 \n              SET INPUT-ERROR              TO TRUE                              \n              SET FLG-CARDEXPYEAR-NOT-OK   TO TRUE                              \n              IF WS-RETURN-MSG-OFF                                              \n                 SET CARD-EXPIRY-YEAR-NOT-VALID  TO TRUE                        \n              END-IF                                                            \n              GO TO  1260-EDIT-EXPIRY-YEAR-EXIT                                 \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDUPC.html#1260-edit-expiry-year-exit","title":"1260-EDIT-EXPIRY-YEAR-EXIT","text":"<p>This paragraph serves as an exit point for the expiration year validation routine. It marks the end of the validation logic for the credit card expiration year field, allowing the program to return control to the calling section after completing the validation checks.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#2000-decide-action","title":"2000-DECIDE-ACTION","text":"<p>This paragraph implements the core decision logic for the credit card update process based on the current state of the transaction and user actions. It uses an EVALUATE statement to handle multiple workflow scenarios: initial data retrieval, handling user cancellations, validating changes, confirming updates, processing update confirmations, and handling update outcomes (including lock errors, update failures, and concurrent update conflicts). When updates are successfully completed, it resets account information if not called from another transaction. The paragraph maintains transaction state through status flags and includes error handling that will trigger an abend routine if an unexpected scenario is encountered. This logic ensures the update process follows a controlled path with appropriate validation and confirmation steps before committing changes to the database.</p> Code <pre><code>EVALUATE TRUE                                                        \n      ******************************************************************        \n      *       NO DETAILS SHOWN.                                                 \n      *       SO GET THEM AND SETUP DETAIL EDIT SCREEN                          \n      ******************************************************************        \n              WHEN CCUP-DETAILS-NOT-FETCHED                                     \n      ******************************************************************        \n      *       CHANGES MADE. BUT USER CANCELS                                    \n      ******************************************************************        \n              WHEN CCARD-AID-PFK12                                              \n                 IF  FLG-ACCTFILTER-ISVALID                                     \n                 AND FLG-CARDFILTER-ISVALID                                     \n                     PERFORM 9000-READ-DATA                                     \n                        THRU 9000-READ-DATA-EXIT                                \n                     IF FOUND-CARDS-FOR-ACCOUNT                                 \n                        SET CCUP-SHOW-DETAILS    TO TRUE                        \n                     END-IF                                                     \n                 END-IF                                                         \n      ******************************************************************        \n      *       DETAILS SHOWN                                                     \n      *       CHECK CHANGES AND ASK CONFIRMATION IF GOOD                        \n      ******************************************************************        \n              WHEN CCUP-SHOW-DETAILS                                            \n                 IF INPUT-ERROR                                                 \n                 OR NO-CHANGES-DETECTED                                         \n                    CONTINUE                                                    \n                 ELSE                                                           \n                    SET CCUP-CHANGES-OK-NOT-CONFIRMED TO TRUE                   \n                 END-IF                                                         \n      ******************************************************************        \n      *       DETAILS SHOWN                                                     \n      *       BUT INPUT EDIT ERRORS FOUND                                       \n      ******************************************************************        \n              WHEN CCUP-CHANGES-NOT-OK                                          \n                  CONTINUE                                                      \n      ******************************************************************        \n      *       DETAILS EDITED , FOUND OK, CONFIRM SAVE REQUESTED                 \n      *       CONFIRMATION GIVEN.SO SAVE THE CHANGES                            \n      ******************************************************************        \n              WHEN CCUP-CHANGES-OK-NOT-CONFIRMED                                \n               AND CCARD-AID-PFK05                                              \n                 PERFORM 9200-WRITE-PROCESSING                                  \n                    THRU 9200-WRITE-PROCESSING-EXIT                             \n                 EVALUATE TRUE                                                  \n                    WHEN COULD-NOT-LOCK-FOR-UPDATE                              \n                         SET CCUP-CHANGES-OKAYED-LOCK-ERROR TO TRUE             \n                    WHEN LOCKED-BUT-UPDATE-FAILED                               \n                       SET CCUP-CHANGES-OKAYED-BUT-FAILED TO TRUE               \n                    WHEN DATA-WAS-CHANGED-BEFORE-UPDATE                         \n                        SET CCUP-SHOW-DETAILS            TO TRUE                \n                    WHEN OTHER                                                  \n                       SET CCUP-CHANGES-OKAYED-AND-DONE   TO TRUE               \n                 END-EVALUATE                                                   \n      ******************************************************************        \n      *       DETAILS EDITED , FOUND OK, CONFIRM SAVE REQUESTED                 \n      *       CONFIRMATION NOT GIVEN. SO SHOW DETAILS AGAIN                     \n      ******************************************************************        \n              WHEN CCUP-CHANGES-OK-NOT-CONFIRMED                                \n                  CONTINUE                                                      \n      ******************************************************************        \n      *       SHOW CONFIRMATION. GO BACK TO SQUARE 1                            \n      ******************************************************************        \n              WHEN CCUP-CHANGES-OKAYED-AND-DONE                                 \n                  SET CCUP-SHOW-DETAILS TO TRUE                                 \n                  IF CDEMO-FROM-TRANID    EQUAL LOW-VALUES                      \n                  OR CDEMO-FROM-TRANID    EQUAL SPACES                          \n                     MOVE ZEROES       TO CDEMO-ACCT-ID                         \n                                          CDEMO-CARD-NUM                        \n                     MOVE LOW-VALUES   TO CDEMO-ACCT-STATUS                     \n                  END-IF                                                        \n              WHEN OTHER                                                        \n                   MOVE LIT-THISPGM    TO ABEND-CULPRIT                         \n                   MOVE '0001'         TO ABEND-CODE                            \n                   MOVE SPACES         TO ABEND-REASON                          \n                   MOVE 'UNEXPECTED DATA SCENARIO'                              \n                                       TO ABEND-MSG                             \n                   PERFORM ABEND-ROUTINE                                        \n                      THRU ABEND-ROUTINE-EXIT                                   \n           END-EVALUATE                                                         \n           .\n</code></pre>"},{"location":"COCRDUPC.html#2000-decide-action-exit","title":"2000-DECIDE-ACTION-EXIT","text":"<p>This paragraph serves as an exit point for the 2000-DECIDE-ACTION section of the COCRDUPC program. It provides a clean termination point for the logic that determines what action to take based on user input when updating credit card details.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#3000-send-map","title":"3000-SEND-MAP","text":"<p>This paragraph orchestrates the preparation and display of the user interface for the credit card update transaction. It follows a structured sequence by first initializing the screen (3100-SCREEN-INIT), then setting up the screen variables with appropriate data values (3200-SETUP-SCREEN-VARS), preparing any informational messages for the user (3250-SETUP-INFOMSG), configuring the screen attributes for proper field display and interaction (3300-SETUP-SCREEN-ATTRS), and finally sending the completed screen to the terminal (3400-SEND-SCREEN). This modular approach separates the different aspects of screen preparation and display, making the code more maintainable and easier to troubleshoot.</p> Code <pre><code>PERFORM 3100-SCREEN-INIT                                             \n              THRU 3100-SCREEN-INIT-EXIT                                        \n           PERFORM 3200-SETUP-SCREEN-VARS                                       \n              THRU 3200-SETUP-SCREEN-VARS-EXIT                                  \n           PERFORM 3250-SETUP-INFOMSG                                           \n              THRU 3250-SETUP-INFOMSG-EXIT                                      \n           PERFORM 3300-SETUP-SCREEN-ATTRS                                      \n              THRU 3300-SETUP-SCREEN-ATTRS-EXIT                                 \n           PERFORM 3400-SEND-SCREEN                                             \n              THRU 3400-SEND-SCREEN-EXIT                                        \n           .\n</code></pre>"},{"location":"COCRDUPC.html#3000-send-map-exit","title":"3000-SEND-MAP-EXIT","text":"<p>This paragraph serves as an exit point for the SEND-MAP routine in the credit card update program. It provides a clean termination point for the routine that handles displaying information to the user interface, allowing the program to return control to its calling section after map display operations are complete.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#3100-screen-init","title":"3100-SCREEN-INIT","text":"<p>This paragraph initializes the screen display for the credit card update transaction. It clears the output area (CCRDUPAO) by setting it to LOW-VALUES, then retrieves the current system date and time. The paragraph populates the screen header with application titles from the communication area, transaction ID, and program name. It formats the current date as MM/DD/YY and the current time as HH:MM:SS, then places these values in their respective screen fields. This initialization ensures the screen displays up-to-date information and proper identification headers before presenting card data to the user.</p> Code <pre><code>MOVE LOW-VALUES TO CCRDUPAO                                          \n\n           MOVE FUNCTION CURRENT-DATE     TO WS-CURDATE-DATA                    \n\n           MOVE CCDA-TITLE01              TO TITLE01O OF CCRDUPAO               \n           MOVE CCDA-TITLE02              TO TITLE02O OF CCRDUPAO               \n           MOVE LIT-THISTRANID            TO TRNNAMEO OF CCRDUPAO               \n           MOVE LIT-THISPGM               TO PGMNAMEO OF CCRDUPAO               \n\n           MOVE FUNCTION CURRENT-DATE     TO WS-CURDATE-DATA                    \n\n           MOVE WS-CURDATE-MONTH          TO WS-CURDATE-MM                      \n           MOVE WS-CURDATE-DAY            TO WS-CURDATE-DD                      \n           MOVE WS-CURDATE-YEAR(3:2)      TO WS-CURDATE-YY                      \n\n           MOVE WS-CURDATE-MM-DD-YY       TO CURDATEO OF CCRDUPAO               \n\n           MOVE WS-CURTIME-HOURS          TO WS-CURTIME-HH                      \n           MOVE WS-CURTIME-MINUTE         TO WS-CURTIME-MM                      \n           MOVE WS-CURTIME-SECOND         TO WS-CURTIME-SS                      \n\n           MOVE WS-CURTIME-HH-MM-SS       TO CURTIMEO OF CCRDUPAO               \n\n           .\n</code></pre>"},{"location":"COCRDUPC.html#3100-screen-init-exit","title":"3100-SCREEN-INIT-EXIT","text":"<p>This paragraph serves as an exit point for the screen initialization process in the COCRDUPC program. It provides a clean termination point for the 3100-SCREEN-INIT section, allowing the program flow to return to the calling routine after screen initialization tasks are completed.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#3200-setup-screen-vars","title":"3200-SETUP-SCREEN-VARS","text":"<p>This paragraph initializes the screen variables for the credit card update interface based on the current program state. If the program is being entered for the first time, it continues without initialization. Otherwise, it populates the account ID and card number fields with either existing values or LOW-VALUES if they haven't been provided. The paragraph then uses an EVALUATE statement to handle different display scenarios: when card details haven't been fetched yet (clearing all fields), when showing existing details (displaying the original card information), when changes have been made (showing the updated values), or other cases (reverting to original values). Notably, there's a commented section indicating that the expiration day field is not editable by users, so the original value is always used regardless of any changes made to other fields.</p> Code <pre><code>*    INITIALIZE SEARCH CRITERIA                                           \n           IF CDEMO-PGM-ENTER                                                   \n              CONTINUE                                                          \n           ELSE                                                                 \n              IF CC-ACCT-ID-N = 0                                               \n                 MOVE LOW-VALUES          TO ACCTSIDO OF CCRDUPAO               \n              ELSE                                                              \n                 MOVE CC-ACCT-ID          TO ACCTSIDO OF CCRDUPAO               \n              END-IF                                                            \n\n              IF CC-CARD-NUM-N = 0                                              \n                MOVE LOW-VALUES           TO CARDSIDO OF CCRDUPAO               \n              ELSE                                                              \n                MOVE CC-CARD-NUM          TO CARDSIDO OF CCRDUPAO               \n              END-IF                                                            \n\n              EVALUATE TRUE                                                     \n                  WHEN CCUP-DETAILS-NOT-FETCHED                                 \n                       MOVE LOW-VALUES         TO CRDNAMEO OF CCRDUPAO          \n                                                  CRDNAMEO OF CCRDUPAO          \n                                                  CRDSTCDO OF CCRDUPAO          \n                                                  EXPDAYO  OF CCRDUPAO          \n                                                  EXPMONO  OF CCRDUPAO          \n                                                  EXPYEARO OF CCRDUPAO          \n                  WHEN CCUP-SHOW-DETAILS                                        \n                      MOVE CCUP-OLD-CRDNAME    TO CRDNAMEO OF CCRDUPAO          \n                      MOVE CCUP-OLD-CRDSTCD    TO CRDSTCDO OF CCRDUPAO          \n                      MOVE CCUP-OLD-EXPDAY     TO EXPDAYO  OF CCRDUPAO          \n                      MOVE CCUP-OLD-EXPMON     TO EXPMONO  OF CCRDUPAO          \n                      MOVE CCUP-OLD-EXPYEAR    TO EXPYEARO OF CCRDUPAO          \n                  WHEN CCUP-CHANGES-MADE                                        \n                      MOVE CCUP-NEW-CRDNAME    TO CRDNAMEO OF CCRDUPAO          \n                      MOVE CCUP-NEW-CRDSTCD    TO CRDSTCDO OF CCRDUPAO          \n                      MOVE CCUP-NEW-EXPMON     TO EXPMONO  OF CCRDUPAO          \n                      MOVE CCUP-NEW-EXPYEAR    TO EXPYEARO OF CCRDUPAO          \n      ******************************************************************        \n      *               MOVE OLD VALUES TO NON-DISPLAY FIELDS                     \n      *               THAT WE ARE NOT ALLOWING USER TO CHANGE(FOR NOW)          \n      *****************************************************************         \n      *               MOVE CCUP-NEW-EXPDAY     TO EXPDAYO  OF CCRDUPAO          \n                      MOVE CCUP-OLD-EXPDAY     TO EXPDAYO  OF CCRDUPAO          \n                  WHEN OTHER                                                    \n                      MOVE CCUP-OLD-CRDNAME    TO CRDNAMEO OF CCRDUPAO          \n                      MOVE CCUP-OLD-CRDSTCD    TO CRDSTCDO OF CCRDUPAO          \n                      MOVE CCUP-OLD-EXPDAY     TO EXPDAYO  OF CCRDUPAO          \n                      MOVE CCUP-OLD-EXPMON     TO EXPMONO  OF CCRDUPAO          \n                      MOVE CCUP-OLD-EXPYEAR    TO EXPYEARO OF CCRDUPAO          \n              END-EVALUATE                                                      \n\n\n            END-IF                                                              \n           .\n</code></pre>"},{"location":"COCRDUPC.html#3200-setup-screen-vars-exit","title":"3200-SETUP-SCREEN-VARS-EXIT","text":"<p>This paragraph serves as an exit point for the 3200-SETUP-SCREEN-VARS routine. It provides a clean termination point for the screen variable setup process, allowing the program to return control to the calling routine after completing the screen preparation tasks.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#3250-setup-infomsg","title":"3250-SETUP-INFOMSG","text":"<p>This paragraph handles the setup of information messages for the user interface based on the current state of the credit card update process. It evaluates various program states (such as initial entry, search results display, validation failures, confirmation requests, or update outcomes) and sets the appropriate message flag. Based on the program state, it determines what guidance or feedback should be displayed to the user - whether prompting for search criteria, requesting confirmation of changes, or reporting success/failure of update operations. The paragraph concludes by moving the selected information message and any error message to the output screen fields. This provides contextual feedback to users as they navigate through the card update workflow.</p> Code <pre><code>*    SETUP INFORMATION MESSAGE                                            \n           EVALUATE TRUE                                                        \n               WHEN CDEMO-PGM-ENTER                                             \n                    SET  PROMPT-FOR-SEARCH-KEYS TO TRUE                         \n               WHEN CCUP-DETAILS-NOT-FETCHED                                    \n                   SET PROMPT-FOR-SEARCH-KEYS      TO TRUE                      \n               WHEN CCUP-SHOW-DETAILS                                           \n                    SET FOUND-CARDS-FOR-ACCOUNT    TO TRUE                      \n               WHEN CCUP-CHANGES-NOT-OK                                         \n                    SET PROMPT-FOR-CHANGES         TO TRUE                      \n               WHEN CCUP-CHANGES-OK-NOT-CONFIRMED                               \n                    SET PROMPT-FOR-CONFIRMATION    TO TRUE                      \n               WHEN CCUP-CHANGES-OKAYED-AND-DONE                                \n                    SET CONFIRM-UPDATE-SUCCESS     TO TRUE                      \n               WHEN CCUP-CHANGES-OKAYED-LOCK-ERROR                              \n                    SET INFORM-FAILURE             TO TRUE                      \n               WHEN CCUP-CHANGES-OKAYED-BUT-FAILED                              \n                    SET INFORM-FAILURE             TO TRUE                      \n               WHEN WS-NO-INFO-MESSAGE                                          \n                   SET PROMPT-FOR-SEARCH-KEYS      TO TRUE                      \n           END-EVALUATE                                                         \n\n           MOVE WS-INFO-MSG                    TO INFOMSGO OF CCRDUPAO          \n\n           MOVE WS-RETURN-MSG                  TO ERRMSGO OF CCRDUPAO           \n           .\n</code></pre>"},{"location":"COCRDUPC.html#3250-setup-infomsg-exit","title":"3250-SETUP-INFOMSG-EXIT","text":"<p>This paragraph serves as an exit point for the SETUP-INFOMSG routine at line 3250. It provides a simple termination point for the routine without performing any additional processing, allowing the program to return control to the calling section after information messages have been configured.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#3300-setup-screen-attrs","title":"3300-SETUP-SCREEN-ATTRS","text":"<p>This paragraph manages the screen attributes for the credit card update interface based on the current processing state. It dynamically controls field protection status (protected or unprotected), cursor positioning, and visual formatting (colors and highlighting) to guide user interaction. The code uses EVALUATE statements to determine appropriate field attributes based on the transaction's current state - whether initial data entry, displaying fetched details, showing validation errors, or confirming changes. It positions the cursor intelligently on fields requiring attention, particularly on error fields when validation fails. The paragraph implements visual feedback by highlighting error fields in red and marking missing required fields with asterisks. It also handles special display conditions like darkening unavailable fields and brightening information messages when present. This logic ensures the user interface remains context-appropriate throughout the card update workflow.</p> Code <pre><code>*    PROTECT OR UNPROTECT BASED ON CONTEXT                                \n           EVALUATE TRUE                                                        \n              WHEN CCUP-DETAILS-NOT-FETCHED                                     \n                   MOVE DFHBMFSE      TO ACCTSIDA OF CCRDUPAI                   \n                                         CARDSIDA OF CCRDUPAI                   \n                   MOVE DFHBMPRF      TO CRDNAMEA OF CCRDUPAI                   \n                                         CRDSTCDA OF CCRDUPAI                   \n      *                                  EXPDAYA  OF CCRDUPAI                   \n                                         EXPMONA  OF CCRDUPAI                   \n                                         EXPYEARA OF CCRDUPAI                   \n              WHEN  CCUP-SHOW-DETAILS                                           \n              WHEN  CCUP-CHANGES-NOT-OK                                         \n                   MOVE DFHBMPRF      TO ACCTSIDA OF CCRDUPAI                   \n                                         CARDSIDA OF CCRDUPAI                   \n      *                                  EXPDAYA  OF CCRDUPAI                   \n                   MOVE DFHBMFSE      TO CRDNAMEA OF CCRDUPAI                   \n                                         CRDSTCDA OF CCRDUPAI                   \n\n                                         EXPMONA  OF CCRDUPAI                   \n                                         EXPYEARA OF CCRDUPAI                   \n              WHEN CCUP-CHANGES-OK-NOT-CONFIRMED                                \n              WHEN CCUP-CHANGES-OKAYED-AND-DONE                                 \n                   MOVE DFHBMPRF      TO ACCTSIDA OF CCRDUPAI                   \n                                         CARDSIDA OF CCRDUPAI                   \n                                         CRDNAMEA OF CCRDUPAI                   \n                                         CRDSTCDA OF CCRDUPAI                   \n      *                                  EXPDAYA  OF CCRDUPAI                   \n                                         EXPMONA  OF CCRDUPAI                   \n                                         EXPYEARA OF CCRDUPAI                   \n              WHEN OTHER                                                        \n                   MOVE DFHBMFSE      TO ACCTSIDA OF CCRDUPAI                   \n                                         CARDSIDA OF CCRDUPAI                   \n                   MOVE DFHBMPRF      TO CRDNAMEA OF CCRDUPAI                   \n                                         CRDSTCDA OF CCRDUPAI                   \n      *                                  EXPDAYA  OF CCRDUPAI                   \n                                         EXPMONA  OF CCRDUPAI                   \n                                         EXPYEARA OF CCRDUPAI                   \n           END-EVALUATE                                                         \n\n      *    POSITION CURSOR                                                      \n           EVALUATE TRUE                                                        \n              WHEN FOUND-CARDS-FOR-ACCOUNT                                      \n              WHEN NO-CHANGES-DETECTED                                          \n                  MOVE -1              TO CRDNAMEL OF CCRDUPAI                  \n              WHEN FLG-ACCTFILTER-NOT-OK                                        \n              WHEN FLG-ACCTFILTER-BLANK                                         \n                   MOVE -1             TO ACCTSIDL OF CCRDUPAI                  \n              WHEN FLG-CARDFILTER-NOT-OK                                        \n              WHEN FLG-CARDFILTER-BLANK                                         \n                   MOVE -1             TO CARDSIDL OF CCRDUPAI                  \n              WHEN FLG-CARDNAME-NOT-OK                                          \n              WHEN FLG-CARDNAME-BLANK                                           \n                  MOVE -1              TO CRDNAMEL OF  CCRDUPAI                 \n              WHEN FLG-CARDSTATUS-NOT-OK                                        \n              WHEN FLG-CARDSTATUS-BLANK                                         \n                  MOVE -1              TO CRDSTCDL OF  CCRDUPAI                 \n              WHEN FLG-CARDEXPMON-NOT-OK                                        \n              WHEN FLG-CARDEXPMON-BLANK                                         \n                  MOVE -1              TO EXPMONL  OF  CCRDUPAI                 \n              WHEN FLG-CARDEXPYEAR-NOT-OK                                       \n              WHEN FLG-CARDEXPYEAR-BLANK                                        \n                  MOVE -1              TO EXPYEARL OF  CCRDUPAI                 \n              WHEN OTHER                                                        \n                  MOVE -1              TO ACCTSIDL OF CCRDUPAI                  \n           END-EVALUATE                                                         \n\n      *    SETUP COLOR                                                          \n           IF CDEMO-LAST-MAPSET   EQUAL LIT-CCLISTMAPSET                        \n              MOVE DFHDFCOL            TO ACCTSIDC OF CCRDUPAO                  \n              MOVE DFHDFCOL            TO CARDSIDC OF CCRDUPAO                  \n           END-IF                                                               \n\n           IF FLG-ACCTFILTER-NOT-OK                                             \n              MOVE DFHRED              TO ACCTSIDC OF CCRDUPAO                  \n           END-IF                                                               \n\n           IF  FLG-ACCTFILTER-BLANK                                             \n           AND CDEMO-PGM-REENTER                                                \n               MOVE '*'                TO ACCTSIDO OF CCRDUPAO                  \n               MOVE DFHRED             TO ACCTSIDC OF CCRDUPAO                  \n           END-IF                                                               \n\n           IF FLG-CARDFILTER-NOT-OK                                             \n              MOVE DFHRED              TO CARDSIDC OF CCRDUPAO                  \n           END-IF                                                               \n\n           IF  FLG-CARDFILTER-BLANK                                             \n           AND CDEMO-PGM-REENTER                                                \n               MOVE '*'                TO CARDSIDO OF CCRDUPAO                  \n               MOVE DFHRED             TO CARDSIDC OF CCRDUPAO                  \n           END-IF                                                               \n\n           IF FLG-CARDNAME-NOT-OK                                               \n           AND CCUP-CHANGES-NOT-OK                                              \n              MOVE DFHRED              TO CRDNAMEC OF CCRDUPAO                  \n           END-IF                                                               \n\n           IF  FLG-CARDNAME-BLANK                                               \n           AND CCUP-CHANGES-NOT-OK                                              \n               MOVE '*'                TO CRDNAMEO OF CCRDUPAO                  \n               MOVE DFHRED             TO CRDNAMEC OF CCRDUPAO                  \n           END-IF                                                               \n\n           IF FLG-CARDSTATUS-NOT-OK                                             \n           AND CCUP-CHANGES-NOT-OK                                              \n              MOVE DFHRED              TO CRDSTCDC OF CCRDUPAO                  \n           END-IF                                                               \n\n           IF  FLG-CARDSTATUS-BLANK                                             \n           AND CCUP-CHANGES-NOT-OK                                              \n               MOVE '*'                TO CRDSTCDO OF CCRDUPAO                  \n               MOVE DFHRED             TO CRDSTCDC OF CCRDUPAO                  \n           END-IF                                                               \n\n           MOVE DFHBMDAR               TO EXPDAYC  OF CCRDUPAO                  \n\n           IF FLG-CARDEXPMON-NOT-OK                                             \n           AND CCUP-CHANGES-NOT-OK                                              \n              MOVE DFHRED              TO EXPMONC  OF CCRDUPAO                  \n           END-IF                                                               \n\n           IF  FLG-CARDEXPMON-BLANK                                             \n           AND CCUP-CHANGES-NOT-OK                                              \n               MOVE '*'                TO EXPMONO  OF CCRDUPAO                  \n               MOVE DFHRED             TO EXPMONC  OF CCRDUPAO                  \n           END-IF                                                               \n\n           IF  FLG-CARDEXPYEAR-NOT-OK                                           \n           AND CCUP-CHANGES-NOT-OK                                              \n              MOVE DFHRED              TO EXPYEARC OF CCRDUPAO                  \n           END-IF                                                               \n\n           IF  FLG-CARDEXPYEAR-BLANK                                            \n           AND CCUP-CHANGES-NOT-OK                                              \n               MOVE '*'                TO EXPYEARO OF CCRDUPAO                  \n               MOVE DFHRED             TO EXPYEARC OF CCRDUPAO                  \n           END-IF                                                               \n\n           IF  WS-NO-INFO-MESSAGE                                               \n               MOVE DFHBMDAR           TO INFOMSGA OF CCRDUPAI                  \n           ELSE                                                                 \n               MOVE DFHBMBRY           TO INFOMSGA OF CCRDUPAI                  \n           END-IF                                                               \n\n           IF PROMPT-FOR-CONFIRMATION                                           \n              MOVE DFHBMBRY            TO FKEYSCA  OF CCRDUPAI                  \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDUPC.html#3300-setup-screen-attrs-exit","title":"3300-SETUP-SCREEN-ATTRS-EXIT","text":"<p>This paragraph serves as an exit point for the screen attributes setup routine in the credit card update program. It marks the end of the process that configures display attributes for the user interface elements, allowing the program to return control to the calling section after screen formatting is complete.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#3400-send-screen","title":"3400-SEND-SCREEN","text":"<p>This paragraph handles the display of the credit card update screen to the user. It first sets the next map and mapset values in the communication area, then uses a CICS SEND MAP command to display the screen. The command sends the map defined in CCARD-NEXT-MAP from the CCRDUPAO data structure, positions the cursor appropriately, clears the screen (ERASE), and enables keyboard input (FREEKB). The response code from this operation is captured in WS-RESP-CD for error handling purposes.</p> Code <pre><code>MOVE LIT-THISMAPSET         TO CCARD-NEXT-MAPSET                     \n           MOVE LIT-THISMAP            TO CCARD-NEXT-MAP                        \n\n           EXEC CICS SEND MAP(CCARD-NEXT-MAP)                                   \n                          MAPSET(CCARD-NEXT-MAPSET)                             \n                          FROM(CCRDUPAO)                                        \n                          CURSOR                                                \n                          ERASE                                                 \n                          FREEKB                                                \n                          RESP(WS-RESP-CD)                                      \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COCRDUPC.html#3400-send-screen-exit","title":"3400-SEND-SCREEN-EXIT","text":"<p>This paragraph serves as an exit point for the screen sending process in the credit card update program. It marks the end of the screen display routine, allowing the program to return control to the calling section after the user interface has been presented. This is a simple control flow marker that helps maintain the structured programming approach used throughout the COCRDUPC program.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#9000-read-data","title":"9000-READ-DATA","text":"<p>This paragraph initializes and populates the CCUP-OLD-DETAILS structure with credit card information retrieved from the database. It first clears the structure, then sets the account ID and card number from the communication area. The paragraph calls the 9100-GETCARD-BYACCTCARD routine to fetch the card record, and if found, extracts key card details including the CVV code, embossed name (converting lowercase to uppercase), expiration date (parsed into separate year, month, and day components), and active status. These values are stored in the \"OLD\" fields, establishing a baseline of the current card data before any updates are made, which will likely be used later for comparison or display purposes.</p> Code <pre><code>INITIALIZE CCUP-OLD-DETAILS                                          \n           MOVE CC-ACCT-ID              TO CCUP-OLD-ACCTID                      \n           MOVE CC-CARD-NUM             TO CCUP-OLD-CARDID                      \n\n           PERFORM 9100-GETCARD-BYACCTCARD                                      \n              THRU 9100-GETCARD-BYACCTCARD-EXIT                                 \n\n           IF FOUND-CARDS-FOR-ACCOUNT                                           \n\n              MOVE CARD-CVV-CD          TO CCUP-OLD-CVV-CD                      \n\n              INSPECT CARD-EMBOSSED-NAME                                        \n              CONVERTING LIT-LOWER                                              \n                      TO LIT-UPPER                                              \n\n              MOVE CARD-EMBOSSED-NAME   TO CCUP-OLD-CRDNAME                     \n              MOVE CARD-EXPIRAION-DATE(1:4)                                     \n                                        TO CCUP-OLD-EXPYEAR                     \n              MOVE CARD-EXPIRAION-DATE(6:2)                                     \n                                        TO CCUP-OLD-EXPMON                      \n              MOVE CARD-EXPIRAION-DATE(9:2)                                     \n                                        TO CCUP-OLD-EXPDAY                      \n              MOVE CARD-ACTIVE-STATUS   TO CCUP-OLD-CRDSTCD                     \n\n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDUPC.html#9000-read-data-exit","title":"9000-READ-DATA-EXIT","text":"<p>This paragraph serves as an exit point for the data reading process in the credit card update program. It marks the end of the read operation logic, allowing the program to return control to the calling section after retrieving card details from the database.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#9100-getcard-byacctcard","title":"9100-GETCARD-BYACCTCARD","text":"<p>This paragraph retrieves a credit card record from the card file using the card number as the key. It performs a CICS READ operation on the CARDFILENAME file using the card number stored in WS-CARD-RID-CARDNUM. The paragraph handles three possible outcomes: if the read is successful, it sets a flag indicating the card was found; if the record is not found, it sets error flags for both account and card filters and potentially sets a message indicating the account/card combination doesn't exist; for any other response code, it sets an input error flag, captures the error details (operation, file name, response codes), and prepares an error message. This paragraph is a critical validation step in the card update process, ensuring the requested card exists before allowing modifications.</p> Code <pre><code>*    Read the Card file                                                   \n      *                                                                         \n      *    MOVE CC-ACCT-ID-N            TO WS-CARD-RID-ACCT-ID                  \n           MOVE CC-CARD-NUM             TO WS-CARD-RID-CARDNUM                  \n\n           EXEC CICS READ                                                       \n                FILE      (LIT-CARDFILENAME)                                    \n                RIDFLD    (WS-CARD-RID-CARDNUM)                                 \n                KEYLENGTH (LENGTH OF WS-CARD-RID-CARDNUM)                       \n                INTO      (CARD-RECORD)                                         \n                LENGTH    (LENGTH OF CARD-RECORD)                               \n                RESP      (WS-RESP-CD)                                          \n                RESP2     (WS-REAS-CD)                                          \n           END-EXEC                                                             \n\n           EVALUATE WS-RESP-CD                                                  \n               WHEN DFHRESP(NORMAL)                                             \n                  SET FOUND-CARDS-FOR-ACCOUNT TO TRUE                           \n               WHEN DFHRESP(NOTFND)                                             \n                  SET INPUT-ERROR                    TO TRUE                    \n                  SET FLG-ACCTFILTER-NOT-OK          TO TRUE                    \n                  SET FLG-CARDFILTER-NOT-OK          TO TRUE                    \n                  IF  WS-RETURN-MSG-OFF                                         \n                     SET DID-NOT-FIND-ACCTCARD-COMBO TO TRUE                    \n                  END-IF                                                        \n               WHEN OTHER                                                       \n                  SET INPUT-ERROR                    TO TRUE                    \n                  IF  WS-RETURN-MSG-OFF                                         \n                      SET FLG-ACCTFILTER-NOT-OK      TO TRUE                    \n                  END-IF                                                        \n                  MOVE 'READ'                        TO ERROR-OPNAME            \n                  MOVE LIT-CARDFILENAME              TO ERROR-FILE              \n                  MOVE WS-RESP-CD                    TO ERROR-RESP              \n                  MOVE WS-REAS-CD                    TO ERROR-RESP2             \n                  MOVE WS-FILE-ERROR-MESSAGE         TO WS-RETURN-MSG           \n           END-EVALUATE                                                         \n           .\n</code></pre>"},{"location":"COCRDUPC.html#9100-getcard-byacctcard-exit","title":"9100-GETCARD-BYACCTCARD-EXIT","text":"<p>This paragraph serves as an exit point for the GETCARD-BYACCTCARD routine. It provides a clean termination point for the process that retrieves card details using account and card number as search criteria. The paragraph contains only the EXIT statement followed by a period, indicating the end of the logical processing block with no additional actions performed.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#9200-write-processing","title":"9200-WRITE-PROCESSING","text":"<p>This paragraph handles the critical update process for credit card records. It first attempts to read and lock the card record using the card number as the key. If the lock is successful, it checks if the record has been modified by another user since it was initially retrieved (via the 9300-CHECK-CHANGE-IN-REC paragraph). If no concurrent modification is detected, it prepares the update by initializing a CARD-UPDATE-RECORD structure and populating it with the new values from the user input, including card ID, CVV code, embossed name, expiration date, and active status. The paragraph then attempts to rewrite the record to the card file and checks if the update was successful. Error handling is implemented for lock failures and update failures, with appropriate status flags set to communicate the outcome back to the calling process.</p> Code <pre><code>*    Read the Card file                                                   \n      *                                                                         \n      *    MOVE CC-ACCT-ID-N            TO WS-CARD-RID-ACCT-ID                  \n           MOVE CC-CARD-NUM             TO WS-CARD-RID-CARDNUM                  \n\n           EXEC CICS READ                                                       \n                FILE      (LIT-CARDFILENAME)                                    \n                UPDATE                                                          \n                RIDFLD    (WS-CARD-RID-CARDNUM)                                 \n                KEYLENGTH (LENGTH OF WS-CARD-RID-CARDNUM)                       \n                INTO      (CARD-RECORD)                                         \n                LENGTH    (LENGTH OF CARD-RECORD)                               \n                RESP      (WS-RESP-CD)                                          \n                RESP2     (WS-REAS-CD)                                          \n           END-EXEC                                                             \n\n      *****************************************************************         \n      *    Could we lock the record ?                                           \n      *****************************************************************         \n           IF WS-RESP-CD EQUAL TO DFHRESP(NORMAL)                               \n              CONTINUE                                                          \n           ELSE                                                                 \n              SET INPUT-ERROR                    TO TRUE                        \n              IF  WS-RETURN-MSG-OFF                                             \n                  SET COULD-NOT-LOCK-FOR-UPDATE  TO TRUE                        \n              END-IF                                                            \n              GO TO 9200-WRITE-PROCESSING-EXIT                                  \n           END-IF                                                               \n      *****************************************************************         \n      *    Did someone change the record while we were out ?                    \n      *****************************************************************         \n           PERFORM 9300-CHECK-CHANGE-IN-REC                                     \n              THRU 9300-CHECK-CHANGE-IN-REC-EXIT                                \n           IF DATA-WAS-CHANGED-BEFORE-UPDATE                                    \n              GO TO 9200-WRITE-PROCESSING-EXIT                                  \n           END-IF                                                               \n      *****************************************************************         \n      * Prepare the update                                                      \n      *****************************************************************         \n           INITIALIZE CARD-UPDATE-RECORD                                        \n           MOVE CCUP-NEW-CARDID             TO CARD-UPDATE-NUM                  \n           MOVE CC-ACCT-ID-N                TO CARD-UPDATE-ACCT-ID              \n           MOVE CCUP-NEW-CVV-CD             TO CARD-CVV-CD-X                    \n           MOVE CARD-CVV-CD-N               TO CARD-UPDATE-CVV-CD               \n           MOVE CCUP-NEW-CRDNAME            TO CARD-UPDATE-EMBOSSED-NAME        \n           STRING  CCUP-NEW-EXPYEAR                                             \n                   '-'                                                          \n                   CCUP-NEW-EXPMON                                              \n                   '-'                                                          \n                   CCUP-NEW-EXPDAY                                              \n                   DELIMITED BY SIZE                                            \n              INTO CARD-UPDATE-EXPIRAION-DATE                                   \n           END-STRING                                                           \n           MOVE CCUP-NEW-CRDSTCD            TO CARD-UPDATE-ACTIVE-STATUS        \n\n           EXEC CICS                                                            \n                REWRITE FILE(LIT-CARDFILENAME)                                  \n                        FROM(CARD-UPDATE-RECORD)                                \n                        LENGTH(LENGTH OF CARD-UPDATE-RECORD)                    \n                        RESP      (WS-RESP-CD)                                  \n                        RESP2     (WS-REAS-CD)                                  \n           END-EXEC.                                                            \n\n      *****************************************************************         \n      * Did the update succeed ?  *                                             \n      *****************************************************************         \n           IF WS-RESP-CD EQUAL TO DFHRESP(NORMAL)                               \n             CONTINUE                                                           \n           ELSE                                                                 \n             SET LOCKED-BUT-UPDATE-FAILED    TO TRUE                            \n           END-IF                                                               \n           .\n</code></pre>"},{"location":"COCRDUPC.html#9200-write-processing-exit","title":"9200-WRITE-PROCESSING-EXIT","text":"<p>This paragraph serves as an exit point for the write processing routine in the COCRDUPC program. It provides a clean termination point for the write processing logic, allowing the program flow to return to the calling section after database update operations are completed.</p> Code <pre><code>EXIT                                                                 \n           .\n</code></pre>"},{"location":"COCRDUPC.html#9300-check-change-in-rec","title":"9300-CHECK-CHANGE-IN-REC","text":"<p>This paragraph checks if the card record has been modified by another user since it was initially retrieved. It first converts the embossed name to uppercase for consistent comparison. Then it compares all current card details (CVV code, embossed name, expiration date components, and active status) with the values that were originally read. If all fields match, processing continues normally. If any field has changed, indicating concurrent modification by another user, it sets a flag indicating data was changed before update, updates the stored \"old\" values with the current values from the database, and exits the current processing flow by branching to the write processing exit paragraph. This prevents overwriting changes made by other users and maintains data integrity in a multi-user environment.</p> Code <pre><code>INSPECT CARD-EMBOSSED-NAME                                           \n           CONVERTING LIT-LOWER                                                 \n                   TO LIT-UPPER                                                 \n\n           IF  CARD-CVV-CD              EQUAL  TO CCUP-OLD-CVV-CD               \n           AND CARD-EMBOSSED-NAME       EQUAL  TO CCUP-OLD-CRDNAME              \n           AND CARD-EXPIRAION-DATE(1:4) EQUAL  TO CCUP-OLD-EXPYEAR              \n           AND CARD-EXPIRAION-DATE(6:2) EQUAL  TO CCUP-OLD-EXPMON               \n           AND CARD-EXPIRAION-DATE(9:2) EQUAL  TO CCUP-OLD-EXPDAY               \n           AND CARD-ACTIVE-STATUS       EQUAL  TO CCUP-OLD-CRDSTCD              \n               CONTINUE                                                         \n           ELSE                                                                 \n              SET DATA-WAS-CHANGED-BEFORE-UPDATE TO TRUE                        \n              MOVE CARD-CVV-CD                 TO CCUP-OLD-CVV-CD               \n              MOVE CARD-EMBOSSED-NAME          TO CCUP-OLD-CRDNAME              \n              MOVE CARD-EXPIRAION-DATE(1:4)    TO CCUP-OLD-EXPYEAR              \n              MOVE CARD-EXPIRAION-DATE(6:2)    TO CCUP-OLD-EXPMON               \n              MOVE CARD-EXPIRAION-DATE(9:2)    TO CCUP-OLD-EXPDAY               \n              MOVE CARD-ACTIVE-STATUS          TO CCUP-OLD-CRDSTCD              \n              GO TO 9200-WRITE-PROCESSING-EXIT                                  \n           END-IF EXIT                                                          \n           .\n</code></pre>"},{"location":"COCRDUPC.html#9300-check-change-in-rec-exit","title":"9300-CHECK-CHANGE-IN-REC-EXIT","text":"<p>This paragraph serves as an exit point for the record change verification process in the credit card update functionality. It includes a call to the 'CSSTRPFY' copybook, which contains common code for storing PF key information. This structure helps maintain consistent handling of function key inputs across the application while properly terminating the current processing logic.</p> Code <pre><code>EXIT                                                                 \n           .                                                                    \n\n      ******************************************************************        \n      *Common code to store PFKey\n      ******************************************************************\n       COPY 'CSSTRPFY'\n           .                                                           \n                                                                        340000\n</code></pre>"},{"location":"COCRDUPC.html#abend-routine","title":"ABEND-ROUTINE","text":"<p>This paragraph handles abnormal termination (abend) processing in the credit card update program. It first checks if an error message has been set, and if not, assigns a default \"unexpected abend\" message. It then identifies the current program as the source of the error, displays the abend information to the user with a screen clear, cancels any existing abend handlers to prevent recursive error handling, and finally forces a controlled termination with abend code '9999'. This ensures that when unexpected errors occur during card update operations, the system fails gracefully with appropriate user notification rather than continuing with potentially corrupted data.</p> Code <pre><code>IF ABEND-MSG EQUAL LOW-VALUES                                        \n              MOVE 'UNEXPECTED ABEND OCCURRED.' TO ABEND-MSG                    \n           END-IF                                                               \n\n           MOVE LIT-THISPGM       TO ABEND-CULPRIT                              \n\n           EXEC CICS SEND                                                       \n                            FROM (ABEND-DATA)                                   \n                            LENGTH(LENGTH OF ABEND-DATA)                        \n                            NOHANDLE                                            \n                            ERASE                                               \n           END-EXEC                                                             \n\n           EXEC CICS HANDLE ABEND                                               \n                CANCEL                                                          \n           END-EXEC                                                             \n\n           EXEC CICS ABEND                                                      \n                ABCODE('9999')                                                  \n           END-EXEC                                                             \n           .\n</code></pre>"},{"location":"COCRDUPC.html#abend-routine-exit","title":"ABEND-ROUTINE-EXIT","text":"<p>This paragraph serves as the exit point for the ABEND-ROUTINE section in the COCRDUPC program. It marks the end of the abend handling logic with a simple EXIT statement. The paragraph includes version control information showing this code is part of CardDemo version 1.0-15-g27d6c6f-68, dated July 19, 2022.</p> Code <pre><code>EXIT                                                                 \n           .                                                                    \n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:33 CDT\n      *\n</code></pre>"},{"location":"COMEN01C.html","title":"COMEN01C","text":""},{"location":"COMEN01C.html#overview","title":"Overview","text":"<p>This program serves as the main menu interface for regular users in the CardDemo application. It displays a list of available menu options based on the user's access level, processes user selections, and routes to the appropriate program when a valid option is chosen. The program prevents regular users from accessing admin-only options, displays appropriate error messages for invalid inputs, and includes functionality to return to the sign-on screen. It maintains session state through a commarea and includes standard header information with current date and time. The menu is dynamically built based on predefined options, with different display logic for regular users versus administrators.</p>"},{"location":"COMEN01C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COMEN01C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"COMEN01C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant MainMenu as COMEN01C\n    participant SignOn as COSGN00C\n    participant TargetProgram as Selected Program\n\n    User-&gt;&gt;MainMenu: Start transaction\n\n    alt No COMMAREA\n        MainMenu-&gt;&gt;SignOn: Return to sign-on screen\n    else Has COMMAREA\n        alt First entry\n            MainMenu-&gt;&gt;MainMenu: Initialize screen\n            MainMenu-&gt;&gt;MainMenu: POPULATE-HEADER-INFO\n            MainMenu-&gt;&gt;MainMenu: BUILD-MENU-OPTIONS\n            MainMenu--&gt;&gt;User: Display menu screen\n        else Re-entry\n            MainMenu-&gt;&gt;MainMenu: RECEIVE-MENU-SCREEN\n\n            alt ENTER key pressed\n                MainMenu-&gt;&gt;MainMenu: PROCESS-ENTER-KEY\n\n                alt Invalid option\n                    MainMenu-&gt;&gt;MainMenu: Set error message\n                    MainMenu--&gt;&gt;User: Redisplay menu with error\n                else Admin-only option for regular user\n                    MainMenu-&gt;&gt;MainMenu: Set access error message\n                    MainMenu--&gt;&gt;User: Redisplay menu with error\n                else Valid option with real program\n                    MainMenu-&gt;&gt;TargetProgram: XCTL with COMMAREA\n                else \"Coming soon\" option (DUMMY)\n                    MainMenu-&gt;&gt;MainMenu: Set \"coming soon\" message\n                    MainMenu--&gt;&gt;User: Redisplay menu with message\n                end\n\n            else PF3 key pressed\n                MainMenu-&gt;&gt;SignOn: Return to sign-on screen\n            else Other key pressed\n                MainMenu-&gt;&gt;MainMenu: Set invalid key message\n                MainMenu--&gt;&gt;User: Redisplay menu with error\n            end\n        end\n    end\n\n    Note over MainMenu: Program returns with COMMAREA to preserve state</code></pre>"},{"location":"COMEN01C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>DFHAID</code></li> <li><code>CSUSR01Y</code></li> <li><code>COCOM01Y</code></li> <li><code>COMEN02Y</code></li> <li><code>DFHBMSCA</code></li> <li><code>COMEN01</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG01Y</code></li> </ul>"},{"location":"COMEN01C.html#environment-division","title":"Environment Division","text":""},{"location":"COMEN01C.html#configuration-section","title":"CONFIGURATION SECTION","text":"<p>This section would typically contain configuration settings for the COMEN01C program, which is the main menu interface for regular users in the CardDemo application. The configuration section would define special names, file assignments, and system dependencies required for the program's operation. However, the provided snippet is empty, suggesting that this program may not require specific configuration settings beyond what might be defined elsewhere in the program or in shared configuration files. This aligns with the program's primary function as a menu interface that focuses on displaying options and routing user selections rather than performing complex file operations or system interactions.</p> Code"},{"location":"COMEN01C.html#data-division","title":"Data Division","text":""},{"location":"COMEN01C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working-Storage section defines the main variables and data structures used by the COMEN01C program (the CardDemo main menu interface). It includes program identifiers, error handling flags, response codes, and variables for processing menu options. The section incorporates several copybooks that likely contain menu definitions (COMEN01, COMEN02Y), common data structures (COCOM01Y), title formatting (COTTL01Y), date handling (CSDAT01Y), messaging (CSMSG01Y), and user information (CSUSR01Y). It also includes standard CICS copybooks for AID keys and BMS attributes. The variables support the program's core functionality of displaying menu options, processing user selections, and handling navigation between different parts of the CardDemo application.</p> Code <pre><code>01 WS-VARIABLES.\n         05 WS-PGMNAME                 PIC X(08) VALUE 'COMEN01C'.\n         05 WS-TRANID                  PIC X(04) VALUE 'CM00'.\n         05 WS-MESSAGE                 PIC X(80) VALUE SPACES.\n         05 WS-USRSEC-FILE             PIC X(08) VALUE 'USRSEC  '.\n         05 WS-ERR-FLG                 PIC X(01) VALUE 'N'.\n           88 ERR-FLG-ON                         VALUE 'Y'.\n           88 ERR-FLG-OFF                        VALUE 'N'.\n         05 WS-RESP-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REAS-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-OPTION-X                PIC X(02) JUST RIGHT.\n         05 WS-OPTION                  PIC 9(02) VALUE 0.\n         05 WS-IDX                     PIC S9(04) COMP VALUE ZEROS.\n         05 WS-MENU-OPT-TXT            PIC X(40) VALUE SPACES.\n\n       COPY COCOM01Y.\n       COPY COMEN02Y.\n\n       COPY COMEN01.\n\n       COPY COTTL01Y.\n       COPY CSDAT01Y.\n       COPY CSMSG01Y.\n       COPY CSUSR01Y.\n\n       COPY DFHAID.\n       COPY DFHBMSCA.\n\n      *----------------------------------------------------------------*\n      *                        LINKAGE SECTION\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COMEN01C.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This linkage section defines the communication area (DFHCOMMAREA) used to pass data between programs in the CardDemo menu interface. It contains a single field, LK-COMMAREA, which is defined as a variable-length array of characters that can expand from 1 to 32,767 bytes depending on the actual length of the communication area (EIBCALEN). This flexible structure allows the program to receive and process communication data of different sizes from calling programs within the application.</p> Code <pre><code>01  DFHCOMMAREA.\n         05  LK-COMMAREA                           PIC X(01)\n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n\n      *----------------------------------------------------------------*\n      *\n</code></pre>"},{"location":"COMEN01C.html#procedure-division","title":"Procedure Division","text":""},{"location":"COMEN01C.html#main-para","title":"MAIN-PARA","text":"<p>This paragraph handles the main control flow of the menu interface program. It first clears any error flags and message fields, then checks if the program was called with a communication area. If no commarea exists, it returns to the sign-on screen. Otherwise, it retrieves the commarea data and determines if this is the first entry to the program or a re-entry. On first entry, it initializes the screen and displays the menu. On re-entry, it processes user input based on the key pressed: ENTER key triggers option processing, PF3 returns to the sign-on screen, and any other key generates an invalid key error message. The paragraph maintains session state by returning with the updated commarea and transaction ID to preserve context between interactions.</p> Code <pre><code>SET ERR-FLG-OFF TO TRUE\n\n           MOVE SPACES TO WS-MESSAGE\n                          ERRMSGO OF COMEN1AO\n\n           IF EIBCALEN = 0\n               MOVE 'COSGN00C' TO CDEMO-FROM-PROGRAM\n               PERFORM RETURN-TO-SIGNON-SCREEN\n           ELSE\n               MOVE DFHCOMMAREA(1:EIBCALEN) TO CARDDEMO-COMMAREA\n               IF NOT CDEMO-PGM-REENTER\n                   SET CDEMO-PGM-REENTER    TO TRUE\n                   MOVE LOW-VALUES          TO COMEN1AO\n                   PERFORM SEND-MENU-SCREEN\n               ELSE\n                   PERFORM RECEIVE-MENU-SCREEN\n                   EVALUATE EIBAID\n                       WHEN DFHENTER\n                           PERFORM PROCESS-ENTER-KEY\n                       WHEN DFHPF3\n                           MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n                           PERFORM RETURN-TO-SIGNON-SCREEN\n                       WHEN OTHER\n                           MOVE 'Y'                       TO WS-ERR-FLG\n                           MOVE CCDA-MSG-INVALID-KEY      TO WS-MESSAGE\n                           PERFORM SEND-MENU-SCREEN\n                   END-EVALUATE\n               END-IF\n           END-IF\n\n           EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-ENTER-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COMEN01C.html#process-enter-key","title":"PROCESS-ENTER-KEY","text":"<p>This paragraph processes user menu selections when the Enter key is pressed. It first extracts and validates the option number entered by the user, removing trailing spaces and converting any remaining spaces to zeros. The code then performs several validation checks: ensuring the option is numeric, within the valid range of menu options, and not zero. If the user is a regular user attempting to access an admin-only option (designated by 'A'), an error message is displayed. For valid selections, the program transfers control to the appropriate program using CICS XCTL, passing the commarea to maintain session state. If the target program name begins with \"DUMMY\", the system displays a \"coming soon\" message instead of transferring control. Error conditions trigger appropriate error messages and redisplay of the menu screen.</p> Code <pre><code>PERFORM VARYING WS-IDX\n                   FROM LENGTH OF OPTIONI OF COMEN1AI BY -1 UNTIL\n                   OPTIONI OF COMEN1AI(WS-IDX:1) NOT = SPACES OR\n                   WS-IDX = 1\n           END-PERFORM\n           MOVE OPTIONI OF COMEN1AI(1:WS-IDX) TO WS-OPTION-X\n           INSPECT WS-OPTION-X REPLACING ALL ' ' BY '0'\n           MOVE WS-OPTION-X              TO WS-OPTION\n           MOVE WS-OPTION                TO OPTIONO OF COMEN1AO\n\n           IF WS-OPTION IS NOT NUMERIC OR\n              WS-OPTION &gt; CDEMO-MENU-OPT-COUNT OR\n              WS-OPTION = ZEROS\n               MOVE 'Y'     TO WS-ERR-FLG\n               MOVE 'Please enter a valid option number...' TO\n                               WS-MESSAGE\n               PERFORM SEND-MENU-SCREEN\n           END-IF\n\n           IF CDEMO-USRTYP-USER AND\n              CDEMO-MENU-OPT-USRTYPE(WS-OPTION) = 'A'\n               SET ERR-FLG-ON          TO TRUE\n               MOVE SPACES             TO WS-MESSAGE\n               MOVE 'No access - Admin Only option... ' TO\n                                       WS-MESSAGE\n               PERFORM SEND-MENU-SCREEN\n           END-IF\n\n           IF NOT ERR-FLG-ON\n               IF CDEMO-MENU-OPT-PGMNAME(WS-OPTION)(1:5) NOT = 'DUMMY'\n                   MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n                   MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n      *            MOVE WS-USER-ID   TO CDEMO-USER-ID\n      *            MOVE SEC-USR-TYPE TO CDEMO-USER-TYPE\n                   MOVE ZEROS        TO CDEMO-PGM-CONTEXT\n                   EXEC CICS\n                       XCTL PROGRAM(CDEMO-MENU-OPT-PGMNAME(WS-OPTION))\n                       COMMAREA(CARDDEMO-COMMAREA)\n                   END-EXEC\n               END-IF\n               MOVE SPACES             TO WS-MESSAGE\n               MOVE DFHGREEN           TO ERRMSGC  OF COMEN1AO\n               STRING 'This option '       DELIMITED BY SIZE\n                       CDEMO-MENU-OPT-NAME(WS-OPTION)\n                                       DELIMITED BY SPACE\n                       'is coming soon ...'   DELIMITED BY SIZE\n                  INTO WS-MESSAGE\n               PERFORM SEND-MENU-SCREEN\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      RETURN-TO-SIGNON-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COMEN01C.html#return-to-signon-screen","title":"RETURN-TO-SIGNON-SCREEN","text":"<p>This paragraph handles the return to the sign-on screen functionality. It checks if the target program (CDEMO-TO-PROGRAM) is empty or contains spaces, and if so, sets it to 'COSGN00C' which is the sign-on program. It then uses the CICS XCTL command to transfer control to the specified program without returning to the calling program. This ensures users are properly redirected to the sign-on screen when logging out or when session navigation requires returning to the authentication interface.</p> Code <pre><code>IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n           END-IF\n           EXEC CICS\n               XCTL PROGRAM(CDEMO-TO-PROGRAM)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      SEND-MENU-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COMEN01C.html#send-menu-screen","title":"SEND-MENU-SCREEN","text":"<p>This paragraph handles the display of the menu screen to the user. It first calls POPULATE-HEADER-INFO to set up standard header information (likely date, time, and user details) and then calls BUILD-MENU-OPTIONS to generate the appropriate menu items based on the user's access level. Any system messages or error notifications stored in WS-MESSAGE are transferred to the output map's error message field. Finally, it uses the CICS SEND command to display the COMEN1A map from the COMEN01 mapset to the user, clearing the previous screen content with the ERASE option.</p> Code <pre><code>PERFORM POPULATE-HEADER-INFO\n           PERFORM BUILD-MENU-OPTIONS\n\n           MOVE WS-MESSAGE TO ERRMSGO OF COMEN1AO\n\n           EXEC CICS SEND\n                     MAP('COMEN1A')\n                     MAPSET('COMEN01')\n                     FROM(COMEN1AO)\n                     ERASE\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      RECEIVE-MENU-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COMEN01C.html#receive-menu-screen","title":"RECEIVE-MENU-SCREEN","text":"<p>This paragraph handles the reception of user input from the menu screen. It uses the CICS RECEIVE command to capture data entered on the 'COMEN1A' map within the 'COMEN01' mapset, storing the received data in the COMEN1AI structure. The response codes from this operation are captured in WS-RESP-CD and WS-REAS-CD variables for subsequent error handling. This is a standard CICS interaction pattern for accepting user input before processing menu selections.</p> Code <pre><code>EXEC CICS RECEIVE\n                     MAP('COMEN1A')\n                     MAPSET('COMEN01')\n                     INTO(COMEN1AI)\n                     RESP(WS-RESP-CD)\n                     RESP2(WS-REAS-CD)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      POPULATE-HEADER-INFO\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COMEN01C.html#populate-header-info","title":"POPULATE-HEADER-INFO","text":"<p>This paragraph populates the header information for the CardDemo main menu screen. It retrieves the current system date and time using the CURRENT-DATE function, then formats and displays this information on the screen. The paragraph sets the application title fields from predefined constants, displays the transaction ID and program name, and formats the current date in MM/DD/YY format and the current time in HH:MM:SS format. This creates a consistent header that provides context to users about which application they're using and when they're using it.</p> Code <pre><code>MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n           MOVE CCDA-TITLE01           TO TITLE01O OF COMEN1AO\n           MOVE CCDA-TITLE02           TO TITLE02O OF COMEN1AO\n           MOVE WS-TRANID              TO TRNNAMEO OF COMEN1AO\n           MOVE WS-PGMNAME             TO PGMNAMEO OF COMEN1AO\n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM\n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD\n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY\n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF COMEN1AO\n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH\n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM\n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS\n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF COMEN1AO.\n\n      *----------------------------------------------------------------*\n      *                      BUILD-MENU-OPTIONS\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COMEN01C.html#build-menu-options","title":"BUILD-MENU-OPTIONS","text":"<p>This paragraph dynamically constructs and populates the menu options displayed to users in the CardDemo application's main menu interface. It iterates through the available menu options (stored in the CDEMO-MENU-OPT arrays) up to the total count of options. For each option, it formats a display string by combining the option number, a period and space, and the option name. Based on the current index position, it then assigns this formatted text to the appropriate screen field (OPTN001O through OPTN012O), supporting up to 12 menu options. This approach allows the menu to be built dynamically based on the user's access level, with different options potentially available to regular users versus administrators.</p> Code <pre><code>PERFORM VARYING WS-IDX FROM 1 BY 1 UNTIL\n                           WS-IDX &gt; CDEMO-MENU-OPT-COUNT\n\n               MOVE SPACES             TO WS-MENU-OPT-TXT\n\n               STRING CDEMO-MENU-OPT-NUM(WS-IDX)  DELIMITED BY SIZE\n                      '. '                         DELIMITED BY SIZE\n                      CDEMO-MENU-OPT-NAME(WS-IDX) DELIMITED BY SIZE\n                 INTO WS-MENU-OPT-TXT\n\n               EVALUATE WS-IDX\n                   WHEN 1\n                       MOVE WS-MENU-OPT-TXT TO OPTN001O\n                   WHEN 2\n                       MOVE WS-MENU-OPT-TXT TO OPTN002O\n                   WHEN 3\n                       MOVE WS-MENU-OPT-TXT TO OPTN003O\n                   WHEN 4\n                       MOVE WS-MENU-OPT-TXT TO OPTN004O\n                   WHEN 5\n                       MOVE WS-MENU-OPT-TXT TO OPTN005O\n                   WHEN 6\n                       MOVE WS-MENU-OPT-TXT TO OPTN006O\n                   WHEN 7\n                       MOVE WS-MENU-OPT-TXT TO OPTN007O\n                   WHEN 8\n                       MOVE WS-MENU-OPT-TXT TO OPTN008O\n                   WHEN 9\n                       MOVE WS-MENU-OPT-TXT TO OPTN009O\n                   WHEN 10\n                       MOVE WS-MENU-OPT-TXT TO OPTN010O\n                   WHEN 11\n                       MOVE WS-MENU-OPT-TXT TO OPTN011O\n                   WHEN 12\n                       MOVE WS-MENU-OPT-TXT TO OPTN012O\n                   WHEN OTHER\n                       CONTINUE\n               END-EVALUATE\n\n           END-PERFORM.\n\n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:33 CDT\n      *\n</code></pre>"},{"location":"CORPT00C.html","title":"CORPT00C","text":""},{"location":"CORPT00C.html#overview","title":"Overview","text":"<p>This program (CORPT00C) is a CICS COBOL application that allows users to generate transaction reports by submitting batch jobs from an online interface using an extra partition transient data queue (TDQ). The program provides three report options: monthly, yearly, and custom date range reports. </p> <p>When executed, the program displays a screen where users can select a report type and specify date parameters for custom reports. After validation of user inputs (including date format validation using the CSUTLDTC utility), the program constructs a JCL job with the appropriate parameters and submits it to the internal reader via the \"JOBS\" TDQ. The batch job (TRNRPT00) will then execute the transaction report generation process based on the specified date range.</p> <p>The program includes comprehensive error handling for input validation, ensuring dates are properly formatted and valid before job submission. It also requires user confirmation before submitting the report job. The interface provides navigation options, including the ability to return to a previous menu screen.</p>"},{"location":"CORPT00C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>CORPT00C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"CORPT00C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant CORPT00C as \"CORPT00C Program\"\n    participant CORPT0A as \"Report Screen\"\n    participant CSUTLDTC as \"Date Validation Utility\"\n    participant TDQ as \"JOBS TDQ\"\n    participant BatchJob as \"TRNRPT00 Batch Job\"\n\n    User-&gt;&gt;CORPT00C: Start Transaction\n\n    CORPT00C-&gt;&gt;CORPT00C: MAIN-PARA\n\n    alt First Entry\n        CORPT00C-&gt;&gt;CORPT0A: Display Initial Report Screen\n    else Re-entry\n        CORPT00C-&gt;&gt;CORPT0A: RECEIVE-TRNRPT-SCREEN\n        CORPT0A--&gt;&gt;CORPT00C: User Input\n\n        alt ENTER Key\n            CORPT00C-&gt;&gt;CORPT00C: PROCESS-ENTER-KEY\n\n            alt Monthly Report\n                CORPT00C-&gt;&gt;CORPT00C: Calculate Current Month Date Range\n            else Yearly Report\n                CORPT00C-&gt;&gt;CORPT00C: Calculate Current Year Date Range\n            else Custom Date Range\n                CORPT00C-&gt;&gt;CORPT00C: Validate Input Fields\n\n                alt Valid Input Fields\n                    CORPT00C-&gt;&gt;CSUTLDTC: Validate Start Date\n                    CSUTLDTC--&gt;&gt;CORPT00C: Date Validation Result\n\n                    CORPT00C-&gt;&gt;CSUTLDTC: Validate End Date\n                    CSUTLDTC--&gt;&gt;CORPT00C: Date Validation Result\n                else Invalid Input\n                    CORPT00C-&gt;&gt;CORPT0A: Display Error Message\n                end\n            else No Report Type Selected\n                CORPT00C-&gt;&gt;CORPT0A: Display Error Message\n            end\n\n            alt No Errors &amp; No Confirmation Yet\n                CORPT00C-&gt;&gt;CORPT0A: Request Confirmation\n            else No Errors &amp; Confirmed\n                CORPT00C-&gt;&gt;CORPT00C: SUBMIT-JOB-TO-INTRDR\n\n                loop For Each JCL Line\n                    CORPT00C-&gt;&gt;CORPT00C: WIRTE-JOBSUB-TDQ\n                    CORPT00C-&gt;&gt;TDQ: Write JCL Record\n                    TDQ--&gt;&gt;BatchJob: Submit Job\n                end\n\n                CORPT00C-&gt;&gt;CORPT0A: Display Submission Confirmation\n            end\n\n        else PF3 Key\n            CORPT00C-&gt;&gt;CORPT00C: RETURN-TO-PREV-SCREEN\n        else Other Key\n            CORPT00C-&gt;&gt;CORPT0A: Display Invalid Key Message\n        end\n    end\n\n    CORPT00C-&gt;&gt;CORPT00C: RETURN-TO-CICS</code></pre>"},{"location":"CORPT00C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>DFHAID</code></li> <li><code>CVTRA05Y</code></li> <li><code>CORPT00</code></li> <li><code>COCOM01Y</code></li> <li><code>DFHBMSCA</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG01Y</code></li> </ul>"},{"location":"CORPT00C.html#environment-division","title":"Environment Division","text":""},{"location":"CORPT00C.html#configuration-section","title":"CONFIGURATION SECTION","text":"<p>This section would typically contain configuration details for the CORPT00C program, including file assignments, special names, and system dependencies. In this CICS COBOL application, the Configuration Section would define resources needed for the transaction report generation functionality, such as the \"JOBS\" TDQ used for job submission to the internal reader, any file definitions required for processing, and possibly special names for date handling with the CSUTLDTC utility. However, the specific configuration details are not provided in the snippet.</p> Code"},{"location":"CORPT00C.html#data-division","title":"Data Division","text":""},{"location":"CORPT00C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage Section defines the data structures used in the CORPT00C program for transaction report generation. It includes variables for program control, error handling, and date processing. Key elements include flags for error handling and processing control, date fields structured in YYYY-MM-DD format for report date ranges, and an extensive JCL job template structure (JOB-DATA) that will be populated and submitted to the internal reader. The section also contains parameters for date validation using the CSUTLDTC utility. The program incorporates several copybooks for common functionality, including screen layouts (CORPT00), title components (COTTL01Y), date handling (CSDAT01Y), messaging (CSMSG01Y), transaction processing (CVTRA05Y), and standard CICS definitions (DFHAID, DFHBMSCA).</p> Code <pre><code>01 WS-VARIABLES.\n         05 WS-PGMNAME                 PIC X(08) VALUE 'CORPT00C'.\n         05 WS-TRANID                  PIC X(04) VALUE 'CR00'.\n         05 WS-MESSAGE                 PIC X(80) VALUE SPACES.\n         05 WS-TRANSACT-FILE             PIC X(08) VALUE 'TRANSACT'.\n         05 WS-ERR-FLG                 PIC X(01) VALUE 'N'.\n           88 ERR-FLG-ON                         VALUE 'Y'.\n           88 ERR-FLG-OFF                        VALUE 'N'.\n         05 WS-TRANSACT-EOF            PIC X(01) VALUE 'N'.\n           88 TRANSACT-EOF                       VALUE 'Y'.\n           88 TRANSACT-NOT-EOF                   VALUE 'N'.\n         05 WS-SEND-ERASE-FLG          PIC X(01) VALUE 'Y'.\n           88 SEND-ERASE-YES                     VALUE 'Y'.\n           88 SEND-ERASE-NO                      VALUE 'N'.\n         05 WS-END-LOOP                PIC X(01) VALUE 'N'.\n           88 END-LOOP-YES                       VALUE 'Y'.\n           88 END-LOOP-NO                        VALUE 'N'.\n\n         05 WS-RESP-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REAS-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REC-COUNT               PIC S9(04) COMP VALUE ZEROS.\n         05 WS-IDX                     PIC S9(04) COMP VALUE ZEROS.\n         05 WS-REPORT-NAME             PIC X(10) VALUE SPACES.\n\n         05 WS-START-DATE.\n            10 WS-START-DATE-YYYY      PIC X(04) VALUE SPACES.\n            10 FILLER                  PIC X(01) VALUE '-'.\n            10 WS-START-DATE-MM        PIC X(02) VALUE SPACES.\n            10 FILLER                  PIC X(01) VALUE '-'.\n            10 WS-START-DATE-DD        PIC X(02) VALUE SPACES.\n         05 WS-END-DATE.\n            10 WS-END-DATE-YYYY        PIC X(04) VALUE SPACES.\n            10 FILLER                  PIC X(01) VALUE '-'.\n            10 WS-END-DATE-MM          PIC X(02) VALUE SPACES.\n            10 FILLER                  PIC X(01) VALUE '-'.\n            10 WS-END-DATE-DD          PIC X(02) VALUE SPACES.\n         05 WS-DATE-FORMAT             PIC X(10) VALUE 'YYYY-MM-DD'.\n\n         05 WS-NUM-99                  PIC 99   VALUE 0.\n         05 WS-NUM-9999                PIC 9999 VALUE 0.\n\n         05 WS-TRAN-AMT                PIC +99999999.99.\n         05 WS-TRAN-DATE               PIC X(08) VALUE '00/00/00'.\n         05 JCL-RECORD                 PIC X(80) VALUE ' '.\n\n       01 JOB-DATA.\n        02 JOB-DATA-1.\n         05 FILLER                     PIC X(80) VALUE\n         \"//TRNRPT00 JOB 'TRAN REPORT',CLASS=A,MSGCLASS=0,\".\n         05 FILLER                     PIC X(80) VALUE\n         \"// NOTIFY=&amp;SYSUID\".\n         05 FILLER                     PIC X(80) VALUE\n         \"//*\".\n         05 FILLER                     PIC X(80) VALUE\n         \"//JOBLIB JCLLIB ORDER=('AWS.M2.CARDDEMO.PROC')\".\n         05 FILLER                     PIC X(80) VALUE\n         \"//*\".\n         05 FILLER                     PIC X(80) VALUE\n         \"//STEP10 EXEC PROC=TRANREPT\".\n         05 FILLER                     PIC X(80) VALUE\n         \"//*\".\n         05 FILLER                     PIC X(80) VALUE\n         \"//STEP05R.SYMNAMES DD *\".\n         05 FILLER                     PIC X(80) VALUE\n         \"TRAN-CARD-NUM,263,16,ZD\".\n         05 FILLER                     PIC X(80) VALUE\n         \"TRAN-PROC-DT,305,10,CH\".\n         05 FILLER-1.\n            10 FILLER                  PIC X(18) VALUE\n         \"PARM-START-DATE,C'\".\n            10 PARM-START-DATE-1       PIC X(10) VALUE SPACES.\n            10 FILLER                  PIC X(52) VALUE \"'\".\n         05 FILLER-2.\n            10 FILLER                  PIC X(16) VALUE\n         \"PARM-END-DATE,C'\".\n            10 PARM-END-DATE-1         PIC X(10) VALUE SPACES.\n            10 FILLER                  PIC X(54) VALUE \"'\".\n         05 FILLER                     PIC X(80) VALUE\n         \"/*\".\n         05 FILLER                     PIC X(80) VALUE\n         \"//STEP10R.DATEPARM DD *\".\n         05 FILLER-3.\n            10 PARM-START-DATE-2       PIC X(10) VALUE SPACES.\n            10 FILLER                  PIC X VALUE SPACE.\n            10 PARM-END-DATE-2         PIC X(10) VALUE SPACES.\n            10 FILLER                  PIC X(59) VALUE SPACES.\n         05 FILLER                     PIC X(80) VALUE\n         \"/*\".\n         05 FILLER                     PIC X(80) VALUE\n         \"/*EOF\".\n        02 JOB-DATA-2 REDEFINES JOB-DATA-1.\n         05 JOB-LINES OCCURS 1000 TIMES PIC X(80).\n\n       01 CSUTLDTC-PARM.\n          05 CSUTLDTC-DATE                   PIC X(10).\n          05 CSUTLDTC-DATE-FORMAT            PIC X(10).\n          05 CSUTLDTC-RESULT.\n             10 CSUTLDTC-RESULT-SEV-CD       PIC X(04).\n             10 FILLER                       PIC X(11).\n             10 CSUTLDTC-RESULT-MSG-NUM      PIC X(04).\n             10 CSUTLDTC-RESULT-MSG          PIC X(61).\n\n       COPY COCOM01Y.\n\n       COPY CORPT00.\n\n       COPY COTTL01Y.\n       COPY CSDAT01Y.\n       COPY CSMSG01Y.\n\n       COPY CVTRA05Y.\n\n       COPY DFHAID.\n       COPY DFHBMSCA.\n\n      *----------------------------------------------------------------*\n      *                        LINKAGE SECTION\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"CORPT00C.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This section defines the DFHCOMMAREA in the Linkage Section, which is used to receive and pass data between CICS transactions. It contains a single field, LK-COMMAREA, defined as a variable-length array of characters that can expand from 1 to 32,767 bytes depending on the actual length passed in EIBCALEN (CICS Executive Interface Block Communication Area Length). This structure allows the program to handle communication areas of different sizes when the program is invoked from other CICS programs or when control returns to this program after a transfer.</p> Code <pre><code>01  DFHCOMMAREA.\n         05  LK-COMMAREA                           PIC X(01)\n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n\n      *----------------------------------------------------------------*\n      *\n</code></pre>"},{"location":"CORPT00C.html#procedure-division","title":"Procedure Division","text":""},{"location":"CORPT00C.html#main-para","title":"MAIN-PARA","text":"<p>This paragraph serves as the main control flow for the transaction report generation program. It initializes error flags, handles first-time entry versus re-entry to the program, and processes user interactions.</p> <p>When first entered, the code checks if a communication area exists. If not, it returns to the sign-on program (COSGN00C). For valid entries, it either displays the initial report selection screen or processes user input from a previously displayed screen.</p> <p>The paragraph implements navigation logic through function key handling - specifically processing ENTER key actions through a separate paragraph and allowing users to return to the menu screen (COMEN01C) via PF3. Any other key inputs trigger an error message.</p> <p>The code maintains program state between interactions by returning with the transaction ID and communication area, enabling the conversation to continue when the user responds.</p> Code <pre><code>SET ERR-FLG-OFF TO TRUE\n           SET TRANSACT-NOT-EOF TO TRUE\n           SET SEND-ERASE-YES TO TRUE\n\n           MOVE SPACES TO WS-MESSAGE\n                          ERRMSGO OF CORPT0AO\n\n           IF EIBCALEN = 0\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n               PERFORM RETURN-TO-PREV-SCREEN\n           ELSE\n               MOVE DFHCOMMAREA(1:EIBCALEN) TO CARDDEMO-COMMAREA\n               IF NOT CDEMO-PGM-REENTER\n                   SET CDEMO-PGM-REENTER    TO TRUE\n                   MOVE LOW-VALUES          TO CORPT0AO\n                   MOVE -1       TO MONTHLYL OF CORPT0AI\n                   PERFORM SEND-TRNRPT-SCREEN\n               ELSE\n                   PERFORM RECEIVE-TRNRPT-SCREEN\n                   EVALUATE EIBAID\n                       WHEN DFHENTER\n                           PERFORM PROCESS-ENTER-KEY\n                       WHEN DFHPF3\n                           MOVE 'COMEN01C' TO CDEMO-TO-PROGRAM\n                           PERFORM RETURN-TO-PREV-SCREEN\n                       WHEN OTHER\n                           MOVE 'Y'                       TO WS-ERR-FLG\n                           MOVE -1       TO MONTHLYL OF CORPT0AI\n                           MOVE CCDA-MSG-INVALID-KEY      TO WS-MESSAGE\n                           PERFORM SEND-TRNRPT-SCREEN\n                   END-EVALUATE\n               END-IF\n           END-IF\n\n           EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n           END-EXEC.\n\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-ENTER-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"CORPT00C.html#process-enter-key","title":"PROCESS-ENTER-KEY","text":"<p>This paragraph processes the Enter key action in the transaction report generation interface, handling three report types: monthly, yearly, and custom date range. For monthly and yearly reports, it automatically calculates appropriate date ranges (current month or current year respectively). For custom reports, it performs extensive validation of user-entered dates, checking for empty fields, numeric values, valid ranges (months 1-12, days 1-31), and valid calendar dates using the CSUTLDTC utility. After validation, it prepares the report parameters and calls the SUBMIT-JOB-TO-INTRDR paragraph to submit the batch job. The code includes comprehensive error handling with specific error messages for each validation failure, positioning the cursor at the problematic field. Upon successful submission, it displays a confirmation message indicating which report type was submitted.</p> Code <pre><code>DISPLAY 'PROCESS ENTER KEY'\n\n           EVALUATE TRUE\n               WHEN MONTHLYI OF CORPT0AI NOT = SPACES AND LOW-VALUES\n                   MOVE 'Monthly'   TO WS-REPORT-NAME\n                   MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n                   MOVE WS-CURDATE-YEAR     TO WS-START-DATE-YYYY\n                   MOVE WS-CURDATE-MONTH    TO WS-START-DATE-MM\n                   MOVE '01'                TO WS-START-DATE-DD\n                   MOVE WS-START-DATE       TO PARM-START-DATE-1\n                                               PARM-START-DATE-2\n\n                   MOVE 1              TO WS-CURDATE-DAY\n                   ADD 1               TO WS-CURDATE-MONTH\n                   IF WS-CURDATE-MONTH &gt; 12\n                       ADD 1           TO WS-CURDATE-YEAR\n                       MOVE 1          TO WS-CURDATE-MONTH\n                   END-IF\n                   COMPUTE WS-CURDATE-N = FUNCTION DATE-OF-INTEGER(\n                           FUNCTION INTEGER-OF-DATE(WS-CURDATE-N) - 1)\n\n                   MOVE WS-CURDATE-YEAR     TO WS-END-DATE-YYYY\n                   MOVE WS-CURDATE-MONTH    TO WS-END-DATE-MM\n                   MOVE WS-CURDATE-DAY      TO WS-END-DATE-DD\n                   MOVE WS-END-DATE         TO PARM-END-DATE-1\n                                               PARM-END-DATE-2\n\n                   PERFORM SUBMIT-JOB-TO-INTRDR\n               WHEN YEARLYI OF CORPT0AI NOT = SPACES AND LOW-VALUES\n                   MOVE 'Yearly'   TO WS-REPORT-NAME\n                   MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n                   MOVE WS-CURDATE-YEAR     TO WS-START-DATE-YYYY\n                                               WS-END-DATE-YYYY\n                   MOVE '01'                TO WS-START-DATE-MM\n                                               WS-START-DATE-DD\n                   MOVE WS-START-DATE       TO PARM-START-DATE-1\n                                               PARM-START-DATE-2\n\n                   MOVE '12'                TO WS-END-DATE-MM\n                   MOVE '31'                TO WS-END-DATE-DD\n                   MOVE WS-END-DATE         TO PARM-END-DATE-1\n                                               PARM-END-DATE-2\n\n                   PERFORM SUBMIT-JOB-TO-INTRDR\n               WHEN CUSTOMI OF CORPT0AI NOT = SPACES AND LOW-VALUES\n\n                   EVALUATE TRUE\n                       WHEN SDTMMI OF CORPT0AI = SPACES OR\n                                                   LOW-VALUES\n                           MOVE 'Start Date - Month can NOT be empty...'\n                             TO WS-MESSAGE\n                           MOVE 'Y'     TO WS-ERR-FLG\n                           MOVE -1       TO SDTMML OF CORPT0AI\n                           PERFORM SEND-TRNRPT-SCREEN\n                       WHEN SDTDDI OF CORPT0AI = SPACES OR\n                                                   LOW-VALUES\n                           MOVE 'Start Date - Day can NOT be empty...'\n                             TO WS-MESSAGE\n                           MOVE 'Y'     TO WS-ERR-FLG\n                           MOVE -1       TO SDTDDL OF CORPT0AI\n                           PERFORM SEND-TRNRPT-SCREEN\n                       WHEN SDTYYYYI OF CORPT0AI = SPACES OR\n                                                   LOW-VALUES\n                           MOVE 'Start Date - Year can NOT be empty...'\n                             TO WS-MESSAGE\n                           MOVE 'Y'     TO WS-ERR-FLG\n                           MOVE -1       TO SDTYYYYL OF CORPT0AI\n                           PERFORM SEND-TRNRPT-SCREEN\n                       WHEN EDTMMI OF CORPT0AI = SPACES OR\n                                                   LOW-VALUES\n                           MOVE 'End Date - Month can NOT be empty...'\n                             TO WS-MESSAGE\n                           MOVE 'Y'     TO WS-ERR-FLG\n                           MOVE -1       TO EDTMML OF CORPT0AI\n                           PERFORM SEND-TRNRPT-SCREEN\n                       WHEN EDTDDI OF CORPT0AI = SPACES OR\n                                                   LOW-VALUES\n                           MOVE 'End Date - Day can NOT be empty...'\n                             TO WS-MESSAGE\n                           MOVE 'Y'     TO WS-ERR-FLG\n                           MOVE -1       TO EDTDDL OF CORPT0AI\n                           PERFORM SEND-TRNRPT-SCREEN\n                       WHEN EDTYYYYI OF CORPT0AI = SPACES OR\n                                                   LOW-VALUES\n                           MOVE 'End Date - Year can NOT be empty...'\n                             TO WS-MESSAGE\n                           MOVE 'Y'     TO WS-ERR-FLG\n                           MOVE -1       TO EDTYYYYL OF CORPT0AI\n                           PERFORM SEND-TRNRPT-SCREEN\n                       WHEN OTHER\n                           CONTINUE\n                   END-EVALUATE\n\n                   COMPUTE WS-NUM-99 = FUNCTION NUMVAL-C\n                                         (SDTMMI OF CORPT0AI)\n                   MOVE WS-NUM-99      TO SDTMMI OF CORPT0AI\n\n                   COMPUTE WS-NUM-99 = FUNCTION NUMVAL-C\n                                         (SDTDDI OF CORPT0AI)\n                   MOVE WS-NUM-99      TO SDTDDI OF CORPT0AI\n\n                   COMPUTE WS-NUM-9999 = FUNCTION NUMVAL-C\n                                           (SDTYYYYI OF CORPT0AI)\n                   MOVE WS-NUM-9999      TO SDTYYYYI OF CORPT0AI\n\n                   COMPUTE WS-NUM-99 = FUNCTION NUMVAL-C\n                                         (EDTMMI OF CORPT0AI)\n                   MOVE WS-NUM-99      TO EDTMMI OF CORPT0AI\n\n                   COMPUTE WS-NUM-99 = FUNCTION NUMVAL-C\n                                         (EDTDDI OF CORPT0AI)\n                   MOVE WS-NUM-99      TO EDTDDI OF CORPT0AI\n\n                   COMPUTE WS-NUM-9999 = FUNCTION NUMVAL-C\n                                           (EDTYYYYI OF CORPT0AI)\n                   MOVE WS-NUM-9999      TO EDTYYYYI OF CORPT0AI\n\n                   IF SDTMMI OF CORPT0AI IS NOT NUMERIC OR\n                      SDTMMI OF CORPT0AI &gt; '12'\n                       MOVE 'Start Date - Not a valid Month...'\n                         TO WS-MESSAGE\n                       MOVE 'Y'     TO WS-ERR-FLG\n                       MOVE -1       TO SDTMML OF CORPT0AI\n                       PERFORM SEND-TRNRPT-SCREEN\n                   END-IF\n\n                   IF SDTDDI OF CORPT0AI IS NOT NUMERIC OR\n                      SDTDDI OF CORPT0AI &gt; '31'\n                       MOVE 'Start Date - Not a valid Day...'\n                         TO WS-MESSAGE\n                       MOVE 'Y'     TO WS-ERR-FLG\n                       MOVE -1       TO SDTDDL OF CORPT0AI\n                       PERFORM SEND-TRNRPT-SCREEN\n                   END-IF\n\n                   IF SDTYYYYI OF CORPT0AI IS NOT NUMERIC\n                       MOVE 'Start Date - Not a valid Year...'\n                         TO WS-MESSAGE\n                       MOVE 'Y'     TO WS-ERR-FLG\n                       MOVE -1       TO SDTYYYYL OF CORPT0AI\n                       PERFORM SEND-TRNRPT-SCREEN\n                   END-IF\n\n                   IF EDTMMI OF CORPT0AI IS NOT NUMERIC OR\n                      EDTMMI OF CORPT0AI &gt; '12'\n                       MOVE 'End Date - Not a valid Month...'\n                         TO WS-MESSAGE\n                       MOVE 'Y'     TO WS-ERR-FLG\n                       MOVE -1       TO EDTMML OF CORPT0AI\n                       PERFORM SEND-TRNRPT-SCREEN\n                   END-IF\n\n                   IF EDTDDI OF CORPT0AI IS NOT NUMERIC OR\n                      EDTDDI OF CORPT0AI &gt; '31'\n                       MOVE 'End Date - Not a valid Day...'\n                         TO WS-MESSAGE\n                       MOVE 'Y'     TO WS-ERR-FLG\n                       MOVE -1       TO EDTDDL OF CORPT0AI\n                       PERFORM SEND-TRNRPT-SCREEN\n                   END-IF\n\n                   IF EDTYYYYI OF CORPT0AI IS NOT NUMERIC\n                       MOVE 'End Date - Not a valid Year...'\n                         TO WS-MESSAGE\n                       MOVE 'Y'     TO WS-ERR-FLG\n                       MOVE -1       TO EDTYYYYL OF CORPT0AI\n                       PERFORM SEND-TRNRPT-SCREEN\n                   END-IF\n\n                   MOVE SDTYYYYI OF CORPT0AI TO WS-START-DATE-YYYY\n                   MOVE SDTMMI   OF CORPT0AI TO WS-START-DATE-MM\n                   MOVE SDTDDI   OF CORPT0AI TO WS-START-DATE-DD\n                   MOVE EDTYYYYI OF CORPT0AI TO WS-END-DATE-YYYY\n                   MOVE EDTMMI   OF CORPT0AI TO WS-END-DATE-MM\n                   MOVE EDTDDI   OF CORPT0AI TO WS-END-DATE-DD\n\n                   MOVE WS-START-DATE        TO CSUTLDTC-DATE\n                   MOVE WS-DATE-FORMAT       TO CSUTLDTC-DATE-FORMAT\n                   MOVE SPACES               TO CSUTLDTC-RESULT\n\n                   CALL 'CSUTLDTC' USING   CSUTLDTC-DATE\n                                           CSUTLDTC-DATE-FORMAT\n                                           CSUTLDTC-RESULT\n\n                   IF CSUTLDTC-RESULT-SEV-CD = '0000'\n                       CONTINUE\n                   ELSE\n                       IF CSUTLDTC-RESULT-MSG-NUM NOT = '2513'\n                           MOVE 'Start Date - Not a valid date...'\n                             TO WS-MESSAGE\n                           MOVE 'Y'     TO WS-ERR-FLG\n                           MOVE -1       TO SDTMML OF CORPT0AI\n                           PERFORM SEND-TRNRPT-SCREEN\n                       END-IF\n                   END-IF\n\n                   MOVE WS-END-DATE          TO CSUTLDTC-DATE\n                   MOVE WS-DATE-FORMAT       TO CSUTLDTC-DATE-FORMAT\n                   MOVE SPACES               TO CSUTLDTC-RESULT\n\n                   CALL 'CSUTLDTC' USING   CSUTLDTC-DATE\n                                           CSUTLDTC-DATE-FORMAT\n                                           CSUTLDTC-RESULT\n\n                   IF CSUTLDTC-RESULT-SEV-CD = '0000'\n                       CONTINUE\n                   ELSE\n                       IF CSUTLDTC-RESULT-MSG-NUM NOT = '2513'\n                           MOVE 'End Date - Not a valid date...'\n                             TO WS-MESSAGE\n                           MOVE 'Y'     TO WS-ERR-FLG\n                           MOVE -1       TO EDTMML OF CORPT0AI\n                           PERFORM SEND-TRNRPT-SCREEN\n                       END-IF\n                   END-IF\n\n\n                   MOVE WS-START-DATE       TO PARM-START-DATE-1\n                                               PARM-START-DATE-2\n                   MOVE WS-END-DATE         TO PARM-END-DATE-1\n                                               PARM-END-DATE-2\n                   MOVE 'Custom'   TO WS-REPORT-NAME\n                   IF NOT ERR-FLG-ON\n                       PERFORM SUBMIT-JOB-TO-INTRDR\n                   END-IF\n               WHEN OTHER\n                   MOVE 'Select a report type to print report...' TO\n                                   WS-MESSAGE\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE -1       TO MONTHLYL OF CORPT0AI\n                   PERFORM SEND-TRNRPT-SCREEN\n           END-EVALUATE\n\n           IF NOT ERR-FLG-ON\n\n               PERFORM INITIALIZE-ALL-FIELDS\n               MOVE DFHGREEN           TO ERRMSGC  OF CORPT0AO\n               STRING WS-REPORT-NAME   DELIMITED BY SPACE\n                 ' report submitted for printing ...'\n                                       DELIMITED BY SIZE\n                 INTO WS-MESSAGE\n               MOVE -1       TO MONTHLYL OF CORPT0AI\n               PERFORM SEND-TRNRPT-SCREEN\n\n           END-IF.\n\n\n      *----------------------------------------------------------------*\n      *                      SUBMIT-JOB-TO-INTRDR\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"CORPT00C.html#submit-job-to-intrdr","title":"SUBMIT-JOB-TO-INTRDR","text":"<p>This paragraph handles the job submission confirmation process and writes the JCL to the transient data queue. It first checks if the user has provided confirmation input. If not, it prompts the user to confirm the report generation. When confirmation is provided, it validates the response ('Y' or 'N'), either continuing with job submission for 'Y' or reinitializing the screen for 'N'. For invalid confirmation values, it displays an error message. Once confirmed, the paragraph iterates through the pre-constructed JCL statements in the JOB-LINES array, writing each line to the JOBS transient data queue until it encounters an end marker ('/*EOF') or empty line. This effectively submits the batch job to the internal reader for execution.</p> Code <pre><code>IF CONFIRMI OF CORPT0AI = SPACES OR LOW-VALUES\n               STRING\n                 'Please confirm to print the '\n                                   DELIMITED BY SIZE\n                 WS-REPORT-NAME    DELIMITED BY SPACE\n                 ' report...'      DELIMITED BY SIZE\n                 INTO WS-MESSAGE\n               MOVE 'Y'     TO WS-ERR-FLG\n               MOVE -1       TO CONFIRML OF CORPT0AI\n               PERFORM SEND-TRNRPT-SCREEN\n           END-IF\n\n           IF NOT ERR-FLG-ON\n               EVALUATE TRUE\n                   WHEN CONFIRMI OF CORPT0AI = 'Y' OR 'y'\n                       CONTINUE\n                   WHEN CONFIRMI OF CORPT0AI = 'N' OR 'n'\n                       PERFORM INITIALIZE-ALL-FIELDS\n                       MOVE 'Y'     TO WS-ERR-FLG\n                       PERFORM SEND-TRNRPT-SCREEN\n                   WHEN OTHER\n                       STRING\n                         '\"'               DELIMITED BY SIZE\n                         CONFIRMI OF CORPT0AI    DELIMITED BY SPACE\n                         '\" is not a valid value to confirm...'\n                                           DELIMITED BY SIZE\n                         INTO WS-MESSAGE\n                       MOVE 'Y'     TO WS-ERR-FLG\n                       MOVE -1       TO CONFIRML OF CORPT0AI\n                       PERFORM SEND-TRNRPT-SCREEN\n               END-EVALUATE\n\n               SET END-LOOP-NO TO TRUE\n\n               PERFORM VARYING WS-IDX FROM 1 BY 1 UNTIL WS-IDX &gt; 1000 OR\n                                      END-LOOP-YES  OR ERR-FLG-ON\n\n                   MOVE JOB-LINES(WS-IDX) TO JCL-RECORD\n                   IF JCL-RECORD = '/*EOF' OR\n                      JCL-RECORD = SPACES OR LOW-VALUES\n                       SET END-LOOP-YES TO TRUE\n                   END-IF\n\n                   PERFORM WIRTE-JOBSUB-TDQ\n               END-PERFORM\n\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      WIRTE-JOBSUB-TDQ\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"CORPT00C.html#wirte-jobsub-tdq","title":"WIRTE-JOBSUB-TDQ","text":"<p>This paragraph handles the submission of JCL job records to the \"JOBS\" transient data queue (TDQ) which serves as an interface to the internal reader. It writes the constructed JCL record to the queue and implements error handling logic. If the operation completes normally, processing continues. For any other response code, the paragraph displays diagnostic information (response and reason codes), sets an error flag, prepares an error message for the user, positions the cursor at the MONTHLY field on the input screen, and then calls the SEND-TRNRPT-SCREEN paragraph to display the error to the user. This is a critical component of the job submission process that ensures proper feedback when the TDQ write operation fails.</p> Code <pre><code>EXEC CICS WRITEQ TD\n             QUEUE ('JOBS')\n             FROM (JCL-RECORD)\n             LENGTH (LENGTH OF JCL-RECORD)\n             RESP(WS-RESP-CD)\n             RESP2(WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to Write TDQ (JOBS)...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO MONTHLYL OF CORPT0AI\n                   PERFORM SEND-TRNRPT-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      RETURN-TO-PREV-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"CORPT00C.html#return-to-prev-screen","title":"RETURN-TO-PREV-SCREEN","text":"<p>This paragraph handles the navigation back to a previous screen in the CardDemo application. It first checks if the target program is specified in the communication area, and if not, defaults to 'COSGN00C' (likely the main menu or sign-on screen). It then sets up the communication area with the current transaction ID and program name as the source of the transfer, resets the program context to zeros, and uses the CICS XCTL command to transfer control to the target program while passing the communication area. This provides a consistent navigation mechanism throughout the application.</p> Code <pre><code>IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n           END-IF\n           MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n           MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n           MOVE ZEROS        TO CDEMO-PGM-CONTEXT\n           EXEC CICS\n               XCTL PROGRAM(CDEMO-TO-PROGRAM)\n               COMMAREA(CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      SEND-TRNRPT-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"CORPT00C.html#send-trnrpt-screen","title":"SEND-TRNRPT-SCREEN","text":"<p>This paragraph handles the display of the transaction report screen to the user. It first calls the POPULATE-HEADER-INFO paragraph to set up common header information, then displays any system messages stored in WS-MESSAGE to the user. The paragraph uses conditional logic to determine whether to send the screen with the ERASE option (which clears the screen before displaying) or without it, based on the SEND-ERASE-YES flag. In both cases, it sends the CORPT0A map from the CORPT00 mapset with cursor positioning. After sending the screen, it transfers control to the RETURN-TO-CICS paragraph to return control to CICS.</p> Code <pre><code>PERFORM POPULATE-HEADER-INFO\n\n           MOVE WS-MESSAGE TO ERRMSGO OF CORPT0AO\n\n           IF SEND-ERASE-YES\n               EXEC CICS SEND\n                         MAP('CORPT0A')\n                         MAPSET('CORPT00')\n                         FROM(CORPT0AO)\n                         ERASE\n                         CURSOR\n               END-EXEC\n           ELSE\n               EXEC CICS SEND\n                         MAP('CORPT0A')\n                         MAPSET('CORPT00')\n                         FROM(CORPT0AO)\n      *                  ERASE\n                         CURSOR\n               END-EXEC\n           END-IF.\n\n           GO TO RETURN-TO-CICS.\n\n      *----------------------------------------------------------------*\n      *                         RETURN-TO-CICS\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"CORPT00C.html#return-to-cics","title":"RETURN-TO-CICS","text":"<p>This paragraph handles the return to CICS control after processing is complete. It executes a CICS RETURN command that specifies the transaction ID stored in WS-TRANID and passes the CARDDEMO-COMMAREA as the communication area for the next transaction. The LENGTH parameter is commented out, which means the system will use the default length of the COMMAREA. This is typically used at the end of processing to either terminate the transaction or to pass control back to CICS for the next transaction execution.</p> Code <pre><code>EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n      *              LENGTH(LENGTH OF CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      RECEIVE-TRNRPT-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"CORPT00C.html#receive-trnrpt-screen","title":"RECEIVE-TRNRPT-SCREEN","text":"<p>This paragraph receives user input from the transaction report selection screen (CORPT0A) into the input map area (CORPT0AI). It captures the user's report type selection and date parameters entered on the screen. The CICS RECEIVE command stores response codes in WS-RESP-CD and WS-REAS-CD variables for error handling. After receiving the screen data, control will flow to the POPULATE-HEADER-INFO paragraph which likely prepares common header information for the interface.</p> Code <pre><code>EXEC CICS RECEIVE\n                     MAP('CORPT0A')\n                     MAPSET('CORPT00')\n                     INTO(CORPT0AI)\n                     RESP(WS-RESP-CD)\n                     RESP2(WS-REAS-CD)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      POPULATE-HEADER-INFO\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"CORPT00C.html#populate-header-info","title":"POPULATE-HEADER-INFO","text":"<p>This paragraph populates the header information for the transaction report screen. It retrieves the current system date and time using the CURRENT-DATE function, then formats and displays this information on the screen. The paragraph sets the screen title fields from constants, displays the transaction ID and program name, and formats the current date in MM/DD/YY format and the current time in HH:MM:SS format for display. This ensures the user interface shows accurate identifying information and timestamps when generating transaction reports.</p> Code <pre><code>MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n           MOVE CCDA-TITLE01           TO TITLE01O OF CORPT0AO\n           MOVE CCDA-TITLE02           TO TITLE02O OF CORPT0AO\n           MOVE WS-TRANID              TO TRNNAMEO OF CORPT0AO\n           MOVE WS-PGMNAME             TO PGMNAMEO OF CORPT0AO\n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM\n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD\n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY\n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF CORPT0AO\n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH\n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM\n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS\n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF CORPT0AO.\n\n      *----------------------------------------------------------------*\n      *                      INITIALIZE-ALL-FIELDS\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"CORPT00C.html#initialize-all-fields","title":"INITIALIZE-ALL-FIELDS","text":"<p>This paragraph initializes the input fields on the transaction report generation screen. It first positions the cursor at the MONTHLY field by setting its length attribute to -1, then clears all input fields including report type selection options (MONTHLY, YEARLY, CUSTOM), start date components (month, day, year), end date components (month, day, year), and the confirmation field. This ensures the screen is reset to a clean state when the user first accesses the report generation interface or when fields need to be cleared during processing.</p> Code <pre><code>MOVE -1              TO MONTHLYL OF CORPT0AI\n           INITIALIZE              MONTHLYI OF CORPT0AI\n                                   YEARLYI  OF CORPT0AI\n                                   CUSTOMI  OF CORPT0AI\n                                   SDTMMI   OF CORPT0AI\n                                   SDTDDI   OF CORPT0AI\n                                   SDTYYYYI OF CORPT0AI\n                                   EDTMMI   OF CORPT0AI\n                                   EDTDDI   OF CORPT0AI\n                                   EDTYYYYI OF CORPT0AI\n                                   CONFIRMI OF CORPT0AI\n</code></pre>"},{"location":"CORPT00C.html#ws-message","title":"WS-MESSAGE","text":"<p>This paragraph contains version control information for the CORPT00C program, showing it's part of the CardDemo application version 1.0-15-g27d6c6f-68, with a timestamp of July 19, 2022, at 23:12:33 CDT. This helps track which version of the code is deployed and when it was last updated.</p> Code <pre><code>*\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:33 CDT\n      *\n</code></pre>"},{"location":"COSGN00C.html","title":"COSGN00C","text":""},{"location":"COSGN00C.html#overview","title":"Overview","text":"<p>This program serves as the sign-on screen handler for the CardDemo application in a CICS environment. It manages user authentication by displaying a login form, validating user credentials against a security file (USRSEC), and routing authenticated users to appropriate programs based on their user type. The program handles various function keys, performs input validation to ensure user ID and password fields are not empty, and displays appropriate error messages when validation fails. Upon successful authentication, it transfers control to either the admin menu (COADM01C) or the general user menu (COMEN01C) based on the user's security profile, passing user context information through a communication area.</p>"},{"location":"COSGN00C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COSGN00C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"COSGN00C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant CICS\n    participant COSGN00C as \"Sign-on Program&lt;br/&gt;(COSGN00C)\"\n    participant USRSEC as \"User Security File&lt;br/&gt;(USRSEC)\"\n    participant COADM01C as \"Admin Menu&lt;br/&gt;(COADM01C)\"\n    participant COMEN01C as \"User Menu&lt;br/&gt;(COMEN01C)\"\n\n    User-&gt;&gt;CICS: Start transaction\n    CICS-&gt;&gt;+COSGN00C: Execute MAIN-PARA\n\n    alt First execution (EIBCALEN = 0)\n        COSGN00C-&gt;&gt;COSGN00C: POPULATE-HEADER-INFO\n        COSGN00C--&gt;&gt;User: SEND-SIGNON-SCREEN\n    else Subsequent execution\n        alt EIBAID = ENTER\n            COSGN00C-&gt;&gt;COSGN00C: PROCESS-ENTER-KEY\n            COSGN00C-&gt;&gt;User: Receive map input\n\n            alt Input validation\n                alt User ID empty\n                    COSGN00C--&gt;&gt;User: Display \"Please enter User ID\" message\n                else Password empty\n                    COSGN00C--&gt;&gt;User: Display \"Please enter Password\" message\n                else Valid input\n                    COSGN00C-&gt;&gt;+USRSEC: READ-USER-SEC-FILE\n\n                    alt User found (RESP = 0)\n                        alt Password matches\n                            COSGN00C-&gt;&gt;COSGN00C: Populate communication area\n                            alt User type = Admin\n                                COSGN00C-&gt;&gt;COADM01C: Transfer control (XCTL)\n                            else User type = General\n                                COSGN00C-&gt;&gt;COMEN01C: Transfer control (XCTL)\n                            end\n                        else Password incorrect\n                            COSGN00C--&gt;&gt;User: Display \"Wrong Password\" message\n                        end\n                    else User not found (RESP = 13)\n                        COSGN00C--&gt;&gt;User: Display \"User not found\" message\n                    else Other error\n                        COSGN00C--&gt;&gt;User: Display \"Unable to verify the User\" message\n                    end\n                    USRSEC-&gt;&gt;-COSGN00C: Return\n                end\n            end\n\n        else EIBAID = PF3\n            COSGN00C--&gt;&gt;User: SEND-PLAIN-TEXT \"Thank you\"\n            COSGN00C-&gt;&gt;CICS: Return\n        else Other key\n            COSGN00C--&gt;&gt;User: Display \"Invalid key\" message\n        end\n    end\n\n    COSGN00C-&gt;&gt;-CICS: Return with COMMAREA</code></pre>"},{"location":"COSGN00C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>DFHAID</code></li> <li><code>CSUSR01Y</code></li> <li><code>COCOM01Y</code></li> <li><code>DFHBMSCA</code></li> <li><code>DFHATTR</code></li> <li><code>COTTL01Y</code></li> <li><code>COSGN00</code></li> <li><code>CSMSG01Y</code></li> </ul>"},{"location":"COSGN00C.html#environment-division","title":"Environment Division","text":""},{"location":"COSGN00C.html#configuration-section","title":"CONFIGURATION SECTION","text":"<p>This environment section is empty, indicating that the COSGN00C program does not define any special configuration settings, file assignments, or system dependencies in its CONFIGURATION SECTION. The program likely relies on standard CICS environment settings or defines its configuration needs elsewhere in the program.</p> Code"},{"location":"COSGN00C.html#data-division","title":"Data Division","text":""},{"location":"COSGN00C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working-Storage Section defines the key variables and data structures used by the sign-on program COSGN00C. It includes program-specific variables for tracking the program name, transaction ID, error messages, and user credentials. The section defines the USRSEC file name for user authentication, error flags with condition names for easier status checking, and response/reason codes for error handling. Several copybooks are included to incorporate common data structures: COCOM01Y (likely communication area), COSGN00 (sign-on screen layout), COTTL01Y (title information), CSDAT01Y (date handling), CSMSG01Y (message handling), and CSUSR01Y (user information). Standard CICS copybooks DFHAID and DFHBMSCA are included for function key definitions and BMS screen control attributes. This section establishes the foundation for the program's user authentication and screen handling functionality.</p> Code <pre><code>01 WS-VARIABLES.\n         05 WS-PGMNAME                 PIC X(08) VALUE 'COSGN00C'.\n         05 WS-TRANID                  PIC X(04) VALUE 'CC00'.\n         05 WS-MESSAGE                 PIC X(80) VALUE SPACES.\n         05 WS-USRSEC-FILE             PIC X(08) VALUE 'USRSEC  '.\n         05 WS-ERR-FLG                 PIC X(01) VALUE 'N'.\n           88 ERR-FLG-ON                         VALUE 'Y'.\n           88 ERR-FLG-OFF                        VALUE 'N'.\n         05 WS-RESP-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REAS-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-USER-ID                 PIC X(08).\n         05 WS-USER-PWD                PIC X(08).\n\n       COPY COCOM01Y.\n\n       COPY COSGN00.\n\n       COPY COTTL01Y.\n       COPY CSDAT01Y.\n       COPY CSMSG01Y.\n       COPY CSUSR01Y.\n\n       COPY DFHAID.\n       COPY DFHBMSCA.\n      *COPY DFHATTR.\n\n      *----------------------------------------------------------------*\n      *                        LINKAGE SECTION\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COSGN00C.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This section defines the linkage area for communication with other programs. It contains a DFHCOMMAREA structure with a single field LK-COMMAREA, which is a variable-length array of characters that can hold between 1 and 32,767 bytes depending on the value of EIBCALEN (the CICS-provided length of the communication area). This structure allows the sign-on program to receive and pass data to other programs in the CardDemo application.</p> Code <pre><code>01  DFHCOMMAREA.\n         05  LK-COMMAREA                           PIC X(01)\n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n\n      *----------------------------------------------------------------*\n      *\n</code></pre>"},{"location":"COSGN00C.html#procedure-division","title":"Procedure Division","text":""},{"location":"COSGN00C.html#main-para","title":"MAIN-PARA","text":"<p>This paragraph serves as the main control flow for the sign-on screen handler. It first clears any error flags and message fields, then determines the appropriate action based on the program's execution context. If no communication area exists (EIBCALEN = 0), it initializes the screen with empty fields and positions the cursor at the user ID field. Otherwise, it processes user input based on the function key pressed: for Enter key, it calls the credential validation routine; for PF3, it displays a thank you message and exits; for any other key, it displays an invalid key error message. After processing, it returns control to CICS while preserving the transaction ID and communication area data for maintaining session state between interactions.</p> Code <pre><code>SET ERR-FLG-OFF TO TRUE\n\n           MOVE SPACES TO WS-MESSAGE\n                          ERRMSGO OF COSGN0AO\n\n           IF EIBCALEN = 0\n               MOVE LOW-VALUES TO COSGN0AO\n               MOVE -1       TO USERIDL OF COSGN0AI\n               PERFORM SEND-SIGNON-SCREEN\n           ELSE\n               EVALUATE EIBAID\n                   WHEN DFHENTER\n                       PERFORM PROCESS-ENTER-KEY\n                   WHEN DFHPF3\n                       MOVE CCDA-MSG-THANK-YOU        TO WS-MESSAGE\n                       PERFORM SEND-PLAIN-TEXT\n                   WHEN OTHER\n                       MOVE 'Y'                       TO WS-ERR-FLG\n                       MOVE CCDA-MSG-INVALID-KEY      TO WS-MESSAGE\n                       PERFORM SEND-SIGNON-SCREEN\n               END-EVALUATE\n           END-IF.\n\n           EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n                     LENGTH(LENGTH OF CARDDEMO-COMMAREA)\n           END-EXEC.\n\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-ENTER-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COSGN00C.html#process-enter-key","title":"PROCESS-ENTER-KEY","text":"<p>This paragraph handles the processing of the Enter key in the sign-on screen. It first receives input from the COSGN0A map and then validates the user input. It checks if the User ID or Password fields are empty or contain low-values, displaying appropriate error messages and repositioning the cursor when validation fails. If both fields contain data, it converts the User ID and Password to uppercase and stores them in working storage variables. When no validation errors are detected, it proceeds to read the user security file to authenticate the credentials. This paragraph is a critical part of the application's authentication flow, ensuring that users provide the necessary credentials before proceeding.</p> Code <pre><code>EXEC CICS RECEIVE\n                     MAP('COSGN0A')\n                     MAPSET('COSGN00')\n                     RESP(WS-RESP-CD)\n                     RESP2(WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE TRUE\n               WHEN USERIDI OF COSGN0AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'      TO WS-ERR-FLG\n                   MOVE 'Please enter User ID ...' TO WS-MESSAGE\n                   MOVE -1       TO USERIDL OF COSGN0AI\n                   PERFORM SEND-SIGNON-SCREEN\n               WHEN PASSWDI OF COSGN0AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'      TO WS-ERR-FLG\n                   MOVE 'Please enter Password ...' TO WS-MESSAGE\n                   MOVE -1       TO PASSWDL OF COSGN0AI\n                   PERFORM SEND-SIGNON-SCREEN\n               WHEN OTHER\n                   CONTINUE\n           END-EVALUATE.\n\n           MOVE FUNCTION UPPER-CASE(USERIDI OF COSGN0AI) TO\n                           WS-USER-ID\n                           CDEMO-USER-ID\n           MOVE FUNCTION UPPER-CASE(PASSWDI OF COSGN0AI) TO\n                           WS-USER-PWD\n\n           IF NOT ERR-FLG-ON\n               PERFORM READ-USER-SEC-FILE\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      SEND-SIGNON-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COSGN00C.html#send-signon-screen","title":"SEND-SIGNON-SCREEN","text":"<p>This paragraph displays the sign-on screen for the CardDemo application. It first calls the POPULATE-HEADER-INFO paragraph to set up header information, then moves any system message to the error message field on the screen. It then uses a CICS SEND command to display the COSGN0A map from the COSGN00 mapset, clearing the screen (ERASE) and positioning the cursor at the default input field. This is a key user interface component that presents the authentication form to users attempting to access the system.</p> Code <pre><code>PERFORM POPULATE-HEADER-INFO\n\n           MOVE WS-MESSAGE TO ERRMSGO OF COSGN0AO\n\n           EXEC CICS SEND\n                     MAP('COSGN0A')\n                     MAPSET('COSGN00')\n                     FROM(COSGN0AO)\n                     ERASE\n                     CURSOR\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      SEND-PLAIN-TEXT\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COSGN00C.html#send-plain-text","title":"SEND-PLAIN-TEXT","text":"<p>This paragraph sends a plain text message to the terminal screen, displaying the content stored in WS-MESSAGE field. It erases the current screen content, frees the keyboard for user input, and then terminates the program execution by returning control to CICS. This functionality is likely used for displaying error messages or notifications to users during the sign-on process.</p> Code <pre><code>EXEC CICS SEND TEXT\n                     FROM(WS-MESSAGE)\n                     LENGTH(LENGTH OF WS-MESSAGE)\n                     ERASE\n                     FREEKB\n           END-EXEC.\n\n           EXEC CICS RETURN\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      POPULATE-HEADER-INFO\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COSGN00C.html#populate-header-info","title":"POPULATE-HEADER-INFO","text":"<p>This paragraph populates the header information for the sign-on screen. It retrieves the current date and time using the CURRENT-DATE function, formats them appropriately (MM/DD/YY for date and HH:MM:SS for time), and places them in the output screen fields. It also sets the application title fields from communication area values, displays the transaction ID and program name, and uses CICS ASSIGN commands to retrieve and display the APPLID (application identifier) and SYSID (system identifier) in the screen header. This provides users with contextual information about when and where they are accessing the system.</p> Code <pre><code>MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n           MOVE CCDA-TITLE01           TO TITLE01O OF COSGN0AO\n           MOVE CCDA-TITLE02           TO TITLE02O OF COSGN0AO\n           MOVE WS-TRANID              TO TRNNAMEO OF COSGN0AO\n           MOVE WS-PGMNAME             TO PGMNAMEO OF COSGN0AO\n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM\n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD\n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY\n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF COSGN0AO\n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH\n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM\n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS\n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF COSGN0AO\n\n           EXEC CICS ASSIGN\n               APPLID(APPLIDO OF COSGN0AO)\n           END-EXEC\n\n           EXEC CICS ASSIGN\n               SYSID(SYSIDO OF COSGN0AO)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      READ-USER-SEC-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COSGN00C.html#read-user-sec-file","title":"READ-USER-SEC-FILE","text":"<p>This paragraph handles user authentication by reading the user security file (USRSEC) using the entered user ID as the key. It validates the password against the stored credentials and processes the authentication result. On successful authentication, it populates the communication area with user context information (transaction ID, program name, user ID, and user type) and transfers control to either the admin menu (COADM01C) or general user menu (COMEN01C) based on the user's security profile. If the password is incorrect, it displays an error message and returns to the sign-on screen with the cursor positioned at the password field. If the user ID is not found (response code 13) or another error occurs, it sets an error flag, displays an appropriate message, and returns to the sign-on screen with the cursor positioned at the user ID field.</p> Code <pre><code>EXEC CICS READ\n                DATASET   (WS-USRSEC-FILE)\n                INTO      (SEC-USER-DATA)\n                LENGTH    (LENGTH OF SEC-USER-DATA)\n                RIDFLD    (WS-USER-ID)\n                KEYLENGTH (LENGTH OF WS-USER-ID)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE WS-RESP-CD\n               WHEN 0\n                   IF SEC-USR-PWD = WS-USER-PWD\n                       MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n                       MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n                       MOVE WS-USER-ID   TO CDEMO-USER-ID\n                       MOVE SEC-USR-TYPE TO CDEMO-USER-TYPE\n                       MOVE ZEROS        TO CDEMO-PGM-CONTEXT\n\n                       IF CDEMO-USRTYP-ADMIN\n                            EXEC CICS XCTL\n                              PROGRAM ('COADM01C')\n                              COMMAREA(CARDDEMO-COMMAREA)\n                            END-EXEC\n                       ELSE\n                            EXEC CICS XCTL\n                              PROGRAM ('COMEN01C')\n                              COMMAREA(CARDDEMO-COMMAREA)\n                            END-EXEC\n                       END-IF\n                   ELSE\n                       MOVE 'Wrong Password. Try again ...' TO\n                                                          WS-MESSAGE\n                       MOVE -1       TO PASSWDL OF COSGN0AI\n                       PERFORM SEND-SIGNON-SCREEN\n                   END-IF\n               WHEN 13\n                   MOVE 'Y'      TO WS-ERR-FLG\n                   MOVE 'User not found. Try again ...' TO WS-MESSAGE\n                   MOVE -1       TO USERIDL OF COSGN0AI\n                   PERFORM SEND-SIGNON-SCREEN\n               WHEN OTHER\n                   MOVE 'Y'      TO WS-ERR-FLG\n                   MOVE 'Unable to verify the User ...' TO WS-MESSAGE\n                   MOVE -1       TO USERIDL OF COSGN0AI\n                   PERFORM SEND-SIGNON-SCREEN\n           END-EVALUATE.\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:33 CDT\n      *\n</code></pre>"},{"location":"COTRN00C.html","title":"COTRN00C","text":""},{"location":"COTRN00C.html#overview","title":"Overview","text":"<p>This program, COTRN00C, is a CICS COBOL application that displays and manages a paginated list of transactions from the TRANSACT file. It provides a user interface for viewing transaction records with functionality for pagination, searching, and selecting individual transactions for detailed viewing.</p> <p>The program allows users to navigate through transaction records using PF7 (page up) and PF8 (page down) keys, displaying 10 transactions per page. Users can enter a transaction ID to start browsing from a specific point or select a transaction with an 'S' command to view its details. When a transaction is selected, the program transfers control to COTRN01C for detailed transaction information.</p> <p>The application handles various user interactions including input validation, error handling, and navigation between screens. It maintains context between screens through a shared communication area and provides clear feedback messages to guide the user. The program is part of the CardDemo application suite, which demonstrates AWS mainframe migration capabilities.</p>"},{"location":"COTRN00C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COTRN00C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"COTRN00C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant MAIN as MAIN-PARA\n    participant PROCESS_ENTER as PROCESS-ENTER-KEY\n    participant PROCESS_PF7 as PROCESS-PF7-KEY\n    participant PROCESS_PF8 as PROCESS-PF8-KEY\n    participant PAGE_FWD as PROCESS-PAGE-FORWARD\n    participant PAGE_BWD as PROCESS-PAGE-BACKWARD\n    participant POPULATE as POPULATE-TRAN-DATA\n    participant INIT_DATA as INITIALIZE-TRAN-DATA\n    participant SEND as SEND-TRNLST-SCREEN\n    participant RECEIVE as RECEIVE-TRNLST-SCREEN\n    participant HEADER as POPULATE-HEADER-INFO\n    participant RETURN as RETURN-TO-PREV-SCREEN\n    participant STARTBR as STARTBR-TRANSACT-FILE\n    participant READNEXT as READNEXT-TRANSACT-FILE\n    participant READPREV as READPREV-TRANSACT-FILE\n    participant ENDBR as ENDBR-TRANSACT-FILE\n    participant CICS\n    participant TRANSACT_FILE as TRANSACT File\n\n    User-&gt;&gt;MAIN: Start transaction\n\n    alt First entry (no COMMAREA)\n        MAIN-&gt;&gt;RETURN: PERFORM RETURN-TO-PREV-SCREEN\n        RETURN-&gt;&gt;CICS: XCTL to COSGN00C\n    else Has COMMAREA\n        alt First time in program\n            MAIN-&gt;&gt;PROCESS_ENTER: PERFORM PROCESS-ENTER-KEY\n            PROCESS_ENTER-&gt;&gt;PAGE_FWD: PERFORM PROCESS-PAGE-FORWARD\n            PAGE_FWD-&gt;&gt;STARTBR: PERFORM STARTBR-TRANSACT-FILE\n            STARTBR-&gt;&gt;TRANSACT_FILE: STARTBR\n            TRANSACT_FILE--&gt;&gt;STARTBR: Response\n\n            loop For each record (up to 10)\n                PAGE_FWD-&gt;&gt;INIT_DATA: PERFORM INITIALIZE-TRAN-DATA\n            end\n\n            loop Until 10 records or EOF\n                PAGE_FWD-&gt;&gt;READNEXT: PERFORM READNEXT-TRANSACT-FILE\n                READNEXT-&gt;&gt;TRANSACT_FILE: READNEXT\n                TRANSACT_FILE--&gt;&gt;READNEXT: Record data\n                PAGE_FWD-&gt;&gt;POPULATE: PERFORM POPULATE-TRAN-DATA\n            end\n\n            PAGE_FWD-&gt;&gt;ENDBR: PERFORM ENDBR-TRANSACT-FILE\n            ENDBR-&gt;&gt;TRANSACT_FILE: ENDBR\n\n            MAIN-&gt;&gt;SEND: PERFORM SEND-TRNLST-SCREEN\n            SEND-&gt;&gt;HEADER: PERFORM POPULATE-HEADER-INFO\n            SEND-&gt;&gt;CICS: SEND MAP\n            CICS--&gt;&gt;User: Display transaction list\n        else Subsequent interaction\n            MAIN-&gt;&gt;RECEIVE: PERFORM RECEIVE-TRNLST-SCREEN\n            RECEIVE-&gt;&gt;CICS: RECEIVE MAP\n            CICS--&gt;&gt;RECEIVE: User input\n\n            alt ENTER key pressed\n                MAIN-&gt;&gt;PROCESS_ENTER: PERFORM PROCESS-ENTER-KEY\n\n                alt Transaction selected with 'S'\n                    PROCESS_ENTER-&gt;&gt;CICS: XCTL to COTRN01C\n                    CICS--&gt;&gt;User: Display transaction details\n                else No selection or invalid selection\n                    PROCESS_ENTER-&gt;&gt;PAGE_FWD: PERFORM PROCESS-PAGE-FORWARD\n                    PAGE_FWD-&gt;&gt;STARTBR: PERFORM STARTBR-TRANSACT-FILE\n                    STARTBR-&gt;&gt;TRANSACT_FILE: STARTBR\n                    TRANSACT_FILE--&gt;&gt;STARTBR: Response\n\n                    loop For each record (up to 10)\n                        PAGE_FWD-&gt;&gt;INIT_DATA: PERFORM INITIALIZE-TRAN-DATA\n                    end\n\n                    loop Until 10 records or EOF\n                        PAGE_FWD-&gt;&gt;READNEXT: PERFORM READNEXT-TRANSACT-FILE\n                        READNEXT-&gt;&gt;TRANSACT_FILE: READNEXT\n                        TRANSACT_FILE--&gt;&gt;READNEXT: Record data\n                        PAGE_FWD-&gt;&gt;POPULATE: PERFORM POPULATE-TRAN-DATA\n                    end\n\n                    PAGE_FWD-&gt;&gt;ENDBR: PERFORM ENDBR-TRANSACT-FILE\n                    ENDBR-&gt;&gt;TRANSACT_FILE: ENDBR\n\n                    PAGE_FWD-&gt;&gt;SEND: PERFORM SEND-TRNLST-SCREEN\n                    SEND-&gt;&gt;HEADER: PERFORM POPULATE-HEADER-INFO\n                    SEND-&gt;&gt;CICS: SEND MAP\n                    CICS--&gt;&gt;User: Display transaction list\n                end\n\n            else PF3 key pressed\n                MAIN-&gt;&gt;RETURN: PERFORM RETURN-TO-PREV-SCREEN\n                RETURN-&gt;&gt;CICS: XCTL to COMEN01C\n                CICS--&gt;&gt;User: Return to menu\n\n            else PF7 key pressed (Page Up)\n                MAIN-&gt;&gt;PROCESS_PF7: PERFORM PROCESS-PF7-KEY\n                PROCESS_PF7-&gt;&gt;PAGE_BWD: PERFORM PROCESS-PAGE-BACKWARD\n                PAGE_BWD-&gt;&gt;STARTBR: PERFORM STARTBR-TRANSACT-FILE\n                STARTBR-&gt;&gt;TRANSACT_FILE: STARTBR\n                TRANSACT_FILE--&gt;&gt;STARTBR: Response\n\n                loop For each record (up to 10)\n                    PAGE_BWD-&gt;&gt;INIT_DATA: PERFORM INITIALIZE-TRAN-DATA\n                end\n\n                loop Until 10 records or BOF\n                    PAGE_BWD-&gt;&gt;READPREV: PERFORM READPREV-TRANSACT-FILE\n                    READPREV-&gt;&gt;TRANSACT_FILE: READPREV\n                    TRANSACT_FILE--&gt;&gt;READPREV: Record data\n                    PAGE_BWD-&gt;&gt;POPULATE: PERFORM POPULATE-TRAN-DATA\n                end\n\n                PAGE_BWD-&gt;&gt;ENDBR: PERFORM ENDBR-TRANSACT-FILE\n                ENDBR-&gt;&gt;TRANSACT_FILE: ENDBR\n\n                PAGE_BWD-&gt;&gt;SEND: PERFORM SEND-TRNLST-SCREEN\n                SEND-&gt;&gt;HEADER: PERFORM POPULATE-HEADER-INFO\n                SEND-&gt;&gt;CICS: SEND MAP\n                CICS--&gt;&gt;User: Display previous page\n\n            else PF8 key pressed (Page Down)\n                MAIN-&gt;&gt;PROCESS_PF8: PERFORM PROCESS-PF8-KEY\n                PROCESS_PF8-&gt;&gt;PAGE_FWD: PERFORM PROCESS-PAGE-FORWARD\n                PAGE_FWD-&gt;&gt;STARTBR: PERFORM STARTBR-TRANSACT-FILE\n                STARTBR-&gt;&gt;TRANSACT_FILE: STARTBR\n                TRANSACT_FILE--&gt;&gt;STARTBR: Response\n\n                loop For each record (up to 10)\n                    PAGE_FWD-&gt;&gt;INIT_DATA: PERFORM INITIALIZE-TRAN-DATA\n                end\n\n                loop Until 10 records or EOF\n                    PAGE_FWD-&gt;&gt;READNEXT: PERFORM READNEXT-TRANSACT-FILE\n                    READNEXT-&gt;&gt;TRANSACT_FILE: READNEXT\n                    TRANSACT_FILE--&gt;&gt;READNEXT: Record data\n                    PAGE_FWD-&gt;&gt;POPULATE: PERFORM POPULATE-TRAN-DATA\n                end\n\n                PAGE_FWD-&gt;&gt;ENDBR: PERFORM ENDBR-TRANSACT-FILE\n                ENDBR-&gt;&gt;TRANSACT_FILE: ENDBR\n\n                PAGE_FWD-&gt;&gt;SEND: PERFORM SEND-TRNLST-SCREEN\n                SEND-&gt;&gt;HEADER: PERFORM POPULATE-HEADER-INFO\n                SEND-&gt;&gt;CICS: SEND MAP\n                CICS--&gt;&gt;User: Display next page\n\n            else Other key pressed\n                MAIN-&gt;&gt;SEND: PERFORM SEND-TRNLST-SCREEN\n                SEND-&gt;&gt;HEADER: PERFORM POPULATE-HEADER-INFO\n                SEND-&gt;&gt;CICS: SEND MAP with error message\n                CICS--&gt;&gt;User: Display error message\n            end\n        end\n    end\n\n    MAIN-&gt;&gt;CICS: RETURN with COMMAREA</code></pre>"},{"location":"COTRN00C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>DFHAID</code></li> <li><code>CVTRA05Y</code></li> <li><code>COTRN00</code></li> <li><code>COCOM01Y</code></li> <li><code>DFHBMSCA</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG01Y</code></li> </ul>"},{"location":"COTRN00C.html#environment-division","title":"Environment Division","text":""},{"location":"COTRN00C.html#configuration-section","title":"CONFIGURATION SECTION","text":"<p>This section would typically contain configuration details for the COTRN00C program, including file assignments, special names, and system dependencies. However, the provided snippet is empty, indicating that this program either doesn't require specific configuration settings in its CONFIGURATION SECTION or these settings might be defined elsewhere in the program structure. In CICS applications like this transaction management program, many configuration details are often handled through CICS resource definitions rather than within the COBOL code itself.</p> Code"},{"location":"COTRN00C.html#data-division","title":"Data Division","text":""},{"location":"COTRN00C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage Section defines the key variables and data structures used in the COTRN00C transaction listing program. It includes program identifiers, status flags for error handling and file processing, counters for pagination, and work fields for transaction data manipulation. The section incorporates several copybooks: COCOM01Y (containing communication area fields for maintaining state between screens, including transaction selection tracking and pagination information), COTRN00 (likely the screen map definition), and various utility copybooks for titles, dates, messages, and transaction record structure (CVTRA05Y). Standard CICS copybooks for AID keys and BMS attributes are also included. The structure supports the program's core functionality of browsing, displaying, and selecting transaction records with pagination capabilities.</p> Code <pre><code>01 WS-VARIABLES.\n         05 WS-PGMNAME                 PIC X(08) VALUE 'COTRN00C'.\n         05 WS-TRANID                  PIC X(04) VALUE 'CT00'.\n         05 WS-MESSAGE                 PIC X(80) VALUE SPACES.\n         05 WS-TRANSACT-FILE             PIC X(08) VALUE 'TRANSACT'.\n         05 WS-ERR-FLG                 PIC X(01) VALUE 'N'.\n           88 ERR-FLG-ON                         VALUE 'Y'.\n           88 ERR-FLG-OFF                        VALUE 'N'.\n         05 WS-TRANSACT-EOF            PIC X(01) VALUE 'N'.\n           88 TRANSACT-EOF                       VALUE 'Y'.\n           88 TRANSACT-NOT-EOF                   VALUE 'N'.\n         05 WS-SEND-ERASE-FLG          PIC X(01) VALUE 'Y'.\n           88 SEND-ERASE-YES                     VALUE 'Y'.\n           88 SEND-ERASE-NO                      VALUE 'N'.\n\n         05 WS-RESP-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REAS-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REC-COUNT               PIC S9(04) COMP VALUE ZEROS.\n         05 WS-IDX                     PIC S9(04) COMP VALUE ZEROS.\n         05 WS-PAGE-NUM                PIC S9(04) COMP VALUE ZEROS.\n\n         05 WS-TRAN-AMT                PIC +99999999.99.\n         05 WS-TRAN-DATE               PIC X(08) VALUE '00/00/00'.\n\n\n\n       COPY COCOM01Y.\n          05 CDEMO-CT00-INFO.\n             10 CDEMO-CT00-TRNID-FIRST     PIC X(16).\n             10 CDEMO-CT00-TRNID-LAST      PIC X(16).\n             10 CDEMO-CT00-PAGE-NUM        PIC 9(08).\n             10 CDEMO-CT00-NEXT-PAGE-FLG   PIC X(01) VALUE 'N'.\n                88 NEXT-PAGE-YES                     VALUE 'Y'.\n                88 NEXT-PAGE-NO                      VALUE 'N'.\n             10 CDEMO-CT00-TRN-SEL-FLG     PIC X(01).\n             10 CDEMO-CT00-TRN-SELECTED    PIC X(16).\n\n       COPY COTRN00.\n\n       COPY COTTL01Y.\n       COPY CSDAT01Y.\n       COPY CSMSG01Y.\n\n       COPY CVTRA05Y.\n\n       COPY DFHAID.\n       COPY DFHBMSCA.\n\n      *----------------------------------------------------------------*\n      *                        LINKAGE SECTION\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This section defines the linkage area used for communication with other programs. It contains a DFHCOMMAREA with a single field LK-COMMAREA, which is defined as a variable-length array of characters. The array can hold between 1 and 32,767 characters, with the actual length determined by the EIBCALEN value (CICS Execute Interface Block Communication Area Length). This structure allows the program to receive and pass data of varying sizes when called by or calling other programs within the CICS environment.</p> Code <pre><code>01  DFHCOMMAREA.\n         05  LK-COMMAREA                           PIC X(01)\n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n\n      *----------------------------------------------------------------*\n      *\n</code></pre>"},{"location":"COTRN00C.html#procedure-division","title":"Procedure Division","text":""},{"location":"COTRN00C.html#main-para","title":"MAIN-PARA","text":"<p>This paragraph serves as the main control flow for the COTRN00C transaction list program. It initializes key flags, handles the program's entry point logic, and processes user interactions. The paragraph first sets up error flags, pagination controls, and screen attributes before checking if the program was called with a communication area. If no communication area exists, it returns to the sign-on program (COSGN00C). </p> <p>For normal operation, it either initializes the screen on first entry or processes user input on subsequent entries. The paragraph implements a command dispatcher pattern that evaluates function key inputs and routes to appropriate processing routines: ENTER key for standard processing, PF3 to return to the menu program (COMEN01C), PF7/PF8 for pagination, with error handling for invalid keys. After processing, it returns control to CICS while preserving the program state in the communication area for the next interaction. This paragraph effectively manages the program's event-driven workflow and maintains user session context.</p> Code <pre><code>SET ERR-FLG-OFF TO TRUE\n           SET TRANSACT-NOT-EOF TO TRUE\n           SET NEXT-PAGE-NO TO TRUE\n           SET SEND-ERASE-YES TO TRUE\n\n           MOVE SPACES TO WS-MESSAGE\n                          ERRMSGO OF COTRN0AO\n\n           MOVE -1       TO TRNIDINL OF COTRN0AI\n\n           IF EIBCALEN = 0\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n               PERFORM RETURN-TO-PREV-SCREEN\n           ELSE\n               MOVE DFHCOMMAREA(1:EIBCALEN) TO CARDDEMO-COMMAREA\n               IF NOT CDEMO-PGM-REENTER\n                   SET CDEMO-PGM-REENTER    TO TRUE\n                   MOVE LOW-VALUES          TO COTRN0AO\n                   PERFORM PROCESS-ENTER-KEY\n                   PERFORM SEND-TRNLST-SCREEN\n               ELSE\n                   PERFORM RECEIVE-TRNLST-SCREEN\n                   EVALUATE EIBAID\n                       WHEN DFHENTER\n                           PERFORM PROCESS-ENTER-KEY\n                       WHEN DFHPF3\n                           MOVE 'COMEN01C' TO CDEMO-TO-PROGRAM\n                           PERFORM RETURN-TO-PREV-SCREEN\n                       WHEN DFHPF7\n                           PERFORM PROCESS-PF7-KEY\n                       WHEN DFHPF8\n                           PERFORM PROCESS-PF8-KEY\n                       WHEN OTHER\n                           MOVE 'Y'                       TO WS-ERR-FLG\n                           MOVE -1       TO TRNIDINL OF COTRN0AI\n                           MOVE CCDA-MSG-INVALID-KEY      TO WS-MESSAGE\n                           PERFORM SEND-TRNLST-SCREEN\n                   END-EVALUATE\n               END-IF\n           END-IF\n\n           EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-ENTER-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#process-enter-key","title":"PROCESS-ENTER-KEY","text":"<p>This paragraph handles the processing of the Enter key in the transaction list screen. It evaluates which transaction row has been selected by checking each selection field (SEL0001I through SEL0010I) and captures both the selection flag and the corresponding transaction ID. When a valid selection is made with an 'S' or 's' flag, the program transfers control to COTRN01C for detailed transaction viewing, passing context through the communication area. For invalid selection values, it displays an error message. The paragraph also processes the transaction ID input field, validating that it contains numeric data when provided, and displays appropriate error messages for invalid input. After processing the input, it resets the page number to 0 and calls the PROCESS-PAGE-FORWARD paragraph to display the appropriate transaction records. The cursor is positioned at the transaction ID input field for the next user interaction.</p> Code <pre><code>EVALUATE TRUE\n               WHEN SEL0001I OF COTRN0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0001I OF COTRN0AI TO CDEMO-CT00-TRN-SEL-FLG\n                   MOVE TRNID01I OF COTRN0AI TO CDEMO-CT00-TRN-SELECTED\n               WHEN SEL0002I OF COTRN0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0002I OF COTRN0AI TO CDEMO-CT00-TRN-SEL-FLG\n                   MOVE TRNID02I OF COTRN0AI TO CDEMO-CT00-TRN-SELECTED\n               WHEN SEL0003I OF COTRN0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0003I OF COTRN0AI TO CDEMO-CT00-TRN-SEL-FLG\n                   MOVE TRNID03I OF COTRN0AI TO CDEMO-CT00-TRN-SELECTED\n               WHEN SEL0004I OF COTRN0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0004I OF COTRN0AI TO CDEMO-CT00-TRN-SEL-FLG\n                   MOVE TRNID04I OF COTRN0AI TO CDEMO-CT00-TRN-SELECTED\n               WHEN SEL0005I OF COTRN0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0005I OF COTRN0AI TO CDEMO-CT00-TRN-SEL-FLG\n                   MOVE TRNID05I OF COTRN0AI TO CDEMO-CT00-TRN-SELECTED\n               WHEN SEL0006I OF COTRN0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0006I OF COTRN0AI TO CDEMO-CT00-TRN-SEL-FLG\n                   MOVE TRNID06I OF COTRN0AI TO CDEMO-CT00-TRN-SELECTED\n               WHEN SEL0007I OF COTRN0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0007I OF COTRN0AI TO CDEMO-CT00-TRN-SEL-FLG\n                   MOVE TRNID07I OF COTRN0AI TO CDEMO-CT00-TRN-SELECTED\n               WHEN SEL0008I OF COTRN0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0008I OF COTRN0AI TO CDEMO-CT00-TRN-SEL-FLG\n                   MOVE TRNID08I OF COTRN0AI TO CDEMO-CT00-TRN-SELECTED\n               WHEN SEL0009I OF COTRN0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0009I OF COTRN0AI TO CDEMO-CT00-TRN-SEL-FLG\n                   MOVE TRNID09I OF COTRN0AI TO CDEMO-CT00-TRN-SELECTED\n               WHEN SEL0010I OF COTRN0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0010I OF COTRN0AI TO CDEMO-CT00-TRN-SEL-FLG\n                   MOVE TRNID10I OF COTRN0AI TO CDEMO-CT00-TRN-SELECTED\n               WHEN OTHER\n                   MOVE SPACES   TO CDEMO-CT00-TRN-SEL-FLG\n                   MOVE SPACES   TO CDEMO-CT00-TRN-SELECTED\n           END-EVALUATE\n           IF (CDEMO-CT00-TRN-SEL-FLG NOT = SPACES AND LOW-VALUES) AND\n              (CDEMO-CT00-TRN-SELECTED NOT = SPACES AND LOW-VALUES)\n               EVALUATE CDEMO-CT00-TRN-SEL-FLG\n                   WHEN 'S'\n                   WHEN 's'\n                        MOVE 'COTRN01C'   TO CDEMO-TO-PROGRAM\n                        MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n                        MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n                        MOVE 0        TO CDEMO-PGM-CONTEXT\n                        EXEC CICS\n                            XCTL PROGRAM(CDEMO-TO-PROGRAM)\n                            COMMAREA(CARDDEMO-COMMAREA)\n                        END-EXEC\n                   WHEN OTHER\n      *                SET TRANSACT-EOF TO TRUE\n                       MOVE\n                       'Invalid selection. Valid value is S' TO\n                                       WS-MESSAGE\n                       MOVE -1       TO TRNIDINL OF COTRN0AI\n      *                PERFORM SEND-TRNLST-SCREEN\n               END-EVALUATE\n           END-IF\n\n           IF TRNIDINI OF COTRN0AI = SPACES OR LOW-VALUES\n               MOVE LOW-VALUES TO TRAN-ID\n           ELSE\n               IF TRNIDINI  OF COTRN0AI IS NUMERIC\n                   MOVE TRNIDINI  OF COTRN0AI    TO TRAN-ID\n               ELSE\n                   MOVE 'Y'                       TO WS-ERR-FLG\n                   MOVE\n                   'Tran ID must be Numeric ...' TO\n                                   WS-MESSAGE\n                   MOVE -1                 TO TRNIDINL OF COTRN0AI\n                   PERFORM SEND-TRNLST-SCREEN\n               END-IF\n           END-IF\n\n           MOVE -1       TO TRNIDINL OF COTRN0AI\n\n\n           MOVE 0       TO CDEMO-CT00-PAGE-NUM\n           PERFORM PROCESS-PAGE-FORWARD\n\n           IF NOT ERR-FLG-ON\n               MOVE SPACE   TO TRNIDINO  OF COTRN0AO\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-PF7-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#process-pf7-key","title":"PROCESS-PF7-KEY","text":"<p>This paragraph handles the Page Up (PF7) key functionality in the transaction list screen. It first determines the starting point for retrieving the previous page of transactions by checking if the first transaction ID is empty (in which case it uses LOW-VALUES) or using the stored first transaction ID. It sets a flag indicating a page navigation request and positions the cursor at the transaction ID input field. If the user is not already on the first page, it calls the PROCESS-PAGE-BACKWARD paragraph to retrieve and display the previous page of transactions. Otherwise, it displays a message informing the user they are already at the top of the page and redisplays the current screen without clearing it.</p> Code <pre><code>IF CDEMO-CT00-TRNID-FIRST = SPACES OR LOW-VALUES\n               MOVE LOW-VALUES TO TRAN-ID\n           ELSE\n               MOVE CDEMO-CT00-TRNID-FIRST TO TRAN-ID\n           END-IF\n\n           SET NEXT-PAGE-YES TO TRUE\n           MOVE -1       TO TRNIDINL OF COTRN0AI\n\n           IF CDEMO-CT00-PAGE-NUM &gt; 1\n               PERFORM PROCESS-PAGE-BACKWARD\n           ELSE\n               MOVE 'You are already at the top of the page...' TO\n                               WS-MESSAGE\n               SET SEND-ERASE-NO TO TRUE\n               PERFORM SEND-TRNLST-SCREEN\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-PF8-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#process-pf8-key","title":"PROCESS-PF8-KEY","text":"<p>This paragraph handles the Page Down (PF8) key functionality in the transaction list screen. It determines the starting point for retrieving the next set of transaction records by checking if the last transaction ID is empty (indicating first use) or using the last displayed transaction ID as the starting point. The cursor is positioned at the transaction ID input field. If there are more records available (NEXT-PAGE-YES is true), it calls the PROCESS-PAGE-FORWARD paragraph to retrieve and display the next page of transactions. If the user is already at the bottom of the available records, it displays an informative message and refreshes the screen without clearing it.</p> Code <pre><code>IF CDEMO-CT00-TRNID-LAST = SPACES OR LOW-VALUES\n               MOVE HIGH-VALUES TO TRAN-ID\n           ELSE\n               MOVE CDEMO-CT00-TRNID-LAST TO TRAN-ID\n           END-IF\n\n           MOVE -1       TO TRNIDINL OF COTRN0AI\n\n           IF NEXT-PAGE-YES\n               PERFORM PROCESS-PAGE-FORWARD\n           ELSE\n               MOVE 'You are already at the bottom of the page...' TO\n                               WS-MESSAGE\n               SET SEND-ERASE-NO TO TRUE\n               PERFORM SEND-TRNLST-SCREEN\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-PAGE-FORWARD\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#process-page-forward","title":"PROCESS-PAGE-FORWARD","text":"<p>This paragraph handles the forward pagination functionality for the transaction list display. It starts by positioning the file pointer at the beginning of the transaction file and then reads through records to populate the current page of data. The process initializes all transaction data fields before populating them with actual values from the file.</p> <p>The code reads up to 10 transaction records, populating screen fields for each record found. After loading the current page, it checks if more records exist beyond the current page to determine if a \"next page\" option should be available. If additional records exist, the page counter is incremented and the \"next page\" indicator is set to true.</p> <p>The paragraph manages pagination state by updating the page number and clearing the transaction ID input field before redisplaying the screen with the newly loaded transaction data. Error conditions are handled throughout the process to ensure the program responds appropriately if file access issues occur.</p> Code <pre><code>PERFORM STARTBR-TRANSACT-FILE\n\n           IF NOT ERR-FLG-ON\n\n               IF EIBAID NOT = DFHENTER AND DFHPF7 AND DFHPF3\n                   PERFORM READNEXT-TRANSACT-FILE\n               END-IF\n\n               IF TRANSACT-NOT-EOF AND ERR-FLG-OFF\n                  PERFORM VARYING WS-IDX FROM 1 BY 1 UNTIL WS-IDX &gt; 10\n                      PERFORM INITIALIZE-TRAN-DATA\n                  END-PERFORM\n               END-IF\n\n               MOVE 1             TO  WS-IDX\n\n               PERFORM UNTIL WS-IDX &gt;= 11 OR TRANSACT-EOF OR ERR-FLG-ON\n                   PERFORM READNEXT-TRANSACT-FILE\n                   IF TRANSACT-NOT-EOF AND ERR-FLG-OFF\n                       PERFORM POPULATE-TRAN-DATA\n                       COMPUTE WS-IDX = WS-IDX + 1\n                   END-IF\n               END-PERFORM\n\n               IF TRANSACT-NOT-EOF AND ERR-FLG-OFF\n                   COMPUTE CDEMO-CT00-PAGE-NUM =\n                           CDEMO-CT00-PAGE-NUM + 1\n                   PERFORM READNEXT-TRANSACT-FILE\n                   IF TRANSACT-NOT-EOF AND ERR-FLG-OFF\n                       SET NEXT-PAGE-YES TO TRUE\n                   ELSE\n                       SET NEXT-PAGE-NO TO TRUE\n                   END-IF\n               ELSE\n                   SET NEXT-PAGE-NO TO TRUE\n                   IF WS-IDX &gt; 1\n                       COMPUTE CDEMO-CT00-PAGE-NUM = CDEMO-CT00-PAGE-NUM\n                        + 1\n                   END-IF\n               END-IF\n\n               PERFORM ENDBR-TRANSACT-FILE\n\n               MOVE CDEMO-CT00-PAGE-NUM TO PAGENUMI  OF COTRN0AI\n               MOVE SPACE   TO TRNIDINO  OF COTRN0AO\n               PERFORM SEND-TRNLST-SCREEN\n\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-PAGE-BACKWARD\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#process-page-backward","title":"PROCESS-PAGE-BACKWARD","text":"<p>This paragraph handles the backward pagination functionality when a user presses PF7 to view previous transaction records. It starts by establishing a browse session on the TRANSACT file, then initializes the display fields for up to 10 transaction records. The core logic reads transaction records in reverse order (using READPREV), populating the screen data fields until either 10 records are processed, the beginning of the file is reached, or an error occurs. After retrieving the records, it decrements the page number if appropriate and not already at page 1, ends the browse session, and displays the updated transaction list screen. The paragraph maintains proper pagination context while ensuring the user interface accurately reflects the available transaction data.</p> Code <pre><code>PERFORM STARTBR-TRANSACT-FILE\n\n           IF NOT ERR-FLG-ON\n\n               IF EIBAID NOT = DFHENTER AND DFHPF8\n                   PERFORM READPREV-TRANSACT-FILE\n               END-IF\n\n               IF TRANSACT-NOT-EOF AND ERR-FLG-OFF\n                  PERFORM VARYING WS-IDX FROM 1 BY 1 UNTIL WS-IDX &gt; 10\n                     PERFORM INITIALIZE-TRAN-DATA\n                  END-PERFORM\n               END-IF\n\n               MOVE 10          TO  WS-IDX\n\n               PERFORM UNTIL WS-IDX &lt;= 0 OR TRANSACT-EOF OR ERR-FLG-ON\n                   PERFORM READPREV-TRANSACT-FILE\n                   IF TRANSACT-NOT-EOF AND ERR-FLG-OFF\n                       PERFORM POPULATE-TRAN-DATA\n                       COMPUTE WS-IDX = WS-IDX - 1\n                   END-IF\n               END-PERFORM\n\n               IF TRANSACT-NOT-EOF AND ERR-FLG-OFF\n                  PERFORM READPREV-TRANSACT-FILE\n                  IF NEXT-PAGE-YES\n                     IF TRANSACT-NOT-EOF AND ERR-FLG-OFF AND\n                        CDEMO-CT00-PAGE-NUM &gt; 1\n                        SUBTRACT 1 FROM CDEMO-CT00-PAGE-NUM\n                     ELSE\n                        MOVE 1 TO CDEMO-CT00-PAGE-NUM\n                     END-IF\n                  END-IF\n               END-IF\n\n               PERFORM ENDBR-TRANSACT-FILE\n\n               MOVE CDEMO-CT00-PAGE-NUM TO PAGENUMI  OF COTRN0AI\n               PERFORM SEND-TRNLST-SCREEN\n\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      POPULATE-TRAN-DATA\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#populate-tran-data","title":"POPULATE-TRAN-DATA","text":"<p>This paragraph formats and populates transaction data into the appropriate screen fields for display. It first processes the transaction amount and timestamp, extracting and reformatting the date components into a user-friendly format. Then, using an EVALUATE statement based on the current index (WS-IDX), it populates the corresponding row on the screen with transaction details including ID, date, description, and amount. For the first and last transactions displayed, it also stores the transaction IDs in communication area fields to track pagination boundaries. The paragraph handles up to 10 transactions, which corresponds to the maximum number of transactions displayed on a single page of the transaction list screen.</p> Code <pre><code>MOVE TRAN-AMT                  TO WS-TRAN-AMT\n           MOVE TRAN-ORIG-TS              TO WS-TIMESTAMP\n           MOVE WS-TIMESTAMP-DT-YYYY(3:2) TO WS-CURDATE-YY\n           MOVE WS-TIMESTAMP-DT-MM        TO WS-CURDATE-MM\n           MOVE WS-TIMESTAMP-DT-DD        TO WS-CURDATE-DD\n           MOVE WS-CURDATE-MM-DD-YY       TO WS-TRAN-DATE\n\n           EVALUATE WS-IDX\n               WHEN 1\n                   MOVE TRAN-ID    TO TRNID01I OF COTRN0AI\n                                         CDEMO-CT00-TRNID-FIRST\n                   MOVE WS-TRAN-DATE TO TDATE01I OF COTRN0AI\n                   MOVE TRAN-DESC TO TDESC01I OF COTRN0AI\n                   MOVE WS-TRAN-AMT  TO TAMT001I OF COTRN0AI\n               WHEN 2\n                   MOVE TRAN-ID    TO TRNID02I OF COTRN0AI\n                   MOVE WS-TRAN-DATE TO TDATE02I OF COTRN0AI\n                   MOVE TRAN-DESC TO TDESC02I OF COTRN0AI\n                   MOVE WS-TRAN-AMT  TO TAMT002I OF COTRN0AI\n               WHEN 3\n                   MOVE TRAN-ID    TO TRNID03I OF COTRN0AI\n                   MOVE WS-TRAN-DATE TO TDATE03I OF COTRN0AI\n                   MOVE TRAN-DESC TO TDESC03I OF COTRN0AI\n                   MOVE WS-TRAN-AMT  TO TAMT003I OF COTRN0AI\n               WHEN 4\n                   MOVE TRAN-ID    TO TRNID04I OF COTRN0AI\n                   MOVE WS-TRAN-DATE TO TDATE04I OF COTRN0AI\n                   MOVE TRAN-DESC TO TDESC04I OF COTRN0AI\n                   MOVE WS-TRAN-AMT  TO TAMT004I OF COTRN0AI\n               WHEN 5\n                   MOVE TRAN-ID    TO TRNID05I OF COTRN0AI\n                   MOVE WS-TRAN-DATE TO TDATE05I OF COTRN0AI\n                   MOVE TRAN-DESC TO TDESC05I OF COTRN0AI\n                   MOVE WS-TRAN-AMT  TO TAMT005I OF COTRN0AI\n               WHEN 6\n                   MOVE TRAN-ID    TO TRNID06I OF COTRN0AI\n                   MOVE WS-TRAN-DATE TO TDATE06I OF COTRN0AI\n                   MOVE TRAN-DESC TO TDESC06I OF COTRN0AI\n                   MOVE WS-TRAN-AMT  TO TAMT006I OF COTRN0AI\n               WHEN 7\n                   MOVE TRAN-ID    TO TRNID07I OF COTRN0AI\n                   MOVE WS-TRAN-DATE TO TDATE07I OF COTRN0AI\n                   MOVE TRAN-DESC TO TDESC07I OF COTRN0AI\n                   MOVE WS-TRAN-AMT  TO TAMT007I OF COTRN0AI\n               WHEN 8\n                   MOVE TRAN-ID    TO TRNID08I OF COTRN0AI\n                   MOVE WS-TRAN-DATE TO TDATE08I OF COTRN0AI\n                   MOVE TRAN-DESC TO TDESC08I OF COTRN0AI\n                   MOVE WS-TRAN-AMT  TO TAMT008I OF COTRN0AI\n               WHEN 9\n                   MOVE TRAN-ID    TO TRNID09I OF COTRN0AI\n                   MOVE WS-TRAN-DATE TO TDATE09I OF COTRN0AI\n                   MOVE TRAN-DESC TO TDESC09I OF COTRN0AI\n                   MOVE WS-TRAN-AMT  TO TAMT009I OF COTRN0AI\n               WHEN 10\n                   MOVE TRAN-ID    TO TRNID10I OF COTRN0AI\n                                         CDEMO-CT00-TRNID-LAST\n                   MOVE WS-TRAN-DATE TO TDATE10I OF COTRN0AI\n                   MOVE TRAN-DESC TO TDESC10I OF COTRN0AI\n                   MOVE WS-TRAN-AMT  TO TAMT010I OF COTRN0AI\n               WHEN OTHER\n                   CONTINUE\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      INITIALIZE-TRAN-DATA\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#initialize-tran-data","title":"INITIALIZE-TRAN-DATA","text":"<p>This paragraph clears the transaction data fields on the screen based on a specific row index (WS-IDX). Using an EVALUATE statement, it systematically blanks out the transaction ID, date, description, and amount fields for a particular row position (1-10) on the COTRN0AI screen. Each WHEN clause handles a specific row number, clearing all four fields associated with that row. If the index value is outside the range of 1-10, the WHEN OTHER clause simply continues execution without any action. This routine is used to initialize or reset transaction display data for specific rows in the transaction listing screen.</p> Code <pre><code>EVALUATE WS-IDX\n               WHEN 1\n                   MOVE SPACES TO TRNID01I OF COTRN0AI\n                   MOVE SPACES TO TDATE01I OF COTRN0AI\n                   MOVE SPACES TO TDESC01I OF COTRN0AI\n                   MOVE SPACES TO TAMT001I OF COTRN0AI\n               WHEN 2\n                   MOVE SPACES TO TRNID02I OF COTRN0AI\n                   MOVE SPACES TO TDATE02I OF COTRN0AI\n                   MOVE SPACES TO TDESC02I OF COTRN0AI\n                   MOVE SPACES TO TAMT002I OF COTRN0AI\n               WHEN 3\n                   MOVE SPACES TO TRNID03I OF COTRN0AI\n                   MOVE SPACES TO TDATE03I OF COTRN0AI\n                   MOVE SPACES TO TDESC03I OF COTRN0AI\n                   MOVE SPACES TO TAMT003I OF COTRN0AI\n               WHEN 4\n                   MOVE SPACES TO TRNID04I OF COTRN0AI\n                   MOVE SPACES TO TDATE04I OF COTRN0AI\n                   MOVE SPACES TO TDESC04I OF COTRN0AI\n                   MOVE SPACES TO TAMT004I OF COTRN0AI\n               WHEN 5\n                   MOVE SPACES TO TRNID05I OF COTRN0AI\n                   MOVE SPACES TO TDATE05I OF COTRN0AI\n                   MOVE SPACES TO TDESC05I OF COTRN0AI\n                   MOVE SPACES TO TAMT005I OF COTRN0AI\n               WHEN 6\n                   MOVE SPACES TO TRNID06I OF COTRN0AI\n                   MOVE SPACES TO TDATE06I OF COTRN0AI\n                   MOVE SPACES TO TDESC06I OF COTRN0AI\n                   MOVE SPACES TO TAMT006I OF COTRN0AI\n               WHEN 7\n                   MOVE SPACES TO TRNID07I OF COTRN0AI\n                   MOVE SPACES TO TDATE07I OF COTRN0AI\n                   MOVE SPACES TO TDESC07I OF COTRN0AI\n                   MOVE SPACES TO TAMT007I OF COTRN0AI\n               WHEN 8\n                   MOVE SPACES TO TRNID08I OF COTRN0AI\n                   MOVE SPACES TO TDATE08I OF COTRN0AI\n                   MOVE SPACES TO TDESC08I OF COTRN0AI\n                   MOVE SPACES TO TAMT008I OF COTRN0AI\n               WHEN 9\n                   MOVE SPACES TO TRNID09I OF COTRN0AI\n                   MOVE SPACES TO TDATE09I OF COTRN0AI\n                   MOVE SPACES TO TDESC09I OF COTRN0AI\n                   MOVE SPACES TO TAMT009I OF COTRN0AI\n               WHEN 10\n                   MOVE SPACES TO TRNID10I OF COTRN0AI\n                   MOVE SPACES TO TDATE10I OF COTRN0AI\n                   MOVE SPACES TO TDESC10I OF COTRN0AI\n                   MOVE SPACES TO TAMT010I OF COTRN0AI\n               WHEN OTHER\n                   CONTINUE\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      RETURN-TO-PREV-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#return-to-prev-screen","title":"RETURN-TO-PREV-SCREEN","text":"<p>This paragraph handles the return navigation to a previous screen in the CardDemo application. It first checks if the target program is specified in the communication area, defaulting to 'COSGN00C' if not provided. It then updates the communication area with the current transaction ID and program name as the source of the transfer, and resets the program context to zeros. Finally, it executes a CICS XCTL command to transfer control to the target program, passing the updated communication area. This ensures proper navigation flow between screens while maintaining transaction context.</p> Code <pre><code>IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n           END-IF\n           MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n           MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n           MOVE ZEROS        TO CDEMO-PGM-CONTEXT\n           EXEC CICS\n               XCTL PROGRAM(CDEMO-TO-PROGRAM)\n               COMMAREA(CARDDEMO-COMMAREA)\n           END-EXEC.\n\n\n      *----------------------------------------------------------------*\n      *                      SEND-TRNLST-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#send-trnlst-screen","title":"SEND-TRNLST-SCREEN","text":"<p>This paragraph handles the display of the transaction list screen (COTRN0A) to the user. It first calls the POPULATE-HEADER-INFO paragraph to set up the screen header information, then displays any system messages stored in WS-MESSAGE to the error message field. The paragraph implements conditional screen sending logic based on the SEND-ERASE-YES flag - if set, it sends the screen with the ERASE option to clear the entire screen; otherwise, it sends the screen without erasing, which preserves background content. In both cases, the cursor is positioned according to previously set cursor positioning logic. This is a standard CICS screen output routine that forms part of the transaction list display functionality.</p> Code <pre><code>PERFORM POPULATE-HEADER-INFO\n\n           MOVE WS-MESSAGE TO ERRMSGO OF COTRN0AO\n\n           IF SEND-ERASE-YES\n               EXEC CICS SEND\n                         MAP('COTRN0A')\n                         MAPSET('COTRN00')\n                         FROM(COTRN0AO)\n                         ERASE\n                         CURSOR\n               END-EXEC\n           ELSE\n               EXEC CICS SEND\n                         MAP('COTRN0A')\n                         MAPSET('COTRN00')\n                         FROM(COTRN0AO)\n      *                  ERASE\n                         CURSOR\n               END-EXEC\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      RECEIVE-TRNLST-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#receive-trnlst-screen","title":"RECEIVE-TRNLST-SCREEN","text":"<p>This paragraph receives user input from the transaction list screen (COTRN0A) into the input map area (COTRN0AI). It uses the CICS RECEIVE command to capture data entered by the user on the transaction listing screen, storing response codes in WS-RESP-CD and WS-REAS-CD for subsequent error handling. This is a standard CICS interaction pattern for capturing user input before processing it in the transaction listing functionality.</p> Code <pre><code>EXEC CICS RECEIVE\n                     MAP('COTRN0A')\n                     MAPSET('COTRN00')\n                     INTO(COTRN0AI)\n                     RESP(WS-RESP-CD)\n                     RESP2(WS-REAS-CD)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      POPULATE-HEADER-INFO\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#populate-header-info","title":"POPULATE-HEADER-INFO","text":"<p>This paragraph populates the header information for the transaction list screen. It retrieves the current system date and time using the CURRENT-DATE function, then formats and displays this information in the screen header. The paragraph sets the application title fields from the communication area (CCDA), displays the transaction ID and program name, and formats the current date as MM/DD/YY and time as HH:MM:SS for display. This creates a consistent header with identifying information and timestamp that appears at the top of the transaction list screen.</p> Code <pre><code>MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n           MOVE CCDA-TITLE01           TO TITLE01O OF COTRN0AO\n           MOVE CCDA-TITLE02           TO TITLE02O OF COTRN0AO\n           MOVE WS-TRANID              TO TRNNAMEO OF COTRN0AO\n           MOVE WS-PGMNAME             TO PGMNAMEO OF COTRN0AO\n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM\n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD\n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY\n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF COTRN0AO\n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH\n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM\n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS\n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF COTRN0AO.\n\n      *----------------------------------------------------------------*\n      *                      STARTBR-TRANSACT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#startbr-transact-file","title":"STARTBR-TRANSACT-FILE","text":"<p>This paragraph initiates a browse operation on the TRANSACT file using the CICS STARTBR command. It positions the browse cursor at the record matching the transaction ID specified in TRAN-ID. The paragraph handles three possible outcomes: successful positioning (NORMAL response), record not found (NOTFND), or other errors. When successful, processing continues to the next step. When the record is not found, it sets the end-of-file flag, displays a message indicating the user is at the top of the page, and redisplays the transaction list screen. For any other errors, it logs the response and reason codes, sets an error flag, displays an error message, and redisplays the screen. This paragraph is a key component of the pagination functionality, establishing the starting point for browsing transaction records.</p> Code <pre><code>EXEC CICS STARTBR\n                DATASET   (WS-TRANSACT-FILE)\n                RIDFLD    (TRAN-ID)\n                KEYLENGTH (LENGTH OF TRAN-ID)\n      *         GTEQ\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(NOTFND)\n                   CONTINUE\n                   SET TRANSACT-EOF TO TRUE\n                   MOVE 'You are at the top of the page...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TRNIDINL OF COTRN0AI\n                   PERFORM SEND-TRNLST-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup transaction...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TRNIDINL OF COTRN0AI\n                   PERFORM SEND-TRNLST-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      READNEXT-TRANSACT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#readnext-transact-file","title":"READNEXT-TRANSACT-FILE","text":"<p>This paragraph performs a sequential read operation on the TRANSACT file to retrieve the next transaction record. It uses the CICS READNEXT command to fetch the next record based on the current key position stored in TRAN-ID. The paragraph handles three possible outcomes: successful read (NORMAL response), reaching the end of file, or encountering an error. When the end of file is reached, it sets the TRANSACT-EOF flag, displays a message informing the user they've reached the bottom of the page, and redisplays the transaction list screen. For other errors, it logs the response and reason codes, sets an error flag, displays an error message, and redisplays the screen. This paragraph is a key component of the pagination functionality, allowing users to navigate forward through the transaction records.</p> Code <pre><code>EXEC CICS READNEXT\n                DATASET   (WS-TRANSACT-FILE)\n                INTO      (TRAN-RECORD)\n                LENGTH    (LENGTH OF TRAN-RECORD)\n                RIDFLD    (TRAN-ID)\n                KEYLENGTH (LENGTH OF TRAN-ID)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(ENDFILE)\n                   CONTINUE\n                   SET TRANSACT-EOF TO TRUE\n                   MOVE 'You have reached the bottom of the page...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TRNIDINL OF COTRN0AI\n                   PERFORM SEND-TRNLST-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup transaction...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TRNIDINL OF COTRN0AI\n                   PERFORM SEND-TRNLST-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      READPREV-TRANSACT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#readprev-transact-file","title":"READPREV-TRANSACT-FILE","text":"<p>This paragraph handles reading the previous record from the TRANSACT file during backward pagination. It uses the CICS READPREV command to retrieve the previous transaction record based on the current key position. The paragraph evaluates the response code from the operation and handles three scenarios: successful read (continues processing), reaching the beginning of the file (displays a message indicating the user is at the top of the page), or encountering an error (displays diagnostic information and an error message). When the beginning of the file is reached or an error occurs, the paragraph sets appropriate flags and messages before redisplaying the transaction list screen. This functionality supports the program's pagination capability, specifically the \"page up\" functionality.</p> Code <pre><code>EXEC CICS READPREV\n                DATASET   (WS-TRANSACT-FILE)\n                INTO      (TRAN-RECORD)\n                LENGTH    (LENGTH OF TRAN-RECORD)\n                RIDFLD    (TRAN-ID)\n                KEYLENGTH (LENGTH OF TRAN-ID)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(ENDFILE)\n                   CONTINUE\n                   SET TRANSACT-EOF TO TRUE\n                   MOVE 'You have reached the top of the page...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TRNIDINL OF COTRN0AI\n                   PERFORM SEND-TRNLST-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup transaction...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TRNIDINL OF COTRN0AI\n                   PERFORM SEND-TRNLST-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      ENDBR-TRANSACT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN00C.html#endbr-transact-file","title":"ENDBR-TRANSACT-FILE","text":"<p>This paragraph terminates a browse operation on the TRANSACT file using the CICS ENDBR command. It ends the sequential reading of transaction records that was previously initiated with a STARTBR command. The WS-TRANSACT-FILE variable contains the name of the dataset being accessed. This operation is necessary to properly release resources after completing pagination or search operations on the transaction list.</p> Code <pre><code>EXEC CICS ENDBR\n                DATASET   (WS-TRANSACT-FILE)\n           END-EXEC.\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:34 CDT\n      *\n</code></pre>"},{"location":"COTRN01C.html","title":"COTRN01C","text":""},{"location":"COTRN01C.html#overview","title":"Overview","text":"<p>This program is part of the CardDemo application and serves as a transaction viewer for the TRANSACT file in a CICS environment. It allows users to view detailed transaction information by entering a transaction ID. The program retrieves the corresponding transaction record from the TRANSACT file and displays various transaction details including card number, transaction type, category, amount, description, timestamps, and merchant information. The interface provides navigation options to return to previous screens (PF3), clear the current screen (PF4), or access the transaction list screen (PF5). Error handling is implemented for cases such as empty transaction ID input or when a transaction record cannot be found.</p>"},{"location":"COTRN01C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COTRN01C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"COTRN01C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant CICS\n    participant MAIN_PARA as MAIN-PARA\n    participant PROCESS_ENTER as PROCESS-ENTER-KEY\n    participant READ_TRANSACT as READ-TRANSACT-FILE\n    participant SEND_SCREEN as SEND-TRNVIEW-SCREEN\n    participant RECEIVE_SCREEN as RECEIVE-TRNVIEW-SCREEN\n    participant RETURN_SCREEN as RETURN-TO-PREV-SCREEN\n    participant CLEAR_SCREEN as CLEAR-CURRENT-SCREEN\n    participant INIT_FIELDS as INITIALIZE-ALL-FIELDS\n    participant HEADER_INFO as POPULATE-HEADER-INFO\n    participant TRANSACT_FILE as \"TRANSACT File\"\n\n    User-&gt;&gt;CICS: Start COTRN01C transaction\n    CICS-&gt;&gt;MAIN_PARA: Execute program\n\n    alt First time entry (EIBCALEN = 0)\n        MAIN_PARA-&gt;&gt;RETURN_SCREEN: Return to sign-on screen\n        RETURN_SCREEN-&gt;&gt;CICS: XCTL to COSGN00C\n    else Program has COMMAREA\n        alt Not program re-entry\n            MAIN_PARA-&gt;&gt;MAIN_PARA: Initialize screen\n\n            opt Transaction ID provided from previous screen\n                MAIN_PARA-&gt;&gt;PROCESS_ENTER: Process transaction ID\n                PROCESS_ENTER-&gt;&gt;READ_TRANSACT: Read transaction record\n                READ_TRANSACT-&gt;&gt;TRANSACT_FILE: READ using TRAN-ID\n\n                alt Record found\n                    TRANSACT_FILE--&gt;&gt;READ_TRANSACT: Return transaction data\n                    READ_TRANSACT--&gt;&gt;PROCESS_ENTER: Continue processing\n                    PROCESS_ENTER-&gt;&gt;PROCESS_ENTER: Format transaction data\n                else Record not found\n                    TRANSACT_FILE--&gt;&gt;READ_TRANSACT: NOTFND response\n                    READ_TRANSACT-&gt;&gt;READ_TRANSACT: Set error message\n                else Other error\n                    TRANSACT_FILE--&gt;&gt;READ_TRANSACT: Error response\n                    READ_TRANSACT-&gt;&gt;READ_TRANSACT: Set error message\n                end\n            end\n\n            MAIN_PARA-&gt;&gt;SEND_SCREEN: Display transaction view screen\n            SEND_SCREEN-&gt;&gt;HEADER_INFO: Populate header information\n            HEADER_INFO--&gt;&gt;SEND_SCREEN: Return with header populated\n            SEND_SCREEN-&gt;&gt;CICS: SEND MAP COTRN1A\n            CICS--&gt;&gt;User: Display transaction view screen\n        else Program re-entry\n            MAIN_PARA-&gt;&gt;RECEIVE_SCREEN: Get user input\n            RECEIVE_SCREEN-&gt;&gt;CICS: RECEIVE MAP COTRN1A\n            CICS--&gt;&gt;RECEIVE_SCREEN: Return user input\n\n            alt User pressed ENTER\n                MAIN_PARA-&gt;&gt;PROCESS_ENTER: Process transaction ID\n\n                alt Transaction ID is empty\n                    PROCESS_ENTER-&gt;&gt;PROCESS_ENTER: Set error message\n                    PROCESS_ENTER-&gt;&gt;SEND_SCREEN: Redisplay screen with error\n                else Transaction ID provided\n                    PROCESS_ENTER-&gt;&gt;READ_TRANSACT: Read transaction record\n                    READ_TRANSACT-&gt;&gt;TRANSACT_FILE: READ using TRAN-ID\n\n                    alt Record found\n                        TRANSACT_FILE--&gt;&gt;READ_TRANSACT: Return transaction data\n                        READ_TRANSACT--&gt;&gt;PROCESS_ENTER: Continue processing\n                        PROCESS_ENTER-&gt;&gt;PROCESS_ENTER: Format transaction data\n                    else Record not found\n                        TRANSACT_FILE--&gt;&gt;READ_TRANSACT: NOTFND response\n                        READ_TRANSACT-&gt;&gt;READ_TRANSACT: Set error message\n                    else Other error\n                        TRANSACT_FILE--&gt;&gt;READ_TRANSACT: Error response\n                        READ_TRANSACT-&gt;&gt;READ_TRANSACT: Set error message\n                    end\n\n                    PROCESS_ENTER-&gt;&gt;SEND_SCREEN: Display transaction details\n                end\n\n            else User pressed PF3\n                MAIN_PARA-&gt;&gt;RETURN_SCREEN: Return to previous screen\n                RETURN_SCREEN-&gt;&gt;CICS: XCTL to previous program\n                CICS--&gt;&gt;User: Display previous screen\n            else User pressed PF4\n                MAIN_PARA-&gt;&gt;CLEAR_SCREEN: Clear current screen\n                CLEAR_SCREEN-&gt;&gt;INIT_FIELDS: Initialize all fields\n                INIT_FIELDS--&gt;&gt;CLEAR_SCREEN: Fields initialized\n                CLEAR_SCREEN-&gt;&gt;SEND_SCREEN: Redisplay empty screen\n                SEND_SCREEN-&gt;&gt;CICS: SEND MAP COTRN1A\n                CICS--&gt;&gt;User: Display empty transaction view screen\n            else User pressed PF5\n                MAIN_PARA-&gt;&gt;RETURN_SCREEN: Go to transaction list screen\n                RETURN_SCREEN-&gt;&gt;CICS: XCTL to COTRN00C\n                CICS--&gt;&gt;User: Display transaction list screen\n            else Invalid key\n                MAIN_PARA-&gt;&gt;MAIN_PARA: Set invalid key message\n                MAIN_PARA-&gt;&gt;SEND_SCREEN: Redisplay screen with error\n                SEND_SCREEN-&gt;&gt;CICS: SEND MAP COTRN1A\n                CICS--&gt;&gt;User: Display screen with error message\n            end\n        end\n    end\n\n    MAIN_PARA-&gt;&gt;CICS: RETURN with COMMAREA</code></pre>"},{"location":"COTRN01C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>DFHAID</code></li> <li><code>CVTRA05Y</code></li> <li><code>COCOM01Y</code></li> <li><code>COTRN01</code></li> <li><code>DFHBMSCA</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG01Y</code></li> </ul>"},{"location":"COTRN01C.html#environment-division","title":"Environment Division","text":""},{"location":"COTRN01C.html#configuration-section","title":"CONFIGURATION SECTION","text":"<p>This section would typically contain configuration settings for the COTRN01C transaction viewer program, including file assignments, special names, and system dependencies. In the CardDemo application context, it would define how the program interfaces with the TRANSACT file and CICS environment resources. The configuration section would establish the necessary parameters for the program to properly access and display transaction records within the AWS-showcased mainframe environment.</p> Code"},{"location":"COTRN01C.html#data-division","title":"Data Division","text":""},{"location":"COTRN01C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage Section defines the key variables and data structures used in the transaction viewer program. It includes program identifiers, error handling flags, and transaction-specific fields like amount and date. The section incorporates several copybooks that likely contain shared data definitions for transaction records (COTRN01), common application data (COCOM01Y), screen layouts (CVTRA05Y), and utility functions for titles (COTTL01Y), dates (CSDAT01Y), and messages (CSMSG01Y). Notable elements include transaction tracking variables in CDEMO-CT01-INFO for managing navigation between multiple transaction records, and standard CICS copybooks (DFHAID, DFHBMSCA) for handling attention identifiers and BMS screen attributes. The structure supports the program's core functionality of retrieving and displaying transaction details in the CICS environment.</p> Code <pre><code>01 WS-VARIABLES.\n         05 WS-PGMNAME                 PIC X(08) VALUE 'COTRN01C'.\n         05 WS-TRANID                  PIC X(04) VALUE 'CT01'.\n         05 WS-MESSAGE                 PIC X(80) VALUE SPACES.\n         05 WS-TRANSACT-FILE             PIC X(08) VALUE 'TRANSACT'.\n         05 WS-ERR-FLG                 PIC X(01) VALUE 'N'.\n           88 ERR-FLG-ON                         VALUE 'Y'.\n           88 ERR-FLG-OFF                        VALUE 'N'.\n         05 WS-RESP-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REAS-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-USR-MODIFIED            PIC X(01) VALUE 'N'.\n           88 USR-MODIFIED-YES                   VALUE 'Y'.\n           88 USR-MODIFIED-NO                    VALUE 'N'.\n\n         05 WS-TRAN-AMT                PIC +99999999.99.\n         05 WS-TRAN-DATE               PIC X(08) VALUE '00/00/00'.\n\n       COPY COCOM01Y.\n          05 CDEMO-CT01-INFO.\n             10 CDEMO-CT01-TRNID-FIRST     PIC X(16).\n             10 CDEMO-CT01-TRNID-LAST      PIC X(16).\n             10 CDEMO-CT01-PAGE-NUM        PIC 9(08).\n             10 CDEMO-CT01-NEXT-PAGE-FLG   PIC X(01) VALUE 'N'.\n                88 NEXT-PAGE-YES                     VALUE 'Y'.\n                88 NEXT-PAGE-NO                      VALUE 'N'.\n             10 CDEMO-CT01-TRN-SEL-FLG     PIC X(01).\n             10 CDEMO-CT01-TRN-SELECTED    PIC X(16).\n\n       COPY COTRN01.\n\n       COPY COTTL01Y.\n       COPY CSDAT01Y.\n       COPY CSMSG01Y.\n\n       COPY CVTRA05Y.\n\n       COPY DFHAID.\n       COPY DFHBMSCA.\n\n      *----------------------------------------------------------------*\n      *                        LINKAGE SECTION\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN01C.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This section defines the DFHCOMMAREA structure in the Linkage Section, which is used to receive and pass data between CICS programs. It contains a single field LK-COMMAREA that is defined as a variable-length array of characters with a size that depends on the EIBCALEN value (the length of the passed communication area). This flexible structure allows the program to handle communication areas of different sizes when called by other programs in the CardDemo transaction viewing system.</p> Code <pre><code>01  DFHCOMMAREA.\n         05  LK-COMMAREA                           PIC X(01)\n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n\n      *----------------------------------------------------------------*\n      *\n</code></pre>"},{"location":"COTRN01C.html#procedure-division","title":"Procedure Division","text":""},{"location":"COTRN01C.html#main-para","title":"MAIN-PARA","text":"<p>This paragraph serves as the main control flow for the transaction viewer screen. It initializes error flags, processes the COMMAREA data, and handles different user interactions. When first entered, it prepares the screen for display, potentially pre-populating the transaction ID field if one was selected from a previous screen. For subsequent interactions, it evaluates function key inputs to either process an entered transaction ID (Enter key), return to the previous screen (PF3), clear the current screen (PF4), or navigate to the transaction list screen (PF5). The paragraph includes error handling for invalid key presses and ensures proper screen navigation within the application flow. After processing, it returns control to CICS while preserving the application state in the COMMAREA.</p> Code <pre><code>SET ERR-FLG-OFF     TO TRUE\n           SET USR-MODIFIED-NO TO TRUE\n\n           MOVE SPACES TO WS-MESSAGE\n                          ERRMSGO OF COTRN1AO\n\n           IF EIBCALEN = 0\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n               PERFORM RETURN-TO-PREV-SCREEN\n           ELSE\n               MOVE DFHCOMMAREA(1:EIBCALEN) TO CARDDEMO-COMMAREA\n               IF NOT CDEMO-PGM-REENTER\n                   SET CDEMO-PGM-REENTER    TO TRUE\n                   MOVE LOW-VALUES          TO COTRN1AO\n                   MOVE -1       TO TRNIDINL OF COTRN1AI\n                   IF CDEMO-CT01-TRN-SELECTED NOT =\n                                              SPACES AND LOW-VALUES\n                       MOVE CDEMO-CT01-TRN-SELECTED TO\n                            TRNIDINI OF COTRN1AI\n                       PERFORM PROCESS-ENTER-KEY\n                   END-IF\n                   PERFORM SEND-TRNVIEW-SCREEN\n               ELSE\n                   PERFORM RECEIVE-TRNVIEW-SCREEN\n                   EVALUATE EIBAID\n                       WHEN DFHENTER\n                           PERFORM PROCESS-ENTER-KEY\n                       WHEN DFHPF3\n                           IF CDEMO-FROM-PROGRAM = SPACES OR LOW-VALUES\n                               MOVE 'COMEN01C' TO CDEMO-TO-PROGRAM\n                           ELSE\n                               MOVE CDEMO-FROM-PROGRAM TO\n                               CDEMO-TO-PROGRAM\n                           END-IF\n                           PERFORM RETURN-TO-PREV-SCREEN\n                       WHEN DFHPF4\n                           PERFORM CLEAR-CURRENT-SCREEN\n                       WHEN DFHPF5\n                           MOVE 'COTRN00C' TO CDEMO-TO-PROGRAM\n                           PERFORM RETURN-TO-PREV-SCREEN\n                       WHEN OTHER\n                           MOVE 'Y'                       TO WS-ERR-FLG\n                           MOVE CCDA-MSG-INVALID-KEY      TO WS-MESSAGE\n                           PERFORM SEND-TRNVIEW-SCREEN\n                   END-EVALUATE\n               END-IF\n           END-IF\n\n           EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-ENTER-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN01C.html#process-enter-key","title":"PROCESS-ENTER-KEY","text":"<p>This paragraph handles the processing logic when a user presses the Enter key in the transaction viewer screen. It first validates if the transaction ID input field is empty, displaying an error message if so. If the input is valid, it clears all display fields, reads the transaction record using the entered ID, and then populates the screen with the retrieved transaction details including card number, transaction type, category, amount, description, timestamps, and merchant information. The paragraph formats the transaction amount for display and ensures the updated screen is sent back to the user. If any errors occur during processing (such as record not found), the error flag would prevent the display fields from being populated.</p> Code <pre><code>EVALUATE TRUE\n               WHEN TRNIDINI OF COTRN1AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Tran ID can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TRNIDINL OF COTRN1AI\n                   PERFORM SEND-TRNVIEW-SCREEN\n               WHEN OTHER\n                   MOVE -1       TO TRNIDINL OF COTRN1AI\n                   CONTINUE\n           END-EVALUATE\n\n           IF NOT ERR-FLG-ON\n               MOVE SPACES      TO TRNIDI   OF COTRN1AI\n                                   CARDNUMI OF COTRN1AI\n                                   TTYPCDI  OF COTRN1AI\n                                   TCATCDI  OF COTRN1AI\n                                   TRNSRCI  OF COTRN1AI\n                                   TRNAMTI  OF COTRN1AI\n                                   TDESCI   OF COTRN1AI\n                                   TORIGDTI OF COTRN1AI\n                                   TPROCDTI OF COTRN1AI\n                                   MIDI     OF COTRN1AI\n                                   MNAMEI   OF COTRN1AI\n                                   MCITYI   OF COTRN1AI\n                                   MZIPI    OF COTRN1AI\n               MOVE TRNIDINI  OF COTRN1AI TO TRAN-ID\n               PERFORM READ-TRANSACT-FILE\n           END-IF.\n\n           IF NOT ERR-FLG-ON\n               MOVE TRAN-AMT TO WS-TRAN-AMT\n               MOVE TRAN-ID      TO TRNIDI    OF COTRN1AI\n               MOVE TRAN-CARD-NUM      TO CARDNUMI    OF COTRN1AI\n               MOVE TRAN-TYPE-CD        TO TTYPCDI   OF COTRN1AI\n               MOVE TRAN-CAT-CD        TO TCATCDI   OF COTRN1AI\n               MOVE TRAN-SOURCE       TO TRNSRCI  OF COTRN1AI\n               MOVE WS-TRAN-AMT      TO TRNAMTI    OF COTRN1AI\n               MOVE TRAN-DESC      TO TDESCI    OF COTRN1AI\n               MOVE TRAN-ORIG-TS        TO TORIGDTI   OF COTRN1AI\n               MOVE TRAN-PROC-TS       TO TPROCDTI  OF COTRN1AI\n               MOVE TRAN-MERCHANT-ID       TO MIDI  OF COTRN1AI\n               MOVE TRAN-MERCHANT-NAME       TO MNAMEI  OF COTRN1AI\n               MOVE TRAN-MERCHANT-CITY       TO MCITYI  OF COTRN1AI\n               MOVE TRAN-MERCHANT-ZIP       TO MZIPI  OF COTRN1AI\n               PERFORM SEND-TRNVIEW-SCREEN\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      RETURN-TO-PREV-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN01C.html#return-to-prev-screen","title":"RETURN-TO-PREV-SCREEN","text":"<p>This paragraph handles the return navigation functionality when a user wants to exit the current transaction viewer screen. It first checks if the target program is specified in the communication area, and if not, defaults to 'COSGN00C' (likely the main menu or sign-on screen). It then prepares the communication area by setting the originating transaction ID and program name, and resets the program context to zeros. Finally, it transfers control to the target program using the CICS XCTL command, passing the communication area to maintain session context. This ensures proper navigation flow within the CardDemo application.</p> Code <pre><code>IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n           END-IF\n           MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n           MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n           MOVE ZEROS        TO CDEMO-PGM-CONTEXT\n           EXEC CICS\n               XCTL PROGRAM(CDEMO-TO-PROGRAM)\n               COMMAREA(CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      SEND-TRNVIEW-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN01C.html#send-trnview-screen","title":"SEND-TRNVIEW-SCREEN","text":"<p>This paragraph handles the display of the transaction viewer screen. It first calls the POPULATE-HEADER-INFO paragraph to set up the header information, then moves any system message to the error message field on the screen. It then uses the CICS SEND command to display the COTRN1A map from the COTRN01 mapset, clearing the screen (ERASE) and positioning the cursor. This is a standard screen display routine that presents the transaction details to the user after the data has been retrieved and formatted.</p> Code <pre><code>PERFORM POPULATE-HEADER-INFO\n\n           MOVE WS-MESSAGE TO ERRMSGO OF COTRN1AO\n\n           EXEC CICS SEND\n                     MAP('COTRN1A')\n                     MAPSET('COTRN01')\n                     FROM(COTRN1AO)\n                     ERASE\n                     CURSOR\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      RECEIVE-TRNVIEW-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN01C.html#receive-trnview-screen","title":"RECEIVE-TRNVIEW-SCREEN","text":"<p>This paragraph handles the reception of user input from the COTRN1A map within the COTRN01 mapset in the transaction viewer. It uses the CICS RECEIVE command to capture data entered by the user on the transaction view screen, storing the input in the COTRN1AI structure. The paragraph also captures response codes in WS-RESP-CD and WS-REAS-CD variables for subsequent error handling. This is a standard CICS input processing step that occurs before the application processes the user's transaction viewing request.</p> Code <pre><code>EXEC CICS RECEIVE\n                     MAP('COTRN1A')\n                     MAPSET('COTRN01')\n                     INTO(COTRN1AI)\n                     RESP(WS-RESP-CD)\n                     RESP2(WS-REAS-CD)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      POPULATE-HEADER-INFO\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN01C.html#populate-header-info","title":"POPULATE-HEADER-INFO","text":"<p>This paragraph populates the header information for the transaction viewer screen. It retrieves the current system date and time using the CURRENT-DATE function, then formats and displays this information along with application titles, transaction ID, and program name on the screen. The date is formatted as MM/DD/YY and the time as HH:MM:SS before being moved to their respective output fields on the COTRN1AO screen.</p> Code <pre><code>MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n           MOVE CCDA-TITLE01           TO TITLE01O OF COTRN1AO\n           MOVE CCDA-TITLE02           TO TITLE02O OF COTRN1AO\n           MOVE WS-TRANID              TO TRNNAMEO OF COTRN1AO\n           MOVE WS-PGMNAME             TO PGMNAMEO OF COTRN1AO\n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM\n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD\n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY\n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF COTRN1AO\n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH\n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM\n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS\n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF COTRN1AO.\n\n      *----------------------------------------------------------------*\n      *                      READ-TRANSACT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN01C.html#read-transact-file","title":"READ-TRANSACT-FILE","text":"<p>This paragraph performs a CICS READ operation to retrieve a transaction record from the TRANSACT file using the transaction ID as the key. It handles three possible response scenarios: 1) When the read is successful (NORMAL), processing continues to the next step; 2) When the transaction ID is not found (NOTFND), it sets an error flag, displays a \"Transaction ID NOT found\" message, positions the cursor at the transaction ID input field, and redisplays the transaction view screen; 3) For any other response code, it logs the response and reason codes, sets an error flag, displays an \"Unable to lookup Transaction\" message, positions the cursor at the transaction ID input field, and redisplays the screen. The paragraph is essential for retrieving transaction details requested by the user in the CardDemo transaction viewer application.</p> Code <pre><code>EXEC CICS READ\n                DATASET   (WS-TRANSACT-FILE)\n                INTO      (TRAN-RECORD)\n                LENGTH    (LENGTH OF TRAN-RECORD)\n                RIDFLD    (TRAN-ID)\n                KEYLENGTH (LENGTH OF TRAN-ID)\n                UPDATE\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(NOTFND)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Transaction ID NOT found...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TRNIDINL OF COTRN1AI\n                   PERFORM SEND-TRNVIEW-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup Transaction...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TRNIDINL OF COTRN1AI\n                   PERFORM SEND-TRNVIEW-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      CLEAR-CURRENT-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN01C.html#clear-current-screen","title":"CLEAR-CURRENT-SCREEN","text":"<p>This paragraph clears the current screen by first initializing all fields to their default values and then redisplaying the transaction viewer screen. It provides a way for users to reset the form when they press the designated clear key (PF4).</p> Code <pre><code>PERFORM INITIALIZE-ALL-FIELDS.\n           PERFORM SEND-TRNVIEW-SCREEN.\n\n      *----------------------------------------------------------------*\n      *                      INITIALIZE-ALL-FIELDS\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN01C.html#initialize-all-fields","title":"INITIALIZE-ALL-FIELDS","text":"<p>This paragraph initializes all fields in the transaction viewer screen. It sets the cursor position to the transaction ID input field by setting its length attribute to -1, and then clears all display fields by moving spaces to them. The fields being cleared include transaction details (ID, card number, type code, category code, source, amount, description, original date, processing date) and merchant information (ID, name, city, ZIP code). This initialization is typically performed when the screen is first displayed or when preparing for new input.</p> Code <pre><code>MOVE -1              TO TRNIDINL OF COTRN1AI\n           MOVE SPACES          TO TRNIDINI OF COTRN1AI\n                                   TRNIDI   OF COTRN1AI\n                                   CARDNUMI OF COTRN1AI\n                                   TTYPCDI  OF COTRN1AI\n                                   TCATCDI  OF COTRN1AI\n                                   TRNSRCI  OF COTRN1AI\n                                   TRNAMTI  OF COTRN1AI\n                                   TDESCI   OF COTRN1AI\n                                   TORIGDTI OF COTRN1AI\n                                   TPROCDTI OF COTRN1AI\n                                   MIDI     OF COTRN1AI\n                                   MNAMEI   OF COTRN1AI\n                                   MCITYI   OF COTRN1AI\n                                   MZIPI    OF COTRN1AI\n</code></pre>"},{"location":"COTRN01C.html#ws-message","title":"WS-MESSAGE","text":"<p>This paragraph contains version control information for the CardDemo application, showing the specific version (v1.0-15-g27d6c6f-68) and the timestamp when this code was last updated (July 19, 2022 at 23:12:34 CDT). This information helps track which version of the code is deployed and when changes were made.</p> Code <pre><code>*\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:34 CDT\n      *\n</code></pre>"},{"location":"COTRN02C.html","title":"COTRN02C","text":""},{"location":"COTRN02C.html#overview","title":"Overview","text":"<p>This program (COTRN02C) is a CICS COBOL application that adds new transactions to the TRANSACT file in the CardDemo system. It provides a user interface for entering transaction details and performs comprehensive validation before writing records to the database.</p> <p>The program handles the creation of credit card transactions by allowing users to enter either an account ID or card number, along with transaction details such as type code, category code, amount, description, dates, and merchant information. It performs extensive validation on all input fields, ensuring data integrity before adding records to the transaction file.</p> <p>Key functionality includes: - Validating account IDs and card numbers against cross-reference files - Performing format validation on transaction amounts and dates - Auto-generating sequential transaction IDs - Providing a \"copy last transaction\" feature to streamline data entry - Supporting navigation between screens in the CardDemo application</p> <p>The program incorporates error handling for database operations and provides clear error messages to guide users through the data entry process. It demonstrates typical mainframe transaction processing patterns with field validation, file I/O operations, and screen management.</p>"},{"location":"COTRN02C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COTRN02C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"COTRN02C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant MainPara as MAIN-PARA\n    participant ProcessEnter as PROCESS-ENTER-KEY\n    participant ValidateKey as VALIDATE-INPUT-KEY-FIELDS\n    participant ValidateData as VALIDATE-INPUT-DATA-FIELDS\n    participant AddTran as ADD-TRANSACTION\n    participant CopyLast as COPY-LAST-TRAN-DATA\n    participant Screen as SEND-TRNADD-SCREEN\n    participant Files as Database Files\n\n    User-&gt;&gt;MainPara: Start transaction\n\n    alt First time entry\n        MainPara-&gt;&gt;Screen: Initialize and display screen\n        Screen--&gt;&gt;User: Show transaction entry form\n    else Re-entry\n        MainPara-&gt;&gt;MainPara: Receive screen data\n\n        alt ENTER key pressed\n            MainPara-&gt;&gt;ProcessEnter: Process entered data\n            ProcessEnter-&gt;&gt;ValidateKey: Validate key fields\n            ValidateKey-&gt;&gt;Files: Read CXACAIX/CCXREF files\n            Files--&gt;&gt;ValidateKey: Return account/card data\n\n            ProcessEnter-&gt;&gt;ValidateData: Validate data fields\n\n            alt Confirmation = 'Y'\n                ProcessEnter-&gt;&gt;AddTran: Add transaction\n                AddTran-&gt;&gt;Files: STARTBR TRANSACT file\n                Files--&gt;&gt;AddTran: Position at end\n                AddTran-&gt;&gt;Files: READPREV TRANSACT file\n                Files--&gt;&gt;AddTran: Return last transaction\n                AddTran-&gt;&gt;AddTran: Generate new transaction ID\n                AddTran-&gt;&gt;Files: WRITE TRANSACT file\n                Files--&gt;&gt;AddTran: Write confirmation\n                AddTran-&gt;&gt;Screen: Display success message\n                Screen--&gt;&gt;User: Show confirmation\n            else Confirmation not 'Y'\n                ProcessEnter-&gt;&gt;Screen: Request confirmation\n                Screen--&gt;&gt;User: Prompt for confirmation\n            end\n\n        else PF3 key pressed\n            MainPara-&gt;&gt;MainPara: Return to previous screen\n\n        else PF4 key pressed\n            MainPara-&gt;&gt;MainPara: Clear current screen\n            MainPara-&gt;&gt;Screen: Display empty form\n            Screen--&gt;&gt;User: Show cleared form\n\n        else PF5 key pressed\n            MainPara-&gt;&gt;CopyLast: Copy last transaction\n            CopyLast-&gt;&gt;ValidateKey: Validate key fields\n            CopyLast-&gt;&gt;Files: STARTBR TRANSACT file\n            Files--&gt;&gt;CopyLast: Position at end\n            CopyLast-&gt;&gt;Files: READPREV TRANSACT file\n            Files--&gt;&gt;CopyLast: Return last transaction\n            CopyLast-&gt;&gt;ProcessEnter: Process with copied data\n            ProcessEnter-&gt;&gt;Screen: Display form with copied data\n            Screen--&gt;&gt;User: Show form with copied data\n\n        else Other key pressed\n            MainPara-&gt;&gt;Screen: Display invalid key message\n            Screen--&gt;&gt;User: Show error message\n        end\n    end</code></pre>"},{"location":"COTRN02C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>DFHAID</code></li> <li><code>CVACT01Y</code></li> <li><code>CVTRA05Y</code></li> <li><code>COCOM01Y</code></li> <li><code>COTRN02</code></li> <li><code>DFHBMSCA</code></li> <li><code>CVACT03Y</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG01Y</code></li> </ul>"},{"location":"COTRN02C.html#environment-division","title":"Environment Division","text":""},{"location":"COTRN02C.html#configuration-section","title":"CONFIGURATION SECTION","text":"<p>This section would typically contain configuration settings for the COTRN02C program, including file assignments, special names, and system dependencies. However, the provided snippet is empty, indicating that the Configuration Section in this program doesn't contain any explicit configuration settings. This suggests that the program likely relies on standard CICS environment configurations or that the configuration details are defined elsewhere in the system, possibly in the CICS Resource Definition Online (RDO) or in JCL that executes this program.</p> Code"},{"location":"COTRN02C.html#data-division","title":"Data Division","text":""},{"location":"COTRN02C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage section defines the key variables and data structures used in the COTRN02C transaction processing program. It contains program identifiers, file names for transaction and account data, status flags for error handling and user modifications, and various numeric fields for processing transaction amounts and IDs. The section includes specialized fields for data conversion and validation, particularly for handling transaction amounts and dates. It incorporates several copybooks that likely contain screen layouts, common data structures, and message definitions needed for the transaction entry interface. The CSUTLDTC-PARM structure suggests integration with a date validation utility. The section also defines program control variables to track transaction navigation and selection, supporting the program's ability to manage transaction entry across multiple screens.</p> Code <pre><code>01 WS-VARIABLES.\n         05 WS-PGMNAME                 PIC X(08) VALUE 'COTRN02C'.\n         05 WS-TRANID                  PIC X(04) VALUE 'CT02'.\n         05 WS-MESSAGE                 PIC X(80) VALUE SPACES.\n         05 WS-TRANSACT-FILE           PIC X(08) VALUE 'TRANSACT'.\n         05 WS-ACCTDAT-FILE            PIC X(08) VALUE 'ACCTDAT '.\n         05 WS-CCXREF-FILE             PIC X(08) VALUE 'CCXREF  '.\n         05 WS-CXACAIX-FILE            PIC X(08) VALUE 'CXACAIX '.\n\n         05 WS-ERR-FLG                 PIC X(01) VALUE 'N'.\n           88 ERR-FLG-ON                         VALUE 'Y'.\n           88 ERR-FLG-OFF                        VALUE 'N'.\n         05 WS-RESP-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REAS-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-USR-MODIFIED            PIC X(01) VALUE 'N'.\n           88 USR-MODIFIED-YES                   VALUE 'Y'.\n           88 USR-MODIFIED-NO                    VALUE 'N'.\n\n         05 WS-TRAN-AMT                PIC +99999999.99.\n         05 WS-TRAN-DATE               PIC X(08) VALUE '00/00/00'.\n         05 WS-ACCT-ID-N               PIC 9(11) VALUE 0.\n         05 WS-CARD-NUM-N              PIC 9(16) VALUE 0.\n         05 WS-TRAN-ID-N               PIC 9(16) VALUE ZEROS.\n         05 WS-TRAN-AMT-N              PIC S9(9)V99 VALUE ZERO.\n         05 WS-TRAN-AMT-E              PIC +99999999.99 VALUE ZEROS.\n         05 WS-DATE-FORMAT             PIC X(10) VALUE 'YYYY-MM-DD'.\n\n       01 CSUTLDTC-PARM.\n          05 CSUTLDTC-DATE                   PIC X(10).\n          05 CSUTLDTC-DATE-FORMAT            PIC X(10).\n          05 CSUTLDTC-RESULT.\n             10 CSUTLDTC-RESULT-SEV-CD       PIC X(04).\n             10 FILLER                       PIC X(11).\n             10 CSUTLDTC-RESULT-MSG-NUM      PIC X(04).\n             10 CSUTLDTC-RESULT-MSG          PIC X(61).\n\n       COPY COCOM01Y.\n          05 CDEMO-CT02-INFO.\n             10 CDEMO-CT02-TRNID-FIRST     PIC X(16).\n             10 CDEMO-CT02-TRNID-LAST      PIC X(16).\n             10 CDEMO-CT02-PAGE-NUM        PIC 9(08).\n             10 CDEMO-CT02-NEXT-PAGE-FLG   PIC X(01) VALUE 'N'.\n                88 NEXT-PAGE-YES                     VALUE 'Y'.\n                88 NEXT-PAGE-NO                      VALUE 'N'.\n             10 CDEMO-CT02-TRN-SEL-FLG     PIC X(01).\n             10 CDEMO-CT02-TRN-SELECTED    PIC X(16).\n\n       COPY COTRN02.\n\n       COPY COTTL01Y.\n       COPY CSDAT01Y.\n       COPY CSMSG01Y.\n\n       COPY CVTRA05Y.\n       COPY CVACT01Y.\n       COPY CVACT03Y.\n\n       COPY DFHAID.\n       COPY DFHBMSCA.\n\n      *----------------------------------------------------------------*\n      *                        LINKAGE SECTION\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This section defines the linkage area used for communication between programs in the CICS environment. It contains a single field, LK-COMMAREA, which is defined as a variable-length array of characters that can expand from 1 to 32,767 bytes depending on the length passed in EIBCALEN (CICS Executive Interface Block Communication Area Length). This flexible structure allows the program to receive and process communication data of varying sizes from other programs in the CardDemo transaction processing system.</p> Code <pre><code>01  DFHCOMMAREA.\n         05  LK-COMMAREA                           PIC X(01)\n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n\n      *----------------------------------------------------------------*\n      *\n</code></pre>"},{"location":"COTRN02C.html#procedure-division","title":"Procedure Division","text":""},{"location":"COTRN02C.html#main-para","title":"MAIN-PARA","text":"<p>This paragraph serves as the main control flow for the transaction addition screen. It initializes error flags, handles first-time entry versus re-entry to the program, and processes user input based on function keys. When first entered, it sets up the screen and positions the cursor at the account ID field. On re-entry, it evaluates the user's action based on the function key pressed: ENTER processes the transaction data, PF3 returns to the previous screen, PF4 clears the current screen, and PF5 copies data from the last transaction. The paragraph includes special handling for when a transaction is pre-selected from another screen. It concludes by returning control to CICS with the transaction ID and communication area preserved for the next interaction.</p> Code <pre><code>SET ERR-FLG-OFF     TO TRUE\n           SET USR-MODIFIED-NO TO TRUE\n\n           MOVE SPACES TO WS-MESSAGE\n                          ERRMSGO OF COTRN2AO\n\n           IF EIBCALEN = 0\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n               PERFORM RETURN-TO-PREV-SCREEN\n           ELSE\n               MOVE DFHCOMMAREA(1:EIBCALEN) TO CARDDEMO-COMMAREA\n               IF NOT CDEMO-PGM-REENTER\n                   SET CDEMO-PGM-REENTER    TO TRUE\n                   MOVE LOW-VALUES          TO COTRN2AO\n                   MOVE -1       TO ACTIDINL OF COTRN2AI\n                   IF CDEMO-CT02-TRN-SELECTED NOT =\n                                              SPACES AND LOW-VALUES\n                       MOVE CDEMO-CT02-TRN-SELECTED TO\n                            CARDNINI OF COTRN2AI\n                       PERFORM PROCESS-ENTER-KEY\n                   END-IF\n                   PERFORM SEND-TRNADD-SCREEN\n               ELSE\n                   PERFORM RECEIVE-TRNADD-SCREEN\n                   EVALUATE EIBAID\n                       WHEN DFHENTER\n                           PERFORM PROCESS-ENTER-KEY\n                       WHEN DFHPF3\n                           IF CDEMO-FROM-PROGRAM = SPACES OR LOW-VALUES\n                               MOVE 'COMEN01C' TO CDEMO-TO-PROGRAM\n                           ELSE\n                               MOVE CDEMO-FROM-PROGRAM TO\n                               CDEMO-TO-PROGRAM\n                           END-IF\n                           PERFORM RETURN-TO-PREV-SCREEN\n                       WHEN DFHPF4\n                           PERFORM CLEAR-CURRENT-SCREEN\n                       WHEN DFHPF5\n                           PERFORM COPY-LAST-TRAN-DATA\n                       WHEN OTHER\n                           MOVE 'Y'                       TO WS-ERR-FLG\n                           MOVE CCDA-MSG-INVALID-KEY      TO WS-MESSAGE\n                           PERFORM SEND-TRNADD-SCREEN\n                   END-EVALUATE\n               END-IF\n           END-IF\n\n           EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-ENTER-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#process-enter-key","title":"PROCESS-ENTER-KEY","text":"<p>This paragraph processes the user's action when the Enter key is pressed during transaction entry. It first validates both key fields and data fields by calling their respective validation routines. Then it evaluates the confirmation input field ('CONFIRMI') to determine the next action. If the user confirms with 'Y' or 'y', it proceeds to add the transaction to the database. If the confirmation field is blank, contains 'N', 'n', or low-values, it prompts the user to confirm the transaction by setting an error flag and displaying a message. For any other input value, it displays an error message indicating that only 'Y' or 'N' are valid responses. In both error cases, it positions the cursor at the confirmation field and redisplays the transaction entry screen.</p> Code <pre><code>PERFORM VALIDATE-INPUT-KEY-FIELDS\n           PERFORM VALIDATE-INPUT-DATA-FIELDS.\n\n           EVALUATE CONFIRMI OF COTRN2AI\n               WHEN 'Y'\n               WHEN 'y'\n                   PERFORM ADD-TRANSACTION\n               WHEN 'N'\n               WHEN 'n'\n               WHEN SPACES\n               WHEN LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Confirm to add this transaction...'\n                                TO WS-MESSAGE\n                   MOVE -1      TO CONFIRML OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN OTHER\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Invalid value. Valid values are (Y/N)...'\n                                TO WS-MESSAGE\n                   MOVE -1      TO CONFIRML OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      VALIDATE-INPUT-KEY-FIELDS\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#validate-input-key-fields","title":"VALIDATE-INPUT-KEY-FIELDS","text":"<p>This paragraph validates the key input fields (Account ID or Card Number) required for transaction creation. It uses an EVALUATE statement to handle three scenarios: when an Account ID is provided, when a Card Number is provided, or when neither is provided. For Account ID validation, it checks that the value is numeric, converts it to a numeric format, and then retrieves the corresponding Card Number by reading the CXACAIX cross-reference file. Similarly, for Card Number validation, it verifies the numeric format, converts it to a numeric value, and retrieves the associated Account ID from the CCXREF file. If neither field is provided, it displays an error message requiring one of these fields to be entered. The paragraph ensures data integrity by validating input format and establishing the relationship between account IDs and card numbers before proceeding with transaction creation.</p> Code <pre><code>EVALUATE TRUE\n               WHEN ACTIDINI OF COTRN2AI NOT = SPACES AND LOW-VALUES\n                   IF ACTIDINI OF COTRN2AI IS NOT NUMERIC\n                       MOVE 'Y'     TO WS-ERR-FLG\n                       MOVE 'Account ID must be Numeric...' TO\n                                       WS-MESSAGE\n                       MOVE -1       TO ACTIDINL OF COTRN2AI\n                       PERFORM SEND-TRNADD-SCREEN\n                   END-IF\n                   COMPUTE WS-ACCT-ID-N = FUNCTION NUMVAL(ACTIDINI OF\n                   COTRN2AI)\n                   MOVE WS-ACCT-ID-N            TO XREF-ACCT-ID\n                                                ACTIDINI OF COTRN2AI\n                   PERFORM READ-CXACAIX-FILE\n                   MOVE XREF-CARD-NUM         TO CARDNINI OF COTRN2AI\n               WHEN CARDNINI OF COTRN2AI NOT = SPACES AND LOW-VALUES\n                   IF CARDNINI OF COTRN2AI IS NOT NUMERIC\n                       MOVE 'Y'     TO WS-ERR-FLG\n                       MOVE 'Card Number must be Numeric...' TO\n                                       WS-MESSAGE\n                       MOVE -1       TO CARDNINL OF COTRN2AI\n                       PERFORM SEND-TRNADD-SCREEN\n                   END-IF\n                   COMPUTE WS-CARD-NUM-N = FUNCTION NUMVAL(CARDNINI OF\n                   COTRN2AI)\n                   MOVE WS-CARD-NUM-N        TO XREF-CARD-NUM\n                                                CARDNINI OF COTRN2AI\n                   PERFORM READ-CCXREF-FILE\n                   MOVE XREF-ACCT-ID         TO ACTIDINI OF COTRN2AI\n               WHEN OTHER\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Account or Card Number must be entered...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                 VALIDATE-INPUT-DATA-FIELDS\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#validate-input-data-fields","title":"VALIDATE-INPUT-DATA-FIELDS","text":"<p>This paragraph performs comprehensive validation of transaction input data fields before allowing a new transaction to be added. It first checks if an error flag is set, in which case it clears all input fields. Then it systematically validates each required field, ensuring none are empty or contain invalid values. The validation includes checking that type and category codes are numeric, transaction amount follows the format \"-99999999.99\", and dates conform to \"YYYY-MM-DD\" format. The code also performs advanced date validation by calling the CSUTLDTC utility to verify that dates are valid calendar dates. For each validation failure, it sets an error flag, positions the cursor at the problematic field, displays an appropriate error message, and redisplays the transaction entry screen. The paragraph also formats the transaction amount using NUMVAL-C function to ensure proper numeric representation.</p> Code <pre><code>IF ERR-FLG-ON\n               MOVE SPACES      TO TTYPCDI  OF COTRN2AI\n                                   TCATCDI  OF COTRN2AI\n                                   TRNSRCI  OF COTRN2AI\n                                   TRNAMTI  OF COTRN2AI\n                                   TDESCI   OF COTRN2AI\n                                   TORIGDTI OF COTRN2AI\n                                   TPROCDTI OF COTRN2AI\n                                   MIDI     OF COTRN2AI\n                                   MNAMEI   OF COTRN2AI\n                                   MCITYI   OF COTRN2AI\n                                   MZIPI    OF COTRN2AI\n           END-IF.\n\n           EVALUATE TRUE\n               WHEN TTYPCDI OF COTRN2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Type CD can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TTYPCDL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN TCATCDI OF COTRN2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Category CD can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TCATCDL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN TRNSRCI OF COTRN2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Source can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TRNSRCL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN TDESCI OF COTRN2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Description can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TDESCL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN TRNAMTI OF COTRN2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Amount can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TRNAMTL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN TORIGDTI OF COTRN2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Orig Date can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TORIGDTL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN TPROCDTI OF COTRN2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Proc Date can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TPROCDTL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN MIDI OF COTRN2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Merchant ID can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO MIDL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN MNAMEI OF COTRN2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Merchant Name can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO MNAMEL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN MCITYI OF COTRN2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Merchant City can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO MCITYL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN MZIPI OF COTRN2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Merchant Zip can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO MZIPL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN OTHER\n                   CONTINUE\n           END-EVALUATE.\n\n           EVALUATE TRUE\n               WHEN TTYPCDI OF COTRN2AI NOT NUMERIC\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Type CD must be Numeric...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TTYPCDL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN TCATCDI OF COTRN2AI NOT NUMERIC\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Category CD must be Numeric...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TCATCDL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN OTHER\n                   CONTINUE\n           END-EVALUATE\n\n           EVALUATE TRUE\n               WHEN TRNAMTI OF COTRN2AI(1:1) NOT EQUAL '-' AND '+'\n               WHEN TRNAMTI OF COTRN2AI(2:8) NOT NUMERIC\n               WHEN TRNAMTI OF COTRN2AI(10:1) NOT = '.'\n               WHEN TRNAMTI OF COTRN2AI(11:2) IS NOT NUMERIC\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Amount should be in format -99999999.99' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TRNAMTL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN OTHER\n                   CONTINUE\n           END-EVALUATE\n\n           EVALUATE TRUE\n               WHEN TORIGDTI OF COTRN2AI(1:4) IS NOT NUMERIC\n               WHEN TORIGDTI OF COTRN2AI(5:1) NOT EQUAL '-'\n               WHEN TORIGDTI OF COTRN2AI(6:2) NOT NUMERIC\n               WHEN TORIGDTI OF COTRN2AI(8:1) NOT EQUAL '-'\n               WHEN TORIGDTI OF COTRN2AI(9:2) NOT NUMERIC\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Orig Date should be in format YYYY-MM-DD' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TORIGDTL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN OTHER\n                   CONTINUE\n           END-EVALUATE\n\n           EVALUATE TRUE\n               WHEN TPROCDTI OF COTRN2AI(1:4) IS NOT NUMERIC\n               WHEN TPROCDTI OF COTRN2AI(5:1) NOT EQUAL '-'\n               WHEN TPROCDTI OF COTRN2AI(6:2) NOT NUMERIC\n               WHEN TPROCDTI OF COTRN2AI(8:1) NOT EQUAL '-'\n               WHEN TPROCDTI OF COTRN2AI(9:2) NOT NUMERIC\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Proc Date should be in format YYYY-MM-DD' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO TPROCDTL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN OTHER\n                   CONTINUE\n           END-EVALUATE\n\n           COMPUTE WS-TRAN-AMT-N = FUNCTION NUMVAL-C(TRNAMTI OF\n           COTRN2AI)\n           MOVE WS-TRAN-AMT-N TO WS-TRAN-AMT-E\n           MOVE WS-TRAN-AMT-E TO TRNAMTI OF COTRN2AI\n\n\n           MOVE TORIGDTI OF COTRN2AI TO CSUTLDTC-DATE\n           MOVE WS-DATE-FORMAT       TO CSUTLDTC-DATE-FORMAT\n           MOVE SPACES               TO CSUTLDTC-RESULT\n\n           CALL 'CSUTLDTC' USING   CSUTLDTC-DATE\n                                   CSUTLDTC-DATE-FORMAT\n                                   CSUTLDTC-RESULT\n\n           IF CSUTLDTC-RESULT-SEV-CD = '0000'\n               CONTINUE\n           ELSE\n               IF CSUTLDTC-RESULT-MSG-NUM NOT = '2513'\n                   MOVE 'Orig Date - Not a valid date...'\n                     TO WS-MESSAGE\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE -1       TO TORIGDTL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               END-IF\n           END-IF\n\n           MOVE TPROCDTI OF COTRN2AI TO CSUTLDTC-DATE\n           MOVE WS-DATE-FORMAT       TO CSUTLDTC-DATE-FORMAT\n           MOVE SPACES               TO CSUTLDTC-RESULT\n\n           CALL 'CSUTLDTC' USING   CSUTLDTC-DATE\n                                   CSUTLDTC-DATE-FORMAT\n                                   CSUTLDTC-RESULT\n\n           IF CSUTLDTC-RESULT-SEV-CD = '0000'\n               CONTINUE\n           ELSE\n               IF CSUTLDTC-RESULT-MSG-NUM NOT = '2513'\n                   MOVE 'Proc Date - Not a valid date...'\n                     TO WS-MESSAGE\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE -1       TO TPROCDTL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               END-IF\n           END-IF\n\n\n           IF MIDI OF COTRN2AI IS NOT NUMERIC\n               MOVE 'Y'     TO WS-ERR-FLG\n               MOVE 'Merchant ID must be Numeric...' TO\n                               WS-MESSAGE\n               MOVE -1       TO MIDL OF COTRN2AI\n               PERFORM SEND-TRNADD-SCREEN\n           END-IF\n           .\n\n      *----------------------------------------------------------------*\n      *                        ADD-TRANSACTION\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#add-transaction","title":"ADD-TRANSACTION","text":"<p>This paragraph handles the creation of a new transaction record in the system. It first determines the next available transaction ID by retrieving the highest existing ID from the TRANSACT file (using STARTBR, READPREV, and ENDBR operations), then incrementing it by one. The paragraph then initializes a new transaction record and populates it with data from the input screen (COTRN2AI), including transaction type, category, source, description, amount, card number, and merchant information. The transaction amount is converted from character format to numeric using the FUNCTION NUMVAL-C. After all fields are populated, the new transaction record is written to the TRANSACT file by calling the WRITE-TRANSACT-FILE paragraph.</p> Code <pre><code>MOVE HIGH-VALUES TO TRAN-ID\n           PERFORM STARTBR-TRANSACT-FILE\n           PERFORM READPREV-TRANSACT-FILE\n           PERFORM ENDBR-TRANSACT-FILE\n           MOVE TRAN-ID     TO WS-TRAN-ID-N\n           ADD 1 TO WS-TRAN-ID-N\n           INITIALIZE TRAN-RECORD\n           MOVE WS-TRAN-ID-N         TO TRAN-ID\n           MOVE TTYPCDI  OF COTRN2AI TO TRAN-TYPE-CD\n           MOVE TCATCDI  OF COTRN2AI TO TRAN-CAT-CD\n           MOVE TRNSRCI  OF COTRN2AI TO TRAN-SOURCE\n           MOVE TDESCI   OF COTRN2AI TO TRAN-DESC\n           COMPUTE WS-TRAN-AMT-N = FUNCTION NUMVAL-C(TRNAMTI OF\n           COTRN2AI)\n           MOVE WS-TRAN-AMT-N TO TRAN-AMT\n           MOVE CARDNINI OF COTRN2AI TO TRAN-CARD-NUM\n           MOVE MIDI     OF COTRN2AI TO TRAN-MERCHANT-ID\n           MOVE MNAMEI   OF COTRN2AI TO TRAN-MERCHANT-NAME\n           MOVE MCITYI   OF COTRN2AI TO TRAN-MERCHANT-CITY\n           MOVE MZIPI    OF COTRN2AI TO TRAN-MERCHANT-ZIP\n           MOVE TORIGDTI OF COTRN2AI TO TRAN-ORIG-TS\n           MOVE TPROCDTI OF COTRN2AI TO TRAN-PROC-TS\n           PERFORM WRITE-TRANSACT-FILE.\n\n      *----------------------------------------------------------------*\n      *                      COPY-LAST-TRAN-DATA\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#copy-last-tran-data","title":"COPY-LAST-TRAN-DATA","text":"<p>This paragraph implements the \"copy last transaction\" feature, which retrieves the most recent transaction record and populates the input screen with its data. It first validates the key fields entered by the user, then retrieves the most recent transaction record by positioning to the end of the TRANSACT file (using HIGH-VALUES) and reading the previous record. If the retrieval is successful (no error flag), it transfers the transaction details from the retrieved record to the input screen fields, including transaction type, category, source, amount, description, dates, and merchant information. The paragraph concludes by processing the ENTER key, which likely refreshes the screen with the copied data. This functionality allows users to quickly create new transactions that share many details with previous ones, improving data entry efficiency.</p> Code <pre><code>PERFORM VALIDATE-INPUT-KEY-FIELDS\n\n           MOVE HIGH-VALUES TO TRAN-ID\n           PERFORM STARTBR-TRANSACT-FILE\n           PERFORM READPREV-TRANSACT-FILE\n           PERFORM ENDBR-TRANSACT-FILE\n\n           IF NOT ERR-FLG-ON\n               MOVE TRAN-AMT TO WS-TRAN-AMT-E\n               MOVE TRAN-TYPE-CD        TO TTYPCDI  OF COTRN2AI\n               MOVE TRAN-CAT-CD         TO TCATCDI  OF COTRN2AI\n               MOVE TRAN-SOURCE         TO TRNSRCI  OF COTRN2AI\n               MOVE WS-TRAN-AMT-E       TO TRNAMTI  OF COTRN2AI\n               MOVE TRAN-DESC           TO TDESCI   OF COTRN2AI\n               MOVE TRAN-ORIG-TS        TO TORIGDTI OF COTRN2AI\n               MOVE TRAN-PROC-TS        TO TPROCDTI OF COTRN2AI\n               MOVE TRAN-MERCHANT-ID    TO MIDI     OF COTRN2AI\n               MOVE TRAN-MERCHANT-NAME  TO MNAMEI   OF COTRN2AI\n               MOVE TRAN-MERCHANT-CITY  TO MCITYI   OF COTRN2AI\n               MOVE TRAN-MERCHANT-ZIP   TO MZIPI    OF COTRN2AI\n           END-IF\n\n           PERFORM PROCESS-ENTER-KEY.\n\n      *----------------------------------------------------------------*\n      *                      RETURN-TO-PREV-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#return-to-prev-screen","title":"RETURN-TO-PREV-SCREEN","text":"<p>This paragraph handles the navigation back to a previous screen in the CardDemo application. It first checks if the target program is specified in the communication area, defaulting to 'COSGN00C' (likely the main menu or sign-on screen) if no value is provided. The paragraph then populates the communication area with the current transaction ID and program name as the \"from\" information, resets the program context to zeros, and uses the CICS XCTL command to transfer control to the target program while passing the communication area. This provides a standardized way to return to previous screens while maintaining navigation context throughout the application.</p> Code <pre><code>IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n           END-IF\n           MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n           MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n           MOVE ZEROS        TO CDEMO-PGM-CONTEXT\n           EXEC CICS\n               XCTL PROGRAM(CDEMO-TO-PROGRAM)\n               COMMAREA(CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      SEND-TRNADD-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#send-trnadd-screen","title":"SEND-TRNADD-SCREEN","text":"<p>This paragraph displays the transaction addition screen to the user. It first calls the POPULATE-HEADER-INFO paragraph to set up common header information, then moves any system message to the error message field on the screen. The paragraph uses CICS SEND to display the COTRN2A map from the COTRN02 mapset, erasing the previous screen content and positioning the cursor appropriately. After sending the screen, it executes a CICS RETURN with the current transaction ID and communication area, which effectively pauses the program and waits for user input. This implements the standard CICS pseudo-conversational programming pattern where the program displays a screen, then terminates until the user submits the screen data.</p> Code <pre><code>PERFORM POPULATE-HEADER-INFO\n\n           MOVE WS-MESSAGE TO ERRMSGO OF COTRN2AO\n\n           EXEC CICS SEND\n                     MAP('COTRN2A')\n                     MAPSET('COTRN02')\n                     FROM(COTRN2AO)\n                     ERASE\n                     CURSOR\n           END-EXEC.\n\n           EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n      *              LENGTH(LENGTH OF CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      RECEIVE-TRNADD-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#receive-trnadd-screen","title":"RECEIVE-TRNADD-SCREEN","text":"<p>This paragraph receives user input from the COTRN2A map within the COTRN02 mapset, storing the data in the COTRN2AI structure. It captures the response and reason codes from the CICS RECEIVE operation to enable error handling. This is a standard CICS data entry pattern that collects transaction details entered by the user before processing them for validation and database operations.</p> Code <pre><code>EXEC CICS RECEIVE\n                     MAP('COTRN2A')\n                     MAPSET('COTRN02')\n                     INTO(COTRN2AI)\n                     RESP(WS-RESP-CD)\n                     RESP2(WS-REAS-CD)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      POPULATE-HEADER-INFO\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#populate-header-info","title":"POPULATE-HEADER-INFO","text":"<p>This paragraph populates the header information on the COTRN2A screen. It retrieves the current system date and time, then formats and displays this information along with program identification details. The routine first obtains the current date using the CURRENT-DATE function, then transfers title information and transaction/program identifiers to the screen. It then formats the current date into MM/DD/YY format and the current time into HH:MM:SS format before displaying them in their respective screen fields. This provides users with contextual information about when the transaction is being processed and which program they are currently using.</p> Code <pre><code>MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n           MOVE CCDA-TITLE01           TO TITLE01O OF COTRN2AO\n           MOVE CCDA-TITLE02           TO TITLE02O OF COTRN2AO\n           MOVE WS-TRANID              TO TRNNAMEO OF COTRN2AO\n           MOVE WS-PGMNAME             TO PGMNAMEO OF COTRN2AO\n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM\n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD\n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY\n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF COTRN2AO\n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH\n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM\n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS\n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF COTRN2AO.\n\n      *----------------------------------------------------------------*\n      *                      READ-CXACAIX-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#read-cxacaix-file","title":"READ-CXACAIX-FILE","text":"<p>This paragraph performs a lookup in the CXACAIX file (Card Cross-Reference Alternate Index file) using the account ID as the key. It attempts to retrieve the corresponding card cross-reference record to validate that the entered account ID exists in the system. The paragraph handles three possible outcomes: successful retrieval (continues processing), record not found (displays an error message indicating the account ID is invalid), or a file access error (displays a technical error message). When validation fails, the cursor is positioned at the account ID field and the transaction entry screen is redisplayed with the appropriate error message to guide the user.</p> Code <pre><code>EXEC CICS READ\n                DATASET   (WS-CXACAIX-FILE)\n                INTO      (CARD-XREF-RECORD)\n                LENGTH    (LENGTH OF CARD-XREF-RECORD)\n                RIDFLD    (XREF-ACCT-ID)\n                KEYLENGTH (LENGTH OF XREF-ACCT-ID)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(NOTFND)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Account ID NOT found...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup Acct in XREF AIX file...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      READ-CCXREF-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#read-ccxref-file","title":"READ-CCXREF-FILE","text":"<p>This paragraph performs a CICS READ operation on the card cross-reference file (CCXREF) using the card number as the key. It validates whether the provided card number exists in the system. If the read is successful, processing continues normally. If the card number is not found, the program sets an error flag, displays an appropriate message to the user, positions the cursor at the card number input field, and redisplays the transaction entry screen. For any other database errors, it displays the response and reason codes, sets an error flag with a technical message, and returns to the input screen. This validation ensures that transactions can only be created for valid card numbers that exist in the system.</p> Code <pre><code>EXEC CICS READ\n                DATASET   (WS-CCXREF-FILE)\n                INTO      (CARD-XREF-RECORD)\n                LENGTH    (LENGTH OF CARD-XREF-RECORD)\n                RIDFLD    (XREF-CARD-NUM)\n                KEYLENGTH (LENGTH OF XREF-CARD-NUM)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(NOTFND)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Card Number NOT found...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO CARDNINL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup Card # in XREF file...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO CARDNINL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                    STARTBR-TRANSACT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#startbr-transact-file","title":"STARTBR-TRANSACT-FILE","text":"<p>This paragraph initiates a browse operation on the transaction file to locate records by transaction ID. It uses the CICS STARTBR command to position the file cursor at the specified transaction ID. The paragraph handles three possible outcomes: successful positioning (NORMAL response), transaction ID not found (NOTFND response), or other errors. For error conditions, it sets an error flag, displays an appropriate message to the user, positions the cursor at the account ID field, and redisplays the transaction entry screen. This functionality is part of the transaction lookup process that likely supports the \"copy last transaction\" feature mentioned in the program description.</p> Code <pre><code>EXEC CICS STARTBR\n                DATASET   (WS-TRANSACT-FILE)\n                RIDFLD    (TRAN-ID)\n                KEYLENGTH (LENGTH OF TRAN-ID)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(NOTFND)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Transaction ID NOT found...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup Transaction...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                    READPREV-TRANSACT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#readprev-transact-file","title":"READPREV-TRANSACT-FILE","text":"<p>This paragraph performs a backward read operation on the TRANSACT file to retrieve the previous transaction record. It uses the CICS READPREV command with the current transaction ID as the key. The paragraph handles three possible outcomes: successful read (continues processing), reaching the beginning of the file (sets transaction ID to zeros), or encountering an error (displays error codes, sets error flag, displays a user message, and repositions the cursor to the account ID field before redisplaying the transaction entry screen). This functionality is likely part of the \"copy last transaction\" feature, allowing users to navigate backward through transaction records.</p> Code <pre><code>EXEC CICS READPREV\n                DATASET   (WS-TRANSACT-FILE)\n                INTO      (TRAN-RECORD)\n                LENGTH    (LENGTH OF TRAN-RECORD)\n                RIDFLD    (TRAN-ID)\n                KEYLENGTH (LENGTH OF TRAN-ID)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(ENDFILE)\n                   MOVE ZEROS TO TRAN-ID\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup Transaction...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                    ENDBR-TRANSACT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#endbr-transact-file","title":"ENDBR-TRANSACT-FILE","text":"<p>This paragraph terminates a browse operation on the TRANSACT file. It issues a CICS ENDBR (End Browse) command for the dataset identified by the working storage variable WS-TRANSACT-FILE. This is typically called after completing sequential processing of transaction records to release resources associated with the browse operation.</p> Code <pre><code>EXEC CICS ENDBR\n                DATASET   (WS-TRANSACT-FILE)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                    WRITE-TRANSACT-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#write-transact-file","title":"WRITE-TRANSACT-FILE","text":"<p>This paragraph handles the writing of a new transaction record to the TRANSACT file and processes the response from the CICS operation. After attempting to write the record, it evaluates the response code and takes appropriate action: on successful completion, it initializes fields, displays a success message with the transaction ID in green text, and refreshes the screen; if a duplicate key/record is detected, it sets an error flag and displays an appropriate message; for any other response, it logs the error codes, sets an error flag, and displays a generic error message. In all cases, the paragraph maintains user interaction by sending the transaction addition screen back to the user with appropriate positioning of the cursor.</p> Code <pre><code>EXEC CICS WRITE\n                DATASET   (WS-TRANSACT-FILE)\n                FROM      (TRAN-RECORD)\n                LENGTH    (LENGTH OF TRAN-RECORD)\n                RIDFLD    (TRAN-ID)\n                KEYLENGTH (LENGTH OF TRAN-ID)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   PERFORM INITIALIZE-ALL-FIELDS\n                   MOVE SPACES             TO WS-MESSAGE\n                   MOVE DFHGREEN           TO ERRMSGC  OF COTRN2AO\n                   STRING 'Transaction added successfully. '\n                                               DELIMITED BY SIZE\n                     ' Your Tran ID is ' DELIMITED BY SIZE\n                          TRAN-ID  DELIMITED BY SPACE\n                          '.' DELIMITED BY SIZE\n                     INTO WS-MESSAGE\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN DFHRESP(DUPKEY)\n               WHEN DFHRESP(DUPREC)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Tran ID already exist...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to Add Transaction...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO ACTIDINL OF COTRN2AI\n                   PERFORM SEND-TRNADD-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                    CLEAR-CURRENT-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#clear-current-screen","title":"CLEAR-CURRENT-SCREEN","text":"<p>This paragraph clears the current transaction entry screen by first initializing all fields to their default values and then redisplaying the transaction addition screen to the user. It provides a way to reset the form when users need to start a new transaction entry from scratch.</p> Code <pre><code>PERFORM INITIALIZE-ALL-FIELDS.\n           PERFORM SEND-TRNADD-SCREEN.\n\n      *----------------------------------------------------------------*\n      *                    INITIALIZE-ALL-FIELDS\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COTRN02C.html#initialize-all-fields","title":"INITIALIZE-ALL-FIELDS","text":"<p>This paragraph initializes all input fields on the transaction entry screen (COTRN2AI) by setting them to spaces. It also positions the cursor at the ACTID field by setting its length field to -1, which is a standard CICS technique for cursor positioning. This initialization ensures the screen is cleared of any previous data when the program starts or when a reset operation is performed, providing users with a clean form for entering new transaction details.</p> Code <pre><code>MOVE -1              TO ACTIDINL OF COTRN2AI\n           MOVE SPACES          TO ACTIDINI OF COTRN2AI\n                                   CARDNINI OF COTRN2AI\n                                   TTYPCDI  OF COTRN2AI\n                                   TCATCDI  OF COTRN2AI\n                                   TRNSRCI  OF COTRN2AI\n                                   TRNAMTI  OF COTRN2AI\n                                   TDESCI   OF COTRN2AI\n                                   TORIGDTI OF COTRN2AI\n                                   TPROCDTI OF COTRN2AI\n                                   MIDI     OF COTRN2AI\n                                   MNAMEI   OF COTRN2AI\n                                   MCITYI   OF COTRN2AI\n                                   MZIPI    OF COTRN2AI\n                                   CONFIRMI OF COTRN2AI\n</code></pre>"},{"location":"COTRN02C.html#ws-message","title":"WS-MESSAGE","text":"<p>This paragraph contains version control information for the CardDemo application. It indicates the specific version (CardDemo_v1.0-15-g27d6c6f-68) and the timestamp when this version was created or last modified (July 19, 2022, at 23:12:34 CDT). This information helps track which version of the code is being used and when it was implemented.</p> Code <pre><code>*\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:34 CDT\n      *\n</code></pre>"},{"location":"COUSR00C.html","title":"COUSR00C","text":""},{"location":"COUSR00C.html#overview","title":"Overview","text":"<p>This program (COUSR00C) is a CICS COBOL application that lists all users from the USRSEC file in the CardDemo system. It provides a paginated user interface that displays up to 10 users per page with their IDs, names, and user types. The program allows administrators to navigate through the user list using PF7 (page up) and PF8 (page down) keys, and supports user selection for update (U) or delete (D) operations. When a user is selected, the program transfers control to either COUSR02C (for updates) or COUSR03C (for deletions). The program handles various error conditions, maintains pagination state between screens, and provides appropriate feedback messages to the user. It's part of the CardDemo application's user administration functionality, allowing system administrators to manage user accounts.</p>"},{"location":"COUSR00C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COUSR00C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"COUSR00C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant COUSR00C as \"COUSR00C Program\"\n    participant USRSEC as \"USRSEC File\"\n    participant COUSR02C as \"COUSR02C (Update)\"\n    participant COUSR03C as \"COUSR03C (Delete)\"\n    participant COADM01C as \"COADM01C (Admin Menu)\"\n\n    User-&gt;&gt;COUSR00C: Access user listing screen\n\n    alt First Entry (EIBCALEN = 0)\n        COUSR00C-&gt;&gt;COSGN00C: Redirect to sign-on screen\n    else Program Re-entry\n        alt First Time Display\n            COUSR00C-&gt;&gt;USRSEC: STARTBR (Browse user file)\n            USRSEC--&gt;&gt;COUSR00C: File status\n            COUSR00C-&gt;&gt;USRSEC: READNEXT (Get user records)\n            USRSEC--&gt;&gt;COUSR00C: User records\n            COUSR00C-&gt;&gt;USRSEC: ENDBR (End browse)\n            COUSR00C-&gt;&gt;User: Display user list screen\n        else Process User Input\n            COUSR00C-&gt;&gt;User: RECEIVE user input\n\n            alt ENTER Key\n                User-&gt;&gt;COUSR00C: Select user (U/D) or filter\n\n                alt User Selected for Update\n                    COUSR00C-&gt;&gt;COUSR02C: Transfer to update program\n                else User Selected for Delete\n                    COUSR00C-&gt;&gt;COUSR03C: Transfer to delete program\n                else Filter Applied\n                    COUSR00C-&gt;&gt;USRSEC: STARTBR with filter\n                    USRSEC--&gt;&gt;COUSR00C: File status\n                    COUSR00C-&gt;&gt;USRSEC: READNEXT (Get filtered records)\n                    USRSEC--&gt;&gt;COUSR00C: Filtered user records\n                    COUSR00C-&gt;&gt;USRSEC: ENDBR (End browse)\n                    COUSR00C-&gt;&gt;User: Display filtered results\n                end\n\n            else PF3 Key\n                User-&gt;&gt;COUSR00C: Return to admin menu\n                COUSR00C-&gt;&gt;COADM01C: Transfer to admin menu\n\n            else PF7 Key (Page Up)\n                User-&gt;&gt;COUSR00C: Request previous page\n                COUSR00C-&gt;&gt;USRSEC: STARTBR (Browse user file)\n                USRSEC--&gt;&gt;COUSR00C: File status\n                COUSR00C-&gt;&gt;USRSEC: READPREV (Get previous records)\n                USRSEC--&gt;&gt;COUSR00C: Previous user records\n                COUSR00C-&gt;&gt;USRSEC: ENDBR (End browse)\n                COUSR00C-&gt;&gt;User: Display previous page\n\n            else PF8 Key (Page Down)\n                User-&gt;&gt;COUSR00C: Request next page\n                COUSR00C-&gt;&gt;USRSEC: STARTBR (Browse user file)\n                USRSEC--&gt;&gt;COUSR00C: File status\n                COUSR00C-&gt;&gt;USRSEC: READNEXT (Get next records)\n                USRSEC--&gt;&gt;COUSR00C: Next user records\n                COUSR00C-&gt;&gt;USRSEC: ENDBR (End browse)\n                COUSR00C-&gt;&gt;User: Display next page\n\n            else Other Key\n                COUSR00C-&gt;&gt;User: Display invalid key message\n            end\n        end\n    end</code></pre>"},{"location":"COUSR00C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>DFHAID</code></li> <li><code>CSUSR01Y</code></li> <li><code>COCOM01Y</code></li> <li><code>DFHBMSCA</code></li> <li><code>COUSR00</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG01Y</code></li> </ul>"},{"location":"COUSR00C.html#environment-division","title":"Environment Division","text":""},{"location":"COUSR00C.html#configuration-section","title":"CONFIGURATION SECTION","text":"<p>This section would typically contain configuration details for the COUSR00C program, including file assignments, special names, and system dependencies. In this CICS COBOL application, the Configuration Section would define how the program interacts with external resources like the USRSEC file that stores user information. It would also specify any special environment settings needed for the program to function properly within the CardDemo system's user administration module.</p> Code"},{"location":"COUSR00C.html#data-division","title":"Data Division","text":""},{"location":"COUSR00C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage section defines the data structures used in the COUSR00C program for managing user listings. It includes program identification variables, status flags for error handling and pagination control, and counters for record processing. The WS-USER-DATA structure provides storage for up to 10 user records displayed on each page, with fields for selection markers, user IDs, names, and types. The section includes several copybooks: COCOM01Y (containing pagination control fields and user selection information), COUSR00 (likely the screen map definition), and various utility copybooks for titles, dates, messages, and user data. Standard CICS copybooks for AID keys and attributes are also included. This data structure supports the program's core functionality of displaying paginated user lists and handling user selection for update or delete operations.</p> Code <pre><code>01 WS-VARIABLES.\n         05 WS-PGMNAME                 PIC X(08) VALUE 'COUSR00C'.\n         05 WS-TRANID                  PIC X(04) VALUE 'CU00'.\n         05 WS-MESSAGE                 PIC X(80) VALUE SPACES.\n         05 WS-USRSEC-FILE             PIC X(08) VALUE 'USRSEC  '.\n         05 WS-ERR-FLG                 PIC X(01) VALUE 'N'.\n           88 ERR-FLG-ON                         VALUE 'Y'.\n           88 ERR-FLG-OFF                        VALUE 'N'.\n         05 WS-USER-SEC-EOF            PIC X(01) VALUE 'N'.\n           88 USER-SEC-EOF                       VALUE 'Y'.\n           88 USER-SEC-NOT-EOF                   VALUE 'N'.\n         05 WS-SEND-ERASE-FLG          PIC X(01) VALUE 'Y'.\n           88 SEND-ERASE-YES                     VALUE 'Y'.\n           88 SEND-ERASE-NO                      VALUE 'N'.\n\n         05 WS-RESP-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REAS-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REC-COUNT               PIC S9(04) COMP VALUE ZEROS.\n         05 WS-IDX                     PIC S9(04) COMP VALUE ZEROS.\n         05 WS-PAGE-NUM                PIC S9(04) COMP VALUE ZEROS.\n\n       01 WS-USER-DATA.\n         02 USER-REC OCCURS 10 TIMES.\n           05 USER-SEL                   PIC X(01).\n           05 FILLER                     PIC X(02).\n           05 USER-ID                    PIC X(08).\n           05 FILLER                     PIC X(02).\n           05 USER-NAME                  PIC X(25).\n           05 FILLER                     PIC X(02).\n           05 USER-TYPE                  PIC X(08).\n\n       COPY COCOM01Y.\n          05 CDEMO-CU00-INFO.\n             10 CDEMO-CU00-USRID-FIRST     PIC X(08).\n             10 CDEMO-CU00-USRID-LAST      PIC X(08).\n             10 CDEMO-CU00-PAGE-NUM        PIC 9(08).\n             10 CDEMO-CU00-NEXT-PAGE-FLG   PIC X(01) VALUE 'N'.\n                88 NEXT-PAGE-YES                     VALUE 'Y'.\n                88 NEXT-PAGE-NO                      VALUE 'N'.\n             10 CDEMO-CU00-USR-SEL-FLG     PIC X(01).\n             10 CDEMO-CU00-USR-SELECTED    PIC X(08).\n       COPY COUSR00.\n\n       COPY COTTL01Y.\n       COPY CSDAT01Y.\n       COPY CSMSG01Y.\n       COPY CSUSR01Y.\n\n       COPY DFHAID.\n       COPY DFHBMSCA.\n\n      *----------------------------------------------------------------*\n      *                        LINKAGE SECTION\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This section defines the linkage area for communication with other programs. It contains a DFHCOMMAREA with a single field LK-COMMAREA, which is defined as a variable-length array of characters that can expand from 1 to 32,767 bytes depending on the value in EIBCALEN (the CICS-provided length of the communication area). This structure allows the program to receive and pass data of varying sizes when called by or transferring control to other programs in the CardDemo system.</p> Code <pre><code>01  DFHCOMMAREA.\n         05  LK-COMMAREA                           PIC X(01)\n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n\n      *----------------------------------------------------------------*\n      *\n</code></pre>"},{"location":"COUSR00C.html#procedure-division","title":"Procedure Division","text":""},{"location":"COUSR00C.html#main-para","title":"MAIN-PARA","text":"<p>This paragraph serves as the main control flow for the COUSR00C program, handling initial setup and subsequent user interactions. It initializes error flags, pagination settings, and screen display parameters. The paragraph first checks if the program is being called directly (EIBCALEN = 0) and redirects to COSGN00C if so. For normal operation, it processes the communication area and either initializes the screen for first-time entry or handles user input based on the function key pressed. The paragraph supports navigation through PF3 (return to admin menu), PF7 (page up), PF8 (page down), and ENTER keys, with appropriate error handling for invalid key presses. After processing the user's request, it returns control to CICS while preserving the program state in the communication area for subsequent interactions.</p> Code <pre><code>SET ERR-FLG-OFF TO TRUE\n           SET USER-SEC-NOT-EOF TO TRUE\n           SET NEXT-PAGE-NO TO TRUE\n           SET SEND-ERASE-YES TO TRUE\n\n           MOVE SPACES TO WS-MESSAGE\n                          ERRMSGO OF COUSR0AO\n\n           MOVE -1       TO USRIDINL OF COUSR0AI\n\n           IF EIBCALEN = 0\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n               PERFORM RETURN-TO-PREV-SCREEN\n           ELSE\n               MOVE DFHCOMMAREA(1:EIBCALEN) TO CARDDEMO-COMMAREA\n               IF NOT CDEMO-PGM-REENTER\n                   SET CDEMO-PGM-REENTER    TO TRUE\n                   MOVE LOW-VALUES          TO COUSR0AO\n                   PERFORM PROCESS-ENTER-KEY\n                   PERFORM SEND-USRLST-SCREEN\n               ELSE\n                   PERFORM RECEIVE-USRLST-SCREEN\n                   EVALUATE EIBAID\n                       WHEN DFHENTER\n                           PERFORM PROCESS-ENTER-KEY\n                       WHEN DFHPF3\n                           MOVE 'COADM01C' TO CDEMO-TO-PROGRAM\n                           PERFORM RETURN-TO-PREV-SCREEN\n                       WHEN DFHPF7\n                           PERFORM PROCESS-PF7-KEY\n                       WHEN DFHPF8\n                           PERFORM PROCESS-PF8-KEY\n                       WHEN OTHER\n                           MOVE 'Y'                       TO WS-ERR-FLG\n                           MOVE -1       TO USRIDINL OF COUSR0AI\n                           MOVE CCDA-MSG-INVALID-KEY      TO WS-MESSAGE\n                           PERFORM SEND-USRLST-SCREEN\n                   END-EVALUATE\n               END-IF\n           END-IF\n\n           EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-ENTER-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#process-enter-key","title":"PROCESS-ENTER-KEY","text":"<p>This paragraph handles the processing of the Enter key in the user listing screen. It first evaluates which user row was selected by checking the selection fields (SEL0001I through SEL0010I) and captures both the selection flag (U for update or D for delete) and the corresponding user ID. If a valid selection is made, the program transfers control to either COUSR02C for user updates or COUSR03C for user deletions, passing control information in the CARDDEMO-COMMAREA. If an invalid selection character is entered, it displays an error message. The paragraph also handles any user ID filter entered by the user, resets the page number to 0, and performs a forward page operation to refresh the user list. The cursor is positioned at the user ID input field for the next interaction.</p> Code <pre><code>EVALUATE TRUE\n               WHEN SEL0001I OF COUSR0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0001I OF COUSR0AI TO CDEMO-CU00-USR-SEL-FLG\n                   MOVE USRID01I OF COUSR0AI TO CDEMO-CU00-USR-SELECTED\n               WHEN SEL0002I OF COUSR0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0002I OF COUSR0AI TO CDEMO-CU00-USR-SEL-FLG\n                   MOVE USRID02I OF COUSR0AI TO CDEMO-CU00-USR-SELECTED\n               WHEN SEL0003I OF COUSR0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0003I OF COUSR0AI TO CDEMO-CU00-USR-SEL-FLG\n                   MOVE USRID03I OF COUSR0AI TO CDEMO-CU00-USR-SELECTED\n               WHEN SEL0004I OF COUSR0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0004I OF COUSR0AI TO CDEMO-CU00-USR-SEL-FLG\n                   MOVE USRID04I OF COUSR0AI TO CDEMO-CU00-USR-SELECTED\n               WHEN SEL0005I OF COUSR0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0005I OF COUSR0AI TO CDEMO-CU00-USR-SEL-FLG\n                   MOVE USRID05I OF COUSR0AI TO CDEMO-CU00-USR-SELECTED\n               WHEN SEL0006I OF COUSR0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0006I OF COUSR0AI TO CDEMO-CU00-USR-SEL-FLG\n                   MOVE USRID06I OF COUSR0AI TO CDEMO-CU00-USR-SELECTED\n               WHEN SEL0007I OF COUSR0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0007I OF COUSR0AI TO CDEMO-CU00-USR-SEL-FLG\n                   MOVE USRID07I OF COUSR0AI TO CDEMO-CU00-USR-SELECTED\n               WHEN SEL0008I OF COUSR0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0008I OF COUSR0AI TO CDEMO-CU00-USR-SEL-FLG\n                   MOVE USRID08I OF COUSR0AI TO CDEMO-CU00-USR-SELECTED\n               WHEN SEL0009I OF COUSR0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0009I OF COUSR0AI TO CDEMO-CU00-USR-SEL-FLG\n                   MOVE USRID09I OF COUSR0AI TO CDEMO-CU00-USR-SELECTED\n               WHEN SEL0010I OF COUSR0AI NOT = SPACES AND LOW-VALUES\n                   MOVE SEL0010I OF COUSR0AI TO CDEMO-CU00-USR-SEL-FLG\n                   MOVE USRID10I OF COUSR0AI TO CDEMO-CU00-USR-SELECTED\n               WHEN OTHER\n                   MOVE SPACES   TO CDEMO-CU00-USR-SEL-FLG\n                   MOVE SPACES   TO CDEMO-CU00-USR-SELECTED\n           END-EVALUATE\n\n           IF (CDEMO-CU00-USR-SEL-FLG NOT = SPACES AND LOW-VALUES) AND\n              (CDEMO-CU00-USR-SELECTED NOT = SPACES AND LOW-VALUES)\n               EVALUATE CDEMO-CU00-USR-SEL-FLG\n                   WHEN 'U'\n                   WHEN 'u'\n                        MOVE 'COUSR02C'   TO CDEMO-TO-PROGRAM\n                        MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n                        MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n                        MOVE 0        TO CDEMO-PGM-CONTEXT\n                        EXEC CICS\n                            XCTL PROGRAM(CDEMO-TO-PROGRAM)\n                            COMMAREA(CARDDEMO-COMMAREA)\n                        END-EXEC\n                   WHEN 'D'\n                   WHEN 'd'\n                        MOVE 'COUSR03C'   TO CDEMO-TO-PROGRAM\n                        MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n                        MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n                        MOVE 0        TO CDEMO-PGM-CONTEXT\n                        EXEC CICS\n                            XCTL PROGRAM(CDEMO-TO-PROGRAM)\n                            COMMAREA(CARDDEMO-COMMAREA)\n                        END-EXEC\n                   WHEN OTHER\n                       MOVE\n                       'Invalid selection. Valid values are U and D' TO\n                                       WS-MESSAGE\n                       MOVE -1       TO USRIDINL OF COUSR0AI\n               END-EVALUATE\n           END-IF\n\n           IF USRIDINI OF COUSR0AI = SPACES OR LOW-VALUES\n               MOVE LOW-VALUES TO SEC-USR-ID\n           ELSE\n               MOVE USRIDINI  OF COUSR0AI TO SEC-USR-ID\n           END-IF\n\n           MOVE -1       TO USRIDINL OF COUSR0AI\n\n\n           MOVE 0       TO CDEMO-CU00-PAGE-NUM\n           PERFORM PROCESS-PAGE-FORWARD\n\n           IF NOT ERR-FLG-ON\n               MOVE SPACE   TO USRIDINO  OF COUSR0AO\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-PF7-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#process-pf7-key","title":"PROCESS-PF7-KEY","text":"<p>This paragraph handles the Page Up (PF7) key functionality in the user listing screen. It determines the starting user ID for pagination by checking if the first user ID on the current screen is empty (indicating the beginning of the list) and sets the appropriate search key. The code sets a flag to indicate a page navigation is occurring and positions the cursor at the user ID input field. If the user is not already on the first page, it calls the PROCESS-PAGE-BACKWARD paragraph to display the previous page of users. Otherwise, it displays a message informing the user they are already at the top of the list and refreshes the screen without clearing it.</p> Code <pre><code>IF CDEMO-CU00-USRID-FIRST = SPACES OR LOW-VALUES\n               MOVE LOW-VALUES TO SEC-USR-ID\n           ELSE\n               MOVE CDEMO-CU00-USRID-FIRST TO SEC-USR-ID\n           END-IF\n\n           SET NEXT-PAGE-YES TO TRUE\n           MOVE -1       TO USRIDINL OF COUSR0AI\n\n           IF CDEMO-CU00-PAGE-NUM &gt; 1\n               PERFORM PROCESS-PAGE-BACKWARD\n           ELSE\n               MOVE 'You are already at the top of the page...' TO\n                               WS-MESSAGE\n               SET SEND-ERASE-NO TO TRUE\n               PERFORM SEND-USRLST-SCREEN\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-PF8-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#process-pf8-key","title":"PROCESS-PF8-KEY","text":"<p>This paragraph handles the Page Down (PF8) key functionality in the user listing screen. It first determines the starting point for the next page of results by checking if the last displayed user ID is empty. If empty, it sets the search key to HIGH-VALUES to retrieve all records; otherwise, it uses the last displayed user ID as the starting point for the next page. The cursor is positioned at the user ID input field. If there are more pages available (NEXT-PAGE-YES flag is set), it calls the PROCESS-PAGE-FORWARD paragraph to load the next page of users. If there are no more pages to display, it shows a message informing the user they've reached the bottom of the list and redisplays the current screen without clearing it.</p> Code <pre><code>IF CDEMO-CU00-USRID-LAST = SPACES OR LOW-VALUES\n               MOVE HIGH-VALUES TO SEC-USR-ID\n           ELSE\n               MOVE CDEMO-CU00-USRID-LAST TO SEC-USR-ID\n           END-IF\n\n           MOVE -1       TO USRIDINL OF COUSR0AI\n\n           IF NEXT-PAGE-YES\n               PERFORM PROCESS-PAGE-FORWARD\n           ELSE\n               MOVE 'You are already at the bottom of the page...' TO\n                               WS-MESSAGE\n               SET SEND-ERASE-NO TO TRUE\n               PERFORM SEND-USRLST-SCREEN\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-PAGE-FORWARD\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#process-page-forward","title":"PROCESS-PAGE-FORWARD","text":"<p>This paragraph handles the forward pagination functionality in the user listing screen. It starts by browsing the user security file and then reads through records to populate the next page of user data. The process skips records if necessary when not using the ENTER, PF7, or PF3 keys. It populates up to 10 user records on the screen, incrementing the index for each record processed. After loading the current page, it checks if more records exist to determine if a \"next page\" option should be available. The page number is incremented accordingly, and the browse operation is ended before sending the updated screen to the user. The paragraph maintains pagination state and ensures proper display of user records when moving forward through the list.</p> Code <pre><code>PERFORM STARTBR-USER-SEC-FILE\n\n           IF NOT ERR-FLG-ON\n\n               IF EIBAID NOT = DFHENTER AND DFHPF7 AND DFHPF3\n                   PERFORM READNEXT-USER-SEC-FILE\n               END-IF\n\n               IF USER-SEC-NOT-EOF AND ERR-FLG-OFF\n               PERFORM VARYING WS-IDX FROM 1 BY 1 UNTIL WS-IDX &gt; 10\n                   PERFORM INITIALIZE-USER-DATA\n               END-PERFORM\n               END-IF\n\n               MOVE 1             TO  WS-IDX\n\n               PERFORM UNTIL WS-IDX &gt;= 11 OR USER-SEC-EOF OR ERR-FLG-ON\n                   PERFORM READNEXT-USER-SEC-FILE\n                   IF USER-SEC-NOT-EOF AND ERR-FLG-OFF\n                       PERFORM POPULATE-USER-DATA\n                       COMPUTE WS-IDX = WS-IDX + 1\n                   END-IF\n               END-PERFORM\n\n               IF USER-SEC-NOT-EOF AND ERR-FLG-OFF\n                   COMPUTE CDEMO-CU00-PAGE-NUM =\n                           CDEMO-CU00-PAGE-NUM + 1\n                   PERFORM READNEXT-USER-SEC-FILE\n                   IF USER-SEC-NOT-EOF AND ERR-FLG-OFF\n                       SET NEXT-PAGE-YES TO TRUE\n                   ELSE\n                       SET NEXT-PAGE-NO TO TRUE\n                   END-IF\n               ELSE\n                   SET NEXT-PAGE-NO TO TRUE\n                   IF WS-IDX &gt; 1\n                       COMPUTE CDEMO-CU00-PAGE-NUM = CDEMO-CU00-PAGE-NUM\n                        + 1\n                   END-IF\n               END-IF\n\n               PERFORM ENDBR-USER-SEC-FILE\n\n               MOVE CDEMO-CU00-PAGE-NUM TO PAGENUMI  OF COUSR0AI\n               MOVE SPACE   TO USRIDINO  OF COUSR0AO\n               PERFORM SEND-USRLST-SCREEN\n\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-PAGE-BACKWARD\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#process-page-backward","title":"PROCESS-PAGE-BACKWARD","text":"<p>This paragraph handles the page backward functionality in the user listing screen. When a user presses the page up key (PF7), it starts browsing the user security file, then reads records in reverse order to populate the previous page of user data. The process first initializes all user data fields, then reads up to 10 previous user records to display them on screen. It maintains pagination by decrementing the page number when appropriate, but ensures it never goes below 1. After populating the user data, it ends the browse operation, updates the page number on the screen, and sends the updated user list screen back to the user. The paragraph includes error handling to prevent processing if any errors occur during file operations.</p> Code <pre><code>PERFORM STARTBR-USER-SEC-FILE\n\n           IF NOT ERR-FLG-ON\n\n               IF EIBAID NOT = DFHENTER  AND DFHPF8\n                   PERFORM READPREV-USER-SEC-FILE\n               END-IF\n\n               IF USER-SEC-NOT-EOF AND ERR-FLG-OFF\n               PERFORM VARYING WS-IDX FROM 1 BY 1 UNTIL WS-IDX &gt; 10\n                   PERFORM INITIALIZE-USER-DATA\n               END-PERFORM\n               END-IF\n\n               MOVE 10          TO  WS-IDX\n\n               PERFORM UNTIL WS-IDX &lt;= 0 OR USER-SEC-EOF OR ERR-FLG-ON\n                   PERFORM READPREV-USER-SEC-FILE\n                   IF USER-SEC-NOT-EOF AND ERR-FLG-OFF\n                       PERFORM POPULATE-USER-DATA\n                       COMPUTE WS-IDX = WS-IDX - 1\n                   END-IF\n               END-PERFORM\n\n               IF USER-SEC-NOT-EOF AND ERR-FLG-OFF\n               PERFORM READPREV-USER-SEC-FILE\n               IF NEXT-PAGE-YES\n                   IF USER-SEC-NOT-EOF AND ERR-FLG-OFF AND\n                       CDEMO-CU00-PAGE-NUM &gt; 1\n                       SUBTRACT 1 FROM CDEMO-CU00-PAGE-NUM\n                   ELSE\n                       MOVE 1 TO CDEMO-CU00-PAGE-NUM\n                   END-IF\n               END-IF\n               END-IF\n\n               PERFORM ENDBR-USER-SEC-FILE\n\n               MOVE CDEMO-CU00-PAGE-NUM TO PAGENUMI  OF COUSR0AI\n               PERFORM SEND-USRLST-SCREEN\n\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      POPULATE-USER-DATA\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#populate-user-data","title":"POPULATE-USER-DATA","text":"<p>This paragraph populates the user interface screen with user data for display in the paginated user list. Based on the current index value (WS-IDX), it maps user information from the security record (SEC-USR fields) to the corresponding screen fields in the COUSR0AI map. For each of the 10 possible positions on the screen, it copies the user ID, first name, last name, and user type to the appropriate display fields. When populating the first and last positions (index 1 and 10), it also stores the user IDs in special fields (CDEMO-CU00-USRID-FIRST and CDEMO-CU00-USRID-LAST) which are likely used for pagination tracking. This paragraph is essential for rendering the user data in the proper format for the administrator to view and select users for further actions.</p> Code <pre><code>EVALUATE WS-IDX\n               WHEN 1\n                   MOVE SEC-USR-ID    TO USRID01I OF COUSR0AI\n                                         CDEMO-CU00-USRID-FIRST\n                   MOVE SEC-USR-FNAME TO FNAME01I OF COUSR0AI\n                   MOVE SEC-USR-LNAME TO LNAME01I OF COUSR0AI\n                   MOVE SEC-USR-TYPE  TO UTYPE01I OF COUSR0AI\n               WHEN 2\n                   MOVE SEC-USR-ID    TO USRID02I OF COUSR0AI\n                   MOVE SEC-USR-FNAME TO FNAME02I OF COUSR0AI\n                   MOVE SEC-USR-LNAME TO LNAME02I OF COUSR0AI\n                   MOVE SEC-USR-TYPE  TO UTYPE02I OF COUSR0AI\n               WHEN 3\n                   MOVE SEC-USR-ID    TO USRID03I OF COUSR0AI\n                   MOVE SEC-USR-FNAME TO FNAME03I OF COUSR0AI\n                   MOVE SEC-USR-LNAME TO LNAME03I OF COUSR0AI\n                   MOVE SEC-USR-TYPE  TO UTYPE03I OF COUSR0AI\n               WHEN 4\n                   MOVE SEC-USR-ID    TO USRID04I OF COUSR0AI\n                   MOVE SEC-USR-FNAME TO FNAME04I OF COUSR0AI\n                   MOVE SEC-USR-LNAME TO LNAME04I OF COUSR0AI\n                   MOVE SEC-USR-TYPE  TO UTYPE04I OF COUSR0AI\n               WHEN 5\n                   MOVE SEC-USR-ID    TO USRID05I OF COUSR0AI\n                   MOVE SEC-USR-FNAME TO FNAME05I OF COUSR0AI\n                   MOVE SEC-USR-LNAME TO LNAME05I OF COUSR0AI\n                   MOVE SEC-USR-TYPE  TO UTYPE05I OF COUSR0AI\n               WHEN 6\n                   MOVE SEC-USR-ID    TO USRID06I OF COUSR0AI\n                   MOVE SEC-USR-FNAME TO FNAME06I OF COUSR0AI\n                   MOVE SEC-USR-LNAME TO LNAME06I OF COUSR0AI\n                   MOVE SEC-USR-TYPE  TO UTYPE06I OF COUSR0AI\n               WHEN 7\n                   MOVE SEC-USR-ID    TO USRID07I OF COUSR0AI\n                   MOVE SEC-USR-FNAME TO FNAME07I OF COUSR0AI\n                   MOVE SEC-USR-LNAME TO LNAME07I OF COUSR0AI\n                   MOVE SEC-USR-TYPE  TO UTYPE07I OF COUSR0AI\n               WHEN 8\n                   MOVE SEC-USR-ID    TO USRID08I OF COUSR0AI\n                   MOVE SEC-USR-FNAME TO FNAME08I OF COUSR0AI\n                   MOVE SEC-USR-LNAME TO LNAME08I OF COUSR0AI\n                   MOVE SEC-USR-TYPE  TO UTYPE08I OF COUSR0AI\n               WHEN 9\n                   MOVE SEC-USR-ID    TO USRID09I OF COUSR0AI\n                   MOVE SEC-USR-FNAME TO FNAME09I OF COUSR0AI\n                   MOVE SEC-USR-LNAME TO LNAME09I OF COUSR0AI\n                   MOVE SEC-USR-TYPE  TO UTYPE09I OF COUSR0AI\n               WHEN 10\n                   MOVE SEC-USR-ID    TO USRID10I OF COUSR0AI\n                                         CDEMO-CU00-USRID-LAST\n                   MOVE SEC-USR-FNAME TO FNAME10I OF COUSR0AI\n                   MOVE SEC-USR-LNAME TO LNAME10I OF COUSR0AI\n                   MOVE SEC-USR-TYPE  TO UTYPE10I OF COUSR0AI\n               WHEN OTHER\n                   CONTINUE\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      INITIALIZE-USER-DATA\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#initialize-user-data","title":"INITIALIZE-USER-DATA","text":"<p>This paragraph clears the user data fields on the display screen based on the current index value (WS-IDX). It uses an EVALUATE statement to determine which of the 10 possible user entry rows to clear. For each row position (1-10), it sets the user ID, first name, last name, and user type fields to spaces. This routine is likely called when initializing the screen for a new display or when removing user entries that should no longer be displayed, such as when navigating between pages of user records or after a deletion operation.</p> Code <pre><code>EVALUATE WS-IDX\n               WHEN 1\n                   MOVE SPACES TO USRID01I OF COUSR0AI\n                   MOVE SPACES TO FNAME01I OF COUSR0AI\n                   MOVE SPACES TO LNAME01I OF COUSR0AI\n                   MOVE SPACES TO UTYPE01I OF COUSR0AI\n               WHEN 2\n                   MOVE SPACES TO USRID02I OF COUSR0AI\n                   MOVE SPACES TO FNAME02I OF COUSR0AI\n                   MOVE SPACES TO LNAME02I OF COUSR0AI\n                   MOVE SPACES TO UTYPE02I OF COUSR0AI\n               WHEN 3\n                   MOVE SPACES TO USRID03I OF COUSR0AI\n                   MOVE SPACES TO FNAME03I OF COUSR0AI\n                   MOVE SPACES TO LNAME03I OF COUSR0AI\n                   MOVE SPACES TO UTYPE03I OF COUSR0AI\n               WHEN 4\n                   MOVE SPACES TO USRID04I OF COUSR0AI\n                   MOVE SPACES TO FNAME04I OF COUSR0AI\n                   MOVE SPACES TO LNAME04I OF COUSR0AI\n                   MOVE SPACES TO UTYPE04I OF COUSR0AI\n               WHEN 5\n                   MOVE SPACES TO USRID05I OF COUSR0AI\n                   MOVE SPACES TO FNAME05I OF COUSR0AI\n                   MOVE SPACES TO LNAME05I OF COUSR0AI\n                   MOVE SPACES TO UTYPE05I OF COUSR0AI\n               WHEN 6\n                   MOVE SPACES TO USRID06I OF COUSR0AI\n                   MOVE SPACES TO FNAME06I OF COUSR0AI\n                   MOVE SPACES TO LNAME06I OF COUSR0AI\n                   MOVE SPACES TO UTYPE06I OF COUSR0AI\n               WHEN 7\n                   MOVE SPACES TO USRID07I OF COUSR0AI\n                   MOVE SPACES TO FNAME07I OF COUSR0AI\n                   MOVE SPACES TO LNAME07I OF COUSR0AI\n                   MOVE SPACES TO UTYPE07I OF COUSR0AI\n               WHEN 8\n                   MOVE SPACES TO USRID08I OF COUSR0AI\n                   MOVE SPACES TO FNAME08I OF COUSR0AI\n                   MOVE SPACES TO LNAME08I OF COUSR0AI\n                   MOVE SPACES TO UTYPE08I OF COUSR0AI\n               WHEN 9\n                   MOVE SPACES TO USRID09I OF COUSR0AI\n                   MOVE SPACES TO FNAME09I OF COUSR0AI\n                   MOVE SPACES TO LNAME09I OF COUSR0AI\n                   MOVE SPACES TO UTYPE09I OF COUSR0AI\n               WHEN 10\n                   MOVE SPACES TO USRID10I OF COUSR0AI\n                   MOVE SPACES TO FNAME10I OF COUSR0AI\n                   MOVE SPACES TO LNAME10I OF COUSR0AI\n                   MOVE SPACES TO UTYPE10I OF COUSR0AI\n               WHEN OTHER\n                   CONTINUE\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      RETURN-TO-PREV-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#return-to-prev-screen","title":"RETURN-TO-PREV-SCREEN","text":"<p>This paragraph handles the return navigation to a previous screen in the CardDemo application. It first checks if the target program is specified in the communication area, defaulting to 'COSGN00C' (likely the sign-on or main menu program) if no specific program is set. It then populates the communication area with the current transaction ID and program name as the source of the transfer, resets the program context to zeros, and executes a CICS XCTL command to transfer control to the target program while passing the CARDDEMO-COMMAREA. This provides a standardized way to navigate back from the user listing screen to the previous screen in the application flow.</p> Code <pre><code>IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n           END-IF\n           MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n           MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n           MOVE ZEROS        TO CDEMO-PGM-CONTEXT\n           EXEC CICS\n               XCTL PROGRAM(CDEMO-TO-PROGRAM)\n               COMMAREA(CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      SEND-USRLST-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#send-usrlst-screen","title":"SEND-USRLST-SCREEN","text":"<p>This paragraph handles the display of the user list screen (COUSR0A) to the user. It first calls the POPULATE-HEADER-INFO paragraph to set up the screen header information, then displays any system messages stored in WS-MESSAGE to the error message field. The paragraph implements conditional screen rendering logic based on the SEND-ERASE-YES flag - if set, it sends the screen with the ERASE option to clear the entire screen; otherwise, it sends the screen without erasing, which preserves background content. In both cases, it positions the cursor at the default location. This paragraph is part of the user interface management functionality that presents the paginated user list to administrators.</p> Code <pre><code>PERFORM POPULATE-HEADER-INFO\n\n           MOVE WS-MESSAGE TO ERRMSGO OF COUSR0AO\n\n           IF SEND-ERASE-YES\n               EXEC CICS SEND\n                         MAP('COUSR0A')\n                         MAPSET('COUSR00')\n                         FROM(COUSR0AO)\n                         ERASE\n                         CURSOR\n               END-EXEC\n           ELSE\n               EXEC CICS SEND\n                         MAP('COUSR0A')\n                         MAPSET('COUSR00')\n                         FROM(COUSR0AO)\n      *                  ERASE\n                         CURSOR\n               END-EXEC\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      RECEIVE-USRLST-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#receive-usrlst-screen","title":"RECEIVE-USRLST-SCREEN","text":"<p>This paragraph receives user input from the COUSR0A map within the COUSR00 mapset, storing the data in the COUSR0AI structure. It captures response codes in WS-RESP-CD and WS-REAS-CD variables to handle any communication errors that might occur during the receive operation. This is a standard CICS interaction that retrieves the screen data after a user has entered information or pressed a function key on the user listing screen.</p> Code <pre><code>EXEC CICS RECEIVE\n                     MAP('COUSR0A')\n                     MAPSET('COUSR00')\n                     INTO(COUSR0AI)\n                     RESP(WS-RESP-CD)\n                     RESP2(WS-REAS-CD)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      POPULATE-HEADER-INFO\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#populate-header-info","title":"POPULATE-HEADER-INFO","text":"<p>This paragraph populates the header information for the user listing screen. It retrieves the current system date and time using the CURRENT-DATE function, then formats and displays this information on the screen. The paragraph sets the application title fields, transaction ID, and program name in the output map. It also formats the current date into MM/DD/YY format and the current time into HH:MM:SS format before moving these values to their respective output fields. This header information provides context to the user about which program they're using and when the screen was generated.</p> Code <pre><code>MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n           MOVE CCDA-TITLE01           TO TITLE01O OF COUSR0AO\n           MOVE CCDA-TITLE02           TO TITLE02O OF COUSR0AO\n           MOVE WS-TRANID              TO TRNNAMEO OF COUSR0AO\n           MOVE WS-PGMNAME             TO PGMNAMEO OF COUSR0AO\n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM\n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD\n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY\n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF COUSR0AO\n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH\n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM\n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS\n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF COUSR0AO.\n\n      *----------------------------------------------------------------*\n      *                      STARTBR-USER-SEC-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#startbr-user-sec-file","title":"STARTBR-USER-SEC-FILE","text":"<p>This paragraph initiates a browse operation on the USRSEC file to retrieve user records. It uses the CICS STARTBR command with the user ID as the key field. The paragraph handles three possible outcomes: successful browse initiation (continues processing), no records found (sets end-of-file flag and displays a message that the user is at the top of the page), or an error condition (displays response and reason codes, sets an error flag, and shows an error message). In all error cases, the paragraph positions the cursor at the user ID input field and redisplays the user list screen. This is a key part of the pagination functionality that allows administrators to browse through the system's user records.</p> Code <pre><code>EXEC CICS STARTBR\n                DATASET   (WS-USRSEC-FILE)\n                RIDFLD    (SEC-USR-ID)\n                KEYLENGTH (LENGTH OF SEC-USR-ID)\n      *         GTEQ\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(NOTFND)\n                   CONTINUE\n                   SET USER-SEC-EOF TO TRUE\n                   MOVE 'You are at the top of the page...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRIDINL OF COUSR0AI\n                   PERFORM SEND-USRLST-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup User...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRIDINL OF COUSR0AI\n                   PERFORM SEND-USRLST-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      READNEXT-USER-SEC-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#readnext-user-sec-file","title":"READNEXT-USER-SEC-FILE","text":"<p>This paragraph performs a sequential read operation on the USRSEC file to retrieve the next user record. It uses the CICS READNEXT command to fetch the next record based on the current key position stored in SEC-USR-ID. The paragraph handles three possible outcomes: successful read (NORMAL), end of file condition (ENDFILE), and errors. When the end of file is reached, it sets a flag, displays a message indicating the user has reached the bottom of the page, and redisplays the user list screen. For other errors, it logs the response and reason codes, sets an error flag, displays an error message, and redisplays the screen. This functionality supports the pagination feature of the user listing interface, allowing administrators to navigate through multiple pages of user records.</p> Code <pre><code>EXEC CICS READNEXT\n                DATASET   (WS-USRSEC-FILE)\n                INTO      (SEC-USER-DATA)\n                LENGTH    (LENGTH OF SEC-USER-DATA)\n                RIDFLD    (SEC-USR-ID)\n                KEYLENGTH (LENGTH OF SEC-USR-ID)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(ENDFILE)\n                   CONTINUE\n                   SET USER-SEC-EOF TO TRUE\n                   MOVE 'You have reached the bottom of the page...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRIDINL OF COUSR0AI\n                   PERFORM SEND-USRLST-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup User...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRIDINL OF COUSR0AI\n                   PERFORM SEND-USRLST-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      READPREV-USER-SEC-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#readprev-user-sec-file","title":"READPREV-USER-SEC-FILE","text":"<p>This paragraph performs a backward read operation on the USRSEC file to support pagination when users navigate to previous records. It reads the previous record based on the current key position and handles three possible outcomes: successful read (continues processing), reaching the beginning of the file (displays a message indicating the user has reached the top of the page), or encountering an error (displays an error message). In all cases except a normal read, the paragraph sends the user list screen back to the user with appropriate positioning and messaging. This functionality supports the PF7 (page up) navigation in the user administration interface.</p> Code <pre><code>EXEC CICS READPREV\n                DATASET   (WS-USRSEC-FILE)\n                INTO      (SEC-USER-DATA)\n                LENGTH    (LENGTH OF SEC-USER-DATA)\n                RIDFLD    (SEC-USR-ID)\n                KEYLENGTH (LENGTH OF SEC-USR-ID)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n               WHEN DFHRESP(ENDFILE)\n                   CONTINUE\n                   SET USER-SEC-EOF TO TRUE\n                   MOVE 'You have reached the top of the page...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRIDINL OF COUSR0AI\n                   PERFORM SEND-USRLST-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup User...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRIDINL OF COUSR0AI\n                   PERFORM SEND-USRLST-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      ENDBR-USER-SEC-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR00C.html#endbr-user-sec-file","title":"ENDBR-USER-SEC-FILE","text":"<p>This paragraph terminates a browse operation on the USRSEC file (user security file) using the CICS ENDBR command. It marks the end of sequential record retrieval that was previously initiated with a STARTBR command. The paragraph is called when the program has finished reading through user records during the pagination process. The WS-USRSEC-FILE variable contains the name of the dataset being accessed.</p> Code <pre><code>EXEC CICS ENDBR\n                DATASET   (WS-USRSEC-FILE)\n           END-EXEC.\n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:34 CDT\n      *\n</code></pre>"},{"location":"COUSR01C.html","title":"COUSR01C","text":""},{"location":"COUSR01C.html#overview","title":"Overview","text":"<p>This CICS COBOL program (COUSR01C) manages the addition of new users to the CardDemo application's security system. It allows administrators to create both regular and admin user accounts by capturing user details through a screen interface and storing them in the USRSEC file. The program validates that all required fields (first name, last name, user ID, password, and user type) are completed before attempting to write the record. It handles various error conditions, including duplicate user IDs, and provides appropriate feedback messages. The program includes navigation capabilities to return to previous screens and supports function keys for cancellation (PF3) and screen clearing (PF4).</p>"},{"location":"COUSR01C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COUSR01C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"COUSR01C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor Admin\n    participant COUSR01C as \"COUSR01C Program\"\n    participant COUSR1A as \"User Addition Screen\"\n    participant USRSEC as \"User Security File\"\n    participant COSGN00C as \"Sign-on Program\"\n    participant COADM01C as \"Admin Menu Program\"\n\n    Admin-&gt;&gt;COUSR01C: Start transaction\n\n    alt First Entry (EIBCALEN = 0)\n        COUSR01C-&gt;&gt;COSGN00C: Redirect to sign-on\n    else Subsequent Entry\n        alt Initial Screen Display\n            COUSR01C-&gt;&gt;COUSR01C: POPULATE-HEADER-INFO\n            COUSR01C-&gt;&gt;COUSR1A: SEND-USRADD-SCREEN\n            COUSR1A--&gt;&gt;Admin: Display empty form\n        else Process User Input\n            COUSR01C-&gt;&gt;COUSR1A: RECEIVE-USRADD-SCREEN\n            COUSR1A--&gt;&gt;COUSR01C: Return form data\n\n            alt ENTER Key Pressed\n                COUSR01C-&gt;&gt;COUSR01C: PROCESS-ENTER-KEY\n\n                alt Validation Failed\n                    COUSR01C-&gt;&gt;COUSR01C: Set error flag &amp; message\n                    COUSR01C-&gt;&gt;COUSR01C: POPULATE-HEADER-INFO\n                    COUSR01C-&gt;&gt;COUSR1A: SEND-USRADD-SCREEN\n                    COUSR1A--&gt;&gt;Admin: Display error message\n                else Validation Passed\n                    COUSR01C-&gt;&gt;COUSR01C: Prepare user record\n                    COUSR01C-&gt;&gt;COUSR01C: WRITE-USER-SEC-FILE\n                    COUSR01C-&gt;&gt;USRSEC: Write user record\n\n                    alt Write Successful\n                        USRSEC--&gt;&gt;COUSR01C: Success response\n                        COUSR01C-&gt;&gt;COUSR01C: INITIALIZE-ALL-FIELDS\n                        COUSR01C-&gt;&gt;COUSR01C: Set success message\n                        COUSR01C-&gt;&gt;COUSR01C: POPULATE-HEADER-INFO\n                        COUSR01C-&gt;&gt;COUSR1A: SEND-USRADD-SCREEN\n                        COUSR1A--&gt;&gt;Admin: Display success message\n                    else Duplicate Key/Record\n                        USRSEC--&gt;&gt;COUSR01C: Duplicate key response\n                        COUSR01C-&gt;&gt;COUSR01C: Set error message\n                        COUSR01C-&gt;&gt;COUSR01C: POPULATE-HEADER-INFO\n                        COUSR01C-&gt;&gt;COUSR1A: SEND-USRADD-SCREEN\n                        COUSR1A--&gt;&gt;Admin: Display duplicate error\n                    else Other Error\n                        USRSEC--&gt;&gt;COUSR01C: Error response\n                        COUSR01C-&gt;&gt;COUSR01C: Set error message\n                        COUSR01C-&gt;&gt;COUSR01C: POPULATE-HEADER-INFO\n                        COUSR01C-&gt;&gt;COUSR1A: SEND-USRADD-SCREEN\n                        COUSR1A--&gt;&gt;Admin: Display general error\n                    end\n                end\n\n            else PF3 Key Pressed\n                COUSR01C-&gt;&gt;COUSR01C: RETURN-TO-PREV-SCREEN\n                COUSR01C-&gt;&gt;COADM01C: Transfer to admin menu\n            else PF4 Key Pressed\n                COUSR01C-&gt;&gt;COUSR01C: CLEAR-CURRENT-SCREEN\n                COUSR01C-&gt;&gt;COUSR01C: INITIALIZE-ALL-FIELDS\n                COUSR01C-&gt;&gt;COUSR01C: POPULATE-HEADER-INFO\n                COUSR01C-&gt;&gt;COUSR1A: SEND-USRADD-SCREEN\n                COUSR1A--&gt;&gt;Admin: Display cleared form\n            else Other Key Pressed\n                COUSR01C-&gt;&gt;COUSR01C: Set invalid key message\n                COUSR01C-&gt;&gt;COUSR01C: POPULATE-HEADER-INFO\n                COUSR01C-&gt;&gt;COUSR1A: SEND-USRADD-SCREEN\n                COUSR1A--&gt;&gt;Admin: Display invalid key message\n            end\n        end\n    end\n\n    COUSR01C--&gt;&gt;COUSR01C: CICS RETURN (with COMMAREA)</code></pre>"},{"location":"COUSR01C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>DFHAID</code></li> <li><code>CSUSR01Y</code></li> <li><code>COCOM01Y</code></li> <li><code>DFHBMSCA</code></li> <li><code>DFHATTR</code></li> <li><code>COUSR01</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG01Y</code></li> </ul>"},{"location":"COUSR01C.html#environment-division","title":"Environment Division","text":""},{"location":"COUSR01C.html#configuration-section","title":"CONFIGURATION SECTION","text":"<p>This section is empty in the provided COBOL program COUSR01C. The Configuration Section would typically contain SOURCE-COMPUTER and OBJECT-COMPUTER entries, as well as any SPECIAL-NAMES clauses, but none are defined in this program. This suggests that the program relies on default configuration settings or that these configurations are defined elsewhere in the program structure.</p> Code"},{"location":"COUSR01C.html#data-division","title":"Data Division","text":""},{"location":"COUSR01C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working-Storage section defines the key variables and data structures used by the COUSR01C program for managing user additions. It includes program identifiers (program name and transaction ID), a message field for user feedback, and file name reference for the user security file (USRSEC). Error handling is facilitated through a flag variable (WS-ERR-FLG) with condition names for on/off states, along with response and reason code fields for CICS operations. The section incorporates several copybooks that likely contain screen maps (COUSR01), common components (COCOM01Y), title elements (COTTL01Y), date utilities (CSDAT01Y), messaging structures (CSMSG01Y), and user-related data definitions (CSUSR01Y). Standard CICS copybooks for AID keys (DFHAID) and BMS screen attributes (DFHBMSCA) are also included to support the program's interactive functionality.</p> Code <pre><code>01 WS-VARIABLES.\n         05 WS-PGMNAME                 PIC X(08) VALUE 'COUSR01C'.\n         05 WS-TRANID                  PIC X(04) VALUE 'CU01'.\n         05 WS-MESSAGE                 PIC X(80) VALUE SPACES.\n         05 WS-USRSEC-FILE             PIC X(08) VALUE 'USRSEC  '.\n         05 WS-ERR-FLG                 PIC X(01) VALUE 'N'.\n           88 ERR-FLG-ON                         VALUE 'Y'.\n           88 ERR-FLG-OFF                        VALUE 'N'.\n         05 WS-RESP-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REAS-CD                 PIC S9(09) COMP VALUE ZEROS.\n\n       COPY COCOM01Y.\n\n       COPY COUSR01.\n\n       COPY COTTL01Y.\n       COPY CSDAT01Y.\n       COPY CSMSG01Y.\n       COPY CSUSR01Y.\n\n       COPY DFHAID.\n       COPY DFHBMSCA.\n      *COPY DFHATTR.\n\n      *----------------------------------------------------------------*\n      *                        LINKAGE SECTION\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR01C.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This section defines the DFHCOMMAREA structure in the Linkage Section, which is used to receive data passed to the program from the calling program. It contains a single field, LK-COMMAREA, defined as a variable-length array of characters that can expand from 1 to 32,767 bytes depending on the actual length of data passed (EIBCALEN). This structure allows the user management program to receive and process communication data from other components of the CardDemo application.</p> Code <pre><code>01  DFHCOMMAREA.\n         05  LK-COMMAREA                           PIC X(01)\n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n\n      *----------------------------------------------------------------*\n      *\n</code></pre>"},{"location":"COUSR01C.html#procedure-division","title":"Procedure Division","text":""},{"location":"COUSR01C.html#main-para","title":"MAIN-PARA","text":"<p>This paragraph serves as the main control flow for the COUSR01C program, handling initial entry, screen navigation, and function key processing. When first entered (EIBCALEN = 0), it redirects to the sign-on program (COSGN00C). On subsequent entries, it either initializes and displays the user addition screen or processes user input based on the function key pressed. The paragraph handles three specific actions: ENTER key (triggering form processing), PF3 (returning to the admin menu), and PF4 (clearing the current screen). Any other key inputs trigger an error message. The paragraph maintains program state through the CARDDEMO-COMMAREA and concludes with a CICS RETURN that preserves the transaction context for continued processing.</p> Code <pre><code>SET ERR-FLG-OFF TO TRUE\n\n           MOVE SPACES TO WS-MESSAGE\n                          ERRMSGO OF COUSR1AO\n\n           IF EIBCALEN = 0\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n               PERFORM RETURN-TO-PREV-SCREEN\n           ELSE\n               MOVE DFHCOMMAREA(1:EIBCALEN) TO CARDDEMO-COMMAREA\n               IF NOT CDEMO-PGM-REENTER\n                   SET CDEMO-PGM-REENTER    TO TRUE\n                   MOVE LOW-VALUES          TO COUSR1AO\n                   MOVE -1       TO FNAMEL OF COUSR1AI\n                   PERFORM SEND-USRADD-SCREEN\n               ELSE\n                   PERFORM RECEIVE-USRADD-SCREEN\n                   EVALUATE EIBAID\n                       WHEN DFHENTER\n                           PERFORM PROCESS-ENTER-KEY\n                       WHEN DFHPF3\n                           MOVE 'COADM01C' TO CDEMO-TO-PROGRAM\n                           PERFORM RETURN-TO-PREV-SCREEN\n                       WHEN DFHPF4\n                           PERFORM CLEAR-CURRENT-SCREEN\n                       WHEN OTHER\n                           MOVE 'Y'                       TO WS-ERR-FLG\n                           MOVE -1       TO FNAMEL OF COUSR1AI\n                           MOVE CCDA-MSG-INVALID-KEY      TO WS-MESSAGE\n                           PERFORM SEND-USRADD-SCREEN\n                   END-EVALUATE\n               END-IF\n           END-IF\n\n           EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-ENTER-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR01C.html#process-enter-key","title":"PROCESS-ENTER-KEY","text":"<p>This paragraph validates user input fields during the user creation process in the CardDemo security system. It checks that all required fields (first name, last name, user ID, password, and user type) are not empty, displaying appropriate error messages and positioning the cursor at the problematic field when validation fails. If all validations pass, it transfers the input data from the screen fields to the security record structure and calls the WRITE-USER-SEC-FILE paragraph to save the new user record. The validation follows a priority sequence, checking fields in a specific order and stopping at the first error encountered.</p> Code <pre><code>EVALUATE TRUE\n               WHEN FNAMEI OF COUSR1AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'First Name can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO FNAMEL OF COUSR1AI\n                   PERFORM SEND-USRADD-SCREEN\n               WHEN LNAMEI OF COUSR1AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Last Name can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO LNAMEL OF COUSR1AI\n                   PERFORM SEND-USRADD-SCREEN\n               WHEN USERIDI OF COUSR1AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'User ID can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USERIDL OF COUSR1AI\n                   PERFORM SEND-USRADD-SCREEN\n               WHEN PASSWDI OF COUSR1AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Password can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO PASSWDL OF COUSR1AI\n                   PERFORM SEND-USRADD-SCREEN\n               WHEN USRTYPEI OF COUSR1AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'User Type can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRTYPEL OF COUSR1AI\n                   PERFORM SEND-USRADD-SCREEN\n               WHEN OTHER\n                   MOVE -1       TO FNAMEL OF COUSR1AI\n                   CONTINUE\n           END-EVALUATE\n\n           IF NOT ERR-FLG-ON\n               MOVE USERIDI  OF COUSR1AI TO SEC-USR-ID\n               MOVE FNAMEI   OF COUSR1AI TO SEC-USR-FNAME\n               MOVE LNAMEI   OF COUSR1AI TO SEC-USR-LNAME\n               MOVE PASSWDI  OF COUSR1AI TO SEC-USR-PWD\n               MOVE USRTYPEI OF COUSR1AI TO SEC-USR-TYPE\n               PERFORM WRITE-USER-SEC-FILE\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      RETURN-TO-PREV-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR01C.html#return-to-prev-screen","title":"RETURN-TO-PREV-SCREEN","text":"<p>This paragraph handles the navigation back to a previous screen in the CardDemo application. When triggered, it checks if the destination program is specified (CDEMO-TO-PROGRAM), and if not, defaults to the sign-on program 'COSGN00C'. It then prepares the communication area by setting the originating transaction ID and program name before transferring control to the destination program using CICS XCTL command. The commented-out lines suggest that user identification information was previously passed but may no longer be required. The paragraph ensures proper navigation flow within the application while maintaining context between program calls.</p> Code <pre><code>IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n           END-IF\n           MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n           MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n      *    MOVE WS-USER-ID   TO CDEMO-USER-ID\n      *    MOVE SEC-USR-TYPE TO CDEMO-USER-TYPE\n           MOVE ZEROS        TO CDEMO-PGM-CONTEXT\n           EXEC CICS\n               XCTL PROGRAM(CDEMO-TO-PROGRAM)\n               COMMAREA(CARDDEMO-COMMAREA)\n           END-EXEC.\n\n\n      *----------------------------------------------------------------*\n      *                      SEND-USRADD-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR01C.html#send-usradd-screen","title":"SEND-USRADD-SCREEN","text":"<p>This paragraph displays the user addition screen to the user. It first calls the POPULATE-HEADER-INFO paragraph to set up standard header information, then moves any system message to the error message field on the screen. It then uses the CICS SEND command to display the COUSR1A map from the COUSR01 mapset, clearing the screen (ERASE) and positioning the cursor at the default position. This is the initial presentation of the form where administrators can enter new user details.</p> Code <pre><code>PERFORM POPULATE-HEADER-INFO\n\n           MOVE WS-MESSAGE TO ERRMSGO OF COUSR1AO\n\n           EXEC CICS SEND\n                     MAP('COUSR1A')\n                     MAPSET('COUSR01')\n                     FROM(COUSR1AO)\n                     ERASE\n                     CURSOR\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      RECEIVE-USRADD-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR01C.html#receive-usradd-screen","title":"RECEIVE-USRADD-SCREEN","text":"<p>This paragraph receives user input from the COUSR1A map within the COUSR01 mapset, storing the captured data in the COUSR1AI structure. It captures response codes in WS-RESP-CD and WS-REAS-CD variables to handle any potential errors during the receive operation. This is a key step in the user addition process, capturing the form data entered by administrators when creating new user accounts in the CardDemo security system.</p> Code <pre><code>EXEC CICS RECEIVE\n                     MAP('COUSR1A')\n                     MAPSET('COUSR01')\n                     INTO(COUSR1AI)\n                     RESP(WS-RESP-CD)\n                     RESP2(WS-REAS-CD)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      POPULATE-HEADER-INFO\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR01C.html#populate-header-info","title":"POPULATE-HEADER-INFO","text":"<p>This paragraph populates the header information on the user management screen (COUSR1A). It retrieves the current date and time using the CURRENT-DATE function, then formats and displays this information along with screen titles, transaction ID, and program name. The date is formatted as MM/DD/YY and the time as HH:MM:SS before being moved to their respective output fields on the screen. This provides users with contextual information about when they're accessing the system and which program they're currently using.</p> Code <pre><code>MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n           MOVE CCDA-TITLE01           TO TITLE01O OF COUSR1AO\n           MOVE CCDA-TITLE02           TO TITLE02O OF COUSR1AO\n           MOVE WS-TRANID              TO TRNNAMEO OF COUSR1AO\n           MOVE WS-PGMNAME             TO PGMNAMEO OF COUSR1AO\n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM\n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD\n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY\n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF COUSR1AO\n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH\n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM\n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS\n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF COUSR1AO.\n\n      *----------------------------------------------------------------*\n      *                      WRITE-USER-SEC-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR01C.html#write-user-sec-file","title":"WRITE-USER-SEC-FILE","text":"<p>This paragraph handles the writing of a new user record to the USRSEC security file and processes the response. It first attempts to write the user data using CICS WRITE command with the user ID as the key. The paragraph then evaluates the response code and takes appropriate action: if successful, it initializes fields, displays a green success message showing which user was added, and refreshes the screen; if a duplicate key/record is detected (indicating the user ID already exists), it sets an error flag, displays an appropriate error message, and positions the cursor at the user ID field; for any other errors, it sets an error flag, displays a generic error message, and positions the cursor at the first name field. In all cases, it calls the SEND-USRADD-SCREEN paragraph to display the appropriate feedback to the user.</p> Code <pre><code>EXEC CICS WRITE\n                DATASET   (WS-USRSEC-FILE)\n                FROM      (SEC-USER-DATA)\n                LENGTH    (LENGTH OF SEC-USER-DATA)\n                RIDFLD    (SEC-USR-ID)\n                KEYLENGTH (LENGTH OF SEC-USR-ID)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   PERFORM INITIALIZE-ALL-FIELDS\n                   MOVE SPACES             TO WS-MESSAGE\n                   MOVE DFHGREEN           TO ERRMSGC  OF COUSR1AO\n                   STRING 'User '     DELIMITED BY SIZE\n                          SEC-USR-ID  DELIMITED BY SPACE\n                          ' has been added ...' DELIMITED BY SIZE\n                     INTO WS-MESSAGE\n                   PERFORM SEND-USRADD-SCREEN\n               WHEN DFHRESP(DUPKEY)\n               WHEN DFHRESP(DUPREC)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'User ID already exist...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USERIDL OF COUSR1AI\n                   PERFORM SEND-USRADD-SCREEN\n               WHEN OTHER\n      *            DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to Add User...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO FNAMEL OF COUSR1AI\n                   PERFORM SEND-USRADD-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      CLEAR-CURRENT-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR01C.html#clear-current-screen","title":"CLEAR-CURRENT-SCREEN","text":"<p>This paragraph clears the current screen by first initializing all fields to their default values and then redisplaying the user addition screen. It provides a way to reset the form when users want to start over with data entry.</p> Code <pre><code>PERFORM INITIALIZE-ALL-FIELDS.\n           PERFORM SEND-USRADD-SCREEN.\n\n      *----------------------------------------------------------------*\n      *                      INITIALIZE-ALL-FIELDS\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR01C.html#initialize-all-fields","title":"INITIALIZE-ALL-FIELDS","text":"<p>This paragraph initializes the input fields on the user registration screen. It sets the cursor position to the first name field by assigning -1 to FNAMEL, and clears all input fields (user ID, first name, last name, password, and user type) by filling them with spaces. This is typically executed when the screen is first displayed or when a reset operation is performed.</p> Code <pre><code>MOVE -1              TO FNAMEL OF COUSR1AI\n           MOVE SPACES          TO USERIDI  OF COUSR1AI\n                                   FNAMEI   OF COUSR1AI\n                                   LNAMEI   OF COUSR1AI\n                                   PASSWDI  OF COUSR1AI\n                                   USRTYPEI OF COUSR1AI\n</code></pre>"},{"location":"COUSR01C.html#ws-message","title":"WS-MESSAGE","text":"<p>This paragraph contains version control information for the COUSR01C program, indicating it is part of the CardDemo application version 1.0-15-g27d6c6f-68, with a timestamp of July 19, 2022, at 23:12:34 CDT. This helps track which version of the code is deployed and when it was last updated.</p> Code <pre><code>*\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:34 CDT\n      *\n</code></pre>"},{"location":"COUSR02C.html","title":"COUSR02C","text":""},{"location":"COUSR02C.html#overview","title":"Overview","text":"<p>This CICS COBOL program (COUSR02C) manages user profile updates in the CardDemo application. It allows administrators to modify existing user information in the USRSEC file. The program retrieves user records based on user ID input, displays the current information for editing, validates the modified data, and updates the user record when changes are made. The program includes field validation to ensure required information (user ID, first name, last name, password, and user type) is provided before updates are processed. It features navigation capabilities to return to previous screens and clear functionality to reset input fields. Error handling is implemented for various scenarios including record not found conditions and update failures.</p>"},{"location":"COUSR02C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COUSR02C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"COUSR02C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor User\n    participant COUSR02C as \"COUSR02C Program\"\n    participant USRSEC as \"USRSEC File\"\n    participant CICS as \"CICS System\"\n\n    User-&gt;&gt;COUSR02C: Start transaction\n\n    COUSR02C-&gt;&gt;COUSR02C: MAIN-PARA\n\n    alt First time entry\n        COUSR02C-&gt;&gt;COUSR02C: Initialize screen\n        COUSR02C-&gt;&gt;COUSR02C: POPULATE-HEADER-INFO\n\n        alt User ID pre-populated\n            COUSR02C-&gt;&gt;COUSR02C: PROCESS-ENTER-KEY\n        end\n\n        COUSR02C-&gt;&gt;CICS: SEND-USRUPD-SCREEN\n        COUSR02C--&gt;&gt;User: Display update screen\n    else Re-entry\n        COUSR02C-&gt;&gt;CICS: RECEIVE-USRUPD-SCREEN\n        CICS--&gt;&gt;COUSR02C: User input\n\n        alt ENTER key pressed\n            COUSR02C-&gt;&gt;COUSR02C: PROCESS-ENTER-KEY\n\n            alt Valid User ID\n                COUSR02C-&gt;&gt;USRSEC: READ-USER-SEC-FILE\n                USRSEC--&gt;&gt;COUSR02C: User record\n                COUSR02C-&gt;&gt;CICS: SEND-USRUPD-SCREEN\n                COUSR02C--&gt;&gt;User: Display user data\n            else Invalid User ID\n                COUSR02C-&gt;&gt;CICS: SEND-USRUPD-SCREEN\n                COUSR02C--&gt;&gt;User: Display error message\n            end\n\n        else PF3 key pressed\n            COUSR02C-&gt;&gt;COUSR02C: UPDATE-USER-INFO\n            COUSR02C-&gt;&gt;COUSR02C: RETURN-TO-PREV-SCREEN\n            COUSR02C-&gt;&gt;CICS: XCTL to previous program\n\n        else PF4 key pressed\n            COUSR02C-&gt;&gt;COUSR02C: CLEAR-CURRENT-SCREEN\n            COUSR02C-&gt;&gt;COUSR02C: INITIALIZE-ALL-FIELDS\n            COUSR02C-&gt;&gt;CICS: SEND-USRUPD-SCREEN\n            COUSR02C--&gt;&gt;User: Display cleared screen\n\n        else PF5 key pressed\n            COUSR02C-&gt;&gt;COUSR02C: UPDATE-USER-INFO\n\n            alt Valid input\n                COUSR02C-&gt;&gt;USRSEC: READ-USER-SEC-FILE\n                USRSEC--&gt;&gt;COUSR02C: User record\n\n                alt Changes detected\n                    COUSR02C-&gt;&gt;USRSEC: UPDATE-USER-SEC-FILE\n\n                    alt Update successful\n                        COUSR02C-&gt;&gt;CICS: SEND-USRUPD-SCREEN\n                        COUSR02C--&gt;&gt;User: Display success message\n                    else Update failed\n                        COUSR02C-&gt;&gt;CICS: SEND-USRUPD-SCREEN\n                        COUSR02C--&gt;&gt;User: Display error message\n                    end\n\n                else No changes\n                    COUSR02C-&gt;&gt;CICS: SEND-USRUPD-SCREEN\n                    COUSR02C--&gt;&gt;User: Display \"Please modify\" message\n                end\n\n            else Invalid input\n                COUSR02C-&gt;&gt;CICS: SEND-USRUPD-SCREEN\n                COUSR02C--&gt;&gt;User: Display validation error\n            end\n\n        else PF12 key pressed\n            COUSR02C-&gt;&gt;COUSR02C: RETURN-TO-PREV-SCREEN\n            COUSR02C-&gt;&gt;CICS: XCTL to admin menu\n\n        else Invalid key\n            COUSR02C-&gt;&gt;CICS: SEND-USRUPD-SCREEN\n            COUSR02C--&gt;&gt;User: Display invalid key message\n        end\n    end\n\n    COUSR02C-&gt;&gt;CICS: RETURN with commarea</code></pre>"},{"location":"COUSR02C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>DFHAID</code></li> <li><code>CSUSR01Y</code></li> <li><code>COCOM01Y</code></li> <li><code>COUSR02</code></li> <li><code>DFHBMSCA</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG01Y</code></li> </ul>"},{"location":"COUSR02C.html#environment-division","title":"Environment Division","text":""},{"location":"COUSR02C.html#configuration-section","title":"CONFIGURATION SECTION","text":"<p>This section would typically contain configuration details for the COUSR02C program, including file assignments, special names, and system dependencies. However, the provided snippet is empty, indicating that either the Configuration Section is not used in this program or the configuration details are defined elsewhere, possibly in a separate copybook or through CICS resource definitions. For a user profile management program like COUSR02C, configuration would normally include specifications for the USRSEC file and any other resources needed for user data processing.</p> Code"},{"location":"COUSR02C.html#data-division","title":"Data Division","text":""},{"location":"COUSR02C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working-Storage section defines the key variables and data structures used in the COUSR02C user profile update program. It includes program identifiers, status flags for error handling and modification tracking, and response codes. The section incorporates several copybooks that likely contain screen layouts, common data structures, and message definitions. Notable elements include the user modification flag (WS-USR-MODIFIED) to track when changes have been made to user records, error handling flags (WS-ERR-FLG), and program control information. The CDEMO-CU02-INFO structure appears to store user selection and pagination data for navigating through user records. Standard CICS copybooks (DFHAID and DFHBMSCA) are included to support the program's CICS interface functionality.</p> Code <pre><code>01 WS-VARIABLES.\n         05 WS-PGMNAME                 PIC X(08) VALUE 'COUSR02C'.\n         05 WS-TRANID                  PIC X(04) VALUE 'CU02'.\n         05 WS-MESSAGE                 PIC X(80) VALUE SPACES.\n         05 WS-USRSEC-FILE             PIC X(08) VALUE 'USRSEC  '.\n         05 WS-ERR-FLG                 PIC X(01) VALUE 'N'.\n           88 ERR-FLG-ON                         VALUE 'Y'.\n           88 ERR-FLG-OFF                        VALUE 'N'.\n         05 WS-RESP-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REAS-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-USR-MODIFIED            PIC X(01) VALUE 'N'.\n           88 USR-MODIFIED-YES                   VALUE 'Y'.\n           88 USR-MODIFIED-NO                    VALUE 'N'.\n\n       COPY COCOM01Y.\n          05 CDEMO-CU02-INFO.\n             10 CDEMO-CU02-USRID-FIRST     PIC X(08).\n             10 CDEMO-CU02-USRID-LAST      PIC X(08).\n             10 CDEMO-CU02-PAGE-NUM        PIC 9(08).\n             10 CDEMO-CU02-NEXT-PAGE-FLG   PIC X(01) VALUE 'N'.\n                88 NEXT-PAGE-YES                     VALUE 'Y'.\n                88 NEXT-PAGE-NO                      VALUE 'N'.\n             10 CDEMO-CU02-USR-SEL-FLG     PIC X(01).\n             10 CDEMO-CU02-USR-SELECTED    PIC X(08).\n\n       COPY COUSR02.\n\n       COPY COTTL01Y.\n       COPY CSDAT01Y.\n       COPY CSMSG01Y.\n       COPY CSUSR01Y.\n\n       COPY DFHAID.\n       COPY DFHBMSCA.\n\n      *----------------------------------------------------------------*\n      *                        LINKAGE SECTION\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR02C.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This linkage section defines the communication area (DFHCOMMAREA) used for passing data between CICS programs. It contains a single field, LK-COMMAREA, which is defined as a variable-length array of single-character elements that can expand from 1 to 32,767 bytes depending on the actual length passed in EIBCALEN (CICS Executive Interface Block Communication Area Length). This flexible structure allows the program to receive and process communication data of varying sizes from calling programs within the CardDemo application's user profile management functionality.</p> Code <pre><code>01  DFHCOMMAREA.\n         05  LK-COMMAREA                           PIC X(01)\n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n\n      *----------------------------------------------------------------*\n      *\n</code></pre>"},{"location":"COUSR02C.html#procedure-division","title":"Procedure Division","text":""},{"location":"COUSR02C.html#main-para","title":"MAIN-PARA","text":"<p>This paragraph serves as the main control flow for the user profile update functionality. It initializes error flags, handles first-time entry versus re-entry to the program, and processes different function key inputs. When first entering, it prepares the update screen and can pre-populate the user ID field if a selection was made from a previous screen. On subsequent interactions, it evaluates the user's action based on the function key pressed: Enter to process input, PF3 to update and return to the previous screen, PF4 to clear the current screen, PF5 to update user information, and PF12 to return to the admin menu. The paragraph includes error handling for invalid key presses and manages the program flow through the CICS transaction system using the commarea for data persistence between screen interactions.</p> Code <pre><code>SET ERR-FLG-OFF     TO TRUE\n           SET USR-MODIFIED-NO TO TRUE\n\n           MOVE SPACES TO WS-MESSAGE\n                          ERRMSGO OF COUSR2AO\n\n           IF EIBCALEN = 0\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n               PERFORM RETURN-TO-PREV-SCREEN\n           ELSE\n               MOVE DFHCOMMAREA(1:EIBCALEN) TO CARDDEMO-COMMAREA\n               IF NOT CDEMO-PGM-REENTER\n                   SET CDEMO-PGM-REENTER    TO TRUE\n                   MOVE LOW-VALUES          TO COUSR2AO\n                   MOVE -1       TO USRIDINL OF COUSR2AI\n                   IF CDEMO-CU02-USR-SELECTED NOT =\n                                              SPACES AND LOW-VALUES\n                       MOVE CDEMO-CU02-USR-SELECTED TO\n                            USRIDINI OF COUSR2AI\n                       PERFORM PROCESS-ENTER-KEY\n                   END-IF\n                   PERFORM SEND-USRUPD-SCREEN\n               ELSE\n                   PERFORM RECEIVE-USRUPD-SCREEN\n                   EVALUATE EIBAID\n                       WHEN DFHENTER\n                           PERFORM PROCESS-ENTER-KEY\n                       WHEN DFHPF3\n                           PERFORM UPDATE-USER-INFO\n                           IF CDEMO-FROM-PROGRAM = SPACES OR LOW-VALUES\n                               MOVE 'COADM01C' TO CDEMO-TO-PROGRAM\n                           ELSE\n                               MOVE CDEMO-FROM-PROGRAM TO\n                               CDEMO-TO-PROGRAM\n                           END-IF\n                           PERFORM RETURN-TO-PREV-SCREEN\n                       WHEN DFHPF4\n                           PERFORM CLEAR-CURRENT-SCREEN\n                       WHEN DFHPF5\n                           PERFORM UPDATE-USER-INFO\n                       WHEN DFHPF12\n                           MOVE 'COADM01C' TO CDEMO-TO-PROGRAM\n                           PERFORM RETURN-TO-PREV-SCREEN\n                       WHEN OTHER\n                           MOVE 'Y'                       TO WS-ERR-FLG\n                           MOVE CCDA-MSG-INVALID-KEY      TO WS-MESSAGE\n                           PERFORM SEND-USRUPD-SCREEN\n                   END-EVALUATE\n               END-IF\n           END-IF\n\n           EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-ENTER-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR02C.html#process-enter-key","title":"PROCESS-ENTER-KEY","text":"<p>This paragraph handles the processing when the ENTER key is pressed during user profile updates. It first validates that the User ID field is not empty, displaying an error message and repositioning the cursor if validation fails. If the User ID is valid, it clears the other input fields (first name, last name, password, and user type) and attempts to read the corresponding user record from the security file using the provided User ID. When the record is successfully retrieved, the paragraph populates the screen fields with the existing user information and redisplays the screen for editing. This enables administrators to see the current user data before making modifications.</p> Code <pre><code>EVALUATE TRUE\n               WHEN USRIDINI OF COUSR2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'User ID can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRIDINL OF COUSR2AI\n                   PERFORM SEND-USRUPD-SCREEN\n               WHEN OTHER\n                   MOVE -1       TO USRIDINL OF COUSR2AI\n                   CONTINUE\n           END-EVALUATE\n\n           IF NOT ERR-FLG-ON\n               MOVE SPACES      TO FNAMEI   OF COUSR2AI\n                                   LNAMEI   OF COUSR2AI\n                                   PASSWDI  OF COUSR2AI\n                                   USRTYPEI OF COUSR2AI\n               MOVE USRIDINI  OF COUSR2AI TO SEC-USR-ID\n               PERFORM READ-USER-SEC-FILE\n           END-IF.\n\n           IF NOT ERR-FLG-ON\n               MOVE SEC-USR-FNAME      TO FNAMEI    OF COUSR2AI\n               MOVE SEC-USR-LNAME      TO LNAMEI    OF COUSR2AI\n               MOVE SEC-USR-PWD        TO PASSWDI   OF COUSR2AI\n               MOVE SEC-USR-TYPE       TO USRTYPEI  OF COUSR2AI\n               PERFORM SEND-USRUPD-SCREEN\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      UPDATE-USER-INFO\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR02C.html#update-user-info","title":"UPDATE-USER-INFO","text":"<p>This paragraph validates and processes user profile updates in the CardDemo application. It first performs a series of validation checks to ensure all required fields (User ID, First Name, Last Name, Password, and User Type) are not empty, displaying appropriate error messages and repositioning the cursor when validation fails. If all validations pass, it reads the existing user record from the security file and compares each field with the input values to identify changes. The code tracks modifications by setting a flag (USR-MODIFIED-YES) whenever a field value differs from the stored record. If any changes are detected, it calls the UPDATE-USER-SEC-FILE paragraph to save the modifications; otherwise, it prompts the user to make changes before updating. The paragraph includes error handling through the WS-ERR-FLG variable and provides clear feedback messages to guide the administrator through the update process.</p> Code <pre><code>EVALUATE TRUE\n               WHEN USRIDINI OF COUSR2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'User ID can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRIDINL OF COUSR2AI\n                   PERFORM SEND-USRUPD-SCREEN\n               WHEN FNAMEI OF COUSR2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'First Name can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO FNAMEL OF COUSR2AI\n                   PERFORM SEND-USRUPD-SCREEN\n               WHEN LNAMEI OF COUSR2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Last Name can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO LNAMEL OF COUSR2AI\n                   PERFORM SEND-USRUPD-SCREEN\n               WHEN PASSWDI OF COUSR2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Password can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO PASSWDL OF COUSR2AI\n                   PERFORM SEND-USRUPD-SCREEN\n               WHEN USRTYPEI OF COUSR2AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'User Type can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRTYPEL OF COUSR2AI\n                   PERFORM SEND-USRUPD-SCREEN\n               WHEN OTHER\n                   MOVE -1       TO FNAMEL OF COUSR2AI\n                   CONTINUE\n           END-EVALUATE\n\n           IF NOT ERR-FLG-ON\n               MOVE USRIDINI  OF COUSR2AI TO SEC-USR-ID\n               PERFORM READ-USER-SEC-FILE\n\n               IF FNAMEI  OF COUSR2AI NOT = SEC-USR-FNAME\n                   MOVE FNAMEI   OF COUSR2AI TO SEC-USR-FNAME\n                   SET USR-MODIFIED-YES TO TRUE\n               END-IF\n               IF LNAMEI  OF COUSR2AI NOT = SEC-USR-LNAME\n                   MOVE LNAMEI   OF COUSR2AI TO SEC-USR-LNAME\n                   SET USR-MODIFIED-YES TO TRUE\n               END-IF\n               IF PASSWDI  OF COUSR2AI NOT = SEC-USR-PWD\n                   MOVE PASSWDI  OF COUSR2AI TO SEC-USR-PWD\n                   SET USR-MODIFIED-YES TO TRUE\n               END-IF\n               IF USRTYPEI  OF COUSR2AI NOT = SEC-USR-TYPE\n                   MOVE USRTYPEI OF COUSR2AI TO SEC-USR-TYPE\n                   SET USR-MODIFIED-YES TO TRUE\n               END-IF\n\n               IF USR-MODIFIED-YES\n                   PERFORM UPDATE-USER-SEC-FILE\n               ELSE\n                   MOVE 'Please modify to update ...' TO\n                                   WS-MESSAGE\n                   MOVE DFHRED       TO ERRMSGC  OF COUSR2AO\n                   PERFORM SEND-USRUPD-SCREEN\n               END-IF\n\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      RETURN-TO-PREV-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR02C.html#return-to-prev-screen","title":"RETURN-TO-PREV-SCREEN","text":"<p>This paragraph handles the navigation logic for returning to a previous screen in the CardDemo application. It first checks if the target program is specified in the communication area, defaulting to 'COSGN00C' (likely the sign-on screen) if no value is provided. It then populates the communication area with the current transaction ID and program name as the source of the transfer, resets the program context to zeros, and executes a CICS XCTL command to transfer control to the target program while passing the communication area. This provides a consistent navigation mechanism throughout the application.</p> Code <pre><code>IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n           END-IF\n           MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n           MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n           MOVE ZEROS        TO CDEMO-PGM-CONTEXT\n           EXEC CICS\n               XCTL PROGRAM(CDEMO-TO-PROGRAM)\n               COMMAREA(CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      SEND-USRUPD-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR02C.html#send-usrupd-screen","title":"SEND-USRUPD-SCREEN","text":"<p>This paragraph displays the user profile update screen to the user. It first calls the POPULATE-HEADER-INFO paragraph to set up standard header information, then transfers any system messages from the working storage variable WS-MESSAGE to the error message field on the screen. It then uses the CICS SEND command to display the COUSR2A map from the COUSR02 mapset, clearing the screen (ERASE) and positioning the cursor appropriately. This is a standard screen display routine that presents the user interface for updating user profile information.</p> Code <pre><code>PERFORM POPULATE-HEADER-INFO\n\n           MOVE WS-MESSAGE TO ERRMSGO OF COUSR2AO\n\n           EXEC CICS SEND\n                     MAP('COUSR2A')\n                     MAPSET('COUSR02')\n                     FROM(COUSR2AO)\n                     ERASE\n                     CURSOR\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      RECEIVE-USRUPD-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR02C.html#receive-usrupd-screen","title":"RECEIVE-USRUPD-SCREEN","text":"<p>This paragraph receives user input from the COUSR2A map within the COUSR02 mapset, storing the captured data in the COUSR2AI structure. It captures response codes in WS-RESP-CD and WS-REAS-CD variables for error handling. This is a standard CICS RECEIVE operation that collects the data entered by administrators when updating user profile information in the CardDemo application.</p> Code <pre><code>EXEC CICS RECEIVE\n                     MAP('COUSR2A')\n                     MAPSET('COUSR02')\n                     INTO(COUSR2AI)\n                     RESP(WS-RESP-CD)\n                     RESP2(WS-REAS-CD)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      POPULATE-HEADER-INFO\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR02C.html#populate-header-info","title":"POPULATE-HEADER-INFO","text":"<p>This paragraph populates the header information on the COUSR2A screen. It retrieves the current date and time using the CURRENT-DATE function, then formats and displays this information along with application titles, transaction ID, and program name in the screen header. The date is formatted as MM/DD/YY and the time as HH:MM:SS for display purposes. This standard header provides users with context about which program they're using and when the transaction is occurring.</p> Code <pre><code>MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n           MOVE CCDA-TITLE01           TO TITLE01O OF COUSR2AO\n           MOVE CCDA-TITLE02           TO TITLE02O OF COUSR2AO\n           MOVE WS-TRANID              TO TRNNAMEO OF COUSR2AO\n           MOVE WS-PGMNAME             TO PGMNAMEO OF COUSR2AO\n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM\n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD\n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY\n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF COUSR2AO\n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH\n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM\n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS\n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF COUSR2AO.\n\n      *----------------------------------------------------------------*\n      *                      READ-USER-SEC-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR02C.html#read-user-sec-file","title":"READ-USER-SEC-FILE","text":"<p>This paragraph retrieves a user record from the USRSEC file for update purposes. It performs a CICS READ operation with UPDATE option using the user ID as the key. The paragraph handles three possible outcomes: 1) successful retrieval, which displays a prompt to press PF5 to save updates and shows the user data on screen, 2) record not found, which displays an error message and positions the cursor at the user ID field, or 3) other errors, which logs the response/reason codes and displays a generic error message. This is a critical component of the user profile update functionality, as it retrieves the existing user record that will be modified by the administrator.</p> Code <pre><code>EXEC CICS READ\n                DATASET   (WS-USRSEC-FILE)\n                INTO      (SEC-USER-DATA)\n                LENGTH    (LENGTH OF SEC-USER-DATA)\n                RIDFLD    (SEC-USR-ID)\n                KEYLENGTH (LENGTH OF SEC-USR-ID)\n                UPDATE\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n                   MOVE 'Press PF5 key to save your updates ...' TO\n                                   WS-MESSAGE\n                   MOVE DFHNEUTR       TO ERRMSGC  OF COUSR2AO\n                   PERFORM SEND-USRUPD-SCREEN\n               WHEN DFHRESP(NOTFND)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'User ID NOT found...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRIDINL OF COUSR2AI\n                   PERFORM SEND-USRUPD-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup User...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO FNAMEL OF COUSR2AI\n                   PERFORM SEND-USRUPD-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      UPDATE-USER-SEC-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR02C.html#update-user-sec-file","title":"UPDATE-USER-SEC-FILE","text":"<p>This paragraph handles the update operation for user security records in the USRSEC file. It attempts to rewrite the modified user record and processes the response from CICS. When successful, it displays a confirmation message with the user ID that was updated. If the user record is not found, it sets an error flag, positions the cursor at the user ID field, and displays an appropriate error message. For any other errors, it logs the response and reason codes, sets an error flag, positions the cursor at the first name field, and displays a generic error message. In all cases, it calls the SEND-USRUPD-SCREEN paragraph to redisplay the screen with the appropriate message.</p> Code <pre><code>EXEC CICS REWRITE\n                DATASET   (WS-USRSEC-FILE)\n                FROM      (SEC-USER-DATA)\n                LENGTH    (LENGTH OF SEC-USER-DATA)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   MOVE SPACES             TO WS-MESSAGE\n                   MOVE DFHGREEN           TO ERRMSGC  OF COUSR2AO\n                   STRING 'User '     DELIMITED BY SIZE\n                          SEC-USR-ID  DELIMITED BY SPACE\n                          ' has been updated ...' DELIMITED BY SIZE\n                     INTO WS-MESSAGE\n                   PERFORM SEND-USRUPD-SCREEN\n               WHEN DFHRESP(NOTFND)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'User ID NOT found...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRIDINL OF COUSR2AI\n                   PERFORM SEND-USRUPD-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to Update User...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO FNAMEL OF COUSR2AI\n                   PERFORM SEND-USRUPD-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      CLEAR-CURRENT-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR02C.html#clear-current-screen","title":"CLEAR-CURRENT-SCREEN","text":"<p>This paragraph clears the current user update screen by first initializing all input fields to their default values through the INITIALIZE-ALL-FIELDS paragraph, and then redisplaying the empty user update screen via the SEND-USRUPD-SCREEN paragraph. This functionality allows users to reset the form when editing user profile information.</p> Code <pre><code>PERFORM INITIALIZE-ALL-FIELDS.\n           PERFORM SEND-USRUPD-SCREEN.\n\n      *----------------------------------------------------------------*\n      *                      INITIALIZE-ALL-FIELDS\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR02C.html#initialize-all-fields","title":"INITIALIZE-ALL-FIELDS","text":"<p>This paragraph initializes the input fields on the user profile update screen. It sets the cursor position to the user ID field by assigning -1 to USRIDINL, and clears all data entry fields (user ID, first name, last name, password, and user type) by setting them to spaces. This is typically executed when the screen is first displayed or when the clear function is activated, ensuring the form starts in a clean state for user input.</p> Code <pre><code>MOVE -1              TO USRIDINL OF COUSR2AI\n           MOVE SPACES          TO USRIDINI OF COUSR2AI\n                                   FNAMEI   OF COUSR2AI\n                                   LNAMEI   OF COUSR2AI\n                                   PASSWDI  OF COUSR2AI\n                                   USRTYPEI OF COUSR2AI\n</code></pre>"},{"location":"COUSR02C.html#ws-message","title":"WS-MESSAGE","text":"<p>This paragraph contains version control information for the COUSR02C program, indicating it is part of the CardDemo application version 1.0-15-g27d6c6f-68, with a timestamp of July 19, 2022, at 23:12:34 CDT. This information helps track which version of the code is deployed and when it was last updated.</p> Code <pre><code>*\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:34 CDT\n      *\n</code></pre>"},{"location":"COUSR03C.html","title":"COUSR03C","text":""},{"location":"COUSR03C.html#overview","title":"Overview","text":"<p>This program (COUSR03C) is part of the CardDemo application and handles the deletion of user records from the USRSEC file in a CICS environment. The program displays a screen where administrators can enter a user ID, view the associated user details, and then delete the user record if desired. The program includes functionality to validate input, display user information before deletion, and provide appropriate feedback messages. It features navigation capabilities to return to previous screens and integrates with other modules in the CardDemo application through a common communication area. Error handling is implemented for various scenarios such as empty user ID fields, non-existent user records, and file access issues.</p>"},{"location":"COUSR03C.html#metadata","title":"Metadata","text":"<p>Program ID: <code>COUSR03C</code></p> <p>Author: <code>AWS</code></p>"},{"location":"COUSR03C.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor Admin as Administrator\n    participant Screen as COUSR3A Screen\n    participant MAIN as MAIN-PARA\n    participant PROCESS as PROCESS-ENTER-KEY\n    participant DELETE as DELETE-USER-INFO\n    participant READ as READ-USER-SEC-FILE\n    participant DEL as DELETE-USER-SEC-FILE\n    participant USRSEC as USRSEC File\n\n    Admin-&gt;&gt;Screen: Access User Deletion Screen\n    Screen-&gt;&gt;MAIN: Initialize program\n\n    alt First Entry\n        MAIN-&gt;&gt;Screen: Display empty deletion screen\n    else Subsequent Entry\n        MAIN-&gt;&gt;Screen: Receive user input\n\n        alt Enter Key Pressed\n            Screen-&gt;&gt;PROCESS: Process user ID input\n            PROCESS-&gt;&gt;READ: Validate and read user record\n            READ-&gt;&gt;USRSEC: READ with UPDATE\n            USRSEC--&gt;&gt;READ: Return user record\n            READ-&gt;&gt;Screen: Display user details for confirmation\n        else PF5 Key Pressed\n            Screen-&gt;&gt;DELETE: Process deletion request\n            DELETE-&gt;&gt;READ: Verify user exists\n            READ-&gt;&gt;USRSEC: READ with UPDATE\n            USRSEC--&gt;&gt;READ: Return user record\n            DELETE-&gt;&gt;DEL: Delete user record\n            DEL-&gt;&gt;USRSEC: DELETE record\n            USRSEC--&gt;&gt;DEL: Confirm deletion\n            DEL-&gt;&gt;Screen: Display success message\n        else PF4 Key Pressed\n            MAIN-&gt;&gt;Screen: Clear current screen\n        else PF3/PF12 Key Pressed\n            MAIN-&gt;&gt;Screen: Return to previous screen\n        else Invalid Key\n            MAIN-&gt;&gt;Screen: Display error message\n        end\n    end\n\n    Screen--&gt;&gt;Admin: Show appropriate screen/message</code></pre>"},{"location":"COUSR03C.html#referenced-copybooks","title":"Referenced Copybooks","text":"<ul> <li><code>CSDAT01Y</code></li> <li><code>DFHAID</code></li> <li><code>CSUSR01Y</code></li> <li><code>COCOM01Y</code></li> <li><code>COUSR03</code></li> <li><code>DFHBMSCA</code></li> <li><code>COTTL01Y</code></li> <li><code>CSMSG01Y</code></li> </ul>"},{"location":"COUSR03C.html#environment-division","title":"Environment Division","text":""},{"location":"COUSR03C.html#configuration-section","title":"CONFIGURATION SECTION","text":"<p>This environment section is empty, indicating that the program COUSR03C does not define any special configuration settings, file assignments, or system dependencies in its CONFIGURATION SECTION. The program likely relies on standard environment settings or configurations defined elsewhere in the CardDemo application.</p> Code"},{"location":"COUSR03C.html#data-division","title":"Data Division","text":""},{"location":"COUSR03C.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This Working Storage Section defines the key variables and data structures used in the COUSR03C program for user record deletion. It includes program identifiers, status flags, and error handling variables. The section contains a WS-VARIABLES group with fields for program name, transaction ID, message storage, file name reference to USRSEC, error flags with condition names, response codes, and a modification tracking flag. The section incorporates several copybooks: COCOM01Y (with a custom extension for CU03-specific information including user ID ranges and pagination controls), COUSR03 (likely containing the map definition for the user deletion screen), and various utility copybooks for titles (COTTL01Y), dates (CSDAT01Y), messages (CSMSG01Y), and user information (CSUSR01Y). Standard CICS copybooks DFHAID and DFHBMSCA are included for attention identifier and BMS attribute definitions. This structure supports the program's functionality of displaying, validating, and deleting user records.</p> Code <pre><code>01 WS-VARIABLES.\n         05 WS-PGMNAME                 PIC X(08) VALUE 'COUSR03C'.\n         05 WS-TRANID                  PIC X(04) VALUE 'CU03'.\n         05 WS-MESSAGE                 PIC X(80) VALUE SPACES.\n         05 WS-USRSEC-FILE             PIC X(08) VALUE 'USRSEC  '.\n         05 WS-ERR-FLG                 PIC X(01) VALUE 'N'.\n           88 ERR-FLG-ON                         VALUE 'Y'.\n           88 ERR-FLG-OFF                        VALUE 'N'.\n         05 WS-RESP-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-REAS-CD                 PIC S9(09) COMP VALUE ZEROS.\n         05 WS-USR-MODIFIED            PIC X(01) VALUE 'N'.\n           88 USR-MODIFIED-YES                   VALUE 'Y'.\n           88 USR-MODIFIED-NO                    VALUE 'N'.\n\n       COPY COCOM01Y.\n          05 CDEMO-CU03-INFO.\n             10 CDEMO-CU03-USRID-FIRST     PIC X(08).\n             10 CDEMO-CU03-USRID-LAST      PIC X(08).\n             10 CDEMO-CU03-PAGE-NUM        PIC 9(08).\n             10 CDEMO-CU03-NEXT-PAGE-FLG   PIC X(01) VALUE 'N'.\n                88 NEXT-PAGE-YES                     VALUE 'Y'.\n                88 NEXT-PAGE-NO                      VALUE 'N'.\n             10 CDEMO-CU03-USR-SEL-FLG     PIC X(01).\n             10 CDEMO-CU03-USR-SELECTED    PIC X(08).\n\n       COPY COUSR03.\n\n       COPY COTTL01Y.\n       COPY CSDAT01Y.\n       COPY CSMSG01Y.\n       COPY CSUSR01Y.\n\n       COPY DFHAID.\n       COPY DFHBMSCA.\n\n      *----------------------------------------------------------------*\n      *                        LINKAGE SECTION\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR03C.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This section defines the linkage area for CICS communication in the user deletion program. It declares a standard DFHCOMMAREA with a variable-length field (LK-COMMAREA) that can accommodate data of different sizes based on the actual length passed to the program (EIBCALEN). This flexible structure allows the program to receive and process communication data from calling programs within the CardDemo application.</p> Code <pre><code>01  DFHCOMMAREA.\n         05  LK-COMMAREA                           PIC X(01)\n             OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.\n\n      *----------------------------------------------------------------*\n      *\n</code></pre>"},{"location":"COUSR03C.html#procedure-division","title":"Procedure Division","text":""},{"location":"COUSR03C.html#main-para","title":"MAIN-PARA","text":"<p>This paragraph serves as the main control flow for the COUSR03C program, handling user interface navigation and function key processing. It first initializes error flags and message fields, then checks if the program was called with a communication area. If not, it returns to the sign-on program. When processing a valid communication area, it either initializes the delete user screen (for first entry) or processes user input based on the function key pressed. The paragraph handles multiple navigation paths: Enter key to process input, PF3/PF12 to return to previous screens, PF4 to clear the screen, and PF5 to delete the user record. It maintains program state through the CARDDEMO-COMMAREA and provides appropriate error messages for invalid key presses. The paragraph concludes by returning control to CICS with the transaction ID and updated communication area.</p> Code <pre><code>SET ERR-FLG-OFF     TO TRUE\n           SET USR-MODIFIED-NO TO TRUE\n\n           MOVE SPACES TO WS-MESSAGE\n                          ERRMSGO OF COUSR3AO\n\n           IF EIBCALEN = 0\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n               PERFORM RETURN-TO-PREV-SCREEN\n           ELSE\n               MOVE DFHCOMMAREA(1:EIBCALEN) TO CARDDEMO-COMMAREA\n               IF NOT CDEMO-PGM-REENTER\n                   SET CDEMO-PGM-REENTER    TO TRUE\n                   MOVE LOW-VALUES          TO COUSR3AO\n                   MOVE -1       TO USRIDINL OF COUSR3AI\n                   IF CDEMO-CU03-USR-SELECTED NOT =\n                                              SPACES AND LOW-VALUES\n                       MOVE CDEMO-CU03-USR-SELECTED TO\n                            USRIDINI OF COUSR3AI\n                       PERFORM PROCESS-ENTER-KEY\n                   END-IF\n                   PERFORM SEND-USRDEL-SCREEN\n               ELSE\n                   PERFORM RECEIVE-USRDEL-SCREEN\n                   EVALUATE EIBAID\n                       WHEN DFHENTER\n                           PERFORM PROCESS-ENTER-KEY\n                       WHEN DFHPF3\n                           IF CDEMO-FROM-PROGRAM = SPACES OR LOW-VALUES\n                               MOVE 'COADM01C' TO CDEMO-TO-PROGRAM\n                           ELSE\n                               MOVE CDEMO-FROM-PROGRAM TO\n                               CDEMO-TO-PROGRAM\n                           END-IF\n                           PERFORM RETURN-TO-PREV-SCREEN\n                       WHEN DFHPF4\n                           PERFORM CLEAR-CURRENT-SCREEN\n                       WHEN DFHPF5\n                           PERFORM DELETE-USER-INFO\n                       WHEN DFHPF12\n                           MOVE 'COADM01C' TO CDEMO-TO-PROGRAM\n                           PERFORM RETURN-TO-PREV-SCREEN\n                       WHEN OTHER\n                           MOVE 'Y'                       TO WS-ERR-FLG\n                           MOVE CCDA-MSG-INVALID-KEY      TO WS-MESSAGE\n                           PERFORM SEND-USRDEL-SCREEN\n                   END-EVALUATE\n               END-IF\n           END-IF\n\n           EXEC CICS RETURN\n                     TRANSID (WS-TRANID)\n                     COMMAREA (CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      PROCESS-ENTER-KEY\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR03C.html#process-enter-key","title":"PROCESS-ENTER-KEY","text":"<p>This paragraph processes the Enter key action when a user is attempting to delete a user record. It first validates that the user ID field is not empty, displaying an error message and repositioning the cursor if it is. If the user ID is valid, it clears the name and user type fields on the screen, then attempts to read the corresponding user record from the USRSEC file by calling the READ-USER-SEC-FILE paragraph. If the record is found successfully (no error flag set), it populates the screen fields with the user's first name, last name, and user type from the retrieved record, then redisplays the screen with this information so the administrator can confirm the deletion. The paragraph implements a validation-retrieval-display workflow that prepares for the actual deletion operation that would follow.</p> Code <pre><code>EVALUATE TRUE\n               WHEN USRIDINI OF COUSR3AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'User ID can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRIDINL OF COUSR3AI\n                   PERFORM SEND-USRDEL-SCREEN\n               WHEN OTHER\n                   MOVE -1       TO USRIDINL OF COUSR3AI\n                   CONTINUE\n           END-EVALUATE\n\n           IF NOT ERR-FLG-ON\n               MOVE SPACES      TO FNAMEI   OF COUSR3AI\n                                   LNAMEI   OF COUSR3AI\n                                   USRTYPEI OF COUSR3AI\n               MOVE USRIDINI  OF COUSR3AI TO SEC-USR-ID\n               PERFORM READ-USER-SEC-FILE\n           END-IF.\n\n           IF NOT ERR-FLG-ON\n               MOVE SEC-USR-FNAME      TO FNAMEI    OF COUSR3AI\n               MOVE SEC-USR-LNAME      TO LNAMEI    OF COUSR3AI\n               MOVE SEC-USR-TYPE       TO USRTYPEI  OF COUSR3AI\n               PERFORM SEND-USRDEL-SCREEN\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      DELETE-USER-INFO\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR03C.html#delete-user-info","title":"DELETE-USER-INFO","text":"<p>This paragraph handles the user deletion process by first validating that the user ID field is not empty. If the field is empty, it sets an error flag, displays an appropriate error message, positions the cursor at the user ID field, and redisplays the user deletion screen. If the user ID is provided, the paragraph positions the cursor at the user ID field and continues processing. When no validation errors are detected, it copies the entered user ID to the security file record key field (SEC-USR-ID), then performs two operations in sequence: first reading the user security file to verify the record exists, and then deleting the user record from the security file. This paragraph implements the core business logic for the user deletion functionality, ensuring proper validation before performing the deletion operation.</p> Code <pre><code>EVALUATE TRUE\n               WHEN USRIDINI OF COUSR3AI = SPACES OR LOW-VALUES\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'User ID can NOT be empty...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRIDINL OF COUSR3AI\n                   PERFORM SEND-USRDEL-SCREEN\n               WHEN OTHER\n                   MOVE -1       TO USRIDINL OF COUSR3AI\n                   CONTINUE\n           END-EVALUATE\n\n           IF NOT ERR-FLG-ON\n               MOVE USRIDINI  OF COUSR3AI TO SEC-USR-ID\n               PERFORM READ-USER-SEC-FILE\n               PERFORM DELETE-USER-SEC-FILE\n           END-IF.\n\n      *----------------------------------------------------------------*\n      *                      RETURN-TO-PREV-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR03C.html#return-to-prev-screen","title":"RETURN-TO-PREV-SCREEN","text":"<p>This paragraph handles the navigation back to a previous screen in the CardDemo application. It first checks if the target program is specified in the communication area, and if not, defaults to 'COSGN00C' (likely the main menu or sign-on screen). It then updates the communication area with the current transaction ID and program name as the source of the transfer, and resets the program context to zeros. Finally, it executes a CICS XCTL command to transfer control to the target program while passing the updated communication area. This provides a consistent navigation mechanism throughout the application while maintaining context between program calls.</p> Code <pre><code>IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES\n               MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM\n           END-IF\n           MOVE WS-TRANID    TO CDEMO-FROM-TRANID\n           MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM\n           MOVE ZEROS        TO CDEMO-PGM-CONTEXT\n           EXEC CICS\n               XCTL PROGRAM(CDEMO-TO-PROGRAM)\n               COMMAREA(CARDDEMO-COMMAREA)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      SEND-USRDEL-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR03C.html#send-usrdel-screen","title":"SEND-USRDEL-SCREEN","text":"<p>This paragraph displays the user deletion screen to the administrator. It first calls the POPULATE-HEADER-INFO paragraph to set up common header information, then transfers any system messages from the working storage to the output map's error message field. The paragraph then uses the CICS SEND command to display the COUSR3A map (from the COUSR03 mapset) to the user, clearing the screen (ERASE) and positioning the cursor appropriately for input. This is a key interaction point in the user deletion workflow, presenting the interface where administrators can view and confirm user deletion operations.</p> Code <pre><code>PERFORM POPULATE-HEADER-INFO\n\n           MOVE WS-MESSAGE TO ERRMSGO OF COUSR3AO\n\n           EXEC CICS SEND\n                     MAP('COUSR3A')\n                     MAPSET('COUSR03')\n                     FROM(COUSR3AO)\n                     ERASE\n                     CURSOR\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      RECEIVE-USRDEL-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR03C.html#receive-usrdel-screen","title":"RECEIVE-USRDEL-SCREEN","text":"<p>This paragraph receives input data from the COUSR3A map within the COUSR03 mapset in a CICS environment. The received data is stored in the COUSR3AI structure, which likely contains user information for the deletion process. The response and reason codes are captured in WS-RESP-CD and WS-REAS-CD respectively for error handling. This is the initial step in processing the user deletion screen where administrator input is captured before validation and processing.</p> Code <pre><code>EXEC CICS RECEIVE\n                     MAP('COUSR3A')\n                     MAPSET('COUSR03')\n                     INTO(COUSR3AI)\n                     RESP(WS-RESP-CD)\n                     RESP2(WS-REAS-CD)\n           END-EXEC.\n\n      *----------------------------------------------------------------*\n      *                      POPULATE-HEADER-INFO\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR03C.html#populate-header-info","title":"POPULATE-HEADER-INFO","text":"<p>This paragraph populates the header information on the COUSR3A screen. It retrieves the current date and time using the CURRENT-DATE function, then formats and displays this information along with application titles, transaction ID, and program name in the screen header fields. The date is formatted as MM/DD/YY and the time as HH:MM:SS before being moved to their respective output fields on the screen.</p> Code <pre><code>MOVE FUNCTION CURRENT-DATE  TO WS-CURDATE-DATA\n\n           MOVE CCDA-TITLE01           TO TITLE01O OF COUSR3AO\n           MOVE CCDA-TITLE02           TO TITLE02O OF COUSR3AO\n           MOVE WS-TRANID              TO TRNNAMEO OF COUSR3AO\n           MOVE WS-PGMNAME             TO PGMNAMEO OF COUSR3AO\n\n           MOVE WS-CURDATE-MONTH       TO WS-CURDATE-MM\n           MOVE WS-CURDATE-DAY         TO WS-CURDATE-DD\n           MOVE WS-CURDATE-YEAR(3:2)   TO WS-CURDATE-YY\n\n           MOVE WS-CURDATE-MM-DD-YY    TO CURDATEO OF COUSR3AO\n\n           MOVE WS-CURTIME-HOURS       TO WS-CURTIME-HH\n           MOVE WS-CURTIME-MINUTE      TO WS-CURTIME-MM\n           MOVE WS-CURTIME-SECOND      TO WS-CURTIME-SS\n\n           MOVE WS-CURTIME-HH-MM-SS    TO CURTIMEO OF COUSR3AO.\n\n      *----------------------------------------------------------------*\n      *                      READ-USER-SEC-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR03C.html#read-user-sec-file","title":"READ-USER-SEC-FILE","text":"<p>This paragraph reads a user record from the USRSEC file in preparation for deletion. It performs a CICS READ operation with UPDATE mode to lock the record for subsequent deletion. The paragraph handles three possible outcomes: 1) If the record is found (NORMAL response), it displays a message prompting the user to press PF5 to confirm deletion; 2) If the record is not found (NOTFND response), it sets an error flag, displays a \"User ID NOT found\" message, and positions the cursor at the user ID input field; 3) For any other response codes, it logs the error details, sets an error flag, displays a generic error message, and positions the cursor at the first name field. In all cases, it calls the SEND-USRDEL-SCREEN paragraph to display the appropriate screen with feedback to the user.</p> Code <pre><code>EXEC CICS READ\n                DATASET   (WS-USRSEC-FILE)\n                INTO      (SEC-USER-DATA)\n                LENGTH    (LENGTH OF SEC-USER-DATA)\n                RIDFLD    (SEC-USR-ID)\n                KEYLENGTH (LENGTH OF SEC-USR-ID)\n                UPDATE\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   CONTINUE\n                   MOVE 'Press PF5 key to delete this user ...' TO\n                                   WS-MESSAGE\n                   MOVE DFHNEUTR       TO ERRMSGC  OF COUSR3AO\n                   PERFORM SEND-USRDEL-SCREEN\n               WHEN DFHRESP(NOTFND)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'User ID NOT found...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRIDINL OF COUSR3AI\n                   PERFORM SEND-USRDEL-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to lookup User...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO FNAMEL OF COUSR3AI\n                   PERFORM SEND-USRDEL-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      DELETE-USER-SEC-FILE\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR03C.html#delete-user-sec-file","title":"DELETE-USER-SEC-FILE","text":"<p>This paragraph handles the deletion of a user record from the USRSEC file and processes the response. It first executes a CICS DELETE command targeting the user security file. Based on the response code received, it takes one of three actions: 1) If successful, it initializes all fields, constructs a success message including the deleted user ID, and displays the updated screen with green text; 2) If the record is not found, it sets an error flag, displays an appropriate error message, and positions the cursor at the user ID input field; 3) For any other response, it logs the error codes to the console, sets an error flag, displays a generic error message, and positions the cursor at the first name field. In all cases, it calls the SEND-USRDEL-SCREEN paragraph to refresh the display with the appropriate feedback message.</p> Code <pre><code>EXEC CICS DELETE\n                DATASET   (WS-USRSEC-FILE)\n                RESP      (WS-RESP-CD)\n                RESP2     (WS-REAS-CD)\n           END-EXEC.\n\n           EVALUATE WS-RESP-CD\n               WHEN DFHRESP(NORMAL)\n                   PERFORM INITIALIZE-ALL-FIELDS\n                   MOVE SPACES             TO WS-MESSAGE\n                   MOVE DFHGREEN           TO ERRMSGC  OF COUSR3AO\n                   STRING 'User '     DELIMITED BY SIZE\n                          SEC-USR-ID  DELIMITED BY SPACE\n                          ' has been deleted ...' DELIMITED BY SIZE\n                     INTO WS-MESSAGE\n                   PERFORM SEND-USRDEL-SCREEN\n               WHEN DFHRESP(NOTFND)\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'User ID NOT found...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO USRIDINL OF COUSR3AI\n                   PERFORM SEND-USRDEL-SCREEN\n               WHEN OTHER\n                   DISPLAY 'RESP:' WS-RESP-CD 'REAS:' WS-REAS-CD\n                   MOVE 'Y'     TO WS-ERR-FLG\n                   MOVE 'Unable to Update User...' TO\n                                   WS-MESSAGE\n                   MOVE -1       TO FNAMEL OF COUSR3AI\n                   PERFORM SEND-USRDEL-SCREEN\n           END-EVALUATE.\n\n      *----------------------------------------------------------------*\n      *                      CLEAR-CURRENT-SCREEN\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR03C.html#clear-current-screen","title":"CLEAR-CURRENT-SCREEN","text":"<p>This paragraph clears the current screen by first initializing all fields to their default values and then redisplaying the user deletion screen. It provides a way to reset the interface when needed, allowing the user to start fresh with a clean form.</p> Code <pre><code>PERFORM INITIALIZE-ALL-FIELDS.\n           PERFORM SEND-USRDEL-SCREEN.\n\n      *----------------------------------------------------------------*\n      *                      INITIALIZE-ALL-FIELDS\n      *----------------------------------------------------------------*\n</code></pre>"},{"location":"COUSR03C.html#initialize-all-fields","title":"INITIALIZE-ALL-FIELDS","text":"<p>This paragraph initializes the input fields on the user deletion screen. It sets the cursor position to the user ID input field by moving -1 to USRIDINL, and clears all display fields by setting them to spaces, including the user ID input field, first name, last name, and user type fields. This ensures the screen is properly reset before displaying it to the user, providing a clean interface for the user deletion operation.</p> Code <pre><code>MOVE -1              TO USRIDINL OF COUSR3AI\n           MOVE SPACES          TO USRIDINI OF COUSR3AI\n                                   FNAMEI   OF COUSR3AI\n                                   LNAMEI   OF COUSR3AI\n                                   USRTYPEI OF COUSR3AI\n</code></pre>"},{"location":"COUSR03C.html#ws-message","title":"WS-MESSAGE","text":"<p>This paragraph contains version control information for the COUSR03C program, showing the specific build version (CardDemo_v1.0-15-g27d6c6f-68) and the build timestamp (July 19, 2022 at 23:12:35 CDT). This information helps track which version of the code is deployed and when it was built.</p> Code <pre><code>*\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:35 CDT\n      *\n</code></pre>"},{"location":"CSUTLDTC.html","title":"CSUTLDTC","text":""},{"location":"CSUTLDTC.html#overview","title":"Overview","text":"<p>This program serves as a utility for date validation in the CardDemo application. It leverages the IBM Language Environment CEEDAYS API to validate dates against specified formats. The program accepts an input date string and format pattern, then returns a detailed validation result. It handles various date validation errors, including invalid date values, format mismatches, range issues, and non-numeric data. The program communicates results through a structured message that includes severity codes, message numbers, and descriptive text about the validation outcome. This utility is likely used throughout the CardDemo application to ensure date inputs meet required formats before processing transactions or updates.</p>"},{"location":"CSUTLDTC.html#metadata","title":"Metadata","text":"<p>Program ID: <code>CSUTLDTC</code></p>"},{"location":"CSUTLDTC.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant Caller as \"Calling Program\"\n    participant CSUTLDTC as \"CSUTLDTC Program\"\n    participant CEEDAYS as \"CEEDAYS API\"\n\n    Caller-&gt;&gt;CSUTLDTC: Call with LS-DATE and LS-DATE-FORMAT\n\n    Note over CSUTLDTC: A000-MAIN\n    CSUTLDTC-&gt;&gt;CSUTLDTC: Prepare date and format parameters\n    CSUTLDTC-&gt;&gt;CEEDAYS: Call with WS-DATE-TO-TEST, WS-DATE-FORMAT\n    CEEDAYS--&gt;&gt;CSUTLDTC: Return OUTPUT-LILLIAN and FEEDBACK-CODE\n\n    CSUTLDTC-&gt;&gt;CSUTLDTC: Evaluate FEEDBACK-CODE\n\n    alt FC-INVALID-DATE\n        CSUTLDTC-&gt;&gt;CSUTLDTC: Set WS-RESULT = 'Date is valid'\n    else FC-INSUFFICIENT-DATA\n        CSUTLDTC-&gt;&gt;CSUTLDTC: Set WS-RESULT = 'Insufficient'\n    else FC-BAD-DATE-VALUE\n        CSUTLDTC-&gt;&gt;CSUTLDTC: Set WS-RESULT = 'Datevalue error'\n    else FC-INVALID-ERA\n        CSUTLDTC-&gt;&gt;CSUTLDTC: Set WS-RESULT = 'Invalid Era'\n    else FC-UNSUPP-RANGE\n        CSUTLDTC-&gt;&gt;CSUTLDTC: Set WS-RESULT = 'Unsupp. Range'\n    else FC-INVALID-MONTH\n        CSUTLDTC-&gt;&gt;CSUTLDTC: Set WS-RESULT = 'Invalid month'\n    else FC-BAD-PIC-STRING\n        CSUTLDTC-&gt;&gt;CSUTLDTC: Set WS-RESULT = 'Bad Pic String'\n    else FC-NON-NUMERIC-DATA\n        CSUTLDTC-&gt;&gt;CSUTLDTC: Set WS-RESULT = 'Nonnumeric data'\n    else FC-YEAR-IN-ERA-ZERO\n        CSUTLDTC-&gt;&gt;CSUTLDTC: Set WS-RESULT = 'YearInEra is 0'\n    else OTHER\n        CSUTLDTC-&gt;&gt;CSUTLDTC: Set WS-RESULT = 'Date is invalid'\n    end\n\n    Note over CSUTLDTC: A000-MAIN-EXIT\n    CSUTLDTC--&gt;&gt;Caller: Return with validation result in WS-RESULT</code></pre>"},{"location":"CSUTLDTC.html#data-division","title":"Data Division","text":""},{"location":"CSUTLDTC.html#working-storage-section","title":"WORKING-STORAGE SECTION","text":"<p>This data section defines the structures used for date validation through the IBM Language Environment CEEDAYS API. It contains three main components: WS-DATE-TO-TEST for storing the input date string, WS-DATE-FORMAT for the format pattern, and OUTPUT-LILLIAN for the converted Lilian date value. The WS-MESSAGE structure stores validation results including severity codes, message numbers, and descriptive text about the validation outcome. The FEEDBACK-CODE structure captures detailed error information from the CEEDAYS API, with condition indicators (88-level items) for specific validation failures such as invalid dates, insufficient data, range issues, and non-numeric data. These structures enable the program to process date inputs and provide meaningful validation results to the calling programs within the CardDemo application.</p> Code <pre><code>****  Date passed to CEEDAYS API                                          \n         01 WS-DATE-TO-TEST.                                                    \n              02  Vstring-length      PIC S9(4) BINARY.                         \n              02  Vstring-text.                                                 \n                  03  Vstring-char    PIC X                                     \n                              OCCURS 0 TO 256 TIMES                             \n                              DEPENDING ON Vstring-length                       \n                                 of WS-DATE-TO-TEST.                            \n      ****  DATE FORMAT PASSED TO CEEDAYS API                                   \n         01 WS-DATE-FORMAT.                                                     \n              02  Vstring-length      PIC S9(4) BINARY.                         \n              02  Vstring-text.                                                 \n                  03  Vstring-char    PIC X                                     \n                              OCCURS 0 TO 256 TIMES                             \n                              DEPENDING ON Vstring-length                       \n                                 of WS-DATE-FORMAT.                             \n      ****  OUTPUT from CEEDAYS - LILLIAN DATE FORMAT                           \n         01 OUTPUT-LILLIAN    PIC S9(9) USAGE IS BINARY.                        \n         01 WS-MESSAGE.                                                         \n              02 WS-SEVERITY  PIC X(04).                                        \n              02 WS-SEVERITY-N REDEFINES WS-SEVERITY PIC 9(4).                  \n              02 FILLER       PIC X(11) VALUE 'Mesg Code:'.                     \n              02 WS-MSG-NO    PIC X(04).                                        \n              02 WS-MSG-NO-N  REDEFINES WS-MSG-NO PIC 9(4).                     \n              02 FILLER       PIC X(01) VALUE SPACE.                            \n              02 WS-RESULT    PIC X(15).                                        \n              02 FILLER       PIC X(01) VALUE SPACE.                            \n              02 FILLER       PIC X(09) VALUE 'TstDate:'.                       \n              02 WS-DATE      PIC X(10) VALUE SPACES.                           \n              02 FILLER       PIC X(01) VALUE SPACE.                            \n              02 FILLER       PIC X(10) VALUE 'Mask used:'.                     \n              02 WS-DATE-FMT  PIC X(10).                                        \n              02 FILLER       PIC X(01) VALUE SPACE.                            \n              02 FILLER       PIC X(03) VALUE SPACES.                           \n\n      * CEEDAYS API FEEDBACK CODE                                               \n          01 FEEDBACK-CODE.                                                     \n           02  FEEDBACK-TOKEN-VALUE. \n             88  FC-INVALID-DATE       VALUE X'0000000000000000'.\n             88  FC-INSUFFICIENT-DATA  VALUE X'000309CB59C3C5C5'.\n             88  FC-BAD-DATE-VALUE     VALUE X'000309CC59C3C5C5'.\n             88  FC-INVALID-ERA        VALUE X'000309CD59C3C5C5'.\n             88  FC-UNSUPP-RANGE       VALUE X'000309D159C3C5C5'.\n             88  FC-INVALID-MONTH      VALUE X'000309D559C3C5C5'.\n             88  FC-BAD-PIC-STRING     VALUE X'000309D659C3C5C5'.\n             88  FC-NON-NUMERIC-DATA   VALUE X'000309D859C3C5C5'.\n             88  FC-YEAR-IN-ERA-ZERO   VALUE X'000309D959C3C5C5'.\n               03  CASE-1-CONDITION-ID.                                         \n                   04  SEVERITY        PIC S9(4) BINARY.                        \n                   04  MSG-NO          PIC S9(4) BINARY.                        \n               03  CASE-2-CONDITION-ID                                          \n                         REDEFINES CASE-1-CONDITION-ID.                         \n                   04  CLASS-CODE      PIC S9(4) BINARY.                        \n                   04  CAUSE-CODE      PIC S9(4) BINARY.                        \n               03  CASE-SEV-CTL    PIC X.                                       \n               03  FACILITY-ID     PIC XXX.                                     \n           02  I-S-INFO        PIC S9(9) BINARY.\n</code></pre>"},{"location":"CSUTLDTC.html#linkage-section","title":"LINKAGE SECTION","text":"<p>This linkage section defines the interface parameters for the date validation utility. It contains three fields: LS-DATE which holds the input date string (up to 10 characters), LS-DATE-FORMAT which specifies the expected format pattern for validation (up to 10 characters), and LS-RESULT which stores the validation outcome message (up to 80 characters) that will be returned to the calling program.</p> Code <pre><code>01 LS-DATE         PIC X(10).                                         \n          01 LS-DATE-FORMAT  PIC X(10).                                         \n          01 LS-RESULT       PIC X(80).\n</code></pre>"},{"location":"CSUTLDTC.html#procedure-division","title":"Procedure Division","text":""},{"location":"CSUTLDTC.html#a000-main","title":"A000-MAIN","text":"<p>This paragraph handles the core date validation logic by preparing input parameters, calling the IBM CEEDAYS API, and interpreting the validation results. It first moves the input date and format pattern into working storage variables with proper length specifications. After calling CEEDAYS with these parameters, it evaluates the returned feedback code to determine the validation status. The paragraph translates technical feedback codes into human-readable messages that describe specific validation issues such as invalid date values, format mismatches, unsupported ranges, or non-numeric data. The result is stored in WS-RESULT, which will be used by the calling program to communicate the validation outcome to users or other processes.</p> Code <pre><code>MOVE LENGTH OF LS-DATE                                               \n                        TO VSTRING-LENGTH  OF WS-DATE-TO-TEST                   \n           MOVE LS-DATE TO VSTRING-TEXT    OF WS-DATE-TO-TEST\n                           WS-DATE                  \n           MOVE LENGTH OF LS-DATE-FORMAT                                        \n                         TO VSTRING-LENGTH OF WS-DATE-FORMAT                    \n           MOVE LS-DATE-FORMAT                                                  \n                         TO VSTRING-TEXT   OF WS-DATE-FORMAT   \n                            WS-DATE-FMT  \n           MOVE 0        TO OUTPUT-LILLIAN                              \n\n           CALL \"CEEDAYS\" USING                                                 \n                  WS-DATE-TO-TEST,                                              \n                  WS-DATE-FORMAT,                                               \n                  OUTPUT-LILLIAN,                                               \n                  FEEDBACK-CODE                                                 \n\n           MOVE WS-DATE-TO-TEST            TO WS-DATE                           \n           MOVE SEVERITY OF FEEDBACK-CODE  TO WS-SEVERITY-N                     \n           MOVE MSG-NO OF FEEDBACK-CODE    TO WS-MSG-NO-N                       \n\n      *    WS-RESULT IS 15 CHARACTERS                                           \n      *                123456789012345'                                         \n           EVALUATE TRUE                                                        \n              WHEN FC-INVALID-DATE                                   \n                 MOVE 'Date is valid'      TO WS-RESULT              \n              WHEN FC-INSUFFICIENT-DATA                              \n                 MOVE 'Insufficient'       TO WS-RESULT              \n              WHEN FC-BAD-DATE-VALUE                                 \n                 MOVE 'Datevalue error'    TO WS-RESULT              \n              WHEN FC-INVALID-ERA                                    \n                 MOVE 'Invalid Era    '    TO WS-RESULT              \n              WHEN FC-UNSUPP-RANGE                                   \n                 MOVE 'Unsupp. Range  '    TO WS-RESULT              \n              WHEN FC-INVALID-MONTH                                  \n                 MOVE 'Invalid month  '    TO WS-RESULT              \n              WHEN FC-BAD-PIC-STRING                                 \n                 MOVE 'Bad Pic String '    TO WS-RESULT              \n              WHEN FC-NON-NUMERIC-DATA                               \n                 MOVE 'Nonnumeric data'    TO WS-RESULT              \n              WHEN FC-YEAR-IN-ERA-ZERO                               \n                 MOVE 'YearInEra is 0 '    TO WS-RESULT              \n              WHEN OTHER                                             \n                 MOVE 'Date is invalid'    TO WS-RESULT \n           END-EVALUATE                                                         \n\n           .\n</code></pre>"},{"location":"CSUTLDTC.html#a000-main-exit","title":"A000-MAIN-EXIT","text":"<p>This paragraph serves as the exit point for the CSUTLDTC program. It marks the end of program execution with a standard EXIT statement. The paragraph includes version control information showing that this code is part of CardDemo version 1.0-15-g27d6c6f-68, with the last update made on July 19, 2022.</p> Code <pre><code>EXIT                                                                 \n           .                                                                    \n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:35 CDT\n      *\n</code></pre>"},{"location":"architecture.html","title":"Architecture","text":""},{"location":"architecture.html#high-level-architecture","title":"High-Level Architecture","text":"<p>The CardDemo application is a traditional mainframe application designed to showcase AWS and partner technologies for mainframe migration and modernization. It follows a classic layered architecture typical of mainframe systems, with clear separation between online (CICS) and batch processing components. The system implements a transaction-oriented design pattern with centralized data access through VSAM files.</p>"},{"location":"architecture.html#core-components","title":"Core Components","text":"<ul> <li>User Interface Layer: </li> <li>Sign-on and Menu Systems: COSGN00C (sign-on handler), COMEN01C (regular user menu), COADM01C (admin menu)</li> <li> <p>Screen-based interfaces for various business functions with standardized navigation patterns</p> </li> <li> <p>Business Logic Layer:</p> </li> <li>Account Management: COACTVWC (view accounts), COACTUPC (update accounts)</li> <li>Card Management: COCRDLIC (list cards), COCRDSLC (view card details), COCRDUPC (update card details)</li> <li>Transaction Management: COTRN00C (list transactions), COTRN01C (view transactions), COTRN02C (add transactions)</li> <li>Bill Payment: COBIL00C (online bill payment)</li> <li> <p>Report Generation: CORPT00C (report submission interface)</p> </li> <li> <p>User Administration Module:</p> </li> <li>User Management: COUSR00C (list users), COUSR01C (add users), COUSR02C (update users), COUSR03C (delete users)</li> <li> <p>Role-based access control (admin vs. regular users)</p> </li> <li> <p>Batch Processing Layer:</p> </li> <li>Account Processing: CBACT01C, CBACT02C, CBACT03C, CBACT04C (interest calculation)</li> <li>Transaction Processing: CBTRN01C (transaction validation), CBTRN02C (transaction posting), CBTRN03C (transaction reporting)</li> <li> <p>Customer Data Processing: CBCUS01C</p> </li> <li> <p>Utility Services:</p> </li> <li>Date Validation: CSUTLDTC (leverages IBM Language Environment for date validation)</li> </ul>"},{"location":"architecture.html#component-relationships","title":"Component Relationships","text":"<ul> <li>Data Flow:</li> <li>Users authenticate through COSGN00C</li> <li>Based on user type, they are directed to either COMEN01C (regular) or COADM01C (admin)</li> <li>Users navigate to specific business functions through menu options</li> <li>Business logic components interact with data files and return results to the user interface</li> <li> <p>Batch processes run independently to process transactions, calculate interest, and generate reports</p> </li> <li> <p>Communication Patterns:</p> </li> <li>Online components use CICS COMMAREA for state management between screens</li> <li>Programs transfer control to each other using CICS XCTL commands</li> <li>Batch job submission from online components via transient data queues (TDQ)</li> <li> <p>Standardized error handling and status code processing across components</p> </li> <li> <p>Dependencies:</p> </li> <li>Menu systems (COMEN01C, COADM01C) depend on authentication from COSGN00C</li> <li>Transaction viewing (COTRN01C) depends on transaction listing (COTRN00C)</li> <li>Card detail screens (COCRDSLC, COCRDUPC) depend on card listing (COCRDLIC)</li> <li>User management functions (COUSR02C, COUSR03C) depend on user listing (COUSR00C)</li> <li>Report generation (CORPT00C) submits batch jobs that depend on transaction data</li> </ul>"},{"location":"architecture.html#external-dependencies","title":"External Dependencies","text":"<ul> <li>Data Storage:</li> <li> <p>VSAM Files:</p> <ul> <li>CUSTDAT/CUSTFILE: Customer information</li> <li>ACCTDAT/ACCTFILE: Account information</li> <li>CARDDAT/CARDFILE: Credit card information</li> <li>TRANSACT: Transaction records</li> <li>USRSEC: User security profiles</li> <li>CXACAIX/XREFFILE: Cross-reference data for accounts and cards</li> <li>Transaction type and category reference files</li> </ul> </li> <li> <p>Runtime Environment:</p> </li> <li>CICS Transaction Server for online components</li> <li>Batch processing environment for scheduled and on-demand jobs</li> <li> <p>IBM Language Environment (for date validation via CEEDAYS API)</p> </li> <li> <p>Integration Points:</p> </li> <li>Internal reader for job submission (via \"JOBS\" TDQ)</li> <li>Potential integration with external payment systems (implied by COBIL00C)</li> </ul>"},{"location":"architecture.html#technical-constraints","title":"Technical Constraints","text":"<ul> <li>Platform Requirements:</li> <li>Traditional mainframe environment (likely z/OS)</li> <li>COBOL programming language</li> <li>CICS for online transaction processing</li> <li>VSAM for data storage</li> <li> <p>JCL for batch job control</p> </li> <li> <p>Performance Considerations:</p> </li> <li>Pagination implemented for large data sets (COTRN00C, COUSR00C, COCRDLIC)</li> <li>Optimized file access patterns with indexed VSAM files</li> <li> <p>Batch processing for resource-intensive operations</p> </li> <li> <p>Security Requirements:</p> </li> <li>Role-based access control (admin vs. regular users)</li> <li>User authentication through sign-on process</li> <li> <p>Function-level authorization (preventing regular users from accessing admin functions)</p> </li> <li> <p>Scalability Considerations:</p> </li> <li>Batch processing for high-volume operations</li> <li>Separation of online and batch components to manage system load</li> <li>Transaction-oriented design for consistent processing</li> </ul> <p>The CardDemo application represents a comprehensive demonstration of typical mainframe financial application patterns, with clear separation of concerns between user interface, business logic, and data access components. Its modular design facilitates the showcasing of various migration and modernization approaches when moving to AWS environments.</p>"},{"location":"architecture.html#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>C4Context\n    title System Context diagram for CardDemo AWS Mainframe Application\n\n    Person(admin, \"Administrator\", \"System administrator with full access\")\n    Person(user, \"Regular User\", \"Customer with limited access\")\n\n    System_Boundary(cardDemo, \"CardDemo Application\") {\n        System(authSystem, \"Authentication System\", \"User authentication and access control\")\n        System(accountSystem, \"Account Management\", \"Handles account data and operations\")\n        System(cardSystem, \"Card Management\", \"Manages credit card information\")\n        System(transactionSystem, \"Transaction Processing\", \"Processes and manages transactions\")\n        System(reportingSystem, \"Reporting System\", \"Generates reports and analytics\")\n        System(adminSystem, \"Administration System\", \"User and system administration\")\n    }\n\n    SystemDb(mainframeDb, \"Mainframe Database\", \"VSAM files storing customer, account, card, and transaction data\")\n\n    System_Ext(batchSystem, \"Batch Processing System\", \"Handles scheduled batch operations\")\n\n    Rel(user, authSystem, \"Authenticates via\")\n    Rel(admin, authSystem, \"Authenticates via\")\n\n    Rel(authSystem, adminSystem, \"Routes admin users to\")\n    Rel(authSystem, accountSystem, \"Routes regular users to\")\n\n    Rel(accountSystem, mainframeDb, \"Reads/writes account data\")\n    Rel(cardSystem, mainframeDb, \"Reads/writes card data\")\n    Rel(transactionSystem, mainframeDb, \"Reads/writes transaction data\")\n    Rel(adminSystem, mainframeDb, \"Manages user data\")\n\n    Rel(accountSystem, cardSystem, \"References\")\n    Rel(cardSystem, transactionSystem, \"Triggers\")\n\n    Rel(admin, adminSystem, \"Manages users and system\")\n    Rel(user, accountSystem, \"Views/updates accounts\")\n    Rel(user, cardSystem, \"Views/manages cards\")\n    Rel(user, transactionSystem, \"Views/creates transactions\")\n\n    Rel(reportingSystem, mainframeDb, \"Generates reports from\")\n    Rel(user, reportingSystem, \"Requests reports from\")\n    Rel(admin, reportingSystem, \"Requests reports from\")\n\n    Rel(batchSystem, transactionSystem, \"Processes daily transactions\")\n    Rel(batchSystem, accountSystem, \"Updates account balances\")\n    Rel(batchSystem, reportingSystem, \"Generates scheduled reports\")</code></pre>"},{"location":"backlog/epics/Account%20Management%20System%20Enhancement.html","title":"Account Management System Enhancement","text":""},{"location":"backlog/epics/Account%20Management%20System%20Enhancement.html#description","title":"Description","text":"<p>This epic focuses on enhancing the CardDemoAWS account management capabilities to provide bank employees with comprehensive tools for accessing, validating, updating, and processing customer account information. It includes implementing robust account search and retrieval functionality, standardized error handling for data operations, automated interest calculation and transaction recording, and comprehensive field-level validation for account and customer data. These enhancements will ensure data integrity, improve customer service efficiency, maintain accurate financial records, and provide transparent audit trails for all account operations. The system will enforce business rules through validation at multiple levels while providing clear feedback to users when issues arise.</p>"},{"location":"backlog/epics/Account%20Management%20System%20Enhancement.html#user-stories","title":"User Stories","text":"<ul> <li>View Account Information</li> <li>Account Search Validation and Processing</li> <li>Standardized File Operation Error Handling for Account Data Access</li> <li>Monthly Credit Card Interest Calculation</li> <li>Account Balance Update with Interest Charges</li> <li>Automated Interest Transaction Recording</li> <li>Account Information Management</li> <li>Customer Information Update</li> <li>Account Data Field-Level Validation</li> </ul>"},{"location":"backlog/epics/Administrative%20System%20Management%20Interface.html","title":"Administrative System Management Interface","text":""},{"location":"backlog/epics/Administrative%20System%20Management%20Interface.html#description","title":"Description","text":"<p>This epic focuses on creating a comprehensive administrative interface for the CardDemo AWS application that enables administrators to efficiently manage the system. It encompasses the development of an intuitive menu system with clear navigation paths, robust session management to maintain context throughout administrative workflows, and a structured approach to organizing administrative functions. The interface will provide administrators with a centralized access point to various system management capabilities while ensuring proper authentication, consistent user experience, and reliable state management across all administrative operations. This will allow administrators to effectively perform their duties with minimal friction, improving overall system governance and operational efficiency.</p>"},{"location":"backlog/epics/Administrative%20System%20Management%20Interface.html#user-stories","title":"User Stories","text":"<ul> <li>Administrative Menu Display</li> <li>Administrative Menu Navigation</li> <li>Administrative Session Management</li> </ul>"},{"location":"backlog/epics/CardDemo%20Main%20Menu%20Interface%20and%20Navigation%20System.html","title":"CardDemo Main Menu Interface and Navigation System","text":""},{"location":"backlog/epics/CardDemo%20Main%20Menu%20Interface%20and%20Navigation%20System.html#description","title":"Description","text":"<p>This epic encompasses the development of a comprehensive main menu system for the CardDemo application that provides personalized navigation, maintains session state, and delivers an intuitive user interface. The system will authenticate users, display appropriate menu options based on access levels, handle navigation between application components, manage session context through a commarea structure, validate user inputs, display informative error messages, and ensure a consistent user experience throughout the application. The menu interface will include standard header information, properly formatted menu options, and support for function keys like PF3 for returning to the sign-on screen. This functionality forms the core navigation framework that enables users to efficiently access the various features of the CardDemo application according to their authorization level.</p>"},{"location":"backlog/epics/CardDemo%20Main%20Menu%20Interface%20and%20Navigation%20System.html#user-stories","title":"User Stories","text":"<ul> <li>Main Menu Navigation for Regular Users</li> <li>Main Menu Interface Display</li> <li>Session Management for CardDemo Application</li> </ul>"},{"location":"backlog/epics/Comprehensive%20Transaction%20Management%20System.html","title":"Comprehensive Transaction Management System","text":""},{"location":"backlog/epics/Comprehensive%20Transaction%20Management%20System.html#description","title":"Description","text":"<p>This epic delivers a complete transaction management system for the CardDemo application that enables financial service representatives and banking users to efficiently create, view, navigate, and manage credit card transactions. The system will provide robust transaction entry with validation, paginated transaction listings with intuitive navigation, detailed transaction views, consistent cross-screen navigation, and well-formatted transaction data presentation. The functionality will maintain data integrity through comprehensive validation rules while offering user-friendly interfaces that follow mainframe conventions. This epic forms a core component of the CardDemo application, enabling efficient transaction processing workflows while showcasing AWS and partner technology capabilities for mainframe modernization.</p>"},{"location":"backlog/epics/Comprehensive%20Transaction%20Management%20System.html#user-stories","title":"User Stories","text":"<ul> <li>Credit Card Transaction Entry</li> <li>Transaction List Navigation and Display</li> <li>View Transaction Details</li> <li>Consistent Application Navigation Framework</li> <li>Transaction Report Formatting and Display</li> <li>Transaction Data Presentation Interface</li> </ul>"},{"location":"backlog/epics/Credit%20Card%20Management%20System%20Enhancement.html","title":"Credit Card Management System Enhancement","text":""},{"location":"backlog/epics/Credit%20Card%20Management%20System%20Enhancement.html#description","title":"Description","text":"<p>This epic focuses on enhancing the credit card management capabilities within the CardDemoAWS application to provide a comprehensive, secure, and user-friendly experience for managing credit card portfolios. It encompasses the ability to search, view, navigate through, and update credit card information with appropriate access controls based on user roles. The system will support efficient navigation between screens while maintaining context, robust search functionality with proper validation, detailed card information display, and secure update capabilities with data integrity checks. These enhancements will enable credit card managers and customer service representatives to efficiently manage card portfolios, quickly locate specific cards, assist customers with inquiries, and maintain accurate card information while ensuring data security and integrity throughout the application.</p>"},{"location":"backlog/epics/Credit%20Card%20Management%20System%20Enhancement.html#user-stories","title":"User Stories","text":"<ul> <li>Credit Card Portfolio Management</li> <li>Credit Card Search Functionality</li> <li>View Credit Card Details</li> <li>Credit Card Screen Navigation</li> </ul>"},{"location":"backlog/epics/Credit%20Card%20Transaction%20Processing%20System%20Enhancement.html","title":"Credit Card Transaction Processing System Enhancement","text":""},{"location":"backlog/epics/Credit%20Card%20Transaction%20Processing%20System%20Enhancement.html#description","title":"Description","text":"<p>This epic focuses on enhancing the core transaction processing capabilities of the CardDemoAWS system to ensure reliable, secure, and efficient handling of credit card transactions. It encompasses the implementation of a robust batch processing system for daily credit card transactions with comprehensive validation rules, proper account posting mechanisms, and standardized error handling. Additionally, it includes the development of a reliable file system management component that supports all required transaction files with proper error reporting and data integrity safeguards. These enhancements will provide financial operations managers and system administrators with a dependable transaction processing infrastructure that maintains data integrity while clearly identifying and handling exceptions according to business rules.</p>"},{"location":"backlog/epics/Credit%20Card%20Transaction%20Processing%20System%20Enhancement.html#user-stories","title":"User Stories","text":"<ul> <li>Credit Card Transaction Batch Processing</li> <li>Implement Robust File System Management for Transaction Processing</li> </ul>"},{"location":"backlog/epics/Customer%20Data%20Management%20Infrastructure.html","title":"Customer Data Management Infrastructure","text":""},{"location":"backlog/epics/Customer%20Data%20Management%20Infrastructure.html#description","title":"Description","text":"<p>This epic focuses on establishing a robust infrastructure for accessing, processing, and reporting on customer data within the CardDemo application. It encompasses the development of standardized VSAM file access routines with comprehensive error handling, as well as reporting capabilities that enable business users to extract and analyze customer information. The infrastructure will provide consistent access patterns, proper error management with meaningful messages, graceful handling of exceptional conditions, and the ability to generate complete customer data reports for business analysis. This foundation will support various CardDemo AWS migration and modernization use cases by ensuring reliable customer data operations.</p>"},{"location":"backlog/epics/Customer%20Data%20Management%20Infrastructure.html#user-stories","title":"User Stories","text":"<ul> <li>Customer Data Report Generation</li> <li>VSAM Customer Data Access Infrastructure</li> </ul>"},{"location":"backlog/epics/Date%20Validation%20Framework%20for%20Data%20Quality%20Management.html","title":"Date Validation Framework for Data Quality Management","text":""},{"location":"backlog/epics/Date%20Validation%20Framework%20for%20Data%20Quality%20Management.html#description","title":"Description","text":"<p>Implement a comprehensive date validation framework within the CardDemo application that ensures all date inputs adhere to specified formats and represent valid calendar dates. This framework will provide consistent validation across the application, including format compliance checking, date value validation, numeric validation, and range validation. The system will return detailed validation results with appropriate error codes and messages to calling programs, enabling them to handle validation failures appropriately. This epic aims to enhance data integrity throughout the application by preventing invalid dates from being processed, thereby improving overall data quality management capabilities.</p>"},{"location":"backlog/epics/Date%20Validation%20Framework%20for%20Data%20Quality%20Management.html#user-stories","title":"User Stories","text":"<ul> <li>Date Format Validation for Data Quality Management</li> </ul>"},{"location":"backlog/epics/Online%20Credit%20Card%20Bill%20Payment%20System.html","title":"Online Credit Card Bill Payment System","text":""},{"location":"backlog/epics/Online%20Credit%20Card%20Bill%20Payment%20System.html#description","title":"Description","text":"<p>This epic encompasses the development of a comprehensive online bill payment system for credit card holders. It includes the core payment processing functionality, an intuitive user interface for guiding customers through the payment workflow, and a robust transaction recording mechanism for audit purposes. The system will allow customers to conveniently pay their credit card bills in full online without visiting a branch, validate account information and payment eligibility, provide clear confirmation and error handling, and maintain a complete audit trail of all payment transactions with unique identifiers and standardized categorization. This functionality is critical to improving customer satisfaction by offering a convenient self-service option while ensuring accurate financial record-keeping and system reliability.</p>"},{"location":"backlog/epics/Online%20Credit%20Card%20Bill%20Payment%20System.html#user-stories","title":"User Stories","text":"<ul> <li>Online Credit Card Bill Payment</li> <li>Bill Payment Screen Interface Management</li> <li>Bill Payment Transaction Recording</li> </ul>"},{"location":"backlog/epics/Transaction%20Reporting%20System%20Enhancement.html","title":"Transaction Reporting System Enhancement","text":""},{"location":"backlog/epics/Transaction%20Reporting%20System%20Enhancement.html#description","title":"Description","text":"<p>This epic focuses on developing a comprehensive transaction reporting system within the CardDemo application that enables financial analysts and business users to generate, configure, and navigate transaction reports with ease. The system will provide flexible date range options (monthly, yearly, or custom), intuitive navigation between screens while maintaining session context, proper validation of user inputs, and accurate calculation and display of transaction data with appropriate formatting. The enhanced reporting capabilities will allow users to analyze card transaction patterns and provide accurate financial summaries to stakeholders without requiring IT assistance, while maintaining a consistent user experience throughout the reporting workflow.</p>"},{"location":"backlog/epics/Transaction%20Reporting%20System%20Enhancement.html#user-stories","title":"User Stories","text":"<ul> <li>Transaction Report Generation and Management</li> <li>Transaction Report Date Range Configuration</li> <li>Transaction Reporting Navigation System</li> </ul>"},{"location":"backlog/epics/User%20Authentication%20and%20Security%20Management%20System.html","title":"User Authentication and Security Management System","text":""},{"location":"backlog/epics/User%20Authentication%20and%20Security%20Management%20System.html#description","title":"Description","text":"<p>This epic encompasses the development of a comprehensive authentication and security management system for the CardDemo AWS application. It includes secure user authentication with session management, intuitive sign-on interfaces, user registration capabilities, administrative tools for user management, and seamless navigation between security administration screens. The system will enforce proper access controls based on user roles, maintain session context throughout user interactions, and provide administrators with robust tools to create, update, delete and list user accounts. The implementation will focus on data integrity, clear user feedback, and efficient workflows that preserve context during navigation between different security administration functions.</p>"},{"location":"backlog/epics/User%20Authentication%20and%20Security%20Management%20System.html#user-stories","title":"User Stories","text":"<ul> <li>Secure User Authentication and Session Management</li> <li>Sign-on Screen Display and Navigation</li> <li>User Registration System</li> <li>Security Administration Interface for User Management</li> <li>Administrative Screen Navigation</li> <li>Administrative Interface Navigation</li> </ul>"},{"location":"backlog/epics/VSAM%20File%20Access%20and%20Status%20Reporting%20Infrastructure.html","title":"VSAM File Access and Status Reporting Infrastructure","text":""},{"location":"backlog/epics/VSAM%20File%20Access%20and%20Status%20Reporting%20Infrastructure.html#description","title":"Description","text":"<p>This epic focuses on establishing a robust data access infrastructure for the CardDemo AWS application, specifically for handling VSAM file operations. It encompasses the implementation of sequential file reading capabilities for the CARDFILE database to support business reporting needs, along with a standardized file status reporting mechanism across all VSAM operations. The infrastructure will provide consistent error handling, proper status code interpretation, and reliable data access patterns that will serve as the foundation for all file operations within the application. This will enable business analysts to generate accurate reports while giving developers the tools needed to efficiently troubleshoot and maintain the system's data access components during the mainframe modernization process.</p>"},{"location":"backlog/epics/VSAM%20File%20Access%20and%20Status%20Reporting%20Infrastructure.html#user-stories","title":"User Stories","text":"<ul> <li>Sequential Card Data File Reading for Reporting</li> <li>Standardized File Status Reporting for VSAM Operations</li> </ul>"},{"location":"backlog/user_stories/Account%20Balance%20Update%20with%20Interest%20Charges.html","title":"Account Balance Update with Interest Charges","text":""},{"location":"backlog/user_stories/Account%20Balance%20Update%20with%20Interest%20Charges.html#user-story","title":"User Story","text":"<p>As a credit card account manager, I want the system to automatically update account balances with calculated interest charges at the end of each billing cycle, so that customers are billed accurately for their outstanding balances and interest.</p>"},{"location":"backlog/user_stories/Account%20Balance%20Update%20with%20Interest%20Charges.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN an account with calculated interest charges WHEN the billing cycle ends THEN the system should add the total interest to the current balance and update the account master record</li> <li>GIVEN an account with transactions in the current cycle WHEN the balance update process completes THEN the cycle credits and debits should be reset to zero for the next billing cycle</li> <li>GIVEN an account master record update WHEN a file operation failure occurs THEN the system should log the error and notify administrators without corrupting the account data</li> <li>System should maintain data integrity by ensuring all interest calculations are completed before updating account balances</li> <li>Feature must only update accounts after all transaction categories have been processed for accurate balance calculation</li> </ol>"},{"location":"backlog/user_stories/Account%20Balance%20Update%20with%20Interest%20Charges.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that an account's balance correctly reflects the addition of calculated interest charges after the update process runs</li> <li>Confirm that cycle credits and debits are reset to zero after a successful account balance update</li> <li>Validate that the account master file contains the updated balance information after the process completes</li> <li>Verify that appropriate error messages are generated when file operations fail during the account update process</li> <li>Confirm the system handles accounts with zero interest charges correctly</li> <li>Validate that the process correctly handles accounts with maximum allowed balance values without overflow errors</li> <li>Verify that the account update process maintains data consistency when interrupted and restarted</li> </ol>"},{"location":"backlog/user_stories/Account%20Balance%20Update%20with%20Interest%20Charges.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    subgraph \"Billing Cycle Process\"\n        A[\"Billing Cycle Timer\"] --&gt;|\"Triggers at cycle end\"| B[\"Interest Calculation Engine\"]\n        B --&gt;|\"Calculated interest\"| C[\"Account Balance Updater\"]\n        C --&gt;|\"Update request\"| D[\"Account Master Database\"]\n        D --&gt;|\"Confirmation\"| C\n        C --&gt;|\"Reset cycle data\"| E[\"Transaction Cycle Manager\"]\n    end\n\n    subgraph \"Error Handling\"\n        C --&gt;|\"Update failure\"| F[\"Error Logging System\"]\n        F --&gt;|\"Critical errors\"| G[\"Admin Notification Service\"]\n    end\n\n    subgraph \"Data Sources\"\n        H[\"Transaction History\"] --&gt;|\"Provides transaction data\"| B\n        I[\"Interest Rate Rules\"] --&gt;|\"Provides rate information\"| B\n    end\n\n    J[\"Data Integrity Monitor\"] --&gt;|\"Validates\"| C\n    K[\"Transaction Processing System\"] --&gt;|\"Completed transactions\"| H</code></pre>"},{"location":"backlog/user_stories/Account%20Balance%20Update%20with%20Interest%20Charges.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Account%20Balance%20Update%20with%20Interest%20Charges.html#account-balance-update","title":"Account Balance Update","text":"<p>This subtask updates account master records with new balances that include the calculated interest charges. After processing all transaction categories for an account, the program adds the total calculated interest to the account's current balance and resets the cycle credits and debits to zero. The updated account record is then written back to the account master file. This ensures that account balances accurately reflect all interest charges before the next billing cycle. Error handling includes specific checks for file operation failures during the rewrite operation. This subtask depends on the successful completion of the interest calculation process and requires access to the account master file with update privileges.</p>"},{"location":"backlog/user_stories/Account%20Balance%20Update%20with%20Interest%20Charges.html#references","title":"References","text":"<ul> <li>CBACT04C</li> </ul>"},{"location":"backlog/user_stories/Account%20Data%20Field-Level%20Validation.html","title":"Account Data Field-Level Validation","text":""},{"location":"backlog/user_stories/Account%20Data%20Field-Level%20Validation.html#user-story","title":"User Story","text":"<p>As an account manager, I want comprehensive field-level validation for all account and customer data elements, so that I can ensure data quality and prevent errors before they enter the system.</p>"},{"location":"backlog/user_stories/Account%20Data%20Field-Level%20Validation.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am entering account or customer data WHEN I input an invalid value for any field THEN I should receive an immediate specific error message for that field</li> <li>GIVEN I am entering currency amounts WHEN I input values THEN they must be validated as numeric with proper decimal places</li> <li>GIVEN I am entering dates WHEN I input values THEN they must be validated in CCYYMMDD format with appropriate range checks (months 1-12, etc.)</li> <li>GIVEN I am entering phone numbers WHEN I input values THEN they must be validated against North American format with valid area codes</li> <li>GIVEN I am entering SSNs WHEN I input values THEN they must follow proper format and reject invalid patterns (000, 666, 900-999)</li> <li>GIVEN I am entering names and addresses WHEN I input values THEN they must be validated to contain appropriate character types</li> <li>GIVEN I am entering state and ZIP code information WHEN I input values THEN cross-field validation must ensure the combination is valid</li> <li>System should provide specific error messages that clearly identify the validation issue for each field</li> <li>Feature must implement validation using pattern matching, range checking, and lookup tables as appropriate for each field type</li> </ol>"},{"location":"backlog/user_stories/Account%20Data%20Field-Level%20Validation.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that currency validation rejects non-numeric values, values with incorrect decimal places, and extremely large values</li> <li>Verify that date validation rejects dates with invalid months (e.g., 13), invalid days (e.g., February 30), and dates outside of acceptable ranges</li> <li>Verify that phone number validation rejects numbers with invalid area codes, incorrect length, and non-numeric characters</li> <li>Verify that SSN validation rejects numbers starting with 000, 666, or in the range 900-999, as well as invalid formats</li> <li>Verify that name fields reject inappropriate special characters while allowing valid characters like hyphens and apostrophes</li> <li>Verify that address validation allows appropriate special characters and rejects inappropriate ones</li> <li>Verify that ZIP codes are validated against the corresponding state to ensure they are valid combinations</li> <li>Confirm validation provides specific error messages that clearly identify the exact validation issue for each field type</li> <li>Validate that all validation errors are displayed immediately after field entry or form submission as appropriate</li> <li>Verify that valid data in all fields allows successful form submission without validation errors</li> </ol>"},{"location":"backlog/user_stories/Account%20Data%20Field-Level%20Validation.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    AM[\"Account Manager\"] --&gt; UI[\"User Interface\"]\n    UI --&gt; VL[\"Validation Layer\"]\n\n    subgraph \"Field Validation System\"\n        VL --&gt; FV[\"Field Validators\"]\n        FV --&gt; NV[\"Numeric Validator\"]\n        FV --&gt; DV[\"Date Validator\"]\n        FV --&gt; PV[\"Phone Validator\"]\n        FV --&gt; SV[\"SSN Validator\"]\n        FV --&gt; TV[\"Text Validator\"]\n\n        VL --&gt; CFV[\"Cross-Field Validator\"]\n        CFV --&gt; SZ[\"State-ZIP Validator\"]\n\n        VL --&gt; EM[\"Error Message Generator\"]\n    end\n\n    VL --&gt; BL[\"Business Logic Layer\"]\n    BL --&gt; DS[\"Data Storage\"]\n\n    VL --&gt; LT[\"Lookup Tables\"]\n    VL --&gt; PR[\"Pattern Rules Repository\"]\n\n    classDef primary fill:#d0e0ff,stroke:#3080ff,stroke-width:2px\n    classDef secondary fill:#e0f0e0,stroke:#30a030,stroke-width:1px\n    classDef validator fill:#fff0d0,stroke:#d0a040,stroke-width:1px\n\n    class AM,UI primary\n    class VL,BL,DS,LT,PR,EM secondary\n    class FV,NV,DV,PV,SV,TV,CFV,SZ validator</code></pre>"},{"location":"backlog/user_stories/Account%20Data%20Field-Level%20Validation.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Account%20Data%20Field-Level%20Validation.html#field-level-validation","title":"Field-Level Validation","text":"<p>This subtask implements comprehensive field-level validation for all account and customer data elements. It includes validation for different data types: Currency amounts must be valid numeric values with proper decimal places; Dates must be in valid CCYYMMDD format with appropriate range checks (e.g., months 1-12); Phone numbers must follow North American format with valid area codes; SSNs must follow proper format and avoid invalid patterns (000, 666, 900-999); Names and addresses must contain appropriate character types. The component provides immediate feedback on validation errors with specific error messages for each field. For example, if a user enters an invalid credit limit, the message 'Credit Limit is not valid' is displayed. The validation includes cross-field validation, such as ensuring state and ZIP code combinations are valid. The component uses a combination of pattern matching, range checking, and lookup tables to implement these validations.</p>"},{"location":"backlog/user_stories/Account%20Data%20Field-Level%20Validation.html#references","title":"References","text":"<ul> <li>COACTUPC</li> </ul>"},{"location":"backlog/user_stories/Account%20Information%20Management.html","title":"Account Information Management","text":""},{"location":"backlog/user_stories/Account%20Information%20Management.html#user-story","title":"User Story","text":"<p>As an account manager, I want to update customer account information with proper validation and transaction management, so that I can maintain accurate and consistent account records while avoiding data conflicts.</p>"},{"location":"backlog/user_stories/Account%20Information%20Management.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I have accessed an existing customer account WHEN I modify account details (credit limits, balances, status) THEN the system should validate my inputs according to business rules before saving</li> <li>GIVEN I have made changes to account information WHEN I submit the update THEN the system should detect if no actual changes were made and inform me without performing database operations</li> <li>GIVEN I am updating account information WHEN another user has modified the same record before I submit my changes THEN the system should notify me of the conflict and prevent overwriting their changes</li> <li>GIVEN I am updating account information WHEN I submit valid changes THEN both account and customer records should be updated together or neither should be updated if an error occurs</li> <li>GIVEN I enter invalid data (incorrect credit limit format, invalid account status, invalid date format) WHEN I attempt to save THEN the system should display specific validation error messages</li> <li>GIVEN I have successfully updated account information WHEN the transaction completes THEN I should receive confirmation that the update was successful</li> </ol>"},{"location":"backlog/user_stories/Account%20Information%20Management.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that credit limit validation accepts valid numeric values with 2 decimal places but rejects invalid formats</li> <li>Verify that account status validation accepts only 'Y' or 'N' values</li> <li>Verify that date fields accept only valid CCYYMMDD format</li> <li>Confirm the system detects when no changes have been made and displays the appropriate message without updating the database</li> <li>Validate that concurrent updates are handled correctly by detecting when another user has modified the record</li> <li>Verify that both account and customer records are updated together in a single transaction</li> <li>Confirm that if either account or customer update fails, both updates are rolled back</li> <li>Test case-insensitive matching and trimming of spaces when detecting data changes</li> <li>Verify appropriate error messages are displayed for different validation and database operation failures</li> <li>Test the complete workflow from data retrieval, modification, validation, to final database update</li> </ol>"},{"location":"backlog/user_stories/Account%20Information%20Management.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    AM[\"Account Manager\"] --&gt; UI[\"User Interface\"]\n    UI --&gt; VL[\"Validation Layer\"]\n    UI --&gt; CM[\"Change Management\"]\n    VL --&gt; BR[\"Business Rules Engine\"]\n    CM --&gt; OCC[\"Optimistic Concurrency Control\"]\n    VL --&gt; TM[\"Transaction Manager\"]\n    TM --&gt; DB[\"Database\"]\n    DB --&gt; CA[\"Customer Account Records\"]\n    DB --&gt; CR[\"Customer Records\"]\n    OCC --&gt; DB\n    BR --&gt; TM\n\n    subgraph \"Core Functionality\"\n        VL\n        BR\n        OCC\n        TM\n    end\n\n    subgraph \"Data Storage\"\n        DB\n        CA\n        CR\n    end\n\n    TM --&gt; UI\n    OCC --&gt; UI</code></pre>"},{"location":"backlog/user_stories/Account%20Information%20Management.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Account%20Information%20Management.html#account-information-update","title":"Account Information Update","text":"<p>This subtask handles the updating of account information in the CardDemo system. It allows users to modify account details such as credit limits, balances, and status. The process follows a structured workflow: (1) Retrieve existing account data, (2) Present data to user for modification, (3) Validate user inputs, (4) Confirm changes, and (5) Update database records. Key business rules include: Credit limits must be valid numeric values with 2 decimal places; Account status must be 'Y' or 'N'; Dates must be in valid CCYYMMDD format; Current balance and cycle credits/debits must be valid currency amounts. The component implements optimistic locking by checking if data was changed by another user before committing updates. Error handling includes specific messages for validation failures (e.g., 'Credit Limit must be supplied', 'Account Active Status must be Y or N') and database operation failures (e.g., 'Could not lock account record for update'). The component depends on ACCTDAT (account data file), CUSTDAT (customer data file), and card cross-reference files.</p>"},{"location":"backlog/user_stories/Account%20Information%20Management.html#references","title":"References","text":"<ul> <li>COACTUPC</li> </ul>"},{"location":"backlog/user_stories/Account%20Information%20Management.html#data-change-detection","title":"Data Change Detection","text":"<p>This subtask handles the detection of changes between original and modified account/customer data. It compares all fields between the original data fetched from the database and the user-modified data to determine if any changes have occurred. The component uses string manipulation functions like FUNCTION UPPER-CASE and FUNCTION TRIM to normalize data for comparison, ensuring case-insensitive matching and ignoring leading/trailing spaces. If no changes are detected, it prevents unnecessary database updates by displaying a message 'No change detected with respect to values fetched.' This subtask is critical for optimizing database operations and providing appropriate user feedback. It also supports the optimistic concurrency control by detecting if another user has modified the data before the current update is committed.</p>"},{"location":"backlog/user_stories/Account%20Information%20Management.html#references_1","title":"References","text":"<ul> <li>COACTUPC</li> </ul>"},{"location":"backlog/user_stories/Account%20Information%20Management.html#database-transaction-management","title":"Database Transaction Management","text":"<p>This subtask handles the database operations required for updating account and customer information. It implements a two-phase update process: (1) Lock and read both account and customer records, (2) Verify no concurrent modifications, (3) Update both records, and (4) Handle any errors with appropriate rollback. The component uses CICS READ with UPDATE option to lock records, and REWRITE to commit changes. If either update fails, it performs a SYNCPOINT ROLLBACK to ensure data consistency. Error handling includes specific messages for database operation failures such as 'Could not lock account record for update', 'Could not lock customer record for update', or 'Record changed by some one else. Please review'. The component depends on the ACCTDAT and CUSTDAT files and ensures that both updates succeed or both fail to maintain referential integrity between account and customer data.</p>"},{"location":"backlog/user_stories/Account%20Information%20Management.html#references_2","title":"References","text":"<ul> <li>COACTUPC</li> </ul>"},{"location":"backlog/user_stories/Account%20Search%20Validation%20and%20Processing.html","title":"Account Search Validation and Processing","text":""},{"location":"backlog/user_stories/Account%20Search%20Validation%20and%20Processing.html#user-story","title":"User Story","text":"<p>As a bank employee, I want to search for customer accounts by entering an account number, so that I can quickly access account details and provide customer service.</p>"},{"location":"backlog/user_stories/Account%20Search%20Validation%20and%20Processing.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am on the account search screen WHEN I enter a valid 11-digit account number THEN the system should retrieve and display the matching account details</li> <li>GIVEN I am on the account search screen WHEN I enter an empty account number THEN the system should display 'Account number not provided' error message</li> <li>GIVEN I am on the account search screen WHEN I enter a non-numeric account number THEN the system should display an appropriate error message and highlight the field in red</li> <li>GIVEN I am on the account search screen WHEN I enter a zero account number THEN the system should display an error message and highlight the field in red</li> <li>GIVEN I am on the account search screen WHEN I enter '*' as the account number THEN the system should treat it as a special case and convert it to LOW-VALUES for processing</li> <li>System should validate that account numbers are exactly 11 digits in length before processing the search</li> <li>Feature must provide clear visual feedback for validation errors by highlighting problematic fields in red</li> </ol>"},{"location":"backlog/user_stories/Account%20Search%20Validation%20and%20Processing.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that a valid 11-digit account number successfully retrieves the correct account details</li> <li>Verify that submitting an empty account number field displays 'Account number not provided' error message</li> <li>Verify that entering letters or special characters (except '*') in the account number field displays the appropriate error message</li> <li>Verify that entering all zeros in the account number field displays an error message</li> <li>Verify that entering an account number with less than 11 digits displays an error message</li> <li>Verify that entering an account number with more than 11 digits displays an error message</li> <li>Confirm that entering '*' as an account number is processed correctly as a special case</li> <li>Validate that error messages are displayed in the correct location on the screen</li> <li>Validate that fields with validation errors are highlighted in red</li> <li>Verify that after correcting an invalid input, the error message disappears and the field is no longer highlighted in red</li> </ol>"},{"location":"backlog/user_stories/Account%20Search%20Validation%20and%20Processing.html#diagram","title":"Diagram","text":"<pre><code>flowchart LR\n    A[\"Bank Employee\"] --&gt;|\"Enters Account Number\"| B[\"Account Search UI\"]\n    B --&gt;|\"Submit Search\"| C[\"Validation Layer\"]\n    C --&gt;|\"Valid Input\"| D[\"Account Service\"]\n    C --&gt;|\"Invalid Input\"| E[\"Error Handler\"]\n    D --&gt;|\"Query\"| F[\"Account Database\"]\n    F --&gt;|\"Account Data\"| D\n    D --&gt;|\"Account Details\"| G[\"Account Details View\"]\n    E --&gt;|\"Error Message\"| B\n\n    subgraph Frontend\n        B\n        G\n    end\n\n    subgraph Backend\n        C\n        D\n        E\n    end\n\n    subgraph \"Data Layer\"\n        F\n    end</code></pre>"},{"location":"backlog/user_stories/Account%20Search%20Validation%20and%20Processing.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Account%20Search%20Validation%20and%20Processing.html#account-search-processing","title":"Account Search Processing","text":"<p>This subtask handles the validation and processing of account search criteria entered by users. It ensures that only valid search requests are processed and provides appropriate feedback for invalid inputs.</p> <ol> <li>Business Rules:</li> <li>Users can search for accounts by entering a valid account number</li> <li>The system validates input before attempting database access</li> <li> <p>Invalid or missing inputs result in error messages</p> </li> <li> <p>Validation Rules:</p> </li> <li>Account ID must be provided (cannot be blank)</li> <li>Account ID must be numeric</li> <li>Account ID must be non-zero</li> <li> <p>Account ID must be 11 digits in length</p> </li> <li> <p>Error Handling:</p> </li> <li>Empty account number: Sets FLG-ACCTFILTER-BLANK flag and displays 'Account number not provided'</li> <li>Non-numeric account number: Sets FLG-ACCTFILTER-NOT-OK flag and displays error message</li> <li> <p>Zero account number: Sets FLG-ACCTFILTER-NOT-OK flag and displays error message</p> </li> <li> <p>Input Processing:</p> </li> <li>Handles special input case where '*' is entered (converts to LOW-VALUES)</li> <li>Converts input to numeric format for database lookup</li> <li> <p>Sets appropriate flags for screen attribute control (highlighting errors in red)</p> </li> <li> <p>Dependencies:</p> </li> <li>Relies on screen input map CACTVWAI</li> <li>Uses common validation routines</li> <li>Feeds validated input to the Account Detail Retrieval subtask</li> </ol>"},{"location":"backlog/user_stories/Account%20Search%20Validation%20and%20Processing.html#references","title":"References","text":"<ul> <li>COACTVWC</li> </ul>"},{"location":"backlog/user_stories/Administrative%20Interface%20Navigation.html","title":"Administrative Interface Navigation","text":""},{"location":"backlog/user_stories/Administrative%20Interface%20Navigation.html#user-story","title":"User Story","text":"<p>As a system administrator, I want to efficiently navigate between different user administration screens, so that I can manage user accounts without losing context or having to restart workflows.</p>"},{"location":"backlog/user_stories/Administrative%20Interface%20Navigation.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am on a user administration screen WHEN I press PF3 THEN the system returns me to the admin menu (COADM01C)</li> <li>GIVEN I am on the user list screen WHEN I select a user with 'U' THEN the system transfers me to the user update screen (COUSR02C) with the selected user's information</li> <li>GIVEN I am on the user list screen WHEN I select a user with 'D' THEN the system transfers me to the user deletion screen (COUSR03C) with the selected user's information</li> <li>GIVEN I am on any user administration screen WHEN I press Enter THEN the system processes my selection and navigates to the appropriate screen</li> <li>GIVEN I press an invalid function key WHEN on any user administration screen THEN the system displays an appropriate error message without losing my current context</li> <li>System should maintain session state and user context when navigating between different administration screens</li> <li>Feature must use the CARDDEMO-COMMAREA to pass data between programs and preserve navigation history</li> </ol>"},{"location":"backlog/user_stories/Administrative%20Interface%20Navigation.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that pressing PF3 from any user administration screen returns to the admin menu (COADM01C)</li> <li>Verify that selecting a user with 'U' transfers to the user update screen (COUSR02C) with the correct user information loaded</li> <li>Verify that selecting a user with 'D' transfers to the user deletion screen (COUSR03C) with the correct user information loaded</li> <li>Verify that pressing Enter processes the current selection and navigates to the appropriate screen</li> <li>Confirm navigation handles invalid key presses by displaying appropriate error messages while maintaining the current screen context</li> <li>Validate that user context is preserved when navigating between screens (e.g., selected user information remains available)</li> <li>Confirm that after completing an operation (update or delete), returning to the user list shows the updated information</li> <li>Verify that the CARDDEMO-COMMAREA correctly maintains all necessary data between program transitions</li> </ol>"},{"location":"backlog/user_stories/Administrative%20Interface%20Navigation.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    Admin[\"System Administrator\"]\n\n    subgraph \"User Administration System\"\n        Menu[\"Admin Menu (COADM01C)\"]\n        UserList[\"User List Screen\"]\n        UserUpdate[\"User Update Screen (COUSR02C)\"]\n        UserDelete[\"User Deletion Screen (COUSR03C)\"]\n\n        Commarea[\"CARDDEMO-COMMAREA\"]\n\n        SessionState[\"Session State Manager\"]\n        NavController[\"Navigation Controller\"]\n        ErrorHandler[\"Error Handler\"]\n    end\n\n    Admin --&gt; Menu\n    Menu --&gt; UserList\n\n    UserList -- \"Select 'U'\" --&gt; UserUpdate\n    UserList -- \"Select 'D'\" --&gt; UserDelete\n\n    UserUpdate -- \"PF3\" --&gt; Menu\n    UserDelete -- \"PF3\" --&gt; Menu\n    UserList -- \"PF3\" --&gt; Menu\n\n    NavController --&gt; Menu\n    NavController --&gt; UserList\n    NavController --&gt; UserUpdate\n    NavController --&gt; UserDelete\n\n    UserUpdate &lt;--&gt; Commarea\n    UserDelete &lt;--&gt; Commarea\n    UserList &lt;--&gt; Commarea\n    Menu &lt;--&gt; Commarea\n\n    NavController &lt;--&gt; SessionState\n    NavController &lt;--&gt; ErrorHandler</code></pre>"},{"location":"backlog/user_stories/Administrative%20Interface%20Navigation.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Administrative%20Interface%20Navigation.html#user-administration-navigation","title":"User Administration Navigation","text":"<p>This subtask manages navigation between different user administration screens in the CardDemo system. It handles PF key processing to navigate between screens: PF3 returns to the admin menu (COADM01C), while Enter processes user selections. When a user is selected with 'U' or 'D', the system transfers control to the appropriate program (COUSR02C for updates or COUSR03C for deletions) while maintaining context through the CARDDEMO-COMMAREA. The subtask includes error handling for invalid key presses and maintains session state between screens. It depends on the common communication area (COCOM01Y) to pass data between programs and preserve navigation history.</p>"},{"location":"backlog/user_stories/Administrative%20Interface%20Navigation.html#references","title":"References","text":"<ul> <li>COUSR00C</li> </ul>"},{"location":"backlog/user_stories/Administrative%20Menu%20Display.html","title":"Administrative Menu Display","text":""},{"location":"backlog/user_stories/Administrative%20Menu%20Display.html#user-story","title":"User Story","text":"<p>As an administrator, I want to see a well-organized menu of administrative options when I access the administrative interface, so that I can easily navigate to the specific administrative function I need to perform.</p>"},{"location":"backlog/user_stories/Administrative%20Menu%20Display.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am logged in as an administrator WHEN I access the administrative interface THEN I should see a numbered menu of available administrative options</li> <li>GIVEN the administrative menu is displayed WHEN I view the screen THEN I should see standard header information including current date (MM/DD/YY), time (HH:MM:SS), transaction ID ('CA00'), and program name ('COADM01C')</li> <li>GIVEN there are administrative options available WHEN the menu is displayed THEN up to 10 options should be shown with sequential numbers and descriptions (e.g., '1. User Management')</li> <li>GIVEN the system has administrative options stored in the CDEMO-ADMIN-OPT structure WHEN the menu is displayed THEN it should dynamically build the menu by iterating through these available options</li> </ol>"},{"location":"backlog/user_stories/Administrative%20Menu%20Display.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that all available administrative options stored in CDEMO-ADMIN-OPT are displayed correctly with sequential numbering</li> <li>Confirm the menu displays correctly when there are exactly 10 administrative options available</li> <li>Confirm the menu displays correctly when there are fewer than 10 administrative options available</li> <li>Verify that the date is displayed in MM/DD/YY format and time in HH:MM:SS format in the header</li> <li>Validate that the transaction ID 'CA00' and program name 'COADM01C' appear correctly in the header</li> <li>Verify the menu is displayed immediately when a user first accesses the administrative interface</li> </ol>"},{"location":"backlog/user_stories/Administrative%20Menu%20Display.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    A[\"Administrator\"] --&gt; B[\"Authentication System\"]\n    B --&gt; C[\"Administrative Interface\"]\n    C --&gt; D[\"Menu Generation Component\"]\n    D --&gt; E[\"CDEMO-ADMIN-OPT Structure\"]\n    E --&gt; D\n    D --&gt; F[\"Dynamic Menu Display\"]\n    F --&gt; G[\"Header Information Component\"]\n    G --&gt; H[\"Date/Time Service\"]\n    G --&gt; I[\"Transaction ID Service\"]\n    G --&gt; J[\"Program Name Service\"]\n    F --&gt; K[\"Menu Options Display\"]\n    K --&gt; L[\"User Management\"]\n    K --&gt; M[\"Other Admin Functions\"]\n    K --&gt; N[\"...\"]\n\n    classDef system fill:#f9f,stroke:#333,stroke-width:2px\n    classDef data fill:#bbf,stroke:#333,stroke-width:1px\n    classDef ui fill:#bfb,stroke:#333,stroke-width:1px\n\n    class B,C,D,F,G,H,I,J,K system\n    class E data\n    class L,M,N ui</code></pre>"},{"location":"backlog/user_stories/Administrative%20Menu%20Display.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Administrative%20Menu%20Display.html#administrative-menu-display_1","title":"Administrative Menu Display","text":"<p>Displays a menu of administrative options available to admin users. The program dynamically builds the menu by iterating through available options (up to 10) stored in the CDEMO-ADMIN-OPT structure. Each option is displayed with a number and description (e.g., '1. User Management'). The menu includes standard header information such as current date (MM/DD/YY format) and time (HH:MM:SS format), transaction ID ('CA00'), and program name ('COADM01C'). This subtask handles the initial display of the menu when a user first accesses the administrative interface.</p>"},{"location":"backlog/user_stories/Administrative%20Menu%20Display.html#references","title":"References","text":"<ul> <li>COADM01C</li> </ul>"},{"location":"backlog/user_stories/Administrative%20Menu%20Navigation.html","title":"Administrative Menu Navigation","text":""},{"location":"backlog/user_stories/Administrative%20Menu%20Navigation.html#user-story","title":"User Story","text":"<p>As an administrator, I want to navigate through a menu of administrative functions, so that I can efficiently access and perform system management tasks.</p>"},{"location":"backlog/user_stories/Administrative%20Menu%20Navigation.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am on the administrative menu WHEN I enter a valid numeric option THEN the system should route me to the corresponding administrative function</li> <li>GIVEN I am on the administrative menu WHEN I select an option marked as 'DUMMY' THEN the system should display a 'coming soon' message instead of transferring control</li> <li>GIVEN I am on the administrative menu WHEN I enter an invalid option (non-numeric, zero, or outside the available range) THEN the system should display an error message 'Please enter a valid option number...'</li> <li>GIVEN I am on the administrative menu WHEN I press an invalid key THEN the system should display an error message 'Invalid key pressed'</li> <li>GIVEN I navigate from one administrative function to another WHEN moving between functions THEN my session context should be maintained through the CARDDEMO-COMMAREA</li> <li>System should validate that input is numeric, not zero, and within the range of available options (1 to CDEMO-ADMIN-OPT-COUNT)</li> <li>System should transfer control to the selected program using CDEMO-ADMIN-OPT-PGMNAME(WS-OPTION) for valid selections</li> </ol>"},{"location":"backlog/user_stories/Administrative%20Menu%20Navigation.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that the system correctly routes to the appropriate program when a valid option number is entered</li> <li>Verify that the system displays a 'coming soon' message when a 'DUMMY' option is selected</li> <li>Verify that the system displays the appropriate error message when a non-numeric value is entered</li> <li>Verify that the system displays the appropriate error message when zero is entered</li> <li>Verify that the system displays the appropriate error message when a number outside the valid range is entered</li> <li>Verify that the system displays the appropriate error message when an invalid key is pressed</li> <li>Confirm that session context (user information, previous selections, etc.) is preserved when navigating between administrative functions</li> <li>Validate that all available administrative options are displayed correctly in the menu</li> <li>Verify that after displaying an error message, the system allows the user to try again with a valid selection</li> </ol>"},{"location":"backlog/user_stories/Administrative%20Menu%20Navigation.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    A[\"Administrator\"] --&gt; B[\"Administrative Menu Interface\"]\n    B --&gt; C{\"Input Validation\"}\n    C --&gt;|\"Valid Option\\n(Numeric &amp; In Range)\"| D[\"Option Router\"]\n    C --&gt;|\"Invalid Option\\n(Non-numeric/Zero/Out of Range)\"| E[\"Error Handler\"]\n    C --&gt;|\"Invalid Key\"| F[\"Key Error Handler\"]\n    D --&gt;|\"Regular Option\"| G[\"Program Transfer Controller\"]\n    D --&gt;|\"DUMMY Option\"| H[\"'Coming Soon' Message Display\"]\n    G --&gt; I1[\"Admin Function 1\"]\n    G --&gt; I2[\"Admin Function 2\"]\n    G --&gt; I3[\"Admin Function N\"]\n\n    J[\"Session Context\\n(CARDDEMO-COMMAREA)\"] &lt;--&gt;|\"Maintains State\"| G\n\n    E --&gt; B\n    F --&gt; B\n    H --&gt; B\n    I1 --&gt; B\n    I2 --&gt; B\n    I3 --&gt; B\n\n    classDef interface fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef validation fill:#bbf,stroke:#333,stroke-width:2px;\n    classDef controller fill:#bfb,stroke:#333,stroke-width:2px;\n    classDef function fill:#fbb,stroke:#333,stroke-width:2px;\n    classDef data fill:#ffd,stroke:#333,stroke-width:2px;\n\n    class B interface;\n    class C,E,F validation;\n    class D,G controller;\n    class I1,I2,I3 function;\n    class J data;</code></pre>"},{"location":"backlog/user_stories/Administrative%20Menu%20Navigation.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Administrative%20Menu%20Navigation.html#administrative-option-selection-processing","title":"Administrative Option Selection Processing","text":"<p>Processes user input for menu option selection and routes to the appropriate administrative function. The program validates that the input is numeric, not zero, and within the range of available options (1 to CDEMO-ADMIN-OPT-COUNT). If valid, it transfers control to the selected program using CDEMO-ADMIN-OPT-PGMNAME(WS-OPTION). For options marked as 'DUMMY', it displays a 'coming soon' message instead of transferring control. Error handling includes displaying appropriate messages for invalid selections ('Please enter a valid option number...') or invalid key presses ('Invalid key pressed'). The program maintains session context by passing the CARDDEMO-COMMAREA to the target program, ensuring continuity of the user session across administrative functions.</p>"},{"location":"backlog/user_stories/Administrative%20Menu%20Navigation.html#references","title":"References","text":"<ul> <li>COADM01C</li> </ul>"},{"location":"backlog/user_stories/Administrative%20Screen%20Navigation.html","title":"Administrative Screen Navigation","text":""},{"location":"backlog/user_stories/Administrative%20Screen%20Navigation.html#user-story","title":"User Story","text":"<p>As an administrator, I want to navigate efficiently between different administrative screens in the CardDemo application, so that I can perform my administrative tasks without losing context or having to restart workflows.</p>"},{"location":"backlog/user_stories/Administrative%20Screen%20Navigation.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am on any administrative screen WHEN I press PF3 THEN the system should return me to the previous screen while preserving my context</li> <li>GIVEN I am on any administrative screen WHEN I press PF4 THEN the system should clear the current screen while maintaining my session</li> <li>GIVEN I am on any administrative screen WHEN I press PF12 THEN the system should return me to the main administration menu</li> <li>GIVEN I navigate between screens WHEN context information is available in CARDDEMO-COMMAREA THEN this information should be preserved during navigation</li> <li>GIVEN I am returning to a previous screen WHEN CDEMO-TO-PROGRAM is specified THEN the system should navigate to that program ELSE it should default to COSGN00C</li> <li>System should track navigation origin using CDEMO-FROM-PROGRAM and CDEMO-FROM-TRANID fields to enable proper return navigation</li> </ol>"},{"location":"backlog/user_stories/Administrative%20Screen%20Navigation.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that pressing PF3 from a secondary administrative screen returns the user to the previous screen with all context data preserved</li> <li>Verify that pressing PF4 clears the current screen's input fields while maintaining the user's session and position in the application</li> <li>Verify that pressing PF12 from any depth in the administrative screens returns the user directly to the main administration menu</li> <li>Confirm navigation correctly handles the CDEMO-TO-PROGRAM field by navigating to the specified program when provided</li> <li>Confirm navigation defaults to COSGN00C when CDEMO-TO-PROGRAM is not specified</li> <li>Validate that CDEMO-FROM-PROGRAM and CDEMO-FROM-TRANID are correctly updated during each navigation action</li> <li>Verify that a complete navigation path (going through multiple screens and returning) maintains proper context throughout the journey</li> </ol>"},{"location":"backlog/user_stories/Administrative%20Screen%20Navigation.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    Admin[\"Administrator\"]\n    UI[\"Administrative Screens\"]\n    NavController[\"Navigation Controller\"]\n    ContextManager[\"Context Manager\"]\n    CommArea[\"CARDDEMO-COMMAREA\"]\n\n    subgraph \"CardDemo Application\"\n        UI\n        NavController\n        ContextManager\n        CommArea\n\n        subgraph \"Navigation Triggers\"\n            PF3[\"PF3 Key\\n(Return to Previous)\"]\n            PF4[\"PF4 Key\\n(Clear Screen)\"]\n            PF12[\"PF12 Key\\n(Return to Main Menu)\"]\n        end\n\n        subgraph \"Navigation State\"\n            FromProgram[\"CDEMO-FROM-PROGRAM\"]\n            FromTranid[\"CDEMO-FROM-TRANID\"]\n            ToProgram[\"CDEMO-TO-PROGRAM\"]\n        end\n    end\n\n    Admin --&gt; UI\n    UI --&gt; NavController\n\n    PF3 --&gt; NavController\n    PF4 --&gt; NavController\n    PF12 --&gt; NavController\n\n    NavController --&gt; ContextManager\n    ContextManager &lt;--&gt; CommArea\n\n    FromProgram &lt;--&gt; NavController\n    FromTranid &lt;--&gt; NavController\n    ToProgram --&gt; NavController\n\n    NavController --&gt; UI</code></pre>"},{"location":"backlog/user_stories/Administrative%20Screen%20Navigation.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Administrative%20Screen%20Navigation.html#administrative-navigation","title":"Administrative Navigation","text":"<p>This subtask manages navigation between different administrative screens in the CardDemo application. It provides functionality to return to previous screens (PF3), clear the current screen (PF4), and return to the main administration menu (PF12). The navigation logic preserves context between screens by maintaining information in the communication area (CARDDEMO-COMMAREA). When returning to a previous screen, the system passes control to the appropriate program stored in CDEMO-TO-PROGRAM (defaulting to COSGN00C if not specified). The component tracks the origin of navigation using CDEMO-FROM-PROGRAM and CDEMO-FROM-TRANID fields to enable proper return navigation. This creates a consistent navigation experience throughout the administrative interface of the application.</p>"},{"location":"backlog/user_stories/Administrative%20Screen%20Navigation.html#references","title":"References","text":"<ul> <li>COUSR03C</li> </ul>"},{"location":"backlog/user_stories/Administrative%20Session%20Management.html","title":"Administrative Session Management","text":""},{"location":"backlog/user_stories/Administrative%20Session%20Management.html#user-story","title":"User Story","text":"<p>As an administrative user, I want my session context to be maintained throughout my navigation of the CardDemo system, so that I can efficiently perform administrative tasks without losing my work context.</p>"},{"location":"backlog/user_stories/Administrative%20Session%20Management.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN a new user accessing the administrative system WHEN the system detects no existing session (EIBCALEN=0) THEN the user should be redirected to the sign-on screen (COSGN00C)</li> <li>GIVEN a user with an active administrative session WHEN navigating between different screens THEN the system should maintain their session context through the CARDDEMO-COMMAREA</li> <li>GIVEN a user in any administrative screen WHEN pressing the PF3 key THEN the system should return the user to the sign-on screen</li> <li>GIVEN a user navigating from one program to another WHEN the transition occurs THEN the system should store the current transaction ID ('CA00') and program name ('COADM01C') in the commarea to enable proper return navigation</li> <li>System should provide consistent navigation patterns across all administrative screens</li> <li>Feature must ensure session state is preserved during all supported navigation flows</li> </ol>"},{"location":"backlog/user_stories/Administrative%20Session%20Management.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that a new user with no existing session is automatically redirected to the sign-on screen</li> <li>Verify that user context information is properly stored in and retrieved from the CARDDEMO-COMMAREA during navigation</li> <li>Confirm PF3 key functionality correctly returns users to the sign-on screen from any administrative screen</li> <li>Validate that when transferring between programs, the transaction ID and program name are correctly stored in the commarea</li> <li>Verify that after completing a transaction and returning to a previous screen, all relevant context information is preserved</li> <li>Confirm the system handles session timeout scenarios appropriately by redirecting to the sign-on screen</li> <li>Test navigation flow through multiple screens to ensure consistent behavior and context preservation</li> </ol>"},{"location":"backlog/user_stories/Administrative%20Session%20Management.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"Administrative User\"] --&gt;|\"Accesses\"| UI[\"CardDemo UI\"]\n    UI --&gt;|\"No session\\n(EIBCALEN=0)\"| SignOn[\"Sign-On Screen\\n(COSGN00C)\"]\n    UI --&gt;|\"Active session\"| AdminScreens[\"Administrative Screens\\n(COADM01C, etc.)\"]\n\n    subgraph SessionManagement[\"Session Management\"]\n        CommArea[\"CARDDEMO-COMMAREA\"]\n        SessionState[\"Session Context\"]\n        NavHistory[\"Navigation History\\n(Transaction ID, Program Name)\"]\n    end\n\n    AdminScreens --&gt;|\"Store context\"| CommArea\n    CommArea --&gt;|\"Restore context\"| AdminScreens\n    AdminScreens --&gt;|\"Store 'CA00' &amp; 'COADM01C'\"| NavHistory\n    NavHistory --&gt;|\"Enable return navigation\"| AdminScreens\n\n    AdminScreens --&gt;|\"PF3 key pressed\"| SignOn\n    SignOn --&gt;|\"Authentication\"| AdminScreens\n\n    SessionState &lt;--&gt;|\"Maintain during\\nnavigation\"| CommArea</code></pre>"},{"location":"backlog/user_stories/Administrative%20Session%20Management.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Administrative%20Session%20Management.html#administrative-session-management_1","title":"Administrative Session Management","text":"<p>Manages the administrative user session context and navigation flow. The program maintains session state through the CARDDEMO-COMMAREA, which tracks program flow and user context. It handles session initialization (when EIBCALEN=0) by redirecting to the sign-on screen (COSGN00C). The program supports navigation between screens with PF3 key functionality to return to the sign-on screen. When transferring to another program, it stores the current transaction ID ('CA00') and program name ('COADM01C') in the commarea to enable proper return navigation. This ensures users can navigate through the administrative interface while maintaining their session context and provides a consistent way to exit back to the sign-on screen.</p>"},{"location":"backlog/user_stories/Administrative%20Session%20Management.html#references","title":"References","text":"<ul> <li>COADM01C</li> </ul>"},{"location":"backlog/user_stories/Automated%20Interest%20Transaction%20Recording.html","title":"Automated Interest Transaction Recording","text":""},{"location":"backlog/user_stories/Automated%20Interest%20Transaction%20Recording.html#user-story","title":"User Story","text":"<p>As an account manager, I want the system to automatically generate and record interest transactions, so that there is a complete and transparent audit trail of all interest charges applied to customer accounts.</p>"},{"location":"backlog/user_stories/Automated%20Interest%20Transaction%20Recording.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN an account has accrued interest charges WHEN the monthly interest calculation process runs THEN transaction records should be created for each interest charge</li> <li>GIVEN an interest transaction is being created WHEN the system generates the transaction ID THEN it should follow the format of current date plus sequential suffix</li> <li>GIVEN an interest transaction is being created WHEN the system assigns transaction codes THEN it should use type code '01' and category code '05'</li> <li>GIVEN an interest transaction is being created WHEN the system sets the transaction source THEN it should be marked as 'System'</li> <li>GIVEN an interest transaction is being created WHEN the system generates the description THEN it should include 'Int. for a/c' followed by the account ID</li> <li>GIVEN an interest transaction is being created WHEN the system sets the transaction amount THEN it should equal the calculated monthly interest</li> <li>GIVEN an interest transaction is being created WHEN the system associates a card number THEN it should retrieve it from the cross-reference file</li> <li>GIVEN an interest transaction is being created WHEN the system sets timestamps THEN both original and processing timestamps should be set to the current time</li> <li>GIVEN an error occurs during transaction writing WHEN the system handles the error THEN it should record specific status codes and error messages</li> </ol>"},{"location":"backlog/user_stories/Automated%20Interest%20Transaction%20Recording.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that transaction records are created with unique IDs when interest is calculated for multiple accounts</li> <li>Confirm that transaction descriptions correctly include the account ID in the format 'Int. for a/c [account ID]'</li> <li>Validate that transaction amounts match the calculated interest amounts from the interest calculation process</li> <li>Verify that all required transaction fields (ID, type, category, source, description, amount, card number, timestamps) are populated correctly</li> <li>Test error handling by simulating file access errors during transaction writing</li> <li>Verify that transactions appear in the transaction output file after successful processing</li> <li>Confirm that the card number in the transaction record matches the one in the cross-reference file for the given account</li> <li>Test boundary conditions such as zero interest amounts and maximum possible interest amounts</li> <li>Validate that timestamps are recorded in the correct format and reflect the actual processing time</li> </ol>"},{"location":"backlog/user_stories/Automated%20Interest%20Transaction%20Recording.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    subgraph \"Monthly Process\"\n        A[\"Scheduled Interest Calculation Job\"]\n    end\n\n    subgraph \"Core System Components\"\n        B[\"Interest Calculation Engine\"]\n        C[\"Transaction Generator\"]\n        D[\"Error Handler\"]\n    end\n\n    subgraph \"Data Stores\"\n        E[\"Account Database\"]\n        F[\"Transaction Repository\"]\n        G[\"Cross-Reference File\"]\n        H[\"Error Log\"]\n    end\n\n    A --&gt; B\n    B --&gt; |\"Retrieves account balances\"| E\n    B --&gt; |\"Calculates interest\"| C\n    C --&gt; |\"Retrieves card numbers\"| G\n    C --&gt; |\"Generates transaction records\\n(ID, codes, source, description, amount)\"| F\n    C --&gt; |\"Error during processing\"| D\n    D --&gt; |\"Records error details\"| H\n\n    style A fill:#f9d5e5,stroke:#333,stroke-width:1px\n    style B fill:#eeeeee,stroke:#333,stroke-width:1px\n    style C fill:#eeeeee,stroke:#333,stroke-width:1px\n    style D fill:#eeeeee,stroke:#333,stroke-width:1px\n    style E fill:#d5e8d4,stroke:#333,stroke-width:1px\n    style F fill:#d5e8d4,stroke:#333,stroke-width:1px\n    style G fill:#d5e8d4,stroke:#333,stroke-width:1px\n    style H fill:#d5e8d4,stroke:#333,stroke-width:1px</code></pre>"},{"location":"backlog/user_stories/Automated%20Interest%20Transaction%20Recording.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Automated%20Interest%20Transaction%20Recording.html#interest-transaction-generation","title":"Interest Transaction Generation","text":"<p>This subtask creates transaction records for all calculated interest charges, providing an audit trail of interest applied to accounts. For each interest charge calculated, the program generates a transaction record with:</p> <ol> <li>A unique transaction ID composed of the current date and a sequential suffix</li> <li>Transaction type code '01' and category code '05' indicating an interest charge</li> <li>Source set to 'System'</li> <li>Description that includes 'Int. for a/c' followed by the account ID</li> <li>Transaction amount equal to the calculated monthly interest</li> <li>The associated card number from the cross-reference file</li> <li>Current timestamp for both original and processing timestamps</li> </ol> <p>The transaction records are written to the transaction output file and serve as an audit trail for all interest charges. This provides transparency for both internal accounting and customer-facing statements. The subtask handles errors during transaction writing with specific status codes and error messages.</p>"},{"location":"backlog/user_stories/Automated%20Interest%20Transaction%20Recording.html#references","title":"References","text":"<ul> <li>CBACT04C</li> </ul>"},{"location":"backlog/user_stories/Bill%20Payment%20Screen%20Interface%20Management.html","title":"Bill Payment Screen Interface Management","text":""},{"location":"backlog/user_stories/Bill%20Payment%20Screen%20Interface%20Management.html#user-story","title":"User Story","text":"<p>As a payment system user, I want an intuitive bill payment interface that guides me through the payment process, so that I can complete bill payments accurately and efficiently.</p>"},{"location":"backlog/user_stories/Bill%20Payment%20Screen%20Interface%20Management.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I access the bill payment screen WHEN the screen initializes THEN all fields should be cleared and the cursor positioned at the first input field</li> <li>GIVEN I am on the bill payment screen WHEN I enter payment information and submit THEN the system should validate all required fields contain valid values</li> <li>GIVEN I have entered valid payment information WHEN I submit the payment THEN I should see a confirmation screen showing the payment amount and requesting confirmation</li> <li>GIVEN I confirm a payment WHEN the transaction completes successfully THEN I should see a success message with the transaction ID displayed in green</li> <li>GIVEN I am on the bill payment screen WHEN I press PF3 THEN the system should return me to the previous screen</li> <li>GIVEN I am on the bill payment screen WHEN I press PF4 THEN all input fields should be reset</li> <li>GIVEN I am on the bill payment screen WHEN I press an invalid function key THEN an 'Invalid key pressed' error message should display</li> <li>GIVEN I submit a payment with invalid data WHEN validation occurs THEN the cursor should position at the error field with a contextual error message</li> <li>GIVEN I attempt a payment WHEN a system-level error occurs THEN an appropriate technical error message should display</li> </ol>"},{"location":"backlog/user_stories/Bill%20Payment%20Screen%20Interface%20Management.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that all fields are cleared and cursor is positioned correctly when the bill payment screen is first accessed</li> <li>Verify that validation occurs for all required fields and appropriate error messages display for invalid data</li> <li>Confirm the confirmation screen displays the correct payment amount and requires explicit confirmation</li> <li>Validate that a successful payment displays a transaction ID in green color</li> <li>Verify that pressing PF3 returns the user to the previous screen with no changes processed</li> <li>Confirm that pressing PF4 clears all input fields on the bill payment screen</li> <li>Verify that pressing an undefined function key displays the 'Invalid key pressed' message</li> <li>Test field-level error handling by entering invalid data in each field and confirming appropriate cursor positioning and error messages</li> <li>Simulate system-level errors (e.g., file operation failures) and verify appropriate error messages are displayed</li> <li>Verify the integration with the common header information and application navigation framework</li> </ol>"},{"location":"backlog/user_stories/Bill%20Payment%20Screen%20Interface%20Management.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"Payment System User\"] --&gt; UI[\"Bill Payment Interface\"]\n\n    subgraph Frontend[\"User Interface Layer\"]\n        UI --&gt; InputValidation[\"Input Validation\"]\n        UI --&gt; Navigation[\"Navigation Controls (PF Keys)\"]\n        UI --&gt; FormReset[\"Form Reset Functionality\"]\n    end\n\n    subgraph BusinessLogic[\"Business Logic Layer\"]\n        InputValidation --&gt; PaymentProcessor[\"Payment Processor\"]\n        PaymentProcessor --&gt; TransactionManager[\"Transaction Manager\"]\n    end\n\n    subgraph Presentation[\"Presentation Layer\"]\n        TransactionManager --&gt; ConfirmationScreen[\"Confirmation Screen\"]\n        TransactionManager --&gt; SuccessScreen[\"Success Screen\"]\n        TransactionManager --&gt; ErrorHandler[\"Error Handler\"]\n    end\n\n    subgraph Backend[\"Backend Systems\"]\n        TransactionManager --&gt; PaymentGateway[\"Payment Gateway\"]\n        PaymentGateway --&gt; TransactionDB[\"Transaction Database\"]\n    end\n\n    ErrorHandler --&gt; UI\n    SuccessScreen --&gt; UI\n    ConfirmationScreen --&gt; PaymentProcessor\n    Navigation --&gt; UI\n    FormReset --&gt; UI</code></pre>"},{"location":"backlog/user_stories/Bill%20Payment%20Screen%20Interface%20Management.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Bill%20Payment%20Screen%20Interface%20Management.html#bill-payment-screen-management","title":"Bill Payment Screen Management","text":"<p>This subtask manages the bill payment screen interface, handling display and user interaction. Key functionality includes:</p> <ol> <li>Business Rules:</li> <li>Screen initialization: Clears fields and sets initial cursor position when first accessed</li> <li>Field validation: Ensures required fields are populated and contain valid values</li> <li>Confirmation display: Shows payment amount and requires confirmation before processing</li> <li> <p>Success messaging: Displays transaction ID upon successful payment</p> </li> <li> <p>Edge Cases:</p> </li> <li>Screen navigation: Handles PF3 to return to previous screen</li> <li>Screen clearing: Handles PF4 to reset all input fields</li> <li> <p>Invalid function keys: Shows error message 'Invalid key pressed'</p> </li> <li> <p>Error Handling:</p> </li> <li>Field-level errors: Positions cursor at error field and displays contextual message</li> <li>System-level errors: Displays technical error messages when file operations fail</li> <li> <p>Visual indicators: Uses color coding (DFHGREEN) for success messages</p> </li> <li> <p>Dependencies:</p> </li> <li>Uses standard CICS screen handling mechanisms (SEND/RECEIVE MAP)</li> <li>Relies on common header information (POPULATE-HEADER-INFO)</li> <li>Integrates with application navigation framework through RETURN-TO-PREV-SCREEN</li> </ol>"},{"location":"backlog/user_stories/Bill%20Payment%20Screen%20Interface%20Management.html#references","title":"References","text":"<ul> <li>COBIL00C</li> </ul>"},{"location":"backlog/user_stories/Bill%20Payment%20Transaction%20Recording.html","title":"Bill Payment Transaction Recording","text":""},{"location":"backlog/user_stories/Bill%20Payment%20Transaction%20Recording.html#user-story","title":"User Story","text":"<p>As a payment system operator, I want all bill payment transactions to be automatically recorded with unique identifiers and standardized categorization, so that we maintain a complete and consistent audit trail of all customer bill payments.</p>"},{"location":"backlog/user_stories/Bill%20Payment%20Transaction%20Recording.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN a customer completes a bill payment WHEN the transaction is processed THEN a permanent transaction record is created with a unique sequential ID</li> <li>GIVEN a bill payment transaction WHEN the record is created THEN it must be categorized with type code '02', category code 2, source 'POS TERM', and description 'BILL PAYMENT - ONLINE'</li> <li>GIVEN a bill payment transaction WHEN the record is created THEN it must include standard merchant information (ID: 999999999, Name: 'BILL PAYMENT')</li> <li>GIVEN a bill payment transaction WHEN the record is created THEN it must include the current timestamp, account information, and payment details</li> <li>GIVEN no previous transactions exist WHEN a new bill payment transaction is processed THEN the system should handle it as the first transaction and assign the initial ID correctly</li> <li>GIVEN a file access error occurs WHEN attempting to read or write transaction records THEN specific error messages must be provided to identify the failure point</li> </ol>"},{"location":"backlog/user_stories/Bill%20Payment%20Transaction%20Recording.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that a unique sequential transaction ID is generated when processing a bill payment transaction</li> <li>Confirm transaction records contain all required fields: transaction type '02', category code 2, source 'POS TERM', description 'BILL PAYMENT - ONLINE', merchant ID 999999999, and merchant name 'BILL PAYMENT'</li> <li>Validate that transaction timestamps accurately reflect the actual transaction time</li> <li>Verify that the system correctly handles the first transaction scenario when no previous transaction records exist</li> <li>Confirm the system detects and handles potential duplicate transaction IDs</li> <li>Test error handling by simulating file access errors and verifying appropriate error messages are displayed</li> <li>Validate that account and card information is correctly retrieved from ACCTDAT and CXACAIX files and included in the transaction record</li> <li>Verify that multiple concurrent transactions are processed correctly with unique IDs</li> </ol>"},{"location":"backlog/user_stories/Bill%20Payment%20Transaction%20Recording.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    Customer[\"Customer\"] --&gt;|\"Initiates Bill Payment\"| PaymentUI[\"Payment Interface\"]\n    PaymentUI --&gt;|\"Submits Payment\"| PaymentProcessor[\"Payment Processor\"]\n\n    PaymentProcessor --&gt;|\"Process Transaction\"| TransactionManager[\"Transaction Manager\"]\n\n    TransactionManager --&gt;|\"Generate Unique ID\"| IDGenerator[\"ID Generator\"]\n    IDGenerator --&gt;|\"Return Sequential ID\"| TransactionManager\n\n    TransactionManager --&gt;|\"Categorize Transaction\"| CategoryService[\"Categorization Service\"]\n    CategoryService --&gt;|\"Apply Standard Codes\"| TransactionManager\n\n    TransactionManager --&gt;|\"Record Transaction\"| AuditTrail[\"Audit Trail Repository\"]\n    AuditTrail --&gt;|\"Confirm Storage\"| TransactionManager\n\n    TransactionManager --&gt;|\"Transaction Result\"| PaymentProcessor\n    PaymentProcessor --&gt;|\"Payment Confirmation\"| PaymentUI\n\n    TransactionManager --&gt;|\"Error Handling\"| ErrorLogger[\"Error Logging Service\"]\n    ErrorLogger --&gt;|\"Error Details\"| TransactionManager\n\n    subgraph \"Transaction Record\"\n        TxnData[\"Transaction Data:\n        - Unique ID\n        - Type Code: 02\n        - Category Code: 2\n        - Source: POS TERM\n        - Description: BILL PAYMENT - ONLINE\n        - Merchant ID: 999999999\n        - Merchant Name: BILL PAYMENT\n        - Timestamp\n        - Account Info\n        - Payment Details\"]\n    end\n\n    TransactionManager --- TxnData</code></pre>"},{"location":"backlog/user_stories/Bill%20Payment%20Transaction%20Recording.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Bill%20Payment%20Transaction%20Recording.html#transaction-record-creation","title":"Transaction Record Creation","text":"<p>This subtask creates a permanent record of bill payment transactions in the system. Key functionality includes:</p> <ol> <li>Business Rules:</li> <li>Transaction ID generation: Creates unique sequential transaction IDs</li> <li>Transaction categorization: Sets transaction type code '02' and category code 2</li> <li>Transaction source tracking: Records source as 'POS TERM'</li> <li>Transaction description: Sets description as 'BILL PAYMENT - ONLINE'</li> <li> <p>Merchant information: Sets standard values for bill payments (ID: 999999999, Name: 'BILL PAYMENT')</p> </li> <li> <p>Process Flow:</p> </li> <li>Retrieves highest existing transaction ID by reading the last record</li> <li>Increments ID by 1 to create new unique ID</li> <li>Populates transaction record with payment details and account information</li> <li>Captures current timestamp for transaction dating</li> <li> <p>Writes new record to transaction file</p> </li> <li> <p>Edge Cases:</p> </li> <li>First transaction: Handles case where no previous transactions exist</li> <li> <p>Duplicate ID: Detects and handles duplicate transaction IDs</p> </li> <li> <p>Error Handling:</p> </li> <li>File access errors: Provides specific error messages for read/write failures</li> <li> <p>Record creation failures: Reports specific error with 'Unable to Add Bill pay Transaction...'</p> </li> <li> <p>Dependencies:</p> </li> <li>Requires access to TRANSACT file for reading highest ID and writing new record</li> <li>Needs account and card information from ACCTDAT and CXACAIX files</li> <li>Uses system timestamp functions for transaction dating</li> </ol>"},{"location":"backlog/user_stories/Bill%20Payment%20Transaction%20Recording.html#references","title":"References","text":"<ul> <li>COBIL00C</li> </ul>"},{"location":"backlog/user_stories/Consistent%20Application%20Navigation%20Framework.html","title":"Consistent Application Navigation Framework","text":""},{"location":"backlog/user_stories/Consistent%20Application%20Navigation%20Framework.html#user-story","title":"User Story","text":"<p>As a CardDemo application user, I want a consistent navigation system across all screens, so that I can efficiently move between different functions while maintaining my work context.</p>"},{"location":"backlog/user_stories/Consistent%20Application%20Navigation%20Framework.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am on any application screen WHEN I press PF3 THEN I should be returned to the previous screen or main menu if previous screen is not specified</li> <li>GIVEN I am on a transaction screen WHEN I press PF4 THEN all input fields should be cleared while maintaining the screen context</li> <li>GIVEN I am on a transaction-related screen WHEN I press PF5 THEN I should be navigated to the transaction list screen</li> <li>GIVEN I am on a screen WHEN I press PF7 THEN I should navigate to the previous page of data if available</li> <li>GIVEN I am on a screen WHEN I press PF8 THEN I should navigate to the next page of data if available</li> <li>GIVEN I press an invalid function key WHEN on any screen THEN an appropriate error message should be displayed without changing screens</li> <li>System should maintain navigation context in the CARDDEMO-COMMAREA including current program, transaction ID, and destination program</li> <li>System should handle first-time entry to screens (when EIBCALEN = 0) by redirecting to appropriate screens as needed</li> <li>Feature must pass relevant data between screens to maintain user context throughout the navigation flow</li> </ol>"},{"location":"backlog/user_stories/Consistent%20Application%20Navigation%20Framework.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that pressing PF3 from the transaction detail screen returns to the transaction list screen</li> <li>Verify that pressing PF3 from the transaction list screen returns to the main menu</li> <li>Verify that pressing PF4 on a transaction screen with populated fields clears all input fields</li> <li>Verify that pressing PF5 from any transaction-related screen navigates to the transaction list screen</li> <li>Verify that pressing PF7 on a multi-page list navigates to the previous page</li> <li>Verify that pressing PF8 on a multi-page list navigates to the next page</li> <li>Verify that pressing an undefined function key displays 'Invalid key' message</li> <li>Confirm navigation maintains selected transaction IDs and other context when moving between screens</li> <li>Validate first-time entry to the application properly redirects to the sign-on screen</li> <li>Validate that the COMMAREA correctly stores and retrieves navigation context between screen transitions</li> </ol>"},{"location":"backlog/user_stories/Consistent%20Application%20Navigation%20Framework.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"Application User\"]\n    UI[\"CardDemo UI Layer\"]\n    NavController[\"Navigation Controller\"]\n    ContextManager[\"Context Manager\"]\n    Screens[\"Application Screens\"]\n    COMMAREA[\"CARDDEMO-COMMAREA\"]\n\n    User --&gt; UI\n    UI --&gt; NavController\n    NavController --&gt; Screens\n    NavController &lt;--&gt; ContextManager\n    ContextManager &lt;--&gt; COMMAREA\n\n    subgraph \"Navigation System\"\n        NavController\n        ContextManager\n    end\n\n    subgraph \"Screen Types\"\n        Screens --&gt; TransactionScreens[\"Transaction Screens\"]\n        Screens --&gt; ListScreens[\"List Screens\"]\n        Screens --&gt; DataPaginationScreens[\"Paginated Data Screens\"]\n    end\n\n    subgraph \"Function Keys\"\n        FKeys[\"Function Keys (PF3, PF4, PF5, PF7, PF8)\"] --&gt; NavController\n    end\n\n    subgraph \"Context Data\"\n        COMMAREA --&gt; CurrentProgram[\"Current Program\"]\n        COMMAREA --&gt; TransactionID[\"Transaction ID\"]\n        COMMAREA --&gt; DestProgram[\"Destination Program\"]\n        COMMAREA --&gt; UserContext[\"User Work Context\"]\n    end</code></pre>"},{"location":"backlog/user_stories/Consistent%20Application%20Navigation%20Framework.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Consistent%20Application%20Navigation%20Framework.html#screen-navigation-control","title":"Screen Navigation Control","text":"<p>This subtask manages navigation between different screens in the CardDemo application. It handles function key processing for PF3 (return to previous screen), PF7 (page up), and PF8 (page down). When PF3 is pressed, the system transfers control to COMEN01C (main menu). The subtask maintains navigation context in the CARDDEMO-COMMAREA, storing information about the current program (WS-PGMNAME = 'COTRN00C'), transaction ID (WS-TRANID = 'CT00'), and destination program (CDEMO-TO-PROGRAM). For invalid key presses, it displays an error message ('Invalid key') and maintains the current screen. The subtask also handles the initial entry to the screen, checking if EIBCALEN = 0 (first entry) and redirecting to COSGN00C if needed. This ensures proper flow between application screens and maintains user session state throughout the navigation process.</p>"},{"location":"backlog/user_stories/Consistent%20Application%20Navigation%20Framework.html#references","title":"References","text":"<ul> <li>COTRN00C</li> </ul>"},{"location":"backlog/user_stories/Consistent%20Application%20Navigation%20Framework.html#transaction-screen-navigation","title":"Transaction Screen Navigation","text":"<p>This subtask manages navigation between transaction-related screens in the CardDemo application. It implements a consistent navigation framework that allows users to move between transaction detail view, transaction list, and main menu screens. Business rules include: 1) PF3 key returns to the previous screen based on the stored 'from program' value, defaulting to COMEN01C if not specified; 2) PF4 key clears the current screen by initializing all input fields while maintaining the screen context; 3) PF5 key navigates specifically to the transaction list screen (COTRN00C); 4) The system maintains context between screens by passing relevant data in the COMMAREA, including selected transaction IDs and pagination information; 5) Invalid key presses are handled with an appropriate error message. This navigation framework ensures users can efficiently move between different transaction-related functions while maintaining their work context. The component depends on the COMMAREA structure for passing data between programs and integrates with COTRN00C, COMEN01C, and potentially other screens in the application flow.</p>"},{"location":"backlog/user_stories/Consistent%20Application%20Navigation%20Framework.html#references_1","title":"References","text":"<ul> <li>COTRN01C</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html","title":"Credit Card Portfolio Management","text":""},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#user-story","title":"User Story","text":"<p>As a credit card manager, I want to view, navigate through, and update credit card information in a secure and controlled manner, so that I can efficiently manage the credit card portfolio while maintaining data integrity.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am logged in as an admin user WHEN I access the credit card listing THEN I should see all cards in the system with pagination (7 cards per page)</li> <li>GIVEN I am logged in as a regular user WHEN I access the credit card listing THEN I should only see cards associated with my account</li> <li>GIVEN I am viewing the card listing WHEN I enter an 11-digit account ID and/or 16-digit card number in the filter fields THEN the system should display only matching cards</li> <li>GIVEN I am viewing the card listing WHEN I select a card with 'S' THEN I should be taken to the card detail view</li> <li>GIVEN I am viewing the card listing WHEN I select a card with 'U' THEN I should be taken to the card update screen</li> <li>GIVEN I am on any page of the card listing WHEN I press PF7/PF8 THEN I should navigate to previous/next pages respectively if available</li> <li>GIVEN I am updating a card WHEN I modify the embossed name, expiration date, or status THEN the system should validate my inputs according to business rules</li> <li>GIVEN I am updating a card WHEN another user has modified the same record THEN I should be notified and shown the updated data before proceeding</li> <li>GIVEN I am updating a card WHEN I submit valid changes THEN the system should successfully update the card record in the database</li> </ol>"},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that admin users can view all cards while regular users can only view cards associated with their account</li> <li>Verify that filtering by account ID (11-digit) and/or card number (16-digit) displays only matching records</li> <li>Verify that pagination works correctly, showing 7 cards per page with proper navigation between pages</li> <li>Verify that selecting a card with 'S' navigates to the card detail view and 'U' navigates to the update screen</li> <li>Verify that appropriate error messages are displayed when invalid filter criteria are entered</li> <li>Verify that card embossed name validation rejects non-alphabetic characters (except spaces)</li> <li>Verify that card status can only be set to 'Y' or 'N'</li> <li>Verify that expiration month must be between 1-12 and year between 1950-2099</li> <li>Verify that attempting to update a record that has been modified by another user shows the updated data and requires review</li> <li>Verify that the system properly locks records during updates to prevent concurrent modifications</li> <li>Verify that all error messages are displayed correctly and the cursor is positioned at the field requiring correction</li> <li>Verify that navigation using function keys (PF3, PF7, PF8) works as expected across all screens</li> </ol>"},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"User (Admin/Regular)\"] --&gt; |\"Authenticates\"| Auth[\"Authentication System\"]\n    Auth --&gt; |\"Authorizes\"| UI[\"Credit Card Management UI\"]\n\n    subgraph \"Frontend Components\"\n        UI --&gt; |\"Displays\"| CardList[\"Card Listing View\"]\n        UI --&gt; |\"Navigates to\"| CardDetail[\"Card Detail View\"]\n        UI --&gt; |\"Navigates to\"| CardUpdate[\"Card Update Screen\"]\n        CardList --&gt; |\"Pagination\\nPF7/PF8\"| CardList\n        CardList --&gt; |\"Filter by\\nAccount ID/Card Number\"| CardList\n        CardList --&gt; |\"Select with 'S'\"| CardDetail\n        CardList --&gt; |\"Select with 'U'\"| CardUpdate\n    end\n\n    subgraph \"Backend Services\"\n        AuthZ[\"Authorization Service\"] --&gt; |\"Enforces\\nAccess Control\"| CardService[\"Card Management Service\"]\n        CardService --&gt; |\"CRUD Operations\"| Validation[\"Validation Service\"]\n        CardService --&gt; |\"Concurrent Update\\nDetection\"| LockManager[\"Lock Management\"]\n    end\n\n    UI --&gt; |\"Requests\"| AuthZ\n    CardService --&gt; |\"Queries/Updates\"| DB[\"Credit Card Database\"]\n\n    classDef frontend fill:#d0e0ff,stroke:#0066cc\n    classDef backend fill:#ffe0d0,stroke:#cc6600\n    classDef database fill:#d0ffe0,stroke:#00cc66\n\n    class User,Auth,UI,CardList,CardDetail,CardUpdate frontend\n    class AuthZ,CardService,Validation,LockManager backend\n    class DB database</code></pre>"},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#credit-card-listing","title":"Credit Card Listing","text":"<p>This subtask provides a paginated list view of credit cards with filtering capabilities. It implements role-based access control where admin users can view all cards while regular users can only view cards associated with their account. The component displays up to 7 card records per screen with pagination controls (PF7/PF8 keys for backward/forward navigation). Users can filter cards by account ID (11-digit number) and/or card number (16-digit number). Each displayed card shows the account number, card number, and card status. The component validates input filters, ensuring account IDs are 11-digit numeric values and card numbers are 16-digit numeric values. Error messages are displayed for invalid inputs. Users can select individual cards with 'S' to view details or 'U' to update card information, but only one card can be selected at a time. The component maintains pagination context between screens, tracking the first and last card on each page to enable proper navigation.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#references","title":"References","text":"<ul> <li>COCRDLIC</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#credit-card-navigation","title":"Credit Card Navigation","text":"<p>This subtask manages navigation between different screens in the credit card management workflow. It handles user actions through function keys and selection inputs: PF3 returns to the main menu, PF7 navigates to the previous page of cards (if not on the first page), PF8 navigates to the next page (if more cards exist), and Enter processes card selections. When a user selects a card with 'S', they are transferred to the card detail view program (COCRDSLC). When a user selects a card with 'U', they are transferred to the card update program (COCRDUPC). The component maintains context between screens by storing the current page number, first and last card keys on the current page, and whether more pages exist. It provides appropriate feedback messages for navigation actions, such as 'NO PREVIOUS PAGES TO DISPLAY' when attempting to go back from the first page or 'NO MORE PAGES TO DISPLAY' when reaching the end of the record set.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#references_1","title":"References","text":"<ul> <li>COCRDLIC</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#credit-card-detail-update","title":"Credit Card Detail Update","text":"<p>This subtask allows users to update specific details of an existing credit card through a CICS transaction interface. Users can modify the embossed name on the card, the card's expiration date (month and year), and the card's active status (Y/N). The process follows a structured workflow: (1) The user provides account and card number to retrieve the existing card details; (2) The system displays the current card information; (3) The user makes desired changes; (4) The system validates the changes; (5) Upon confirmation, the system updates the card record in the database. Business rules include: embossed name must contain only alphabetic characters and spaces; card status must be either 'Y' or 'N'; expiration month must be between 1-12; expiration year must be between 1950-2099. The system implements optimistic concurrency control by checking if the record was modified by another user before committing changes. If another user has modified the record, the system retrieves the updated data and asks the user to review before making changes again. Error handling includes specific messages for validation failures (e.g., 'Card name can only contain alphabets and spaces'), record locking issues ('Could not lock record for update'), and concurrent update conflicts ('Record changed by someone else. Please review'). The component depends on the CARDDAT file for persistent storage and integrates with other components through a shared communication area.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#references_2","title":"References","text":"<ul> <li>COCRDUPC</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#credit-card-data-validation","title":"Credit Card Data Validation","text":"<p>This subtask handles the validation of credit card data before allowing updates to be committed to the database. It enforces business rules for each editable field: (1) Card embossed name validation - must be provided and can only contain alphabetic characters and spaces, with validation performed by converting all non-alphabetic characters to spaces and checking if any remain; (2) Card status validation - must be either 'Y' (active) or 'N' (inactive) with no other values permitted; (3) Expiration date validation - month must be numeric and between 1-12, year must be numeric and between 1950-2099. The system provides specific error messages for each validation failure and positions the cursor at the field requiring correction. The validation process is comprehensive, checking both for missing required fields and invalid data formats or values. Edge cases handled include empty fields (marked with asterisks on the screen) and non-numeric values in numeric fields. The component uses visual indicators (red highlighting) to draw attention to fields with validation errors.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#references_3","title":"References","text":"<ul> <li>COCRDUPC</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#credit-card-record-locking","title":"Credit Card Record Locking","text":"<p>This subtask manages the concurrency control mechanism for updating credit card records, ensuring data integrity when multiple users might be accessing the same record. It implements a pessimistic locking strategy during the update process by: (1) Reading the card record with UPDATE option to obtain a lock; (2) Verifying the record hasn't been changed since it was initially displayed to the user by comparing all field values; (3) If the record was changed, retrieving the updated values and notifying the user to review before proceeding; (4) If unchanged, applying the user's modifications and committing the update. The system handles several error scenarios: inability to obtain a lock ('Could not lock record for update'), detection of concurrent modifications ('Record changed by someone else. Please review'), and update failures after obtaining a lock ('Update of record failed'). This mechanism prevents data corruption from simultaneous updates and ensures users are working with the most current data before making changes.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Portfolio%20Management.html#references_4","title":"References","text":"<ul> <li>COCRDUPC</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Screen%20Navigation.html","title":"Credit Card Screen Navigation","text":""},{"location":"backlog/user_stories/Credit%20Card%20Screen%20Navigation.html#user-story","title":"User Story","text":"<p>As a credit card system user, I want to navigate efficiently between the credit card detail screen and other application screens, so that I can manage credit card information without losing context or having to re-enter data.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Screen%20Navigation.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am on the credit card detail screen WHEN I press PF3 THEN I should be returned to the previous screen (either credit card list or main menu)</li> <li>GIVEN I accessed the credit card detail screen from the credit card list screen WHEN I view the detail screen THEN the account and card number fields should be protected (read-only)</li> <li>GIVEN I accessed the credit card detail screen from a screen other than the list screen WHEN I view the detail screen THEN the account and card number fields should be unprotected (editable)</li> <li>GIVEN I navigate between screens WHEN I move through the application THEN the system should maintain context information (previous program, previous transaction ID)</li> <li>GIVEN I press PF3 to return to a previous screen WHEN the system processes my request THEN control should be passed to the appropriate program (COCRDLIC for card list or COMEN01C for main menu)</li> </ol>"},{"location":"backlog/user_stories/Credit%20Card%20Screen%20Navigation.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that pressing PF3 on the credit card detail screen returns the user to the credit card list when that was the previous screen</li> <li>Verify that pressing PF3 on the credit card detail screen returns the user to the main menu when that was the previous screen</li> <li>Confirm account and card number fields are read-only when accessing the detail screen from the credit card list screen</li> <li>Confirm account and card number fields are editable when accessing the detail screen from screens other than the list screen</li> <li>Validate that context information is preserved when navigating from the credit card list to the detail screen and back</li> <li>Validate that context information is preserved when navigating from the main menu to the detail screen and back</li> <li>Verify that all navigation paths maintain proper state and don't result in system errors or data loss</li> </ol>"},{"location":"backlog/user_stories/Credit%20Card%20Screen%20Navigation.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"User\"]\n    MainMenu[\"Main Menu\\n(COMEN01C)\"]\n    CardList[\"Credit Card List\\n(COCRDLIC)\"]\n    CardDetail[\"Credit Card Detail Screen\"]\n    ContextManager[\"Context Management System\"]\n\n    User --&gt; MainMenu\n    User --&gt; CardList\n    User --&gt; CardDetail\n\n    MainMenu --&gt; |\"Navigate to\"| CardDetail\n    CardList --&gt; |\"Navigate to\"| CardDetail\n\n    CardDetail --&gt; |\"PF3 (Return)\"| ContextManager\n\n    ContextManager --&gt; |\"Store context\\n(previous program, transaction ID)\"| ContextManager\n    ContextManager --&gt; |\"Return to previous screen\"| MainMenu\n    ContextManager --&gt; |\"Return to previous screen\"| CardList\n\n    subgraph \"Field Protection Logic\"\n        CardDetail --&gt; |\"Check access source\"| FieldController[\"Field Controller\"]\n        FieldController --&gt; |\"From list: Read-only\\nOther: Editable\"| CardDetail\n    end</code></pre>"},{"location":"backlog/user_stories/Credit%20Card%20Screen%20Navigation.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Credit%20Card%20Screen%20Navigation.html#credit-card-screen-navigation_1","title":"Credit Card Screen Navigation","text":"<p>This subtask manages navigation between the credit card detail screen and other screens in the CardDemo application. It handles PF key processing to enable users to navigate through the application. Navigation rules include: (1) PF3 key returns to the previous screen (either the credit card list screen or the main menu). (2) When coming from the credit card list screen (COCRDLIC), the account and card number fields are protected (read-only) as they are passed from the list screen. (3) When coming from other contexts, the account and card number fields are unprotected (editable) to allow user input. (4) The system maintains context information (previous program, previous transaction ID) to enable proper navigation flow. (5) When returning to a previous screen, the system passes control to the appropriate program (COCRDLIC for the card list or COMEN01C for the main menu). This subtask depends on the common communication area structure (CARDDEMO-COMMAREA) to maintain context information across screen transitions.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Screen%20Navigation.html#references","title":"References","text":"<ul> <li>COCRDSLC</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Search%20Functionality.html","title":"Credit Card Search Functionality","text":""},{"location":"backlog/user_stories/Credit%20Card%20Search%20Functionality.html#user-story","title":"User Story","text":"<p>As a credit card management user, I want to search for specific credit cards using account ID and/or card number filters, so that I can quickly locate and manage relevant card records.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Search%20Functionality.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am on the credit card management screen WHEN I enter a valid 11-digit account ID THEN the system displays only cards matching that account ID</li> <li>GIVEN I am on the credit card management screen WHEN I enter a valid 16-digit card number THEN the system displays only the card matching that number</li> <li>GIVEN I am on the credit card management screen WHEN I enter both a valid account ID and card number THEN the system displays only cards matching both criteria</li> <li>GIVEN I am on the credit card management screen WHEN I enter an invalid account ID (non-numeric or not 11 digits) THEN the system displays an error message 'ACCOUNT FILTER, IF SUPPLIED MUST BE A 11 DIGIT NUMBER'</li> <li>GIVEN I am on the credit card management screen WHEN I enter an invalid card number (non-numeric or not 16 digits) THEN the system displays an appropriate error message</li> <li>GIVEN I have entered search criteria WHEN no records match my search THEN the system displays 'NO RECORDS FOUND FOR THIS SEARCH CONDITION'</li> <li>GIVEN I have performed a search WHEN I navigate away from the page and return THEN my previous search criteria and results are maintained</li> </ol>"},{"location":"backlog/user_stories/Credit%20Card%20Search%20Functionality.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that entering a valid 11-digit account ID returns only matching cards</li> <li>Verify that entering a valid 16-digit card number returns only the matching card</li> <li>Verify that entering both valid account ID and card number returns cards matching both criteria</li> <li>Verify that entering a 10-digit account ID displays the appropriate error message</li> <li>Verify that entering non-numeric characters in the account ID field displays the appropriate error message</li> <li>Verify that entering a 15-digit card number displays the appropriate error message</li> <li>Verify that entering non-numeric characters in the card number field displays the appropriate error message</li> <li>Verify that searching with criteria that match no records displays the 'NO RECORDS FOUND' message</li> <li>Verify that search criteria persist when navigating between pages</li> <li>Verify that pressing Enter after entering search criteria triggers the search function</li> <li>Verify that clearing search fields and pressing Enter resets the search and shows all available cards</li> </ol>"},{"location":"backlog/user_stories/Credit%20Card%20Search%20Functionality.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"Credit Card Management User\"] --&gt; UI[\"Credit Card Management UI\"]\n    UI --&gt; SearchForm[\"Search Form Component\"]\n    SearchForm --&gt; Validation[\"Input Validation Service\"]\n    Validation --&gt; |\"Valid Input\"| SearchService[\"Card Search Service\"]\n    Validation --&gt; |\"Invalid Input\"| ErrorHandler[\"Error Handling Component\"]\n    ErrorHandler --&gt; UI\n    SearchService --&gt; CardDB[\"Credit Card Database\"]\n    CardDB --&gt; SearchService\n    SearchService --&gt; |\"Search Results\"| ResultsDisplay[\"Results Display Component\"]\n    ResultsDisplay --&gt; UI\n    SessionStorage[\"Session Storage\"] &lt;--&gt; UI\n\n    subgraph \"Core Search Functionality\"\n        SearchService\n        Validation\n        CardDB\n    end</code></pre>"},{"location":"backlog/user_stories/Credit%20Card%20Search%20Functionality.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Credit%20Card%20Search%20Functionality.html#credit-card-search","title":"Credit Card Search","text":"<p>This subtask enables users to search for specific credit cards using filtering criteria. Users can enter an account ID (11-digit number) and/or a card number (16-digit number) to narrow down the list of displayed cards. The search functionality validates inputs, ensuring account IDs are 11-digit numeric values and card numbers are 16-digit numeric values. If invalid data is entered, appropriate error messages are displayed (e.g., 'ACCOUNT FILTER, IF SUPPLIED MUST BE A 11 DIGIT NUMBER'). The search is applied when the user presses Enter, and the results are displayed in the card listing. If no records match the search criteria, a 'NO RECORDS FOUND FOR THIS SEARCH CONDITION' message is displayed. The component maintains the search criteria between page navigations to ensure consistent results.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Search%20Functionality.html#references","title":"References","text":"<ul> <li>COCRDLIC</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html","title":"Credit Card Transaction Batch Processing","text":""},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#user-story","title":"User Story","text":"<p>As a financial operations manager, I want to process daily credit card transactions in batch mode, so that all valid transactions are posted to customer accounts while invalid transactions are identified and rejected according to business rules.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN a daily transaction file WHEN the batch process runs THEN all transactions should be validated against card numbers, account existence, credit limits, and expiration dates</li> <li>GIVEN a valid credit card transaction WHEN the system processes it THEN the transaction should be posted to the account master, transaction category balance, and transaction history files</li> <li>GIVEN an invalid card number WHEN validating a transaction THEN the system should reject it with code 100 and message 'CARD NUMBER [number] COULD NOT BE VERIFIED'</li> <li>GIVEN a valid card number but non-existent account WHEN validating a transaction THEN the system should reject it with code 101 and message 'ACCOUNT [id] NOT FOUND'</li> <li>GIVEN a transaction that would exceed the credit limit WHEN validating a transaction THEN the system should reject it with code 102</li> <li>GIVEN a transaction with an expired account WHEN validating a transaction THEN the system should reject it with code 103</li> <li>GIVEN any rejected transactions WHEN the batch process completes THEN the system should set a non-zero return code (4) for downstream processes</li> <li>GIVEN any file operation error WHEN processing transactions THEN the system should display appropriate error messages and abort with relevant error codes</li> <li>GIVEN a completed batch process WHEN all transactions are processed THEN the system should display summary statistics showing processed and rejected transaction counts</li> </ol>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that a transaction with a valid card number, existing account, within credit limit, and before expiration date is successfully posted to all relevant files</li> <li>Confirm the system correctly updates account balances by adding transaction amounts to current balances and either current cycle credit or debit based on whether the amount is positive or negative</li> <li>Validate that transactions with invalid card numbers are rejected with code 100 and proper error message</li> <li>Verify that transactions with valid card numbers but non-existent accounts are rejected with code 101 and proper error message</li> <li>Confirm that transactions that would exceed the credit limit are rejected with code 102</li> <li>Test that transactions occurring after account expiration are rejected with code 103</li> <li>Verify that new transaction category balance records are created when processing a transaction for a new account/transaction type/category combination</li> <li>Validate that the batch process sets return code 4 when at least one transaction is rejected</li> <li>Test the system's handling of file operation errors (open, read, close) with appropriate error messages</li> <li>Confirm the summary statistics accurately reflect the number of processed and rejected transactions</li> <li>Verify the cross-reference lookup correctly maps card numbers to account and customer IDs</li> <li>Test the batch process with an empty transaction file to ensure proper handling</li> <li>Validate the batch process with a large volume of transactions to ensure performance and accuracy</li> </ol>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    A[\"Daily Transaction File\"] --&gt; B[\"Batch Processing System\"]\n    B --&gt; C[\"Validation Engine\"]\n    C --&gt; D{\"Validation Rules\"}\n    D --&gt;|Valid| E[\"Transaction Processing\"]\n    D --&gt;|Invalid| F[\"Rejection Handler\"]\n\n    E --&gt; G[\"Account Master File\"]\n    E --&gt; H[\"Transaction Category Balance\"]\n    E --&gt; I[\"Transaction History\"]\n\n    F --&gt; J[\"Error Code Assignment\"]\n    J --&gt; K[\"Rejection Log\"]\n\n    B --&gt; L[\"Process Completion\"]\n    L --&gt; M[\"Return Code Generator\"]\n    L --&gt; N[\"Summary Statistics\"]\n\n    subgraph ValidationRules[\"Validation Rules\"]\n        D1[\"Card Number Verification\"]\n        D2[\"Account Existence Check\"]\n        D3[\"Credit Limit Validation\"]\n        D4[\"Expiration Date Check\"]\n    end\n\n    D --- D1\n    D --- D2\n    D --- D3\n    D --- D4\n\n    M --&gt;|Success| O[\"Return Code 0\"]\n    M --&gt;|Rejections| P[\"Return Code 4\"]\n    M --&gt;|System Error| Q[\"Error Abort Codes\"]</code></pre>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#daily-transaction-validation","title":"Daily Transaction Validation","text":"<p>This subtask validates daily credit card transactions by reading records from a daily transaction file and verifying them against reference data. The process includes: (1) Reading each transaction record from the daily transaction file, (2) Looking up the card number in a cross-reference file to obtain the associated account ID and customer ID, (3) Verifying the account exists by reading the account record. Business rules include: transactions with invalid card numbers are rejected with a message 'CARD NUMBER [number] COULD NOT BE VERIFIED', transactions with valid card numbers but non-existent accounts are flagged with 'ACCOUNT [id] NOT FOUND'. The validation process is critical for ensuring only legitimate transactions are processed. The component handles file operation errors comprehensively, with specific error codes and messages for each possible file operation failure (open, read, close). For example, if the cross-reference lookup fails (status code 4), the transaction is skipped with appropriate messaging.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#references","title":"References","text":"<ul> <li>CBTRN01C</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#card-to-account-resolution","title":"Card-to-Account Resolution","text":"<p>This subtask resolves credit card numbers to their corresponding account and customer IDs using a cross-reference file. For each transaction, the card number is extracted and used as a key to look up the corresponding record in the cross-reference file. If found, the system retrieves the account ID and customer ID associated with the card. This mapping is essential for transaction processing as it connects the physical card used for a transaction with the financial account that should be debited. The lookup uses an indexed file with the card number as the key for efficient retrieval. If the card number is not found in the cross-reference file (indicated by status code 4), the transaction cannot be processed further. The system displays the card number, account ID, and customer ID when a successful lookup occurs, providing an audit trail of the resolution process.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#references_1","title":"References","text":"<ul> <li>CBTRN01C</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#credit-card-transaction-validation","title":"Credit Card Transaction Validation","text":"<p>Validates incoming credit card transactions against multiple business rules before posting. The validation process includes: (1) Verifying card numbers against a cross-reference file - if the card number doesn't exist in the XREF file, the transaction is rejected with code 100; (2) Confirming the account exists - if the account ID from the cross-reference doesn't exist in the account master file, the transaction is rejected with code 101; (3) Checking if the transaction would exceed the credit limit - the system calculates a temporary balance by adding the transaction amount to the difference between current cycle credits and debits (WS-TEMP-BAL = ACCT-CURR-CYC-CREDIT - ACCT-CURR-CYC-DEBIT + DALYTRAN-AMT) and rejects with code 102 if this exceeds the account's credit limit; (4) Verifying the account hasn't expired - compares the account expiration date against the transaction date and rejects with code 103 if the transaction occurred after expiration. All rejected transactions are written to a rejection file with appropriate reason codes.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#references_2","title":"References","text":"<ul> <li>CBTRN02C</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#credit-card-transaction-posting","title":"Credit Card Transaction Posting","text":"<p>Posts valid credit card transactions to the system by updating multiple files to reflect the transaction. The process includes: (1) Updating the transaction category balance file (TCATBAL-FILE) - either creating a new record if one doesn't exist for the account/transaction type/category combination or updating an existing record by adding the transaction amount to the current balance; (2) Updating the account master record - adding the transaction amount to the current balance (ACCT-CURR-BAL) and updating either the current cycle credit (ACCT-CURR-CYC-CREDIT) or debit (ACCT-CURR-CYC-DEBIT) based on whether the transaction amount is positive or negative; (3) Writing the transaction to the transaction file for record-keeping. The system handles the creation of new category balance records when needed and maintains accurate account balances by properly categorizing credits and debits.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#references_3","title":"References","text":"<ul> <li>CBTRN02C</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#batch-transaction-processing","title":"Batch Transaction Processing","text":"<p>Processes daily credit card transactions in batch mode from a sequential input file. The program reads each transaction record from the daily transaction file (DALYTRAN-FILE), processes it through validation and posting routines, and maintains counters for processed and rejected transactions. The system sets a non-zero return code (4) if any transactions are rejected, allowing downstream processes to identify when manual intervention may be needed. The program displays summary statistics at completion, showing the total number of transactions processed and rejected. The batch process handles file operations with comprehensive error checking, displaying detailed status information when errors occur and aborting the program with appropriate error codes when critical file operations fail.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Batch%20Processing.html#references_4","title":"References","text":"<ul> <li>CBTRN02C</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Entry.html","title":"Credit Card Transaction Entry","text":""},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Entry.html#user-story","title":"User Story","text":"<p>As a financial service representative, I want to create and manage credit card transactions with validation and data copy capabilities, so that I can efficiently process customer transactions while maintaining data integrity.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Entry.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I have a valid account ID or card number WHEN I enter transaction details THEN the system should validate all inputs and create a new transaction record with an auto-generated ID</li> <li>GIVEN I am entering multiple similar transactions WHEN I press PF5 THEN the system should copy data from the most recent transaction for the specified account/card</li> <li>GIVEN I enter transaction data WHEN any validation rule is violated THEN the system should display a specific error message and position the cursor at the problematic field</li> <li>GIVEN I successfully enter all required transaction data WHEN I submit the form THEN the system should save the transaction and display a confirmation message with the new transaction ID</li> <li>System should validate that either account ID or card number exists in the cross-reference files (CXACAIX for account IDs, CCXREF for card numbers)</li> <li>System should require all mandatory fields: type code, category code, source, description, amount, dates, and merchant information</li> <li>System should validate transaction amounts follow the format -99999999.99 (for debits) or +99999999.99 (for credits)</li> <li>System should validate dates follow YYYY-MM-DD format and represent valid calendar dates</li> <li>System should auto-generate transaction IDs sequentially by retrieving the highest existing ID and adding 1</li> <li>System should validate that merchant IDs are numeric</li> </ol>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Entry.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that a new transaction can be created when all required fields are properly populated with valid data</li> <li>Verify that the system correctly validates and rejects transactions with invalid account IDs or card numbers</li> <li>Verify that the system correctly validates and rejects transactions with invalid amounts, dates, or merchant IDs</li> <li>Verify that the system correctly auto-generates sequential transaction IDs</li> <li>Verify that pressing PF5 correctly copies data from the most recent transaction for the specified account/card</li> <li>Confirm data copy functionality handles the case when no previous transactions exist for an account/card</li> <li>Confirm validation provides specific error messages for each type of validation failure</li> <li>Validate that the cursor is positioned at the field requiring correction when validation fails</li> <li>Verify that a confirmation message with the new transaction ID is displayed upon successful transaction creation</li> <li>Validate cross-reference validation works correctly by testing with both valid and invalid account IDs and card numbers</li> <li>Verify that the system handles database errors appropriately when writing new transaction records</li> </ol>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Entry.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    UI[\"Financial Service Rep Interface\"] --&gt; TC[\"Transaction Controller\"]\n\n    TC --&gt; VE[\"Validation Engine\"]\n    TC --&gt; TM[\"Transaction Manager\"]\n    TC --&gt; DC[\"Data Copy Service\"]\n\n    VE --&gt; CR[\"Cross-Reference Validator\"]\n    CR --&gt; CXACAIX[\"Account ID Reference (CXACAIX)\"]\n    CR --&gt; CCXREF[\"Card Number Reference (CCXREF)\"]\n\n    VE --&gt; FV[\"Field Validator\"]\n    FV --&gt; TV[\"Type Validator\"]\n    FV --&gt; AV[\"Amount Validator\"]\n    FV --&gt; DV[\"Date Validator\"]\n    FV --&gt; MV[\"Merchant Validator\"]\n\n    TM --&gt; IDG[\"Transaction ID Generator\"]\n    TM --&gt; TS[\"Transaction Storage\"]\n\n    DC --&gt; TS\n\n    TC --&gt; NM[\"Notification Manager\"]\n\n    subgraph \"Core Transaction Processing\"\n        TC\n        TM\n        VE\n        DC\n    end\n\n    subgraph \"Data Storage\"\n        TS\n        CXACAIX\n        CCXREF\n    end</code></pre>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Entry.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Entry.html#transaction-creation","title":"Transaction Creation","text":"<p>This subtask allows users to create new credit card transactions in the system. Users can enter either an account ID or card number, and the system will automatically retrieve the corresponding cross-reference information. The subtask includes comprehensive validation of all input fields before writing to the transaction database. Key business rules include: (1) Either account ID or card number must be provided and must exist in the system; (2) All required fields must be populated including type code, category code, source, description, amount, dates, and merchant information; (3) Transaction amounts must follow the format -99999999.99; (4) Dates must follow the format YYYY-MM-DD and be valid calendar dates; (5) Transaction IDs are auto-generated sequentially by retrieving the highest existing ID and adding 1; (6) Merchant IDs must be numeric. The system performs cross-reference validation by checking account IDs against the CXACAIX file and card numbers against the CCXREF file. Error handling includes specific error messages for each validation failure and proper cursor positioning to the field requiring correction.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Entry.html#references","title":"References","text":"<ul> <li>COTRN02C</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Entry.html#transaction-data-copy","title":"Transaction Data Copy","text":"<p>This subtask provides a convenience function that allows users to copy data from the most recently created transaction to streamline repetitive data entry. When the user presses PF5, the system retrieves the most recent transaction for the specified account/card and populates all transaction fields including type code, category code, source, amount, description, dates, and merchant information. This feature is particularly useful when entering multiple similar transactions for the same merchant or category. The system still requires user confirmation before saving the new transaction record. The copy function depends on successful account/card validation and the existence of at least one previous transaction in the system.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Entry.html#references_1","title":"References","text":"<ul> <li>COTRN02C</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Entry.html#transaction-input-validation","title":"Transaction Input Validation","text":"<p>This subtask performs comprehensive validation of all transaction input fields to ensure data integrity. Validation rules include: (1) Account ID and card number must be numeric and exist in the cross-reference files; (2) Type code and category code must be numeric; (3) Transaction amount must follow the format -99999999.99 (for debits) or +99999999.99 (for credits); (4) Transaction dates must follow YYYY-MM-DD format and be valid calendar dates as verified by the CSUTLDTC utility; (5) Merchant ID must be numeric; (6) All required fields (type code, category code, source, description, amount, dates, merchant details) cannot be empty. The system provides specific error messages for each validation failure and positions the cursor at the field requiring correction. This ensures that only valid, well-formed transaction data is stored in the database.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Entry.html#references_2","title":"References","text":"<ul> <li>COTRN02C</li> </ul>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Entry.html#transaction-database-management","title":"Transaction Database Management","text":"<p>This subtask handles the database operations required to store new transaction records in the TRANSACT file. It includes: (1) Auto-generation of sequential transaction IDs by retrieving the highest existing ID and incrementing by 1; (2) Formatting and conversion of input data to appropriate database formats (e.g., converting display amount format to packed decimal); (3) Writing new transaction records to the database with proper error handling for duplicate keys or other database errors; (4) Providing confirmation messages with the newly assigned transaction ID upon successful creation. The subtask uses CICS file control commands (STARTBR, READPREV, ENDBR, WRITE) to interact with the database. Error handling includes specific messages for database access failures and duplicate transaction IDs.</p>"},{"location":"backlog/user_stories/Credit%20Card%20Transaction%20Entry.html#references_3","title":"References","text":"<ul> <li>COTRN02C</li> </ul>"},{"location":"backlog/user_stories/Customer%20Data%20Report%20Generation.html","title":"Customer Data Report Generation","text":""},{"location":"backlog/user_stories/Customer%20Data%20Report%20Generation.html#user-story","title":"User Story","text":"<p>As a business analyst, I want to retrieve and display all customer records from the system, so that I can review customer data for reporting and analysis purposes.</p>"},{"location":"backlog/user_stories/Customer%20Data%20Report%20Generation.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN the CUSTFILE VSAM file contains customer records WHEN the report is generated THEN all customer records should be displayed sequentially in the output</li> <li>GIVEN a customer record exists in the CUSTFILE WHEN the system processes that record THEN all fields defined in the CVCUS01Y copybook structure should be correctly displayed</li> <li>GIVEN an error occurs during file operations (opening, reading, or closing) WHEN the system encounters the error THEN appropriate error messages with status codes should be displayed</li> <li>GIVEN a file operation fails WHEN the system detects the failure THEN the program should terminate with abend code 999 after displaying detailed error information</li> <li>GIVEN all records have been processed WHEN the end-of-file condition is reached THEN the system should gracefully complete the operation with status code 10</li> </ol>"},{"location":"backlog/user_stories/Customer%20Data%20Report%20Generation.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that all customer records are retrieved and displayed when the CUSTFILE contains multiple valid records</li> <li>Confirm the system correctly handles the end-of-file condition when all records have been processed</li> <li>Validate that appropriate error messages are displayed when the CUSTFILE cannot be opened</li> <li>Verify that the system terminates with abend code 999 when a file read operation fails</li> <li>Confirm that customer data is displayed according to the structure defined in the CVCUS01Y copybook</li> <li>Validate that the system correctly processes a large volume of customer records without performance degradation</li> <li>Verify that the system handles empty CUSTFILE scenarios appropriately</li> </ol>"},{"location":"backlog/user_stories/Customer%20Data%20Report%20Generation.html#diagram","title":"Diagram","text":"<pre><code>flowchart LR\n    A[\"Business Analyst\"] --&gt; B[\"Report Generation System\"]\n    B --&gt; C[\"File Access Module\"]\n    C --&gt; D[\"CUSTFILE\\n(VSAM File)\"]\n    D --&gt; C\n    C --&gt; B\n    B --&gt; E[\"Error Handling\\nComponent\"]\n    B --&gt; F[\"Output Display\"]\n    F --&gt; A\n\n    subgraph \"Core Processing\"\n        B\n        C\n        E\n    end\n\n    subgraph \"Data Sources\"\n        D\n        G[\"CVCUS01Y\\nCopybook Structure\"]\n    end\n\n    G -.-&gt; B\n    E --&gt; H[\"Error Messages\\n&amp; Status Codes\"]\n    H --&gt; F</code></pre>"},{"location":"backlog/user_stories/Customer%20Data%20Report%20Generation.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Customer%20Data%20Report%20Generation.html#customer-data-retrieval-and-display","title":"Customer Data Retrieval and Display","text":"<p>This subtask retrieves and displays customer records from the CUSTFILE indexed VSAM file. It sequentially reads each customer record and displays it to the output. The process continues until all records have been read (end-of-file condition). The subtask implements comprehensive error handling for file operations with specific routines for opening, reading, and closing the customer file. Business rules include: 1) Sequential processing of all customer records without filtering, 2) Detailed error handling with specific status codes (00 for success, 10 for end-of-file, others for errors), 3) Program termination with abend code 999 if any file operation fails. The component depends on the CUSTFILE VSAM dataset and the CVCUS01Y copybook which contains the customer record structure. Error handling includes displaying detailed file status information in a formatted way (e.g., 'FILE STATUS IS: NNNN0023' for a specific error) before terminating the program.</p>"},{"location":"backlog/user_stories/Customer%20Data%20Report%20Generation.html#references","title":"References","text":"<ul> <li>CBCUS01C</li> </ul>"},{"location":"backlog/user_stories/Customer%20Information%20Update.html","title":"Customer Information Update","text":""},{"location":"backlog/user_stories/Customer%20Information%20Update.html#user-story","title":"User Story","text":"<p>As an account manager, I want to update customer profile information with proper validation, so that customer records remain accurate and compliant with data quality standards.</p>"},{"location":"backlog/user_stories/Customer%20Information%20Update.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN a customer record exists WHEN I modify personal details, contact information, or identification data THEN the system saves only the changed fields</li> <li>GIVEN I enter customer name fields WHEN I submit the form THEN the system validates that names contain only alphabetic characters</li> <li>GIVEN I enter a phone number WHEN I submit the form THEN the system validates it follows North American format (###)###-#### with valid area codes</li> <li>GIVEN I enter a Social Security Number WHEN I submit the form THEN the system validates it is not using invalid patterns (000, 666, or 900-999 for first segment)</li> <li>GIVEN I enter address information WHEN I submit the form THEN the system validates that address line 1, city, state, and ZIP are provided</li> <li>GIVEN I enter a ZIP code and state WHEN I submit the form THEN the system validates they are a valid combination</li> <li>GIVEN I enter a FICO score WHEN I submit the form THEN the system validates it is between 300-850</li> <li>GIVEN I enter invalid data WHEN I submit the form THEN the system displays field-specific error messages that guide me to correct the input</li> </ol>"},{"location":"backlog/user_stories/Customer%20Information%20Update.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that only modified fields are updated when submitting a partial update to a customer profile</li> <li>Verify that names with non-alphabetic characters are rejected with appropriate error messages</li> <li>Verify that phone numbers not matching North American format are rejected with appropriate error messages</li> <li>Verify that phone numbers with invalid area codes are rejected based on the area code lookup table</li> <li>Verify that SSNs with invalid patterns (000-xx-xxxx, 666-xx-xxxx, 9xx-xx-xxxx) are rejected</li> <li>Verify that submissions with missing required address fields (address line 1, city, state, ZIP) are rejected</li> <li>Verify that ZIP codes not matching the selected state are rejected</li> <li>Verify that FICO scores outside the range 300-850 are rejected</li> <li>Confirm the system correctly handles edge cases like hyphenated names, apartment numbers in addresses, and international phone numbers</li> <li>Validate that cross-field validation rules are properly enforced for related fields like state and ZIP code</li> </ol>"},{"location":"backlog/user_stories/Customer%20Information%20Update.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    AM[\"Account Manager\"] --&gt; UI[\"User Interface\"]\n    UI --&gt; VL[\"Validation Layer\"]\n    VL --&gt; BL[\"Business Logic Layer\"]\n    BL --&gt; DB[\"Customer Database\"]\n\n    subgraph \"Validation Components\"\n        NameV[\"Name Validator\"]\n        PhoneV[\"Phone Validator\"]\n        SSNV[\"SSN Validator\"]\n        AddrV[\"Address Validator\"]\n        ZipV[\"ZIP/State Validator\"]\n        ScoreV[\"FICO Score Validator\"]\n    end\n\n    VL --&gt; NameV\n    VL --&gt; PhoneV\n    VL --&gt; SSNV\n    VL --&gt; AddrV\n    VL --&gt; ZipV\n    VL --&gt; ScoreV\n\n    ZipV &lt;--&gt; GeoAPI[\"Geographic Validation API\"]\n\n    BL --&gt; AuditLog[\"Audit Logging Service\"]\n\n    UI --&gt; EM[\"Error Message Handler\"]\n    VL --&gt; EM\n\n    DB --&gt; BL</code></pre>"},{"location":"backlog/user_stories/Customer%20Information%20Update.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Customer%20Information%20Update.html#customer-information-update_1","title":"Customer Information Update","text":"<p>This subtask manages the updating of customer information associated with an account. It allows users to modify personal details, contact information, and identification data. The component validates various customer data elements with specific rules: Names must contain only alphabetic characters; Phone numbers must follow North American format (###)###-####, with area codes validated against a lookup table; SSN must be valid (not 000, 666, or 900-999 for first segment); ZIP codes must match state codes; FICO scores must be between 300-850. Address validation includes required fields for address line 1, city, state, and ZIP. The component handles partial updates by detecting which fields have been changed from their original values. Error messages are field-specific and guide the user to correct input problems. The component depends on the customer master file (CUSTDAT) and implements cross-field validation between related fields (e.g., state and ZIP code must be a valid combination).</p>"},{"location":"backlog/user_stories/Customer%20Information%20Update.html#references","title":"References","text":"<ul> <li>COACTUPC</li> </ul>"},{"location":"backlog/user_stories/Date%20Format%20Validation%20for%20Data%20Quality%20Management.html","title":"Date Format Validation for Data Quality Management","text":""},{"location":"backlog/user_stories/Date%20Format%20Validation%20for%20Data%20Quality%20Management.html#user-story","title":"User Story","text":"<p>As a CardDemo application user, I want to validate date inputs against specified formats, so that I can ensure data integrity and prevent invalid dates from being processed in the system.</p>"},{"location":"backlog/user_stories/Date%20Format%20Validation%20for%20Data%20Quality%20Management.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN a date string and a format pattern WHEN the validation function is called THEN the system should verify the date matches the specified format and return appropriate validation results</li> <li>GIVEN a date string WHEN validated THEN the system should check format compliance, date value validity, numeric validation, and range validation</li> <li>GIVEN an invalid date input WHEN validation occurs THEN the system should return specific error codes and descriptive messages based on the type of validation failure</li> <li>GIVEN a validation result WHEN returned to the calling program THEN it should include severity code, message number, result description, test date, and format mask used</li> <li>GIVEN any validation process WHEN completed THEN the return code should be set to the severity level to allow calling programs to determine success or failure</li> </ol>"},{"location":"backlog/user_stories/Date%20Format%20Validation%20for%20Data%20Quality%20Management.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that a valid date in the correct format returns a successful validation result</li> <li>Confirm the system correctly identifies and reports when a date string is too short for the specified format (code 2507)</li> <li>Validate that out-of-range date components (e.g., month &gt; 12) are detected and reported with error code 2508</li> <li>Verify that non-numeric characters in date fields that require numeric values are properly detected and reported</li> <li>Confirm the system correctly validates dates against various format patterns (MM/DD/YYYY, YYYY-MM-DD, etc.)</li> <li>Test that invalid era components in date formats are properly identified</li> <li>Verify that dates outside supported date ranges are rejected with appropriate error messages</li> <li>Test that a zero year value in era format is properly identified as invalid</li> <li>Confirm that invalid format patterns are detected and reported as 'Bad picture string'</li> <li>Verify that the complete validation result structure is returned with all required components (severity code, message number, description, test date, format mask)</li> </ol>"},{"location":"backlog/user_stories/Date%20Format%20Validation%20for%20Data%20Quality%20Management.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"CardDemo User\"] --&gt; |\"Submits date input\"| UI[\"User Interface\"]\n    UI --&gt; |\"Calls with date string &amp; format\"| Validator[\"Date Validator Component\"]\n\n    subgraph \"Date Validation System\"\n        Validator --&gt; FormatCheck[\"Format Compliance Check\"]\n        Validator --&gt; ValueCheck[\"Date Value Validity Check\"]\n        Validator --&gt; NumericCheck[\"Numeric Validation\"]\n        Validator --&gt; RangeCheck[\"Range Validation\"]\n\n        FormatCheck --&gt; |\"Results\"| ValidationResult[\"Validation Result Processor\"]\n        ValueCheck --&gt; |\"Results\"| ValidationResult\n        NumericCheck --&gt; |\"Results\"| ValidationResult\n        RangeCheck --&gt; |\"Results\"| ValidationResult\n\n        ValidationResult --&gt; |\"Compiles\"| ResultObject[\"Result Object\"]\n    end\n\n    ResultObject --&gt; |\"Returns validation result\\n(severity code, message number,\\ndescription, test date, format mask)\"| UI\n    UI --&gt; |\"Displays validation result\"| User\n\n    ResultObject --&gt; |\"Severity level as return code\"| CallingProgram[\"Calling Program\"]\n    CallingProgram --&gt; |\"Takes action based on\\nvalidation result\"| SystemProcessing[\"System Processing\"]</code></pre>"},{"location":"backlog/user_stories/Date%20Format%20Validation%20for%20Data%20Quality%20Management.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Date%20Format%20Validation%20for%20Data%20Quality%20Management.html#date-format-validation","title":"Date Format Validation","text":"<p>This subtask validates date inputs against specified formats to ensure data integrity across the CardDemo application. It leverages the IBM Language Environment CEEDAYS API to perform comprehensive date validation.</p> <p>Business rules: - Accepts an input date string (up to 10 characters) and a format pattern - Validates the date against the specified format - Returns detailed validation results with severity codes and descriptive messages</p> <p>Validation checks include: - Format compliance: Verifies the date matches the specified format pattern (e.g., MM/DD/YYYY) - Date value validity: Ensures the date represents a valid calendar date - Numeric validation: Confirms date components contain only numeric data where required - Range validation: Checks if date values fall within supported ranges</p> <p>Error handling: - Returns specific error codes and messages for different validation failures:   * Insufficient data (code 2507): Date string is too short for the specified format   * Bad date value (code 2508): Date components are out of range (e.g., month &gt; 12)   * Invalid era: Era component in the date format is invalid   * Unsupported range: Date falls outside supported date ranges   * Invalid month: Month value is not valid (e.g., 13)   * Bad picture string: Format pattern is invalid   * Non-numeric data: Date contains non-numeric characters where numbers are expected   * Year in era is zero: Invalid year value of zero in era format</p> <p>The validation result is returned in a structured message that includes: - Severity code (numeric indicator of error severity) - Message number (specific error code) - Result description (human-readable explanation) - Test date (the date that was validated) - Format mask used (the pattern against which validation occurred)</p> <p>The return code is set to the severity level, allowing calling programs to determine if validation succeeded or failed.</p>"},{"location":"backlog/user_stories/Date%20Format%20Validation%20for%20Data%20Quality%20Management.html#references","title":"References","text":"<ul> <li>CSUTLDTC</li> </ul>"},{"location":"backlog/user_stories/Implement%20Robust%20File%20System%20Management%20for%20Transaction%20Processing.html","title":"Implement Robust File System Management for Transaction Processing","text":""},{"location":"backlog/user_stories/Implement%20Robust%20File%20System%20Management%20for%20Transaction%20Processing.html#user-story","title":"User Story","text":"<p>As a transaction processing system administrator, I want a reliable file system management component with comprehensive error handling, so that all critical file operations are performed securely with clear error reporting when issues occur.</p>"},{"location":"backlog/user_stories/Implement%20Robust%20File%20System%20Management%20for%20Transaction%20Processing.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN the transaction processing system WHEN it needs to access any of the six required files (daily transaction, customer, cross-reference, card, account, and transaction files) THEN the system should properly open, read, and close these files</li> <li>GIVEN any file operation WHEN the operation fails THEN the system should display a specific error message including the file name and status code</li> <li>GIVEN a file status code WHEN it is not '00' (success) THEN the system should call Z-DISPLAY-IO-STATUS to format the error and Z-ABEND-PROGRAM to terminate with error code 999</li> <li>System should implement standardized file status checking across all file operations</li> <li>System should maintain data integrity by properly handling all file operation failures</li> <li>Feature must support both sequential and indexed file types as required by the different system files</li> </ol>"},{"location":"backlog/user_stories/Implement%20Robust%20File%20System%20Management%20for%20Transaction%20Processing.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that all six files (daily transaction, customer, cross-reference, card, account, and transaction) can be successfully opened, read, and closed</li> <li>Verify that appropriate error messages are displayed when attempting to open a non-existent file</li> <li>Confirm error handling correctly formats and displays the file status code when a read operation fails</li> <li>Validate that the system terminates with error code 999 when encountering a critical file operation failure</li> <li>Verify that different file types (sequential and indexed) are handled correctly by the file system management component</li> <li>Confirm the Z-DISPLAY-IO-STATUS routine correctly formats different file status codes into user-friendly messages</li> <li>Test error scenarios for each file type to ensure consistent error handling across all file operations</li> </ol>"},{"location":"backlog/user_stories/Implement%20Robust%20File%20System%20Management%20for%20Transaction%20Processing.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    Admin[\"Transaction Processing System Administrator\"]\n\n    subgraph \"File System Management Component\"\n        FileOps[\"File Operations Module\"]\n        ErrorHandler[\"Error Handling Module\"]\n        StatusChecker[\"File Status Checker\"]\n        Formatter[\"Error Formatter (Z-DISPLAY-IO-STATUS)\"]\n        Terminator[\"System Terminator (Z-ABEND-PROGRAM)\"]\n    end\n\n    subgraph \"System Files\"\n        DailyTrans[\"Daily Transaction File\"]\n        Customer[\"Customer File\"]\n        CrossRef[\"Cross-Reference File\"]\n        Card[\"Card File\"]\n        Account[\"Account File\"]\n        Trans[\"Transaction File\"]\n    end\n\n    Admin --&gt; FileOps\n    FileOps --&gt; StatusChecker\n    StatusChecker -- \"Status = '00'\" --&gt; DailyTrans\n    StatusChecker -- \"Status = '00'\" --&gt; Customer\n    StatusChecker -- \"Status = '00'\" --&gt; CrossRef\n    StatusChecker -- \"Status = '00'\" --&gt; Card\n    StatusChecker -- \"Status = '00'\" --&gt; Account\n    StatusChecker -- \"Status = '00'\" --&gt; Trans\n    StatusChecker -- \"Status != '00'\" --&gt; ErrorHandler\n    ErrorHandler --&gt; Formatter\n    Formatter --&gt; Terminator\n    Terminator -- \"Terminate with code 999\" --&gt; Admin\n\n    classDef fileNode fill:#f9f,stroke:#333,stroke-width:1px\n    class DailyTrans,Customer,CrossRef,Card,Account,Trans fileNode</code></pre>"},{"location":"backlog/user_stories/Implement%20Robust%20File%20System%20Management%20for%20Transaction%20Processing.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Implement%20Robust%20File%20System%20Management%20for%20Transaction%20Processing.html#file-system-management","title":"File System Management","text":"<p>This subtask handles all file operations required for transaction processing, including opening, reading, and closing six different files: daily transaction file (sequential), customer file (indexed), cross-reference file (indexed), card file (indexed), account file (indexed), and transaction file (indexed). The component implements comprehensive error handling for all file operations with specific error messages and status codes. For example, if a file open operation fails, the system displays an error message like 'ERROR OPENING [FILE NAME]' along with the specific file status code. The component uses a standardized approach to file status checking, where '00' indicates success and other codes indicate various error conditions. When errors occur, the component calls the Z-DISPLAY-IO-STATUS routine to format and display the file status code in a user-friendly format, then calls Z-ABEND-PROGRAM to terminate execution with error code 999. This robust error handling ensures data integrity and provides clear diagnostic information when file operations fail.</p>"},{"location":"backlog/user_stories/Implement%20Robust%20File%20System%20Management%20for%20Transaction%20Processing.html#references","title":"References","text":"<ul> <li>CBTRN01C</li> </ul>"},{"location":"backlog/user_stories/Main%20Menu%20Interface%20Display.html","title":"Main Menu Interface Display","text":""},{"location":"backlog/user_stories/Main%20Menu%20Interface%20Display.html#user-story","title":"User Story","text":"<p>As a CardDemo application user, I want to view a well-organized main menu interface, so that I can easily navigate to different functions of the application.</p>"},{"location":"backlog/user_stories/Main%20Menu%20Interface%20Display.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I have successfully authenticated WHEN I access the main menu THEN I should see a properly formatted menu with numbered options (up to 12 items)</li> <li>GIVEN I am on the main menu WHEN I view the header THEN I should see the application title, transaction ID (CM00), program name, current date (MM/DD/YY), and time (HH:MM:SS)</li> <li>GIVEN an error occurs WHEN I am using the application THEN error messages should be displayed in the designated area of the screen</li> <li>GIVEN I attempt to access the menu WHEN I am not authenticated (EIBCALEN = 0) THEN I should be automatically redirected to the sign-on screen</li> <li>System should dynamically build the menu by iterating through predefined options stored in the CDEMO-MENU-OPT arrays</li> <li>Feature must use CICS SEND/RECEIVE commands with the COMEN1A map from the COMEN01 mapset for screen rendering</li> </ol>"},{"location":"backlog/user_stories/Main%20Menu%20Interface%20Display.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that all menu options (1-12) are correctly displayed with proper numbering and descriptions</li> <li>Confirm the header displays accurate information including current date and time in the required format</li> <li>Validate that error messages appear in the designated area when triggered</li> <li>Verify that unauthenticated users are properly redirected to the sign-on screen</li> <li>Test the menu display with varying numbers of menu options (minimum, maximum, and intermediate values)</li> <li>Confirm the menu interface renders correctly across different terminal types</li> <li>Validate that the menu display updates correctly when menu options are changed in the CDEMO-MENU-OPT arrays</li> </ol>"},{"location":"backlog/user_stories/Main%20Menu%20Interface%20Display.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"User\"] --&gt; Auth[\"Authentication System\"]\n    Auth --&gt; MainMenu[\"Main Menu Interface (COMEN1A Map)\"]\n    Auth --&gt;|EIBCALEN = 0| SignOn[\"Sign-On Screen\"]\n    SignOn --&gt; Auth\n\n    MainMenu --&gt; MenuBuilder[\"Menu Builder Component\"]\n    MenuBuilder --&gt;|\"Iterates through\"| MenuOptions[\"CDEMO-MENU-OPT Arrays\"]\n    MenuOptions --&gt;|\"Populates\"| MainMenu\n\n    MainMenu --&gt;|\"Displays\"| Header[\"Header Component\"]\n    Header --&gt;|\"Shows title, transaction ID (CM00),\\nprogram name, date, time\"| MainMenu\n\n    MainMenu --&gt;|\"User selects option\"| Navigation[\"Navigation Controller\"]\n    Navigation --&gt;|\"Routes to\"| AppFunctions[\"Application Functions\"]\n\n    ErrorHandler[\"Error Handler\"] --&gt;|\"Displays messages in\\ndesignated area\"| MainMenu\n\n    subgraph \"CICS Environment\"\n        MainMenu\n        MenuBuilder\n        Header\n        Navigation\n        ErrorHandler\n    end</code></pre>"},{"location":"backlog/user_stories/Main%20Menu%20Interface%20Display.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Main%20Menu%20Interface%20Display.html#menu-display-management","title":"Menu Display Management","text":"<p>Handles the presentation layer of the main menu interface, including dynamic menu building, header information display, and error message presentation. The component builds the menu by iterating through predefined options (up to 12 menu items) stored in the CDEMO-MENU-OPT arrays and formats them with numbering (e.g., '1. Option Name'). It populates header information including application title, transaction ID (CM00), program name, current date (MM/DD/YY format), and time (HH:MM:SS format). Error messages are displayed in a designated area of the screen. The component handles screen rendering through CICS SEND/RECEIVE commands using the COMEN1A map from the COMEN01 mapset. If a user attempts to access the menu without proper authentication (EIBCALEN = 0), they are automatically redirected to the sign-on screen.</p>"},{"location":"backlog/user_stories/Main%20Menu%20Interface%20Display.html#references","title":"References","text":"<ul> <li>COMEN01C</li> </ul>"},{"location":"backlog/user_stories/Main%20Menu%20Navigation%20for%20Regular%20Users.html","title":"Main Menu Navigation for Regular Users","text":""},{"location":"backlog/user_stories/Main%20Menu%20Navigation%20for%20Regular%20Users.html#user-story","title":"User Story","text":"<p>As a CardDemo application user, I want to navigate through a personalized main menu interface, so that I can access the functions I'm authorized to use efficiently.</p>"},{"location":"backlog/user_stories/Main%20Menu%20Navigation%20for%20Regular%20Users.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am logged in as a regular user WHEN I view the main menu THEN I should see only the options available to my access level</li> <li>GIVEN I am on the main menu WHEN I enter a valid numeric option (1-12) THEN the system should route me to the corresponding program</li> <li>GIVEN I am a regular user WHEN I attempt to access an admin-only option THEN I should see an error message 'No access - Admin Only option...'</li> <li>GIVEN I am on the main menu WHEN I enter an invalid or out-of-range value THEN I should see an error message 'Please enter a valid option number...'</li> <li>GIVEN I select an option marked as 'DUMMY' WHEN the system processes my selection THEN I should see a 'coming soon' message instead of navigation to another program</li> <li>GIVEN I am on any menu screen WHEN I press PF3 THEN I should be returned to the sign-on screen (COSGN00C)</li> <li>System should display standard header information including current date (MM/DD/YY) and time (HH:MM:SS)</li> <li>System should maintain session state through a commarea between navigation actions</li> </ol>"},{"location":"backlog/user_stories/Main%20Menu%20Navigation%20for%20Regular%20Users.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that only authorized menu options are displayed when logged in as a regular user</li> <li>Verify that selecting a valid menu option (e.g., option 1) navigates to the correct program</li> <li>Confirm error handling displays appropriate message when attempting to access admin-only options</li> <li>Validate that entering non-numeric values in the option field triggers the invalid option error message</li> <li>Validate that entering out-of-range values (e.g., 13) triggers the invalid option error message</li> <li>Verify that selecting a 'DUMMY' option displays the 'coming soon' message</li> <li>Confirm that pressing PF3 from the main menu returns to the sign-on screen</li> <li>Verify that the header displays the correct date and time in the specified format</li> <li>Confirm session state is maintained when navigating between different screens</li> </ol>"},{"location":"backlog/user_stories/Main%20Menu%20Navigation%20for%20Regular%20Users.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User([\"User\"])\n    Auth[\"Authentication System\"]\n    MainMenu[\"Main Menu Interface\"]\n    AccessControl[\"Access Control Layer\"]\n    Programs[\"Application Programs (1-12)\"]\n    SessionMgmt[\"Session Management\"]\n    Commarea[\"Commarea\\n(Session State)\"]\n    SignOn[\"Sign-On Screen\\n(COSGN00C)\"]\n\n    User --&gt; SignOn\n    SignOn --&gt; Auth\n    Auth --&gt; MainMenu\n    MainMenu --&gt; AccessControl\n    AccessControl --&gt; |\"Authorized Options\"| Programs\n    AccessControl --&gt; |\"Admin-only\\nAccess Denied\"| MainMenu\n    AccessControl --&gt; |\"DUMMY Option\"| ComingSoon[\"Coming Soon Message\"]\n    MainMenu --&gt; |\"Invalid Input\"| ErrorMsg[\"Error Message\"]\n    Programs --&gt; SessionMgmt\n    SessionMgmt &lt;--&gt; Commarea\n    MainMenu &lt;--&gt; SessionMgmt\n    MainMenu --&gt; |\"PF3 Key\"| SignOn\n\n    subgraph \"Header Information\"\n        DateTime[\"Date/Time Display\"]\n    end\n\n    DateTime --&gt; MainMenu</code></pre>"},{"location":"backlog/user_stories/Main%20Menu%20Navigation%20for%20Regular%20Users.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Main%20Menu%20Navigation%20for%20Regular%20Users.html#main-menu-navigation","title":"Main Menu Navigation","text":"<p>Manages the main menu interface for regular users in the CardDemo application. The component displays a dynamic menu with options based on the user's access level (regular user vs. administrator). It processes user selections (numeric values 1-12) and routes to the appropriate program when a valid option is chosen. Business rules include: (1) Regular users cannot access admin-only options (marked with 'A' in CDEMO-MENU-OPT-USRTYPE), receiving an error message 'No access - Admin Only option...' if attempted; (2) Invalid numeric entries or out-of-range values trigger the error message 'Please enter a valid option number...'; (3) Options marked as 'DUMMY' in CDEMO-MENU-OPT-PGMNAME display a 'coming soon' message rather than navigating to another program. The component maintains session state through a commarea and includes standard header information with current date and time formatted as MM/DD/YY and HH:MM:SS. Users can press PF3 to return to the sign-on screen (COSGN00C).</p>"},{"location":"backlog/user_stories/Main%20Menu%20Navigation%20for%20Regular%20Users.html#references","title":"References","text":"<ul> <li>COMEN01C</li> </ul>"},{"location":"backlog/user_stories/Monthly%20Credit%20Card%20Interest%20Calculation.html","title":"Monthly Credit Card Interest Calculation","text":""},{"location":"backlog/user_stories/Monthly%20Credit%20Card%20Interest%20Calculation.html#user-story","title":"User Story","text":"<p>As a credit card account manager, I want the system to automatically calculate and apply monthly interest charges based on transaction categories and account types, so that customers are billed accurately according to their account terms and balances.</p>"},{"location":"backlog/user_stories/Monthly%20Credit%20Card%20Interest%20Calculation.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN an account with outstanding balances WHEN the monthly interest calculation process runs THEN interest charges should be calculated per transaction category using the formula: (Transaction Category Balance * Interest Rate) / 1200</li> <li>GIVEN an account with multiple transaction categories WHEN interest is calculated THEN each category should be processed separately with its applicable interest rate</li> <li>GIVEN an account without a specific interest rate for its group/transaction type/category WHEN interest calculation occurs THEN the system should use the default interest rate with 'DEFAULT' as the account group ID</li> <li>GIVEN an account with calculated interest charges WHEN the process completes THEN the account's current balance should be updated with the accumulated interest charges</li> <li>GIVEN an account with calculated interest charges WHEN the process completes THEN transaction records with type code '01' and category code '05' should be created for each interest charge</li> <li>GIVEN an account that has been processed WHEN all transaction categories are calculated THEN the cycle credits and debits should be reset to zero</li> <li>GIVEN any file operation error WHEN the process runs THEN appropriate error handling should occur with specific error codes and messages</li> </ol>"},{"location":"backlog/user_stories/Monthly%20Credit%20Card%20Interest%20Calculation.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that interest is correctly calculated for an account with a $1000 balance and 18% interest rate, resulting in a $15 monthly interest charge</li> <li>Confirm the system correctly processes multiple transaction categories within the same account with different interest rates</li> <li>Validate that when a specific interest rate is not found for an account group/transaction type/category, the system falls back to the default interest rate</li> <li>Verify that after processing all transaction categories for an account, the total interest is correctly added to the current balance</li> <li>Confirm that transaction records are properly created for each interest charge with type code '01' and category code '05'</li> <li>Validate that cycle credits and debits are reset to zero after an account is fully processed</li> <li>Verify error handling when the transaction category balance file is unavailable or corrupted</li> <li>Test the system's behavior when processing accounts with zero balances in some or all transaction categories</li> <li>Confirm the system correctly processes the last account in the file sequence</li> </ol>"},{"location":"backlog/user_stories/Monthly%20Credit%20Card%20Interest%20Calculation.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    subgraph \"Monthly Interest Calculation System\"\n        A[\"Scheduler\"] --&gt;|\"Triggers monthly process\"| B[\"Interest Calculation Engine\"]\n        B --&gt;|\"Retrieves account data\"| C[\"Account Repository\"]\n        B --&gt;|\"Retrieves interest rates\"| D[\"Interest Rate Repository\"]\n        B --&gt;|\"Processes by category\"| E[\"Transaction Category Processor\"]\n        E --&gt;|\"Applies formula per category\"| F[\"Interest Formula Calculator\"]\n        F --&gt;|\"(Balance * Rate) / 1200\"| E\n        E --&gt;|\"Accumulates charges\"| B\n        B --&gt;|\"Creates interest transactions\"| G[\"Transaction Generator\"]\n        G --&gt;|\"Type: 01, Category: 05\"| H[\"Transaction Repository\"]\n        B --&gt;|\"Updates balances\"| C\n        B --&gt;|\"Resets cycle credits/debits\"| I[\"Cycle Reset Handler\"]\n    end\n\n    subgraph \"Error Handling\"\n        B --&gt;|\"Reports errors\"| J[\"Error Handler\"]\n        J --&gt;|\"Logs with error codes\"| K[\"Error Log\"]\n    end\n\n    subgraph \"Data Stores\"\n        C\n        D\n        H\n        K\n    end</code></pre>"},{"location":"backlog/user_stories/Monthly%20Credit%20Card%20Interest%20Calculation.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Monthly%20Credit%20Card%20Interest%20Calculation.html#interest-calculation-processing","title":"Interest Calculation Processing","text":"<p>This subtask processes transaction category balances and calculates monthly interest charges for credit card accounts. The program reads account balances from an indexed file, retrieves applicable interest rates from a disclosure group file, calculates interest, updates account balances, and generates interest transaction records. Key business rules include:</p> <ol> <li>Interest is calculated per transaction category and transaction type within each account</li> <li>Formula: Monthly Interest = (Transaction Category Balance * Interest Rate) / 1200    Example: For a balance of $1000 with 18% interest rate: ($1000 * 18) / 1200 = $15 monthly interest</li> <li>If a specific interest rate for an account group/transaction type/category isn't found, the system falls back to a default interest rate using 'DEFAULT' as the account group ID</li> <li>Interest calculations are accumulated per account and added to the current balance</li> <li>The program processes accounts sequentially, updating each account's balance after processing all its transaction categories</li> <li>For each interest charge, a transaction record is created with type code '01' and category code '05'</li> <li>The program resets cycle credits and debits to zero after processing an account</li> <li>Comprehensive error handling for all file operations with specific error codes and messages</li> <li>Dependencies: Requires transaction category balance file (TCATBALF), account cross-reference file (XREFFILE), disclosure group file (DISCGRP), account master file (ACCTFILE), and transaction output file (TRANSACT)</li> </ol>"},{"location":"backlog/user_stories/Monthly%20Credit%20Card%20Interest%20Calculation.html#references","title":"References","text":"<ul> <li>CBACT04C</li> </ul>"},{"location":"backlog/user_stories/Online%20Credit%20Card%20Bill%20Payment.html","title":"Online Credit Card Bill Payment","text":""},{"location":"backlog/user_stories/Online%20Credit%20Card%20Bill%20Payment.html#user-story","title":"User Story","text":"<p>As a credit card holder, I want to pay my credit card bill in full online, so that I can conveniently settle my outstanding balance without visiting a branch.</p>"},{"location":"backlog/user_stories/Online%20Credit%20Card%20Bill%20Payment.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am logged into my credit card account WHEN I have a positive balance AND I select the 'Pay in Full' option THEN I should see my current balance amount displayed for payment</li> <li>GIVEN I am on the payment confirmation screen WHEN I confirm the payment by selecting 'Y' THEN the system should process my payment, reduce my balance to zero, and provide a confirmation with a unique transaction ID</li> <li>GIVEN I attempt to make a payment WHEN my account has zero or negative balance THEN the system should reject the payment with the message 'You have nothing to pay...'</li> <li>GIVEN I am making a payment WHEN I enter an empty or invalid account ID THEN the system should display an appropriate error message and position the cursor at the error field</li> <li>GIVEN I am on the payment confirmation screen WHEN I enter anything other than 'Y', 'y', 'N', 'n' or leave it blank THEN the system should reject the input and prompt me again</li> <li>System should generate a unique transaction ID for each successful payment by incrementing the highest existing transaction ID by 1</li> <li>System should create a permanent record of each payment transaction with account details, amount, date, and transaction ID</li> <li>Feature must validate account existence before allowing payment processing</li> </ol>"},{"location":"backlog/user_stories/Online%20Credit%20Card%20Bill%20Payment.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that a user can successfully pay their credit card balance in full when they have a positive balance and confirm with 'Y'</li> <li>Verify that after successful payment, the account balance is reduced to zero</li> <li>Confirm the system generates and displays a unique transaction ID after successful payment</li> <li>Verify that payment is rejected with appropriate message when account balance is zero or negative</li> <li>Confirm payment is rejected when user enters an empty account ID with message 'Acct ID can NOT be empty...'</li> <li>Verify payment is rejected when user enters a non-existent account ID with message 'Account ID NOT found...'</li> <li>Validate that only 'Y', 'y', 'N', 'n' or blank are accepted at the confirmation prompt</li> <li>Verify that file access errors during transaction processing are handled with appropriate error messages</li> <li>Confirm the system handles duplicate transaction IDs with the message 'Tran ID already exist...'</li> <li>Validate that transaction records contain accurate timestamp information from the system</li> </ol>"},{"location":"backlog/user_stories/Online%20Credit%20Card%20Bill%20Payment.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"Credit Card Holder\"] --&gt; UI[\"Web Interface\"]\n    UI --&gt; Auth[\"Authentication System\"]\n    Auth --&gt; AccMgmt[\"Account Management\"]\n\n    AccMgmt --&gt; BalCheck[\"Balance Verification\"]\n    BalCheck --&gt; PayProc[\"Payment Processor\"]\n\n    PayProc --&gt; ValSys[\"Validation System\"]\n    ValSys --&gt; AccVal[\"Account Validator\"]\n\n    PayProc --&gt; TranGen[\"Transaction ID Generator\"]\n    PayProc --&gt; PayConf[\"Payment Confirmation\"]\n\n    PayProc --&gt; TranRec[\"Transaction Record System\"]\n    TranRec --&gt; DB[(Payment Database)]\n\n    PayConf --&gt; User\n\n    subgraph \"Core Payment Flow\"\n        BalCheck\n        PayProc\n        TranGen\n        PayConf\n    end\n\n    subgraph \"Validation Layer\"\n        ValSys\n        AccVal\n    end</code></pre>"},{"location":"backlog/user_stories/Online%20Credit%20Card%20Bill%20Payment.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Online%20Credit%20Card%20Bill%20Payment.html#online-bill-payment-processing","title":"Online Bill Payment Processing","text":"<p>This subtask enables users to pay their credit card balance in full through an online interface. The process includes:</p> <ol> <li>Business Rules:</li> <li>Account validation: Verifies the account exists before processing payment</li> <li>Balance verification: Checks that the account has a positive balance to pay (if balance &lt;= 0, payment is rejected with message 'You have nothing to pay')</li> <li>User confirmation: Requires explicit confirmation ('Y') before processing payment</li> <li>Transaction recording: Creates a permanent record of the payment with a unique transaction ID</li> <li> <p>Balance update: Reduces the account balance to zero after successful payment</p> </li> <li> <p>Calculations:</p> </li> <li>Transaction ID generation: Reads the highest existing transaction ID and increments it by 1</li> <li> <p>Balance adjustment: COMPUTE ACCT-CURR-BAL = ACCT-CURR-BAL - TRAN-AMT      Example: If current balance is $500.00, after payment ACCT-CURR-BAL = $500.00 - $500.00 = $0.00</p> </li> <li> <p>Edge Cases:</p> </li> <li>Empty account ID: Rejected with error message 'Acct ID can NOT be empty...'</li> <li>Account not found: Rejected with error message 'Account ID NOT found...'</li> <li>Zero or negative balance: Rejected with message 'You have nothing to pay...'</li> <li> <p>Invalid confirmation value: Only 'Y', 'y', 'N', 'n' or blank are accepted</p> </li> <li> <p>Error Handling:</p> </li> <li>File access errors: Provides specific error messages for read/write failures</li> <li>Duplicate transaction ID: Handles with message 'Tran ID already exist...'</li> <li> <p>Invalid user inputs: Provides contextual error messages and positions cursor at error field</p> </li> <li> <p>Dependencies:</p> </li> <li>Requires access to three files: TRANSACT (transaction records), ACCTDAT (account data), and CXACAIX (account cross-reference)</li> <li>Integrates with system timestamp functions for transaction dating</li> <li>Uses common screen handling and navigation components</li> </ol>"},{"location":"backlog/user_stories/Online%20Credit%20Card%20Bill%20Payment.html#references","title":"References","text":"<ul> <li>COBIL00C</li> </ul>"},{"location":"backlog/user_stories/Secure%20User%20Authentication%20and%20Session%20Management.html","title":"Secure User Authentication and Session Management","text":""},{"location":"backlog/user_stories/Secure%20User%20Authentication%20and%20Session%20Management.html#user-story","title":"User Story","text":"<p>As a CardDemo application user, I want to securely log in and maintain my session context throughout my interaction with the system, so that I can access appropriate functionality based on my user role without repeatedly authenticating.</p>"},{"location":"backlog/user_stories/Secure%20User%20Authentication%20and%20Session%20Management.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am at the login screen WHEN I enter valid credentials THEN I should be directed to the appropriate menu based on my user type (admin or regular user)</li> <li>GIVEN I am at the login screen WHEN I enter invalid or empty credentials THEN I should see appropriate error messages</li> <li>GIVEN I am logged in WHEN I navigate between different screens THEN my session context should be maintained</li> <li>GIVEN I attempt to access a program directly WHEN I don't have a valid session context THEN I should be redirected to the sign-on program</li> <li>System should convert user IDs to uppercase before validation while maintaining case-sensitivity for passwords</li> <li>System should store session information in the COMMAREA including user type, source program, destination program, and transaction IDs</li> <li>Feature must prevent unauthorized access to administrative functions by validating proper session context</li> </ol>"},{"location":"backlog/user_stories/Secure%20User%20Authentication%20and%20Session%20Management.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that an admin user is directed to COADM01C when logging in with valid credentials</li> <li>Verify that a regular user is directed to COMEN01C when logging in with valid credentials</li> <li>Verify that appropriate error messages are displayed for: empty user ID, empty password, incorrect password, non-existent user, and system errors</li> <li>Confirm session context is properly maintained when navigating between multiple screens</li> <li>Validate that direct access to programs without proper context (EIBCALEN = 0) results in redirection to COSGN00C</li> <li>Verify that user IDs are properly converted to uppercase during the authentication process</li> <li>Confirm that passwords remain case-sensitive and must match exactly what's stored in the USRSEC file</li> <li>Validate that all required session information (CDEMO-TO-PROGRAM, CDEMO-FROM-TRANID, CDEMO-FROM-PROGRAM) is correctly passed through the COMMAREA</li> </ol>"},{"location":"backlog/user_stories/Secure%20User%20Authentication%20and%20Session%20Management.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"User\"] --&gt; UI[\"Login Interface\"]\n    UI --&gt; Auth[\"Authentication Service\"]\n    Auth --&gt; Validation[\"Credential Validation\"]\n    Validation --&gt; SessionMgmt[\"Session Management\"]\n    SessionMgmt --&gt; Router[\"Navigation Router\"]\n\n    Router --&gt; AdminUI[\"Admin Interface\"]\n    Router --&gt; RegularUI[\"Regular User Interface\"]\n\n    SessionMgmt --&gt; COMMAREA[\"COMMAREA Storage\"]\n    COMMAREA --&gt; SessionContext[\"Session Context&lt;br&gt;(User Type, Source Program,&lt;br&gt;Destination Program, Transaction IDs)\"]\n\n    subgraph \"Security Layer\"\n        Auth\n        Validation\n        SessionMgmt\n        AccessControl[\"Access Control\"]\n    end\n\n    Router --&gt; AccessControl\n    AccessControl --&gt; Router\n\n    UI --&gt; ErrorHandler[\"Error Handler\"]\n    Validation --&gt; ErrorHandler\n\n    Navigation[\"Screen Navigation\"] --&gt; Router\n    Router --&gt; SessionValidator[\"Session Validator\"]\n    SessionValidator --&gt; COMMAREA\n    SessionValidator --&gt; UI</code></pre>"},{"location":"backlog/user_stories/Secure%20User%20Authentication%20and%20Session%20Management.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Secure%20User%20Authentication%20and%20Session%20Management.html#user-login-processing","title":"User Login Processing","text":"<p>Manages the authentication process for users accessing the CardDemo application. The component validates user credentials against a security file (USRSEC) and routes authenticated users to the appropriate program based on their user type. Business rules include: (1) User ID and password fields cannot be empty - validation occurs before attempting authentication, (2) User IDs are converted to uppercase before validation, (3) Passwords are case-sensitive and must match exactly what's stored in the security file, (4) After successful authentication, admin users (CDEMO-USRTYP-ADMIN) are directed to the admin menu (COADM01C) while regular users are directed to the general user menu (COMEN01C), (5) User context information is passed through a communication area to maintain session state. Error handling includes specific messages for: empty user ID ('Please enter User ID...'), empty password ('Please enter Password...'), incorrect password ('Wrong Password. Try again...'), non-existent user ('User not found. Try again...'), and system errors ('Unable to verify the User...'). The component depends on the USRSEC file for user credential storage and verification.</p>"},{"location":"backlog/user_stories/Secure%20User%20Authentication%20and%20Session%20Management.html#references","title":"References","text":"<ul> <li>COSGN00C</li> </ul>"},{"location":"backlog/user_stories/Secure%20User%20Authentication%20and%20Session%20Management.html#session-context-management","title":"Session Context Management","text":"<p>This subtask manages the program flow and session context within the CardDemo application. It handles the communication between different screens through the COMMAREA, maintaining state across screen transitions. The component implements logic to detect first-time entry versus re-entry to the program, initializing the screen on first entry and processing user input on subsequent entries. When navigating away from this screen, it preserves context by setting up the destination program ID (CDEMO-TO-PROGRAM), source transaction ID (CDEMO-FROM-TRANID), and source program (CDEMO-FROM-PROGRAM) in the communication area. If a user attempts to access this program without proper context (EIBCALEN = 0), it redirects to the sign-on program (COSGN00C). This ensures proper application flow and security by preventing direct access to administrative functions without going through the proper channels.</p>"},{"location":"backlog/user_stories/Secure%20User%20Authentication%20and%20Session%20Management.html#references_1","title":"References","text":"<ul> <li>COUSR01C</li> </ul>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html","title":"Security Administration Interface for User Management","text":""},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#user-story","title":"User Story","text":"<p>As a security administrator, I want a comprehensive interface to manage user accounts (create, update, delete, and list), so that I can efficiently maintain user access and security within the CardDemo application.</p>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am on the security administration screen WHEN I navigate to user management THEN I should see options for adding, updating, deleting, and listing users</li> <li>GIVEN I am adding or updating a user WHEN I submit incomplete information THEN appropriate error messages should display and the cursor should position at the error field</li> <li>GIVEN I am viewing user details WHEN I enter a valid user ID THEN the system should display the user's first name, last name, and user type</li> <li>GIVEN I am deleting a user WHEN I enter a valid user ID THEN the system should display the user's details and require confirmation before deletion</li> <li>GIVEN I am viewing the user listing WHEN there are more than 10 users THEN pagination controls should allow navigation through the complete list</li> <li>GIVEN I am on any user management screen WHEN I press PF3 THEN I should return to the admin menu</li> <li>GIVEN I am on any input form WHEN I press PF4 THEN all fields should be cleared</li> <li>GIVEN I am updating a user WHEN I make no changes and attempt to save THEN the system should notify me that modifications are required</li> <li>GIVEN I am updating or deleting a user WHEN I enter a non-existent user ID THEN an appropriate error message should display</li> <li>System should display color-coded messages (green for success, red for errors) to provide clear visual feedback</li> <li>Feature must maintain data integrity by validating all required fields before committing changes to the USRSEC file</li> </ol>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that all required user interface elements (headers, function key descriptions, fields) are displayed correctly on each screen</li> <li>Verify that validation errors are displayed when submitting forms with missing required fields (user ID, first name, last name, password, user type)</li> <li>Confirm the cursor is positioned at the appropriate field when validation errors occur</li> <li>Validate that user records can be successfully created with all required information</li> <li>Verify that user details are correctly displayed when a valid user ID is entered for update or deletion</li> <li>Confirm that user deletion requires explicit confirmation via PF5 key to prevent accidental deletions</li> <li>Verify that the user listing displays up to 10 users per page with correct pagination using PF7/PF8 keys</li> <li>Validate that selecting a user with 'U' or 'D' from the listing navigates to the correct update or delete screen</li> <li>Confirm that PF3 returns to the admin menu from any screen in the user management workflow</li> <li>Verify that PF4 clears all input fields on applicable screens</li> <li>Validate that attempting to update a user without making changes results in an appropriate message</li> <li>Verify that success messages are displayed in green and error messages in red</li> <li>Confirm the system handles edge cases such as non-existent user IDs, empty user lists, and navigation beyond list boundaries</li> <li>Verify that date is displayed in MM/DD/YY format and time in HH:MM:SS format in the header</li> </ol>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    Admin[\"Security Administrator\"] --&gt; UI[\"Admin Interface\"]\n\n    subgraph \"User Management System\"\n        UI --&gt; NavMenu[\"Navigation Menu\"]\n        NavMenu --&gt; UserMgmt[\"User Management Module\"]\n\n        UserMgmt --&gt; Create[\"Create User Function\"]\n        UserMgmt --&gt; Read[\"View User Details\"]\n        UserMgmt --&gt; Update[\"Update User Function\"]\n        UserMgmt --&gt; Delete[\"Delete User Function\"]\n        UserMgmt --&gt; List[\"User Listing with Pagination\"]\n\n        Create --&gt; Validation[\"Input Validation\"]\n        Update --&gt; Validation\n        Delete --&gt; Confirmation[\"Deletion Confirmation\"]\n\n        Validation --&gt; DataAccess[\"Data Access Layer\"]\n        Confirmation --&gt; DataAccess\n        Read --&gt; DataAccess\n        List --&gt; DataAccess\n    end\n\n    DataAccess --&gt; DB[\"USRSEC File\"]\n    DB --&gt; DataAccess\n\n    Validation --&gt; Feedback[\"Feedback System\"]\n    Confirmation --&gt; Feedback\n    DataAccess --&gt; Feedback\n\n    Feedback --&gt; UI</code></pre>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#user-interface-management","title":"User Interface Management","text":"<p>This subtask manages the user interface for the security administration function, specifically for adding new users. It handles screen rendering, field population, cursor positioning, and error message display. The interface includes header information with application titles, transaction ID, program name, current date (MM/DD/YY format), and time (HH:MM:SS format). The component provides clear visual feedback through color-coded messages (success messages in green) and positions the cursor at appropriate fields based on the context (e.g., at the error field when validation fails or at the first name field when initializing). The interface supports function keys for navigation: Enter to process the form, PF3 to return to the admin menu, and PF4 to clear all fields. Error messages are prominently displayed to guide administrators through the user creation process. This subtask depends on BMS map COUSR1A for screen layout and field definitions.</p>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#references","title":"References","text":"<ul> <li>COUSR01C</li> <li>COUSR02C</li> </ul>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#user-record-deletion","title":"User Record Deletion","text":"<p>This subtask handles the deletion of user records from the USRSEC security file. It allows administrators to remove user accounts from the system when they are no longer needed. The process includes: (1) Displaying a screen where administrators can enter a user ID to delete, (2) Retrieving and displaying the user's details for verification before deletion, and (3) Executing the deletion upon confirmation. Business rules include: Users must be identified by a valid, non-empty user ID; the system verifies the user exists before allowing deletion; and confirmation is required via PF5 key to prevent accidental deletions. Error handling includes specific messages for empty user ID fields ('User ID can NOT be empty...'), non-existent users ('User ID NOT found...'), and file access issues ('Unable to lookup User...' or 'Unable to Update User...'). The component depends on the USRSEC file for user data storage and integrates with other administrative components through the common communication area, particularly with COADM01C (admin menu) and potentially other user management screens.</p>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#references_1","title":"References","text":"<ul> <li>COUSR03C</li> </ul>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#user-information-display","title":"User Information Display","text":"<p>This subtask retrieves and displays user information before deletion to ensure administrators can verify they are deleting the correct user. When an administrator enters a user ID, the system reads the USRSEC file to retrieve the user's first name, last name, and user type, displaying these details on screen. This allows administrators to confirm they have the correct user before proceeding with deletion. The system handles edge cases such as non-existent user IDs by displaying an appropriate error message ('User ID NOT found...') and preventing deletion of non-existent records. The component depends on the USRSEC file for retrieving user data and uses a READ with UPDATE option to lock the record before deletion.</p>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#references_2","title":"References","text":"<ul> <li>COUSR03C</li> </ul>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#user-profile-update","title":"User Profile Update","text":"<p>This subtask allows administrators to update existing user profiles in the CardDemo application. It retrieves user records from the USRSEC file based on user ID input, displays current information for editing, validates the modified data, and updates the user record. Business rules include: (1) Required fields validation - user ID, first name, last name, password, and user type cannot be empty; (2) Record existence validation - the system verifies the user ID exists before allowing updates; (3) Change detection - the system only processes updates when actual changes are made to the user profile; (4) The system provides visual feedback with color-coded messages (green for success, red for errors, neutral for informational); (5) Error handling for various scenarios including record not found conditions (e.g., 'User ID NOT found...') and update failures (e.g., 'Unable to Update User...'); (6) Navigation capabilities allow returning to previous screens (PF3/PF12), clearing input fields (PF4), and saving updates (PF5). Dependencies include the USRSEC file for user security data storage and integration with the admin menu system (COADM01C) for navigation.</p>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#references_3","title":"References","text":"<ul> <li>COUSR02C</li> </ul>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#user-data-validation","title":"User Data Validation","text":"<p>This subtask handles the validation of user data during the update process. It enforces data integrity rules before allowing updates to be committed to the USRSEC file. Business rules include: (1) Field presence validation - checks that all required fields (user ID, first name, last name, password, user type) contain values; (2) Specific error messages are displayed for each validation failure (e.g., 'User ID can NOT be empty...', 'First Name can NOT be empty...'); (3) Cursor positioning - when validation fails, the cursor is automatically positioned at the field that needs correction (using the -1 indicator for field length attributes); (4) The system prevents updates when no changes are detected, displaying 'Please modify to update...' message; (5) Error handling includes user-friendly messages and appropriate cursor positioning to guide the administrator through the correction process. This validation ensures that user security records maintain consistent and complete data, which is critical for the authentication and authorization processes within the application.</p>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#references_4","title":"References","text":"<ul> <li>COUSR02C</li> </ul>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#user-listing-management","title":"User Listing Management","text":"<p>This subtask provides a paginated interface for viewing and selecting users from the USRSEC file. It displays up to 10 users per page with their IDs, names, and user types. Business rules include: (1) Navigation through user records using PF7 (page up) and PF8 (page down) keys, with appropriate messaging when at the top or bottom of the list; (2) Maintaining pagination state between screens with first and last user IDs tracked in CDEMO-CU00-USRID-FIRST and CDEMO-CU00-USRID-LAST; (3) Support for user selection via 'U' (update) or 'D' (delete) options, which transfers control to COUSR02C or COUSR03C respectively; (4) Error handling for invalid selections with appropriate error messages; (5) Cursor positioning to guide user interaction; (6) Dependency on the USRSEC file for user data retrieval using STARTBR, READNEXT, READPREV, and ENDBR CICS commands. The component handles edge cases such as empty user lists, navigation beyond list boundaries, and invalid selection inputs.</p>"},{"location":"backlog/user_stories/Security%20Administration%20Interface%20for%20User%20Management.html#references_5","title":"References","text":"<ul> <li>COUSR00C</li> </ul>"},{"location":"backlog/user_stories/Sequential%20Card%20Data%20File%20Reading%20for%20Reporting.html","title":"Sequential Card Data File Reading for Reporting","text":""},{"location":"backlog/user_stories/Sequential%20Card%20Data%20File%20Reading%20for%20Reporting.html#user-story","title":"User Story","text":"<p>As a business analyst, I want to sequentially read credit card records from the CARDFILE database, so that I can generate customer data reports for analysis and decision-making.</p>"},{"location":"backlog/user_stories/Sequential%20Card%20Data%20File%20Reading%20for%20Reporting.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN the CARDFILE VSAM file exists WHEN the batch process is executed THEN all card records should be read sequentially until end-of-file is reached</li> <li>GIVEN a card record is read WHEN processing the record THEN the system should correctly parse the 16-character card number (FD-CARD-NUM) and 134 characters of card data (FD-CARD-DATA)</li> <li>GIVEN an error occurs during file operations WHEN opening, reading, or closing the file THEN appropriate error messages should be displayed with the specific file status code</li> <li>GIVEN a file status code '00' is received WHEN performing file operations THEN the system should continue normal processing</li> <li>GIVEN a file status code '10' is received WHEN reading a record THEN the system should recognize it as end-of-file condition and terminate normally</li> <li>GIVEN any other file status code is received WHEN performing file operations THEN the system should terminate with error code 999 after displaying the appropriate error message</li> </ol>"},{"location":"backlog/user_stories/Sequential%20Card%20Data%20File%20Reading%20for%20Reporting.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that all records in CARDFILE are read sequentially and displayed to standard output when the batch process is executed with a valid file</li> <li>Confirm the system correctly parses and displays the card number and card data from each record according to the defined structure in CVACT02Y copybook</li> <li>Validate that the system displays 'ERROR OPENING CARDFILE' with the appropriate status code when attempting to open a non-existent or inaccessible file</li> <li>Verify that the system handles the end-of-file condition (status code '10') correctly by terminating normally</li> <li>Confirm the system terminates with error code 999 when encountering file operation errors other than end-of-file</li> <li>Validate that large files with many records are processed completely without data corruption or performance issues</li> <li>Verify that records with special characters or boundary values in the card data are processed correctly</li> </ol>"},{"location":"backlog/user_stories/Sequential%20Card%20Data%20File%20Reading%20for%20Reporting.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    BA[\"Business Analyst\"] --&gt; |\"Initiates\"| BP[\"Batch Process\"]\n    BP --&gt; |\"Opens\"| CF[\"CARDFILE VSAM Database\"]\n    CF --&gt; |\"Sequential Read\"| RP[\"Record Processing\"]\n    RP --&gt; |\"Parses\"| CD[\"Card Data (FD-CARD-NUM, FD-CARD-DATA)\"]\n    CD --&gt; |\"Processes\"| RP\n    RP --&gt; |\"Status Code = 10\"| EOF[\"End-of-File Detection\"]\n    RP --&gt; |\"Status Code = 00\"| NP[\"Normal Processing\"]\n    RP --&gt; |\"Other Status Codes\"| EM[\"Error Management\"]\n    EOF --&gt; |\"Terminates Normally\"| TC[\"Process Completion\"]\n    NP --&gt; |\"Continue\"| CF\n    EM --&gt; |\"Error Code 999\"| TC\n    TC --&gt; |\"Generates\"| CR[\"Customer Data Reports\"]\n    CR --&gt; |\"Delivers to\"| BA</code></pre>"},{"location":"backlog/user_stories/Sequential%20Card%20Data%20File%20Reading%20for%20Reporting.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Sequential%20Card%20Data%20File%20Reading%20for%20Reporting.html#card-data-file-reading","title":"Card Data File Reading","text":"<p>This subtask handles the sequential reading of credit card records from an indexed VSAM file (CARDFILE) and displays each record to standard output. The component implements a batch process that reads through all card records in the file one by one until reaching the end of file. Business rules include: 1) Records are read sequentially rather than by specific key access, 2) Each record contains a 16-character card number (FD-CARD-NUM) followed by 134 characters of card data (FD-CARD-DATA). The component implements comprehensive error handling with specific status code reporting: '00' indicates successful operations, '10' indicates end-of-file condition, and other codes trigger controlled program termination with error code 999. For example, if opening the file fails, the program displays 'ERROR OPENING CARDFILE' along with the specific file status code before terminating. The component depends on the CVACT02Y copybook which likely contains the definition of the CARD-RECORD structure used to process the data. The program follows a standard batch processing pattern: open file, read records in a loop until EOF, close file, with error handling at each step.</p>"},{"location":"backlog/user_stories/Sequential%20Card%20Data%20File%20Reading%20for%20Reporting.html#references","title":"References","text":"<ul> <li>CBACT02C</li> </ul>"},{"location":"backlog/user_stories/Session%20Management%20for%20CardDemo%20Application.html","title":"Session Management for CardDemo Application","text":""},{"location":"backlog/user_stories/Session%20Management%20for%20CardDemo%20Application.html#user-story","title":"User Story","text":"<p>As a CardDemo application user, I want my session state to be maintained as I navigate through different components of the application, so that I can complete my tasks efficiently without losing context or having to re-enter information.</p>"},{"location":"backlog/user_stories/Session%20Management%20for%20CardDemo%20Application.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am a new user WHEN I first access the application THEN my session should be properly initialized with the CDEMO-PGM-REENTER flag set to TRUE</li> <li>GIVEN I am navigating the application WHEN I select a valid menu option THEN the system should transfer control to the appropriate program while maintaining my session context</li> <li>GIVEN I am using the application WHEN I move between different screens THEN my user information and navigation history should be preserved in the CARDDEMO-COMMAREA structure</li> <li>GIVEN I want to exit the application WHEN I press the PF3 key THEN the system should terminate my session and return me to the sign-on screen (COSGN00C)</li> <li>System should use CICS XCTL commands to transfer program control while passing the commarea to maintain state</li> <li>System should reference the CDEMO-MENU-OPT-PGMNAME array to determine the target program when a menu option is selected</li> </ol>"},{"location":"backlog/user_stories/Session%20Management%20for%20CardDemo%20Application.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that a new user session is correctly initialized with proper flags and default values in the CARDDEMO-COMMAREA</li> <li>Confirm that selecting each valid menu option transfers control to the correct target program as defined in the CDEMO-MENU-OPT-PGMNAME array</li> <li>Validate that user context information is preserved when navigating between different screens of the application</li> <li>Verify that pressing PF3 properly terminates the session and returns the user to the sign-on screen</li> <li>Test session behavior when invalid menu options are selected</li> <li>Confirm that all required copybooks (COCOM01Y, COMEN02Y, COTTL01Y, etc.) are properly included and their data structures are correctly utilized</li> <li>Validate that the session state is maintained even after multiple program transfers</li> </ol>"},{"location":"backlog/user_stories/Session%20Management%20for%20CardDemo%20Application.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"User\"]\n    SessionInit[\"Session Initialization\"]\n    MainMenu[\"Main Menu Component\"]\n    CommArea[\"CARDDEMO-COMMAREA\\n(Session State)\"]\n    NavController[\"Navigation Controller\\n(CICS XCTL)\"]\n    MenuOptArray[\"CDEMO-MENU-OPT-PGMNAME\\n(Program Mapping)\"]\n\n    subgraph \"CardDemo Application\"\n        SessionInit\n        MainMenu\n        CommArea\n        NavController\n        MenuOptArray\n\n        subgraph \"Application Components\"\n            Comp1[\"Component 1\"]\n            Comp2[\"Component 2\"]\n            CompN[\"Component N...\"]\n        end\n    end\n\n    User --&gt; SessionInit\n    SessionInit --&gt; |\"Initialize with\\nCDEMO-PGM-REENTER=TRUE\"| CommArea\n    SessionInit --&gt; MainMenu\n\n    MainMenu --&gt; |\"Menu Option Selected\"| NavController\n    NavController --&gt; |\"Lookup Target\"| MenuOptArray\n    MenuOptArray --&gt; |\"Return Program Name\"| NavController\n\n    NavController --&gt; |\"XCTL with CommArea\"| Comp1\n    NavController --&gt; |\"XCTL with CommArea\"| Comp2\n    NavController --&gt; |\"XCTL with CommArea\"| CompN\n\n    Comp1 --&gt; |\"Update State\"| CommArea\n    Comp2 --&gt; |\"Update State\"| CommArea\n    CompN --&gt; |\"Update State\"| CommArea\n\n    Comp1 --&gt; |\"Return Control\"| NavController\n    Comp2 --&gt; |\"Return Control\"| NavController\n    CompN --&gt; |\"Return Control\"| NavController\n\n    NavController --&gt; |\"PF3 Key\\nSession Termination\"| User</code></pre>"},{"location":"backlog/user_stories/Session%20Management%20for%20CardDemo%20Application.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Session%20Management%20for%20CardDemo%20Application.html#session-management","title":"Session Management","text":"<p>Manages user session state and navigation flow between different components of the CardDemo application. The component maintains session context through the CARDDEMO-COMMAREA structure, which preserves user information and navigation history. It handles program control transfers using CICS XCTL commands, passing the commarea to maintain state. When users select valid menu options, the component transfers control to the target program specified in CDEMO-MENU-OPT-PGMNAME array. The component implements session initialization logic by setting CDEMO-PGM-REENTER flag to TRUE on first entry. It also provides session termination functionality through the PF3 key, which returns users to the sign-on screen (COSGN00C). Dependencies include various copybooks (COCOM01Y, COMEN02Y, COTTL01Y, etc.) that define shared data structures and constants used across the application.</p>"},{"location":"backlog/user_stories/Session%20Management%20for%20CardDemo%20Application.html#references","title":"References","text":"<ul> <li>COMEN01C</li> </ul>"},{"location":"backlog/user_stories/Sign-on%20Screen%20Display%20and%20Navigation.html","title":"Sign-on Screen Display and Navigation","text":""},{"location":"backlog/user_stories/Sign-on%20Screen%20Display%20and%20Navigation.html#user-story","title":"User Story","text":"<p>As a CardDemo application user, I want a clear and functional sign-on screen, so that I can securely authenticate and access the application.</p>"},{"location":"backlog/user_stories/Sign-on%20Screen%20Display%20and%20Navigation.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN a user accesses the CardDemo application for the first time WHEN the application loads THEN the sign-on screen should be displayed with user ID and password fields</li> <li>GIVEN the sign-on screen is displayed WHEN viewing the header THEN it should show application title, current date (MM/DD/YY), current time (HH:MM:SS), transaction ID, program name, application ID, and system ID</li> <li>GIVEN a user is on the sign-on screen WHEN they press PF3 THEN a thank you message should be displayed and the session should end</li> <li>GIVEN a user is on the sign-on screen WHEN they press any function key other than PF3 THEN an 'Invalid key' error message should be displayed</li> <li>GIVEN a user attempts to log in WHEN validation errors occur THEN the sign-on screen should be redisplayed with appropriate error messages</li> </ol>"},{"location":"backlog/user_stories/Sign-on%20Screen%20Display%20and%20Navigation.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that the sign-on screen displays correctly when a user first accesses the application (EIBCALEN = 0)</li> <li>Confirm that all header information (application title, date, time, transaction ID, program name, application ID, system ID) is correctly displayed and formatted</li> <li>Validate that the current date is correctly formatted as MM/DD/YY and the current time as HH:MM:SS</li> <li>Verify that pressing PF3 displays the thank you message and exits the application</li> <li>Confirm that pressing any function key other than PF3 displays an 'Invalid key' error message</li> <li>Verify that the sign-on screen is redisplayed when validation errors occur during login attempts</li> <li>Test the sign-on screen display across different screen resolutions and terminal types</li> </ol>"},{"location":"backlog/user_stories/Sign-on%20Screen%20Display%20and%20Navigation.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User([\"User\"]) --&gt;|\"Accesses\"| App[\"CardDemo Application\"]\n    App --&gt;|\"Displays\"| SignOn[\"Sign-On Screen\"]\n    SignOn --&gt;|\"Contains\"| UIElements[\"UI Elements\"]\n    UIElements --&gt;|\"Includes\"| Header[\"Header Components\"]\n    UIElements --&gt;|\"Includes\"| InputFields[\"Authentication Fields\"]\n    UIElements --&gt;|\"Includes\"| FunctionKeys[\"Function Keys\"]\n\n    SignOn --&gt;|\"Processes\"| Auth[\"Authentication Service\"]\n    Auth --&gt;|\"Validates\"| Credentials[\"Credentials\"]\n\n    FunctionKeys --&gt;|\"PF3\"| SessionEnd[\"Session Termination\"]\n    FunctionKeys --&gt;|\"Other Keys\"| ErrorHandler[\"Error Handler\"]\n\n    Auth --&gt;|\"Valid\"| MainApp[\"Main Application\"]\n    Auth --&gt;|\"Invalid\"| ErrorHandler\n\n    ErrorHandler --&gt;|\"Displays Error\"| SignOn\n\n    Header --&gt;|\"Displays\"| AppInfo[\"Application Information\"]\n    Header --&gt;|\"Displays\"| SystemInfo[\"System Information\"]\n    Header --&gt;|\"Displays\"| TimeInfo[\"Date/Time Information\"]</code></pre>"},{"location":"backlog/user_stories/Sign-on%20Screen%20Display%20and%20Navigation.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Sign-on%20Screen%20Display%20and%20Navigation.html#sign-on-screen-display","title":"Sign-on Screen Display","text":"<p>Manages the presentation of the sign-on screen interface for the CardDemo application. The component displays a login form with fields for user ID and password, along with header information including application title, current date and time, transaction ID, program name, application ID, and system ID. The screen is displayed either when a user first accesses the application (EIBCALEN = 0) or when validation errors occur during login attempts. The component handles function keys, specifically recognizing PF3 as an exit key that displays a thank you message, while other function keys trigger an 'Invalid key' error message. The component populates header information dynamically, formatting the current date as MM/DD/YY and time as HH:MM:SS using the system date and time.</p>"},{"location":"backlog/user_stories/Sign-on%20Screen%20Display%20and%20Navigation.html#references","title":"References","text":"<ul> <li>COSGN00C</li> </ul>"},{"location":"backlog/user_stories/Standardized%20File%20Operation%20Error%20Handling%20for%20Account%20Data%20Access.html","title":"Standardized File Operation Error Handling for Account Data Access","text":""},{"location":"backlog/user_stories/Standardized%20File%20Operation%20Error%20Handling%20for%20Account%20Data%20Access.html#user-story","title":"User Story","text":"<p>As an account management system operator, I want standardized error handling and reporting for account cross-reference file operations, so that I can quickly identify and resolve data access issues without compromising data integrity.</p>"},{"location":"backlog/user_stories/Standardized%20File%20Operation%20Error%20Handling%20for%20Account%20Data%20Access.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN a file operation is performed WHEN the operation completes THEN the system should capture and evaluate the file status code</li> <li>GIVEN a successful file operation WHEN the status code is '00' THEN the system should continue normal processing</li> <li>GIVEN a file read operation WHEN the status code is '10' THEN the system should trigger appropriate end-of-file handling</li> <li>GIVEN a file operation error WHEN the status code is neither '00' nor '10' THEN the system should display a formatted error message and terminate processing</li> <li>GIVEN a numeric file status code WHEN displaying an error message THEN the system should format it as 'FILE STATUS IS: NNNN00xx' where xx is the status code</li> <li>GIVEN a non-numeric status code or one beginning with '9' WHEN displaying an error message THEN the system should perform binary conversion of the second byte and display it as 'FILE STATUS IS: NNNNxyyy'</li> <li>System should handle all VSAM file operations including open, read, and close operations for account cross-reference data</li> <li>Feature must prevent further processing when data access is compromised to maintain data integrity</li> </ol>"},{"location":"backlog/user_stories/Standardized%20File%20Operation%20Error%20Handling%20for%20Account%20Data%20Access.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that normal processing continues when a file operation returns status code '00'</li> <li>Verify that end-of-file handling is triggered when a read operation returns status code '10'</li> <li>Verify that the program terminates with abend code 999 when an unrecoverable error occurs</li> <li>Confirm error messages are correctly formatted as 'FILE STATUS IS: NNNN00xx' for standard numeric status codes</li> <li>Confirm error messages are correctly formatted as 'FILE STATUS IS: NNNNxyyy' for non-numeric status codes or those beginning with '9'</li> <li>Validate that binary conversion of the second byte is performed correctly for extended status codes</li> <li>Verify that all file operations (open, read, close) are properly monitored for errors</li> <li>Validate that the system prevents processing with compromised data access to maintain data integrity</li> </ol>"},{"location":"backlog/user_stories/Standardized%20File%20Operation%20Error%20Handling%20for%20Account%20Data%20Access.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    A[\"Account Management System\"] --&gt; B[\"File Operation Handler\"]\n    B --&gt; C[\"Status Code Evaluator\"]\n    C --&gt; D{\"Status Code?\"}\n    D --&gt;|\"00\"| E[\"Normal Processing\"]\n    D --&gt;|\"10\"| F[\"End-of-File Handler\"]\n    D --&gt;|\"Other\"| G[\"Error Handler\"]\n    G --&gt; H[\"Error Message Formatter\"]\n    H --&gt; I[\"Error Display\"]\n    H --&gt; J[\"Process Terminator\"]\n\n    B --&gt; K[\"VSAM File Operations\"]\n    K --&gt; L[\"Account Cross-Reference Files\"]\n    K --&gt; C\n\n    M[\"Data Integrity Protection\"] --&gt; B\n    M --&gt; G\n\n    subgraph \"Error Handling System\"\n        C\n        D\n        G\n        H\n        I\n        J\n    end\n\n    subgraph \"File Operations\"\n        K\n        L\n    end</code></pre>"},{"location":"backlog/user_stories/Standardized%20File%20Operation%20Error%20Handling%20for%20Account%20Data%20Access.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Standardized%20File%20Operation%20Error%20Handling%20for%20Account%20Data%20Access.html#account-cross-reference-data-validation","title":"Account Cross-Reference Data Validation","text":"<p>This subtask handles the validation and error processing for account cross-reference data access. It implements sophisticated error handling for VSAM file operations (open, read, close) with detailed status code reporting. The program converts both numeric and non-numeric file status codes into a standardized format for display. For numeric status codes, it displays them in the format 'FILE STATUS IS: NNNN00xx' where xx is the status code. For non-numeric status codes or those beginning with '9', it performs binary conversion of the second byte to display extended information in the format 'FILE STATUS IS: NNNNxyyy' where x is the first status byte and yyy is the converted value of the second byte. This provides operators with detailed diagnostic information about file access issues. The subtask uses a status code-based approach to determine program flow: status '00' continues normal processing, status '10' triggers end-of-file handling, and any other status triggers the error reporting and program termination sequence. This robust error handling ensures data integrity by preventing processing with compromised data access.</p>"},{"location":"backlog/user_stories/Standardized%20File%20Operation%20Error%20Handling%20for%20Account%20Data%20Access.html#references","title":"References","text":"<ul> <li>CBACT03C</li> </ul>"},{"location":"backlog/user_stories/Standardized%20File%20Operation%20Error%20Handling%20for%20Account%20Data%20Access.html#file-operation-error-handling","title":"File Operation Error Handling","text":"<p>This subtask provides comprehensive error handling for VSAM file operations including opening, reading, and closing the account file. It translates file status codes into user-readable messages and handles program termination when errors occur. The component uses a sophisticated error handling mechanism that: (1) Captures the file status code after each operation, (2) Determines if the operation was successful (status '00'), reached end-of-file (status '10'), or encountered an error, (3) For error conditions, displays descriptive messages and the specific file status code in a formatted manner (e.g., 'FILE STATUS IS: NNNN0037'), (4) Handles both numeric and non-numeric status codes with special processing for status codes beginning with '9', (5) Terminates the program with abend code 999 when unrecoverable errors occur. This ensures operational issues are clearly identified and reported.</p>"},{"location":"backlog/user_stories/Standardized%20File%20Operation%20Error%20Handling%20for%20Account%20Data%20Access.html#references_1","title":"References","text":"<ul> <li>CBACT01C</li> </ul>"},{"location":"backlog/user_stories/Standardized%20File%20Status%20Reporting%20for%20VSAM%20Operations.html","title":"Standardized File Status Reporting for VSAM Operations","text":""},{"location":"backlog/user_stories/Standardized%20File%20Status%20Reporting%20for%20VSAM%20Operations.html#user-story","title":"User Story","text":"<p>As a developer working with the CardDemo application, I want standardized and consistent file status reporting for all VSAM file operations, so that I can quickly identify and troubleshoot file access issues during development and maintenance.</p>"},{"location":"backlog/user_stories/Standardized%20File%20Status%20Reporting%20for%20VSAM%20Operations.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN a VSAM file operation completes WHEN the operation returns any status code THEN the system should display the status in a standardized format</li> <li>GIVEN a non-numeric status code or one beginning with '9' WHEN the status is reported THEN the system should format the first byte directly and convert the second byte from binary to display format</li> <li>GIVEN a standard numeric code WHEN the status is reported THEN the system should format it as '0000xx' where xx is the status code</li> <li>System should provide consistent error reporting across all file operations (open, read, close)</li> <li>Feature must be implemented in the 9910-DISPLAY-IO-STATUS procedure and called whenever a file operation returns a non-successful status code</li> </ol>"},{"location":"backlog/user_stories/Standardized%20File%20Status%20Reporting%20for%20VSAM%20Operations.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that a successful file operation with status '00' is displayed as 'FILE STATUS IS: NNNN0000'</li> <li>Verify that an end-of-file condition with status '10' is displayed as 'FILE STATUS IS: NNNN0010'</li> <li>Confirm the reporting mechanism handles non-numeric status codes by correctly formatting the first byte and converting the second byte</li> <li>Validate that status reporting works consistently across different file operations (open, read, write, close)</li> <li>Verify that the reporting mechanism is triggered for all non-successful file operations</li> <li>Confirm the reporting format remains consistent across different error conditions and file types</li> </ol>"},{"location":"backlog/user_stories/Standardized%20File%20Status%20Reporting%20for%20VSAM%20Operations.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    Dev[\"Developer\"] --&gt; App[\"CardDemo Application\"]\n    App --&gt; VSAM[\"VSAM File Operations\"]\n    VSAM --&gt; StatusHandler[\"9910-DISPLAY-IO-STATUS Procedure\"]\n\n    subgraph \"File Operations\"\n        Open[\"Open Operation\"]\n        Read[\"Read Operation\"]\n        Close[\"Close Operation\"]\n        Other[\"Other Operations\"]\n    end\n\n    Open --&gt; StatusHandler\n    Read --&gt; StatusHandler\n    Close --&gt; StatusHandler\n    Other --&gt; StatusHandler\n\n    subgraph \"Status Processing\"\n        StatusHandler --&gt; StatusCheck{\"Status Code\\nType?\"}\n        StatusCheck --&gt;|\"Non-numeric/9x\"| SpecialFormat[\"Format first byte directly\\nConvert second byte from binary\"]\n        StatusCheck --&gt;|\"Standard numeric\"| StandardFormat[\"Format as '0000xx'\"]\n        SpecialFormat --&gt; Display[\"Standardized Status Display\"]\n        StandardFormat --&gt; Display\n    end\n\n    Display --&gt; Dev</code></pre>"},{"location":"backlog/user_stories/Standardized%20File%20Status%20Reporting%20for%20VSAM%20Operations.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Standardized%20File%20Status%20Reporting%20for%20VSAM%20Operations.html#file-status-reporting","title":"File Status Reporting","text":"<p>This subtask provides detailed file operation status reporting for the VSAM file operations. It translates numeric and non-numeric file status codes into a standardized format for display. The component implements specialized handling for different types of file status codes: 1) For non-numeric status codes or those beginning with '9', it formats the first byte directly and converts the second byte from binary to display format, 2) For standard numeric codes, it formats them as '0000xx' where xx is the status code. For example, a file status of '00' would be displayed as 'FILE STATUS IS: NNNN0000', while a file status of '10' (end-of-file) would be displayed as 'FILE STATUS IS: NNNN0010'. This provides consistent error reporting across all file operations (open, read, close) and helps with debugging file access issues. The subtask is implemented in the 9910-DISPLAY-IO-STATUS procedure and is called whenever a file operation returns a non-successful status code.</p>"},{"location":"backlog/user_stories/Standardized%20File%20Status%20Reporting%20for%20VSAM%20Operations.html#references","title":"References","text":"<ul> <li>CBACT02C</li> </ul>"},{"location":"backlog/user_stories/Transaction%20Data%20Presentation%20Interface.html","title":"Transaction Data Presentation Interface","text":""},{"location":"backlog/user_stories/Transaction%20Data%20Presentation%20Interface.html#user-story","title":"User Story","text":"<p>As a CardDemo application user, I want transaction data to be presented in a clear, well-formatted interface, so that I can easily view, understand, and work with transaction details.</p>"},{"location":"backlog/user_stories/Transaction%20Data%20Presentation%20Interface.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am viewing a transaction WHEN the screen loads THEN the current date appears in MM/DD/YY format and time in HH:MM:SS format in the screen header</li> <li>GIVEN I am viewing transaction details WHEN financial amounts are displayed THEN they should have proper decimal alignment and sign indicators</li> <li>GIVEN I am viewing a transaction WHEN the screen is rendered THEN transaction metadata (processing timestamps, merchant details, and categorization) should be clearly visible</li> <li>GIVEN an error occurs during transaction processing WHEN the error is detected THEN error messages should be prominently displayed at the bottom of the screen</li> <li>GIVEN I navigate to a transaction screen WHEN the screen loads THEN the cursor should be positioned intelligently based on context (at transaction ID input field or error fields)</li> <li>GIVEN I am using any screen in the application WHEN screens are displayed THEN they should maintain consistent CardDemo application branding with standard title information</li> <li>GIVEN I am viewing transaction data WHEN the screen renders THEN the layout should follow mainframe user interface conventions using the COTRN01 mapset</li> </ol>"},{"location":"backlog/user_stories/Transaction%20Data%20Presentation%20Interface.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that the date and time are correctly formatted in the screen header when viewing transactions at different times of day</li> <li>Confirm transaction amounts display with proper decimal alignment for various values (positive, negative, zero, large amounts)</li> <li>Verify that all transaction metadata (timestamps, merchant details, categorization) is displayed correctly for different transaction types</li> <li>Validate that error messages appear at the bottom of the screen when various error conditions occur</li> <li>Confirm the cursor is positioned at the transaction ID field when the screen initially loads</li> <li>Verify the cursor automatically moves to error fields when validation errors occur</li> <li>Validate that all screens maintain consistent CardDemo branding elements across different transaction scenarios</li> <li>Verify the screen layout properly utilizes the COTRN01 mapset and required copybooks (COTTL01Y, CSDAT01Y, CSMSG01Y) for formatting</li> </ol>"},{"location":"backlog/user_stories/Transaction%20Data%20Presentation%20Interface.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"Application User\"]\n    UI[\"Transaction UI Layer\\n(COTRN01 mapset)\"]\n    FM1[\"Formatting Module\"]\n    TM1[\"Transaction Manager\"]\n    EM1[\"Error Handler\"]\n    DB[\"Transaction Database\"]\n\n    User --&gt; UI\n    UI --&gt; FM1\n    UI --&gt; TM1\n    TM1 --&gt; DB\n    DB --&gt; TM1\n    TM1 --&gt; FM1\n    FM1 --&gt; UI\n\n    EM1 --&gt; UI\n    TM1 -.-&gt; EM1\n\n    subgraph \"Presentation Layer\"\n        UI\n        FM[\"Formatting Module\\n- Date/Time formatting\\n- Financial amount alignment\\n- Consistent branding\\n- Cursor positioning\"]\n    end\n\n    subgraph \"Business Layer\"\n        TM[\"Transaction Manager\\n- Transaction processing\\n- Metadata handling\"]\n        EM[\"Error Handler\\n- Error detection\\n- Message formatting\"]\n    end\n\n    subgraph \"Data Layer\"\n        DB\n    end</code></pre>"},{"location":"backlog/user_stories/Transaction%20Data%20Presentation%20Interface.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Transaction%20Data%20Presentation%20Interface.html#transaction-data-presentation","title":"Transaction Data Presentation","text":"<p>This subtask handles the formatting and presentation of transaction data in a user-friendly interface. It populates the transaction detail screen with properly formatted data fields and maintains consistent header information. Business rules include: 1) The system formats the current date in MM/DD/YY format and time in HH:MM:SS format in the screen header; 2) Transaction amounts are displayed with appropriate decimal alignment and sign indicators; 3) The screen displays transaction metadata including processing timestamps, merchant details, and transaction categorization; 4) Error messages are prominently displayed at the bottom of the screen; 5) The cursor is positioned intelligently based on the context (typically at the transaction ID input field or at error fields); 6) The screen maintains consistent CardDemo application branding with standard title information. This component ensures that transaction data is presented in a clear, readable format that follows mainframe user interface conventions. It depends on the COTRN01 mapset for screen layout definition and various copybooks (COTTL01Y, CSDAT01Y, CSMSG01Y) for standard formatting elements.</p>"},{"location":"backlog/user_stories/Transaction%20Data%20Presentation%20Interface.html#references","title":"References","text":"<ul> <li>COTRN01C</li> </ul>"},{"location":"backlog/user_stories/Transaction%20List%20Navigation%20and%20Display.html","title":"Transaction List Navigation and Display","text":""},{"location":"backlog/user_stories/Transaction%20List%20Navigation%20and%20Display.html#user-story","title":"User Story","text":"<p>As a banking system user, I want to view and navigate through a paginated list of transactions, so that I can efficiently monitor and review customer transaction history.</p>"},{"location":"backlog/user_stories/Transaction%20List%20Navigation%20and%20Display.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am on the transaction list screen WHEN the screen loads THEN I should see 10 transactions per page with transaction ID, date, description, and amount</li> <li>GIVEN I am viewing a transaction list WHEN I press PF7 THEN the system should display the previous page of transactions</li> <li>GIVEN I am viewing a transaction list WHEN I press PF8 THEN the system should display the next page of transactions</li> <li>GIVEN I am on the first page of transactions WHEN I press PF7 THEN the system should display an appropriate message 'You are at the top of the page...'</li> <li>GIVEN I am on the last page of transactions WHEN I press PF8 THEN the system should display an appropriate message 'You have reached the bottom of the page...'</li> <li>GIVEN I am on the transaction list screen WHEN I enter a valid transaction ID in the input field THEN the system should position the list starting from that transaction ID</li> <li>GIVEN I am on the transaction list screen WHEN I enter a non-numeric value in the transaction ID field THEN the system should display an error message indicating that the ID must be numeric</li> <li>System should maintain the current page number in CDEMO-CT00-PAGE-NUM for pagination tracking</li> <li>System should track first and last transaction IDs displayed on the current page in CDEMO-CT00-TRNID-FIRST and CDEMO-CT00-TRNID-LAST variables</li> <li>Feature must use STARTBR, READNEXT, READPREV, and ENDBR CICS commands for efficient file navigation</li> </ol>"},{"location":"backlog/user_stories/Transaction%20List%20Navigation%20and%20Display.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that exactly 10 transactions are displayed per page when sufficient records exist</li> <li>Verify that fewer than 10 transactions are displayed on the last page when the total number of transactions is not divisible by 10</li> <li>Confirm pagination works correctly when pressing PF8 to move forward through multiple pages</li> <li>Confirm pagination works correctly when pressing PF7 to move backward through multiple pages</li> <li>Validate appropriate error message is displayed when attempting to navigate before the first page</li> <li>Validate appropriate error message is displayed when attempting to navigate beyond the last page</li> <li>Verify that entering a valid transaction ID positions the list starting with that transaction</li> <li>Verify that entering a transaction ID that doesn't exist positions the list at the closest matching ID</li> <li>Confirm error handling works correctly when non-numeric input is entered in the transaction ID field</li> <li>Validate that the system correctly maintains first and last transaction IDs for the current page</li> <li>Verify performance is acceptable when navigating through a large transaction dataset</li> </ol>"},{"location":"backlog/user_stories/Transaction%20List%20Navigation%20and%20Display.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"Banking System User\"]\n    UI[\"Transaction List Screen\"]\n    PaginationController[\"Pagination Controller\"]\n    TransactionProcessor[\"Transaction Processor\"]\n    ValidationService[\"Input Validation Service\"]\n    DataAccess[\"CICS Data Access Layer\"]\n    TransactionDB[(\"Transaction Database\")]\n    SessionStorage[\"Session Storage&lt;br&gt;(Page tracking variables)\"]\n\n    User --&gt; UI\n    UI --&gt; PaginationController\n    UI --&gt; ValidationService\n    PaginationController --&gt; TransactionProcessor\n    ValidationService --&gt; TransactionProcessor\n    TransactionProcessor --&gt; DataAccess\n    DataAccess &lt;--&gt; TransactionDB\n    PaginationController &lt;--&gt; SessionStorage\n\n    subgraph \"Core Functionality\"\n        PaginationController\n        TransactionProcessor\n        DataAccess\n    end\n\n    subgraph \"Data Operations\"\n        direction LR\n        STARTBR[\"STARTBR Command\"]\n        READNEXT[\"READNEXT Command\"]\n        READPREV[\"READPREV Command\"]\n        ENDBR[\"ENDBR Command\"]\n\n        DataAccess --&gt; STARTBR\n        DataAccess --&gt; READNEXT\n        DataAccess --&gt; READPREV\n        DataAccess --&gt; ENDBR\n    end</code></pre>"},{"location":"backlog/user_stories/Transaction%20List%20Navigation%20and%20Display.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Transaction%20List%20Navigation%20and%20Display.html#transaction-list-display","title":"Transaction List Display","text":"<p>This subtask manages the display of a paginated list of transactions from the TRANSACT file. It shows 10 transactions per page with transaction ID, date, description, and amount. The subtask handles pagination through PF7 (page up) and PF8 (page down) keys, maintaining the current page number in CDEMO-CT00-PAGE-NUM. When a user enters a specific transaction ID in the input field, the system positions the list starting from that ID. The subtask maintains first and last transaction IDs displayed on the current page (CDEMO-CT00-TRNID-FIRST and CDEMO-CT00-TRNID-LAST) to support pagination. Error handling includes validation of transaction ID input (must be numeric) and appropriate messages for navigation limits (e.g., 'You are at the top of the page...' or 'You have reached the bottom of the page...'). The component depends on the TRANSACT file for data access and uses STARTBR, READNEXT, READPREV, and ENDBR CICS commands for file navigation.</p>"},{"location":"backlog/user_stories/Transaction%20List%20Navigation%20and%20Display.html#references","title":"References","text":"<ul> <li>COTRN00C</li> </ul>"},{"location":"backlog/user_stories/Transaction%20Report%20Date%20Range%20Configuration.html","title":"Transaction Report Date Range Configuration","text":""},{"location":"backlog/user_stories/Transaction%20Report%20Date%20Range%20Configuration.html#user-story","title":"User Story","text":"<p>As a business user, I want to generate transaction reports for specific date ranges (monthly, yearly, or custom), so that I can analyze transaction data for relevant time periods without requesting IT assistance.</p>"},{"location":"backlog/user_stories/Transaction%20Report%20Date%20Range%20Configuration.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I select a monthly report WHEN I submit the report request THEN the system automatically sets the date range to the current month's first day to last day</li> <li>GIVEN I select a yearly report WHEN I submit the report request THEN the system automatically sets the date range to January 1 to December 31 of the current year</li> <li>GIVEN I select a custom report WHEN I enter start and end dates in YYYY-MM-DD format AND submit the report request THEN the system validates the dates and processes the report</li> <li>GIVEN I enter an invalid date format WHEN I submit the report request THEN the system displays an error message and positions the cursor at the field in error</li> <li>GIVEN I enter an invalid date (e.g., February 31) WHEN I submit the report request THEN the system displays 'Not a valid date...' error</li> <li>GIVEN I leave a date field empty WHEN I submit the report request THEN the system enforces mandatory field validation and displays an appropriate error message</li> <li>GIVEN valid date parameters are provided WHEN the report is generated THEN only transactions with processing timestamps within the specified date range are included in the report</li> <li>GIVEN the parameter file cannot be read or contains invalid data WHEN the report is requested THEN the program terminates with an appropriate error message</li> </ol>"},{"location":"backlog/user_stories/Transaction%20Report%20Date%20Range%20Configuration.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that selecting a monthly report automatically sets the date range to the current month without requiring user input</li> <li>Verify that selecting a yearly report automatically sets the date range to the current year without requiring user input</li> <li>Verify that custom date ranges require both start and end dates in YYYY-MM-DD format</li> <li>Confirm date validation rejects invalid formats (non-YYYY-MM-DD patterns)</li> <li>Confirm date validation rejects invalid dates (e.g., February 30, month &gt; 12, day &gt; 31)</li> <li>Validate that error messages are displayed with cursor positioning to the field in error</li> <li>Verify that transactions outside the specified date range are excluded from the report</li> <li>Verify that transactions within the specified date range are included in the report</li> <li>Confirm the system handles edge cases like leap years correctly</li> <li>Validate that the report fails gracefully with appropriate error messages when the parameter file is missing or corrupted</li> </ol>"},{"location":"backlog/user_stories/Transaction%20Report%20Date%20Range%20Configuration.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"Business User\"] --&gt; UI[\"Report Interface\"]\n    UI --&gt; DateSelector[\"Date Range Selector\"]\n    DateSelector --&gt; |\"Monthly\"|AutoDate1[\"Auto-calculate Current Month Range\"]\n    DateSelector --&gt; |\"Yearly\"|AutoDate2[\"Auto-calculate Current Year Range\"]\n    DateSelector --&gt; |\"Custom\"|CustomDate[\"Custom Date Input Fields\"]\n\n    CustomDate --&gt; DateValidator[\"Date Validation Service\"]\n    DateValidator --&gt; |\"Invalid Format/Date\"|ErrorHandler[\"Error Handling Service\"]\n    ErrorHandler --&gt; UI\n\n    AutoDate1 --&gt; ReportProcessor[\"Report Processing Engine\"]\n    AutoDate2 --&gt; ReportProcessor\n    DateValidator --&gt; |\"Valid Dates\"|ReportProcessor\n\n    ReportProcessor --&gt; TransactionDB[\"Transaction Database\"]\n    TransactionDB --&gt; |\"Transaction Data\"|ReportProcessor\n\n    ReportProcessor --&gt; |\"Filtered Transactions\"|ReportGenerator[\"Report Generator\"]\n    ReportGenerator --&gt; |\"Generated Report\"|UI\n\n    ReportProcessor --&gt; |\"Parameter/Data Error\"|ErrorHandler</code></pre>"},{"location":"backlog/user_stories/Transaction%20Report%20Date%20Range%20Configuration.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Transaction%20Report%20Date%20Range%20Configuration.html#report-parameter-management","title":"Report Parameter Management","text":"<p>This subtask handles the collection and validation of report parameters from users. For monthly reports, the system automatically calculates the date range (current month's first day to last day). For yearly reports, it sets January 1 to December 31 of the current year. For custom reports, it collects and validates start and end dates entered by the user. The date validation includes: (1) Format checking to ensure dates follow YYYY-MM-DD pattern, (2) Range validation to ensure months are 1-12 and days are 1-31, (3) Date validity checking using CSUTLDTC utility to verify dates like February 30 are rejected. For example, if February 31 is entered, the system will display 'Not a valid date...' error. The component enforces mandatory field validation - all date components (month, day, year) must be provided for both start and end dates. The system also converts user input from character to numeric format for validation using FUNCTION NUMVAL-C. Error handling includes field-specific error messages with cursor positioning to the field in error. This subtask depends on the CSUTLDTC utility for comprehensive date validation.</p>"},{"location":"backlog/user_stories/Transaction%20Report%20Date%20Range%20Configuration.html#references","title":"References","text":"<ul> <li>CORPT00C</li> </ul>"},{"location":"backlog/user_stories/Transaction%20Report%20Date%20Range%20Configuration.html#date-range-filtering","title":"Date Range Filtering","text":"<p>This subtask handles the filtering of transaction records based on a specified date range. The program reads start and end dates from a parameter file and uses these values to filter transactions for inclusion in the report. Only transactions with processing timestamps (TRAN-PROC-TS) falling within the specified date range are included. The date comparison uses a simple string comparison on the first 10 characters of the timestamp (YYYY-MM-DD format). For example, if the parameter file specifies a date range of '2023-01-01' to '2023-01-31', only transactions with processing dates in January 2023 will be included in the report. The business rule requires that both start and end dates must be provided in the parameter file in the correct format. If the parameter file cannot be read or contains invalid data, the program terminates with an error message. This filtering mechanism allows users to generate reports for specific time periods without modifying the program code. The subtask depends on the date parameter file (DATEPARM) and the transaction file's timestamp field.</p>"},{"location":"backlog/user_stories/Transaction%20Report%20Date%20Range%20Configuration.html#references_1","title":"References","text":"<ul> <li>CBTRN03C</li> </ul>"},{"location":"backlog/user_stories/Transaction%20Report%20Formatting%20and%20Display.html","title":"Transaction Report Formatting and Display","text":""},{"location":"backlog/user_stories/Transaction%20Report%20Formatting%20and%20Display.html#user-story","title":"User Story","text":"<p>As a banking application user, I want transaction data to be formatted in a user-friendly way when viewing transaction reports, so that I can easily read and understand the transaction information.</p>"},{"location":"backlog/user_stories/Transaction%20Report%20Formatting%20and%20Display.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am viewing a transaction report WHEN the report loads THEN transaction dates should be displayed in MM/DD/YY format</li> <li>GIVEN I am viewing a transaction report WHEN the report loads THEN transaction amounts should be displayed as signed numeric fields with two decimal places (+99999999.99)</li> <li>GIVEN I am viewing a transaction report WHEN the report loads THEN the header should display current date and time, application title, transaction name, and program name</li> <li>GIVEN I am viewing a transaction report WHEN there are multiple transactions THEN up to 10 transaction records should be displayed per page</li> <li>GIVEN I am viewing a transaction report WHEN transaction data is loaded THEN all transaction fields (ID, date, amount, etc.) should be properly populated and aligned</li> </ol>"},{"location":"backlog/user_stories/Transaction%20Report%20Formatting%20and%20Display.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that transaction dates are correctly converted from internal format '20220719' to display format '07/19/22'</li> <li>Verify that transaction amounts are correctly formatted with sign and two decimal places (e.g., +00000123.45)</li> <li>Confirm header information displays current system date/time, correct application title, transaction name, and program name</li> <li>Validate that exactly 10 transactions are displayed per page when more than 10 transactions are available</li> <li>Validate that fewer than 10 transactions are correctly displayed when less than 10 transactions are available</li> <li>Verify that all transaction fields (TRNID01I through TRNID10I, TDATE01I through TDATE10I, etc.) are populated with the correct data</li> </ol>"},{"location":"backlog/user_stories/Transaction%20Report%20Formatting%20and%20Display.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"Banking User\"] --&gt; UI[\"Transaction Report UI\"]\n    DB[(Transaction Database)] --&gt; TDR[\"Transaction Data Repository\"]\n    TDR --&gt; TFS[\"Transaction Formatting Service\"]\n    TFS --&gt; PGS[\"Pagination Service\"]\n\n    TFS --&gt; |\"Format Dates (MM/DD/YY)\"| FD[\"Date Formatter\"]\n    TFS --&gt; |\"Format Amounts (+99999999.99)\"| FA[\"Amount Formatter\"]\n    TFS --&gt; |\"Generate Headers\"| HG[\"Header Generator\"]\n\n    FD --&gt; RP[\"Report Presenter\"]\n    FA --&gt; RP\n    HG --&gt; RP\n    PGS --&gt; |\"10 records per page\"| RP\n\n    RP --&gt; UI\n    UI --&gt; User\n\n    subgraph \"Transaction Report System\"\n        TDR\n        TFS\n        FD\n        FA\n        HG\n        PGS\n        RP\n    end</code></pre>"},{"location":"backlog/user_stories/Transaction%20Report%20Formatting%20and%20Display.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Transaction%20Report%20Formatting%20and%20Display.html#transaction-data-formatting","title":"Transaction Data Formatting","text":"<p>This subtask handles the formatting and presentation of transaction data for display. It converts internal data formats to user-friendly display formats, particularly for dates and amounts. For transaction dates, it extracts the date portion from TRAN-ORIG-TS timestamp and reformats it as MM/DD/YY in WS-TRAN-DATE (e.g., converting '20220719' to '07/19/22'). For transaction amounts, it formats TRAN-AMT as a signed numeric field with two decimal places (format +99999999.99) for display. The subtask also populates header information including current date and time, application title, transaction name, and program name. It handles the population of up to 10 transaction records per page into the appropriate screen fields (TRNID01I through TRNID10I, TDATE01I through TDATE10I, etc.). This ensures consistent and user-friendly presentation of transaction data across the application.</p>"},{"location":"backlog/user_stories/Transaction%20Report%20Formatting%20and%20Display.html#references","title":"References","text":"<ul> <li>COTRN00C</li> </ul>"},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html","title":"Transaction Report Generation and Management","text":""},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#user-story","title":"User Story","text":"<p>As a financial analyst, I want to generate detailed transaction reports with flexible date range options, so that I can analyze card transaction patterns and provide accurate financial summaries to stakeholders.</p>"},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am on the report generation interface WHEN I select a report type (monthly, yearly, or custom) THEN the system should pre-populate appropriate date ranges based on my selection</li> <li>GIVEN I have selected a custom date range WHEN I enter dates in an incorrect format or invalid dates THEN the system should display specific validation errors and position the cursor at the error field</li> <li>GIVEN I have entered valid report parameters WHEN I confirm the report submission THEN the system should construct and submit the appropriate JCL job to generate the report</li> <li>GIVEN a report job has been submitted WHEN the batch process executes THEN transactions should be filtered by the specified date range and include all required supplementary information</li> <li>GIVEN transaction data exists for the specified period WHEN the report is generated THEN it should display transaction details organized by card number with proper formatting and pagination</li> <li>GIVEN multiple transactions exist for a card WHEN the report is generated THEN it should calculate and display page totals, account totals, and grand totals accurately</li> <li>GIVEN a lookup for supplementary information fails WHEN processing a transaction THEN the system should terminate with a clear error message identifying the specific lookup failure</li> <li>GIVEN a report has been generated WHEN viewing the first page THEN it must display the date range parameters being reported</li> </ol>"},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that monthly report selection automatically sets the date range from the first to the last day of the current month</li> <li>Verify that yearly report selection automatically sets the date range from January 1 to December 31 of the current year</li> <li>Confirm validation correctly identifies and reports format errors when entering dates (e.g., entering '13' for month displays 'Not a valid Month...' error)</li> <li>Validate that the system requires explicit confirmation (Y/y) before submitting any report job</li> <li>Verify that the JCL job is correctly constructed with appropriate date parameters based on the selected report type</li> <li>Confirm that transactions outside the specified date range are excluded from the report</li> <li>Verify that supplementary information (account ID, transaction type description, category description) is correctly retrieved and displayed for each transaction</li> <li>Test that page breaks occur after 20 detail lines with appropriate page totals displayed</li> <li>Validate that account totals are correctly calculated and displayed when changing to a new card number</li> <li>Verify that grand totals at the end of the report accurately reflect the sum of all transactions in the report</li> <li>Test error handling when a transaction references a non-existent transaction type or category</li> <li>Confirm that the first page of the report includes the date range parameters being reported</li> </ol>"},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    A[\"Financial Analyst\"] --&gt; B[\"Report Generation Interface\"]\n    B --&gt; C[\"Report Parameter Validation\"]\n    C --&gt;|\"Valid Parameters\"| D[\"Report Job Submission\"]\n    C --&gt;|\"Invalid Parameters\"| B\n    D --&gt; E[\"Batch Processing System\"]\n    E --&gt; F[\"Transaction Database\"]\n    F --&gt;|\"Transaction Data\"| E\n    E --&gt; G[\"Supplementary Data Service\"]\n    G --&gt;|\"Card/Account Info\"| E\n    E --&gt;|\"Processing Failure\"| H[\"Error Handling System\"]\n    E --&gt;|\"Successful Processing\"| I[\"Report Generation Engine\"]\n    I --&gt; J[\"Formatted Transaction Report\"]\n    J --&gt;|\"View/Download\"| A\n\n    subgraph \"Core Reporting System\"\n        B\n        C\n        D\n        I\n        J\n    end\n\n    subgraph \"Data Processing Layer\"\n        E\n        F\n        G\n        H\n    end</code></pre>"},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#transaction-report-job-submission","title":"Transaction Report Job Submission","text":"<p>This subtask allows users to generate transaction reports by submitting batch jobs from an online interface. The component provides three report types: monthly, yearly, and custom date range reports. Business rules include: (1) Monthly reports automatically use the current month as the date range (from first day of current month to last day), (2) Yearly reports use the entire current year (Jan 1 to Dec 31), (3) Custom reports require user-specified start and end dates. The component performs extensive date validation including: format validation (YYYY-MM-DD), range validation (months 1-12, days 1-31), and date validity checking using the CSUTLDTC utility. For example, if a user enters '13' for a month, the system will display 'Not a valid Month...' error. The component requires explicit user confirmation (Y/y) before submitting any report job. The job submission process uses an extra partition transient data queue (TDQ) named 'JOBS' to submit JCL to the internal reader. The JCL includes parameters for the date range that will be used by the batch job TRNRPT00 to filter transactions. Error handling includes comprehensive input validation with specific error messages for each validation failure and proper cursor positioning to the field in error. The component depends on the CSUTLDTC utility for date validation and the TRNRPT00 batch job for actual report generation.</p>"},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#references","title":"References","text":"<ul> <li>CORPT00C</li> </ul>"},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#jcl-job-construction","title":"JCL Job Construction","text":"<p>This subtask dynamically constructs the JCL job that will be submitted to generate the transaction report. The JCL includes a job card, JOBLIB statement, procedure execution statement (PROC=TRANREPT), and parameter specifications. The component builds the JCL with the appropriate date parameters based on the report type selected and dates provided. For monthly reports, it calculates the first and last day of the current month. For yearly reports, it sets January 1 to December 31 of the current year. For custom reports, it uses the validated user-provided dates. The date parameters are inserted into the JCL in two places: in the SYMNAMES DD statement (for symbolic variable substitution) and in the DATEPARM DD statement (for direct parameter passing). The JCL references a stored procedure (TRANREPT) that contains the actual report generation logic. The component writes each line of the constructed JCL to the 'JOBS' transient data queue, which serves as an interface to the internal reader for job submission. Error handling includes checking the response codes from the WRITEQ TD command and displaying an error message if the submission fails. This subtask depends on the existence of the AWS.M2.CARDDEMO.PROC library containing the TRANREPT procedure.</p>"},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#references_1","title":"References","text":"<ul> <li>CORPT00C</li> </ul>"},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#transaction-detail-report-generation","title":"Transaction Detail Report Generation","text":"<p>This subtask generates detailed transaction reports filtered by date range. The program reads transaction records from a sequential file and filters them based on start and end dates specified in a parameter file. For each transaction within the date range, it looks up additional information from three indexed files: a card cross-reference file to get account information, a transaction type file for transaction descriptions, and a transaction category file for category descriptions. The report is organized by card number and includes transaction details such as transaction ID, account ID, transaction type, category, source, and amount. The program calculates and displays running totals at three levels: page totals, account totals, and grand totals for transaction amounts. For example, if transactions of $100, $200, and $300 exist for a card, the account total would be $600. If this spans two pages with $300 on each, there would be page totals of $300 each. Business rules include: (1) Transactions are only included if their processing timestamp falls within the specified date range, (2) When a new card number is encountered, account totals for the previous card are printed, (3) Page totals are printed when a page is full (after 20 detail lines). Error handling includes validation of file operations with specific error codes displayed and program termination if critical errors occur. The program depends on five input files: transaction file, card cross-reference file, transaction type file, transaction category file, and date parameter file.</p>"},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#references_2","title":"References","text":"<ul> <li>CBTRN03C</li> </ul>"},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#transaction-data-lookup","title":"Transaction Data Lookup","text":"<p>This subtask handles the lookup of supplementary transaction information from multiple indexed files to enrich the transaction report data. For each transaction record, the program performs three key lookups: (1) Card cross-reference lookup - uses the card number to retrieve the associated account ID, (2) Transaction type lookup - uses the transaction type code to retrieve the transaction type description, (3) Transaction category lookup - uses both transaction type code and category code to retrieve the category description. These lookups are performed using VSAM indexed files with random access mode. The business rule requires that all lookups must be successful - if any lookup fails (invalid key), the program displays an error message with the specific key that failed and terminates execution. For example, if transaction type 'PU' is not found in the transaction type file, the program would display 'INVALID TRANSACTION TYPE: PU' and terminate. This ensures data integrity in the report by preventing incomplete or incorrect information from being displayed. The subtask depends on three indexed files: CARDXREF (card cross-reference file), TRANTYPE (transaction type file), and TRANCATG (transaction category file).</p>"},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#references_3","title":"References","text":"<ul> <li>CBTRN03C</li> </ul>"},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#transaction-report-formatting","title":"Transaction Report Formatting","text":"<p>This subtask handles the formatting and layout of the transaction detail report, ensuring proper organization and presentation of transaction data. The report includes headers, detail lines, and summary sections with totals. The program manages page breaks after every 20 detail lines (configurable via WS-PAGE-SIZE variable), printing appropriate headers and page totals. The report structure includes: (1) Report name header with date range parameters, (2) Column headers for transaction details, (3) Detail lines with transaction information, (4) Page totals at page breaks, (5) Account totals when changing to a new card number, and (6) Grand totals at the end of the report. For example, if a customer has transactions totaling $1,500 across multiple pages, the report would show individual transaction details, page subtotals at each page break, an account total of $1,500 when moving to the next customer, and a grand total of all transactions at the end. The business rule requires that the first page of the report must include the date range being reported (from the parameter file). The subtask handles the special case of the first page (WS-FIRST-TIME = 'Y') by printing initial headers. Error handling includes validation of write operations to the report file with program termination if errors occur.</p>"},{"location":"backlog/user_stories/Transaction%20Report%20Generation%20and%20Management.html#references_4","title":"References","text":"<ul> <li>CBTRN03C</li> </ul>"},{"location":"backlog/user_stories/Transaction%20Reporting%20Navigation%20System.html","title":"Transaction Reporting Navigation System","text":""},{"location":"backlog/user_stories/Transaction%20Reporting%20Navigation%20System.html#user-story","title":"User Story","text":"<p>As a CardDemo application user, I want a consistent and intuitive navigation system within the transaction reporting component, so that I can efficiently move between screens while maintaining my session context.</p>"},{"location":"backlog/user_stories/Transaction%20Reporting%20Navigation%20System.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am using the transaction reporting component WHEN I press PF3 THEN the system returns me to the previous menu (COMEN01C program)</li> <li>GIVEN I access the transaction reporting component for the first time (EIBCALEN = 0) WHEN the component initializes THEN I am redirected to the sign-on screen (COSGN00C)</li> <li>GIVEN I am on any screen within the transaction reporting component WHEN the screen renders THEN header information (application title, transaction ID, program name, current date, and time) is displayed</li> <li>GIVEN I am navigating between screens WHEN I move from one screen to another THEN my session state is preserved through the COMMAREA structure</li> <li>GIVEN I press an invalid function key WHEN the system processes my input THEN an appropriate error message is displayed without full screen erasure</li> <li>GIVEN I am viewing an error message WHEN I take corrective action THEN the system uses overlay display technique rather than full screen erase</li> </ol>"},{"location":"backlog/user_stories/Transaction%20Reporting%20Navigation%20System.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that pressing PF3 from any transaction reporting screen returns the user to the COMEN01C program</li> <li>Confirm that a new session (EIBCALEN = 0) redirects to the sign-on screen (COSGN00C)</li> <li>Validate that all screens display the correct header information including application title, transaction ID, program name, current date, and time</li> <li>Verify that session context is maintained when navigating between different screens within the component</li> <li>Confirm that pressing an undefined function key displays an appropriate error message</li> <li>Validate that the CARDDEMO-COMMAREA structure correctly tracks calling and target programs during navigation</li> <li>Verify that error messages are displayed using overlay technique rather than full screen erase</li> <li>Confirm that initial screen displays use full screen erase for proper rendering</li> </ol>"},{"location":"backlog/user_stories/Transaction%20Reporting%20Navigation%20System.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"CardDemo User\"]\n\n    subgraph \"Transaction Reporting Component\"\n        Navigation[\"Navigation System\"]\n        SessionMgmt[\"Session Management\"]\n        HeaderDisplay[\"Header Display Service\"]\n        ErrorHandler[\"Error Handling Service\"]\n\n        subgraph \"Screen Programs\"\n            COMEN01C[\"Previous Menu (COMEN01C)\"]\n            COSGN00C[\"Sign-on Screen (COSGN00C)\"]\n            ReportScreens[\"Transaction Report Screens\"]\n        end\n    end\n\n    COMMAREA[\"COMMAREA Structure\"]\n\n    User --&gt; Navigation\n    Navigation --&gt; COMEN01C\n    Navigation --&gt; COSGN00C\n    Navigation --&gt; ReportScreens\n\n    Navigation &lt;--&gt; SessionMgmt\n    SessionMgmt &lt;--&gt; COMMAREA\n\n    ReportScreens --&gt; HeaderDisplay\n    Navigation --&gt; ErrorHandler\n\n    COMEN01C -- \"PF3 Key\" --&gt; ReportScreens\n    COSGN00C -- \"First Access (EIBCALEN = 0)\" --&gt; ReportScreens\n    ErrorHandler -- \"Overlay Display\" --&gt; ReportScreens</code></pre>"},{"location":"backlog/user_stories/Transaction%20Reporting%20Navigation%20System.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/Transaction%20Reporting%20Navigation%20System.html#user-interface-navigation","title":"User Interface Navigation","text":"<p>This subtask manages the user interface flow and navigation within the transaction reporting component. It handles PF key processing, specifically recognizing PF3 as a return to previous menu (COMEN01C program). The component maintains session state through the COMMAREA, preserving context between interactions. When first accessed (EIBCALEN = 0), it redirects to the sign-on screen (COSGN00C). The component implements a screen rendering process that populates header information (application title, transaction ID, program name, current date, and time) on each display. It manages screen erasure based on context - using full screen erase for initial displays and overlay for error messages. The component handles invalid key presses by displaying appropriate error messages. Navigation state is maintained in the CARDDEMO-COMMAREA structure, which tracks the calling and target programs. This subtask depends on the CICS command level interface for screen management and program control operations.</p>"},{"location":"backlog/user_stories/Transaction%20Reporting%20Navigation%20System.html#references","title":"References","text":"<ul> <li>CORPT00C</li> </ul>"},{"location":"backlog/user_stories/User%20Registration%20System.html","title":"User Registration System","text":""},{"location":"backlog/user_stories/User%20Registration%20System.html#user-story","title":"User Story","text":"<p>As an administrator, I want to create and manage user accounts in the CardDemo application, so that authorized users can access the system with appropriate permissions.</p>"},{"location":"backlog/user_stories/User%20Registration%20System.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am on the user registration screen WHEN I enter all required user details (first name, last name, user ID, password, and user type) THEN a new user account is successfully created</li> <li>GIVEN I am on the user registration screen WHEN I attempt to create a user with an existing user ID THEN the system displays an error message 'User ID already exist...'</li> <li>GIVEN I am on the user registration screen WHEN I submit the form with any empty mandatory field THEN the system displays a specific validation message for that field</li> <li>GIVEN I am on the user registration screen WHEN I specify a user type THEN the system correctly assigns either regular or admin permissions</li> <li>GIVEN I am on the user registration screen WHEN I press PF3 THEN I am returned to the admin menu</li> <li>GIVEN I am on the user registration screen WHEN I press PF4 THEN the current screen is cleared</li> </ol>"},{"location":"backlog/user_stories/User%20Registration%20System.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that a new user account is successfully created when all mandatory fields are completed correctly</li> <li>Verify that the system prevents creation of accounts with duplicate user IDs</li> <li>Confirm each mandatory field (first name, last name, user ID, password, user type) triggers appropriate validation messages when left empty</li> <li>Validate that both regular and admin user types can be created with appropriate permissions</li> <li>Verify that user data is correctly stored in the USRSEC file after successful registration</li> <li>Confirm navigation functions work correctly: PF3 returns to admin menu and PF4 clears the screen</li> <li>Verify that the system handles special characters in name fields appropriately</li> <li>Test boundary conditions for field lengths (minimum/maximum characters)</li> </ol>"},{"location":"backlog/user_stories/User%20Registration%20System.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    A[\"Administrator\"] --&gt; B[\"User Registration Interface\"]\n    B --&gt; C[\"User Management Service\"]\n    C --&gt; D[\"Validation Service\"]\n    D --&gt; E[\"User ID Uniqueness Check\"]\n    D --&gt; F[\"Required Field Validation\"]\n    C --&gt; G[\"Permission Assignment Service\"]\n    G --&gt; H[\"Regular User Permissions\"]\n    G --&gt; I[\"Admin Permissions\"]\n    C --&gt; J[\"User Database\"]\n    B --&gt; K[\"Navigation Controller\"]\n    K --&gt; L[\"Admin Menu\"]\n    K --&gt; M[\"Screen Reset\"]\n\n    subgraph \"CardDemo Application\"\n        B\n        C\n        D\n        E\n        F\n        G\n        H\n        I\n        J\n        K\n        L\n        M\n    end</code></pre>"},{"location":"backlog/user_stories/User%20Registration%20System.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/User%20Registration%20System.html#user-registration","title":"User Registration","text":"<p>This subtask manages the creation of new user accounts in the CardDemo application security system. It captures and validates user details through a form interface and stores them in the USRSEC file. Business rules include: (1) All fields are mandatory - first name, last name, user ID, password, and user type must be provided; (2) User IDs must be unique in the system; (3) The system supports two types of users: regular users and admin users, specified in the user type field. The process validates all input fields before attempting to write to the database. Error handling includes specific validation messages for each empty field (e.g., 'First Name can NOT be empty...') and handling duplicate user ID errors with appropriate feedback ('User ID already exist...'). The component depends on the USRSEC file for storing user credentials and security information. Navigation options include returning to the admin menu (PF3) or clearing the current screen (PF4).</p>"},{"location":"backlog/user_stories/User%20Registration%20System.html#references","title":"References","text":"<ul> <li>COUSR01C</li> </ul>"},{"location":"backlog/user_stories/VSAM%20Customer%20Data%20Access%20Infrastructure.html","title":"VSAM Customer Data Access Infrastructure","text":""},{"location":"backlog/user_stories/VSAM%20Customer%20Data%20Access%20Infrastructure.html#user-story","title":"User Story","text":"<p>As a CardDemo application developer, I want a reliable VSAM file access management infrastructure, so that I can safely and consistently access customer data with proper error handling and reporting.</p>"},{"location":"backlog/user_stories/VSAM%20Customer%20Data%20Access%20Infrastructure.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN a VSAM customer data file WHEN the 0000-CUSTFILE-OPEN routine is called THEN the file is opened with proper status validation</li> <li>GIVEN an open VSAM customer file WHEN the 1000-CUSTFILE-GET-NEXT routine is called THEN the next customer record is retrieved with appropriate status handling</li> <li>GIVEN an open VSAM customer file WHEN the 9000-CUSTFILE-CLOSE routine is called THEN the file is properly closed with status validation</li> <li>GIVEN any file operation WHEN a non-zero status code occurs (except '10' for EOF) THEN the Z-DISPLAY-IO-STATUS routine formats and displays the error in a human-readable format</li> <li>GIVEN a critical file error WHEN the Z-ABEND-PROGRAM routine is triggered THEN the program terminates with abend code 999 and displays an appropriate error message</li> <li>System should standardize file status checking where '00' indicates success, '10' indicates EOF, and other codes trigger error handling</li> <li>Feature must convert non-numeric status codes to a standardized format (NNNN followed by a 4-digit code) for consistent error reporting</li> </ol>"},{"location":"backlog/user_stories/VSAM%20Customer%20Data%20Access%20Infrastructure.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that the CUSTFILE opens successfully when the file exists and has valid permissions</li> <li>Verify that the CUSTFILE-GET-NEXT routine correctly retrieves sequential records until EOF is reached</li> <li>Verify that the CUSTFILE-GET-NEXT routine correctly identifies and handles the EOF condition (status '10')</li> <li>Verify that the CUSTFILE-CLOSE routine properly closes an open file</li> <li>Confirm error handling correctly identifies and reports various error conditions (file not found, access denied, etc.)</li> <li>Confirm Z-DISPLAY-IO-STATUS correctly formats both numeric and non-numeric status codes</li> <li>Validate that the Z-ABEND-PROGRAM routine terminates execution with the correct abend code when critical errors occur</li> <li>Verify that all file operations properly validate the file status before proceeding</li> </ol>"},{"location":"backlog/user_stories/VSAM%20Customer%20Data%20Access%20Infrastructure.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    subgraph \"VSAM File Access Infrastructure\"\n        A[\"CardDemo Application\"] --&gt; B[\"File Access Management Layer\"]\n        B --&gt; C[\"Error Handling System\"]\n\n        subgraph \"Core File Operations\"\n            D[\"0000-CUSTFILE-OPEN\"] \n            E[\"1000-CUSTFILE-GET-NEXT\"]\n            F[\"9000-CUSTFILE-CLOSE\"]\n        end\n\n        subgraph \"Error Management\"\n            G[\"Z-DISPLAY-IO-STATUS\"]\n            H[\"Z-ABEND-PROGRAM\"]\n            I[\"Status Code Standardization\"]\n        end\n\n        B --&gt; D\n        B --&gt; E\n        B --&gt; F\n        C --&gt; G\n        C --&gt; H\n        C --&gt; I\n\n        D --&gt; J[\"VSAM Customer Data File\"]\n        E --&gt; J\n        F --&gt; J\n\n        J -- \"Status Codes\" --&gt; C\n    end\n\n    classDef operations fill:#f9f,stroke:#333,stroke-width:2px\n    classDef errorMgmt fill:#bbf,stroke:#333,stroke-width:2px\n    classDef storage fill:#bfb,stroke:#333,stroke-width:2px\n\n    class D,E,F operations\n    class G,H,I errorMgmt\n    class J storage</code></pre>"},{"location":"backlog/user_stories/VSAM%20Customer%20Data%20Access%20Infrastructure.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/VSAM%20Customer%20Data%20Access%20Infrastructure.html#vsam-file-access-management","title":"VSAM File Access Management","text":"<p>This subtask manages the low-level VSAM file operations required to access customer data. It includes specialized routines for opening (0000-CUSTFILE-OPEN), reading (1000-CUSTFILE-GET-NEXT), and closing (9000-CUSTFILE-CLOSE) the indexed VSAM file. Each operation includes validation of the file status and appropriate error handling. The component implements a standardized approach to file status checking where: 1) Status '00' indicates successful operation, 2) Status '10' indicates end-of-file condition, 3) Any other status triggers error handling. When errors occur, the Z-DISPLAY-IO-STATUS routine formats and displays the file status in a human-readable format, converting non-numeric status codes to a standardized format (NNNN followed by a 4-digit code). The Z-ABEND-PROGRAM routine terminates the program with abend code 999 after displaying an error message. This infrastructure ensures reliable data access with proper error detection and reporting.</p>"},{"location":"backlog/user_stories/VSAM%20Customer%20Data%20Access%20Infrastructure.html#references","title":"References","text":"<ul> <li>CBCUS01C</li> </ul>"},{"location":"backlog/user_stories/View%20Account%20Information.html","title":"View Account Information","text":""},{"location":"backlog/user_stories/View%20Account%20Information.html#user-story","title":"User Story","text":"<p>As a bank customer service representative, I want to retrieve and view comprehensive account information by entering an account number, so that I can assist customers with inquiries and resolve issues efficiently.</p>"},{"location":"backlog/user_stories/View%20Account%20Information.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am on the account information screen WHEN I enter a valid 11-digit account number THEN the system should display complete account details including financial data and customer information</li> <li>GIVEN I enter an invalid account number WHEN I submit the request THEN the system should display an appropriate error message explaining the validation failure</li> <li>GIVEN I enter a valid account number WHEN the account exists in the cross-reference file but not in the master file THEN the system should display a specific error message indicating the account was not found in the master file</li> <li>GIVEN I enter a valid account number WHEN the associated customer record cannot be found THEN the system should display an error message indicating the customer was not found</li> <li>System should format displayed data appropriately (SSN as XXX-XX-XXXX, currency with proper symbols, dates in standard format)</li> <li>System should provide clear navigation options for returning to previous screens or performing additional actions</li> <li>Feature must validate that the account number is numeric, non-zero, and exactly 11 digits in length</li> <li>Feature must check that the account exists in both the cross-reference file and account master file before attempting to display information</li> <li>Feature must display comprehensive account information including status, balances, credit limits, cycle credits/debits, and all relevant dates</li> <li>Feature must display complete customer information including personal details, address, and contact information</li> </ol>"},{"location":"backlog/user_stories/View%20Account%20Information.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that complete account information is displayed when a valid account number is entered</li> <li>Verify that appropriate error messages are displayed for each validation rule violation (empty input, non-numeric input, wrong length)</li> <li>Confirm the system correctly handles the scenario when an account exists in the cross-reference file but not in the master file</li> <li>Confirm the system correctly handles the scenario when an account exists but the associated customer record is not found</li> <li>Validate that SSN is properly formatted from raw data (123456789) to display format (123-45-6789)</li> <li>Validate that currency values are properly formatted with appropriate symbols and decimal places</li> <li>Validate that all date fields are properly formatted according to system standards</li> <li>Verify that all account details (status, balance, limits, dates) are correctly retrieved and displayed</li> <li>Verify that all customer details (ID, name, address, contact info) are correctly retrieved and displayed</li> <li>Confirm the system handles file access errors gracefully with appropriate error messages</li> <li>Verify that screen attributes are properly set (protected/unprotected fields, cursor positioning, color coding)</li> <li>Test navigation options to ensure users can easily return to previous screens or perform additional actions</li> </ol>"},{"location":"backlog/user_stories/View%20Account%20Information.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    CSR[\"Customer Service Representative\"] --&gt; UI[\"Account Information UI\"]\n    UI --&gt; Validator[\"Account Number Validator\"]\n    Validator --&gt; CrossRef[\"Cross-Reference File Service\"]\n    CrossRef --&gt; MasterFile[\"Account Master File Service\"]\n    MasterFile --&gt; CustomerDB[\"Customer Database Service\"]\n\n    Validator --&gt;|Invalid Format| UI\n    CrossRef --&gt;|Account Not Found| UI\n    MasterFile --&gt;|Account Not Found| UI\n    CustomerDB --&gt;|Customer Not Found| UI\n\n    CustomerDB --&gt;|Valid Request| DataFormatter[\"Data Formatter Service\"]\n    DataFormatter --&gt; ResponseBuilder[\"Response Builder\"]\n    ResponseBuilder --&gt; UI\n\n    subgraph \"Core System Components\"\n        Validator\n        CrossRef\n        MasterFile\n        CustomerDB\n        DataFormatter\n        ResponseBuilder\n    end\n\n    subgraph \"Data Sources\"\n        AccountData[(Account Data)]\n        CustomerData[(Customer Data)]\n    end\n\n    MasterFile --&gt; AccountData\n    CustomerDB --&gt; CustomerData</code></pre>"},{"location":"backlog/user_stories/View%20Account%20Information.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/View%20Account%20Information.html#account-detail-retrieval","title":"Account Detail Retrieval","text":"<p>This subtask retrieves and displays comprehensive account information when a user enters an account number. The process involves:</p> <ol> <li>Business Rules:</li> <li>Users must enter a valid 11-digit numeric account number</li> <li>The account must exist in the account cross-reference file and account master file</li> <li> <p>The system retrieves associated customer information to display a complete view</p> </li> <li> <p>Validation Rules:</p> </li> <li>Account ID must be numeric and non-zero</li> <li>Account ID must be 11 digits in length</li> <li>Account must exist in the cross-reference file (CXACAIX)</li> <li>Account must exist in the account master file (ACCTDAT)</li> <li> <p>Associated customer must exist in the customer master file (CUSTDAT)</p> </li> <li> <p>Error Handling:</p> </li> <li>Empty account number: 'Account number not provided'</li> <li>Non-numeric or zero account number: 'Account Filter must be a non-zero 11 digit number'</li> <li>Account not found in cross-reference: 'Account: [number] not found in Cross ref file'</li> <li>Account not found in master file: 'Account: [number] not found in Acct Master file'</li> <li>Customer not found: 'CustId: [number] not found in customer master'</li> <li> <p>File access errors: Detailed error messages with response codes</p> </li> <li> <p>Dependencies:</p> </li> <li>Requires access to three database files:<ul> <li>CXACAIX (Card-Account cross-reference file)</li> <li>ACCTDAT (Account master file)</li> <li>CUSTDAT (Customer master file)</li> </ul> </li> <li>Integrates with the CardDemo navigation framework</li> <li> <p>Uses common screen layout components</p> </li> <li> <p>Data Transformation:</p> </li> <li>Social Security Number formatting: Transforms raw SSN (e.g., 123456789) into formatted display (e.g., 123-45-6789)</li> <li>Currency formatting for financial fields (balance, credit limits)</li> <li>Date formatting for account dates (open date, expiration date, reissue date)</li> </ol>"},{"location":"backlog/user_stories/View%20Account%20Information.html#references","title":"References","text":"<ul> <li>COACTVWC</li> </ul>"},{"location":"backlog/user_stories/View%20Account%20Information.html#account-information-display","title":"Account Information Display","text":"<p>This subtask manages the presentation of account information on the screen, including formatting data fields, setting screen attributes, and handling the display of messages.</p> <ol> <li>Business Rules:</li> <li>Display comprehensive account information including financial data and customer details</li> <li>Format data fields appropriately for user readability</li> <li>Highlight errors and important information</li> <li> <p>Provide clear navigation options</p> </li> <li> <p>Display Components:</p> </li> <li>Account details: status, current balance, credit limits, cycle credits/debits</li> <li>Account dates: open date, expiration date, reissue date</li> <li>Customer information: ID, SSN, FICO score, DOB, name fields</li> <li>Customer address: multiple address lines, city, state, zip, country</li> <li> <p>Customer contact: phone numbers, government ID, EFT account</p> </li> <li> <p>Screen Attribute Management:</p> </li> <li>Sets input field attributes (protected/unprotected)</li> <li>Positions cursor based on context (error fields or input fields)</li> <li>Sets color attributes (red for errors, neutral for information)</li> <li> <p>Controls field highlighting based on validation results</p> </li> <li> <p>Message Handling:</p> </li> <li>Displays error messages in designated area</li> <li>Shows informational messages about current operation</li> <li> <p>Provides clear instructions for user actions</p> </li> <li> <p>Dependencies:</p> </li> <li>Uses BMS map COACTVW for screen layout</li> <li>Relies on common screen components (titles, date/time display)</li> <li>Integrates with CardDemo navigation framework for PF key handling</li> </ol>"},{"location":"backlog/user_stories/View%20Account%20Information.html#references_1","title":"References","text":"<ul> <li>COACTVWC</li> </ul>"},{"location":"backlog/user_stories/View%20Account%20Information.html#account-cross-reference-data-retrieval","title":"Account Cross-Reference Data Retrieval","text":"<p>This subtask retrieves and displays account cross-reference data from an indexed VSAM file (XREFFILE). The cross-reference data links credit card numbers with account information, providing a mapping mechanism between different identifiers in the system. The program sequentially reads records from the file and displays each record's content until the end of file is reached. Each record contains a 16-character card number (FD-XREF-CARD-NUM) and 34 characters of associated reference data (FD-XREF-DATA). The subtask implements comprehensive error handling for file operations with specific business rules: (1) File status '00' indicates successful operation, (2) File status '10' indicates end-of-file condition, (3) Any other status code triggers detailed error reporting and program termination. The program uses CEE3ABD with error code 999 to terminate in case of file access errors, ensuring data integrity by preventing partial processing. This component depends on the CVACT03Y copybook which likely contains the definition of the CARD-XREF-RECORD structure used for displaying the retrieved data.</p>"},{"location":"backlog/user_stories/View%20Account%20Information.html#references_2","title":"References","text":"<ul> <li>CBACT03C</li> </ul>"},{"location":"backlog/user_stories/View%20Account%20Information.html#account-data-retrieval","title":"Account Data Retrieval","text":"<p>This subtask sequentially reads account records from the ACCTFILE (an indexed VSAM file) and displays detailed account information. The component processes each record in the file until it reaches the end, displaying key account details including account ID, active status, current balance, credit limits, and important dates. Business rules include: (1) Records are accessed sequentially rather than by specific key, (2) All account records in the file are processed without filtering, (3) The program handles file operation errors with specific status codes - '00' for successful operations, '10' for end-of-file condition, and other codes for various error conditions. If any file operation error occurs (except normal EOF), the program displays the error status and terminates with abend code 999. The component depends on the CVACT01Y copybook which contains the account record structure definition.</p>"},{"location":"backlog/user_stories/View%20Account%20Information.html#references_3","title":"References","text":"<ul> <li>CBACT01C</li> </ul>"},{"location":"backlog/user_stories/View%20Account%20Information.html#account-data-display-formatting","title":"Account Data Display Formatting","text":"<p>This subtask formats and displays account information in a human-readable format. For each account record retrieved, it displays labeled fields including ACCT-ID, ACCT-ACTIVE-STATUS, ACCT-CURR-BAL, ACCT-CREDIT-LIMIT, ACCT-CASH-CREDIT-LIMIT, ACCT-OPEN-DATE, ACCT-EXPIRAION-DATE, ACCT-REISSUE-DATE, ACCT-CURR-CYC-CREDIT, ACCT-CURR-CYC-DEBIT, and ACCT-GROUP-ID. Each field is clearly labeled with a descriptive prefix followed by the actual data value. A separator line of dashes is displayed between account records for improved readability. This subtask is executed for each successfully retrieved account record and depends on the successful execution of the Account Data Retrieval subtask.</p>"},{"location":"backlog/user_stories/View%20Account%20Information.html#references_4","title":"References","text":"<ul> <li>CBACT01C</li> </ul>"},{"location":"backlog/user_stories/View%20Credit%20Card%20Details.html","title":"View Credit Card Details","text":""},{"location":"backlog/user_stories/View%20Credit%20Card%20Details.html#user-story","title":"User Story","text":"<p>As a credit card customer service representative, I want to view detailed information for a specific credit card by entering account and card numbers, so that I can assist customers with inquiries about their credit cards.</p>"},{"location":"backlog/user_stories/View%20Credit%20Card%20Details.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am on the credit card list screen WHEN I enter a valid 11-digit account number and 16-digit card number THEN the system displays the corresponding card details including embossed name, expiration date, and card status</li> <li>GIVEN I am on the credit card detail screen WHEN I enter an invalid account number (non-numeric, zeros, or not 11 digits) THEN the system highlights the field in red and displays an appropriate error message</li> <li>GIVEN I am on the credit card detail screen WHEN I enter an invalid card number (non-numeric, zeros, or not 16 digits) THEN the system highlights the field in red and displays an appropriate error message</li> <li>GIVEN I am on the credit card detail screen WHEN I leave either the account number or card number blank THEN the system displays an error message indicating the missing field</li> <li>GIVEN I am on the credit card detail screen WHEN I enter a valid account number but a card number that doesn't exist for that account THEN the system displays an error message indicating no matching card was found</li> <li>GIVEN I am on the credit card detail screen WHEN there is a file access error THEN the system displays an appropriate error message</li> </ol>"},{"location":"backlog/user_stories/View%20Credit%20Card%20Details.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that correct card details are displayed when valid 11-digit account number and 16-digit card number are entered</li> <li>Verify that an error message is displayed when a non-numeric account number is entered</li> <li>Verify that an error message is displayed when a non-numeric card number is entered</li> <li>Verify that an error message is displayed when an account number with fewer than 11 digits is entered</li> <li>Verify that an error message is displayed when a card number with fewer than 16 digits is entered</li> <li>Verify that an error message is displayed when an account number of all zeros is entered</li> <li>Verify that an error message is displayed when a card number of all zeros is entered</li> <li>Verify that an error message is displayed when the account number field is left blank</li> <li>Verify that an error message is displayed when the card number field is left blank</li> <li>Verify that an error message is displayed when a valid account number is entered with a card number that doesn't exist for that account</li> <li>Confirm that spaces or asterisks in input fields are treated as blank/low-values and appropriate error messages are displayed</li> <li>Validate that the system can handle file access errors and displays appropriate error messages</li> </ol>"},{"location":"backlog/user_stories/View%20Credit%20Card%20Details.html#diagram","title":"Diagram","text":"<pre><code>flowchart LR\n    CSR[\"Customer Service Representative\"] --&gt; UI[\"Credit Card UI\"]\n    UI --&gt; VL[\"Validation Layer\"]\n    VL --&gt; BL[\"Business Logic Layer\"]\n    BL --&gt; DB[\"Credit Card Database\"]\n\n    subgraph \"User Interface Components\"\n        SearchForm[\"Account/Card Search Form\"]\n        ResultsView[\"Card Details View\"]\n        ErrorDisplay[\"Error Notification Component\"]\n    end\n\n    UI --&gt; SearchForm\n    UI --&gt; ResultsView\n    UI --&gt; ErrorDisplay\n\n    subgraph \"Validation Process\"\n        AccountValidation[\"Account Number Validation\"]\n        CardValidation[\"Card Number Validation\"]\n        RequiredFieldCheck[\"Required Field Check\"]\n    end\n\n    VL --&gt; AccountValidation\n    VL --&gt; CardValidation\n    VL --&gt; RequiredFieldCheck\n\n    BL --&gt; ErrorHandler[\"Error Handling Service\"]\n    ErrorHandler --&gt; ErrorDisplay\n\n    DB --&gt; CardDetails[\"Card Information\\n(Embossed Name, Expiry, Status)\"]\n    CardDetails --&gt; ResultsView</code></pre>"},{"location":"backlog/user_stories/View%20Credit%20Card%20Details.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/View%20Credit%20Card%20Details.html#credit-card-detail-retrieval","title":"Credit Card Detail Retrieval","text":"<p>This subtask retrieves and displays detailed information for a specific credit card. It accepts account number and card number as inputs, validates them, and retrieves the corresponding card details from the card data file. The retrieved information includes the embossed name on the card, expiration date (month/year), and card status. Business rules include: (1) Account numbers must be 11-digit numeric values; non-numeric or zero values are rejected with appropriate error messages. (2) Card numbers must be 16-digit numeric values; non-numeric or zero values are rejected with appropriate error messages. (3) Both account number and card number are required; if either is missing, an error message is displayed. (4) The system validates that the card exists for the specified account; if not found, an error message is displayed. Error handling includes specific messages for invalid inputs (e.g., 'Account number must be a non zero 11 digit number'), record not found scenarios (e.g., 'Did not find cards for this search condition'), and file access errors. This subtask depends on the card data file (CARDDAT) and can be accessed from the credit card list screen (COCRDLIC).</p>"},{"location":"backlog/user_stories/View%20Credit%20Card%20Details.html#references","title":"References","text":"<ul> <li>COCRDSLC</li> </ul>"},{"location":"backlog/user_stories/View%20Credit%20Card%20Details.html#credit-card-input-validation","title":"Credit Card Input Validation","text":"<p>This subtask validates user inputs for credit card detail retrieval. It performs field-level validations to ensure data integrity before attempting to retrieve card information. Validation rules include: (1) Account number validation: Must be an 11-digit numeric value; cannot be spaces, zeros, or non-numeric characters. If invalid, the field is highlighted in red and an error message is displayed. (2) Card number validation: Must be a 16-digit numeric value; cannot be spaces, zeros, or non-numeric characters. If invalid, the field is highlighted in red and an error message is displayed. (3) Cross-field validation: Both account number and card number must be provided; if either is missing, an appropriate error message is displayed. The system handles edge cases such as asterisk (*) entries (treated as blank/low-values) and spaces (also treated as blank/low-values). Error messages are specific to the validation failure (e.g., 'Account number not provided', 'Card number not provided', 'Account number must be a non zero 11 digit number'). This subtask is critical for ensuring that only valid data is used for card detail retrieval operations.</p>"},{"location":"backlog/user_stories/View%20Credit%20Card%20Details.html#references_1","title":"References","text":"<ul> <li>COCRDSLC</li> </ul>"},{"location":"backlog/user_stories/View%20Transaction%20Details.html","title":"View Transaction Details","text":""},{"location":"backlog/user_stories/View%20Transaction%20Details.html#user-story","title":"User Story","text":"<p>As a card account user, I want to select and view detailed information about specific transactions from my transaction list, so that I can review complete transaction information and verify my account activity.</p>"},{"location":"backlog/user_stories/View%20Transaction%20Details.html#acceptance-criteria","title":"Acceptance Criteria","text":"<ol> <li>GIVEN I am viewing my transaction list WHEN I enter 'S' or 's' next to a transaction THEN the system should display the detailed information for that specific transaction</li> <li>GIVEN I am viewing my transaction list WHEN I enter any character other than 'S' or 's' in the selection field THEN the system should display an error message 'Invalid selection. Valid value is S'</li> <li>GIVEN I am viewing the transaction detail screen WHEN I press PF3 THEN the system should return me to the previous screen</li> <li>GIVEN I am viewing the transaction detail screen WHEN I press PF4 THEN the system should clear the current screen</li> <li>GIVEN I am viewing the transaction detail screen WHEN I press PF5 THEN the system should navigate to the transaction list screen</li> <li>GIVEN I am viewing the transaction detail screen WHEN a transaction ID is not found in the database THEN the system should display the error message 'Transaction ID NOT found...'</li> <li>GIVEN I am viewing the transaction detail screen WHEN I attempt to view details with an empty transaction ID THEN the system should display the error message 'Tran ID can NOT be empty...'</li> <li>System should display comprehensive transaction details including card number, transaction type, category, amount (with proper currency formatting), description, timestamps, and merchant information</li> <li>System should maintain context between screens through the shared CARDDEMO-COMMAREA communication area</li> </ol>"},{"location":"backlog/user_stories/View%20Transaction%20Details.html#test-scenarios","title":"Test Scenarios","text":"<ol> <li>Verify that a transaction's complete details are displayed when a user selects a transaction with 'S' from the list</li> <li>Verify that an error message is displayed when a user enters an invalid selection character</li> <li>Confirm navigation works correctly when using PF3 to return to previous screen, PF4 to clear screen, and PF5 to access transaction list</li> <li>Validate that transaction amounts are properly formatted with currency symbols and decimal places</li> <li>Verify appropriate error messages are displayed when attempting to view details for non-existent transaction IDs</li> <li>Verify appropriate error messages are displayed when attempting to view details with an empty transaction ID</li> <li>Confirm that all transaction details (card number, transaction type, category, amount, description, timestamps, merchant information) are correctly retrieved and displayed</li> <li>Validate that context is maintained when navigating between transaction list and transaction detail screens</li> <li>Verify that the system correctly handles database access errors with appropriate error messages</li> </ol>"},{"location":"backlog/user_stories/View%20Transaction%20Details.html#diagram","title":"Diagram","text":"<pre><code>flowchart TD\n    User[\"Card Account User\"]\n    UI[\"Transaction List UI\"]\n    DetailUI[\"Transaction Detail UI\"]\n    Controller[\"Transaction Controller\"]\n    DB[\"Transaction Database\"]\n    CommArea[\"CARDDEMO-COMMAREA\\n(Shared Context)\"]\n\n    User --&gt;|\"Views &amp; Selects\\nTransaction (S/s)\"| UI\n    UI --&gt;|\"Request Transaction\\nDetails\"| Controller\n    Controller --&gt;|\"Fetch Transaction\\nData\"| DB\n    DB --&gt;|\"Return Transaction\\nData\"| Controller\n    Controller --&gt;|\"Display Transaction\\nDetails\"| DetailUI\n    User --&gt;|\"Navigate (PF3/PF4/PF5)\"| DetailUI\n\n    CommArea -.-&gt;|\"Maintains Context\\nBetween Screens\"| UI\n    CommArea -.-&gt;|\"Maintains Context\\nBetween Screens\"| DetailUI\n    Controller -.-&gt;|\"Updates\"| CommArea\n\n    Controller --&gt;|\"Validate Selection\\n&amp; Handle Errors\"| UI\n    Controller --&gt;|\"Process Navigation\\nRequests\"| DetailUI</code></pre>"},{"location":"backlog/user_stories/View%20Transaction%20Details.html#subtasks","title":"Subtasks","text":""},{"location":"backlog/user_stories/View%20Transaction%20Details.html#transaction-selection","title":"Transaction Selection","text":"<p>This subtask enables users to select a specific transaction from the displayed list for detailed viewing. Users can enter 'S' or 's' in the selection field next to any transaction in the list. When a transaction is selected, the system captures the selection in CDEMO-CT00-TRN-SEL-FLG and stores the selected transaction ID in CDEMO-CT00-TRN-SELECTED. The system validates the selection input, accepting only 'S' or 's' as valid values and displaying an error message ('Invalid selection. Valid value is S') for any other input. Upon valid selection, the system transfers control to program COTRN01C, which displays detailed information about the selected transaction. This subtask maintains context between screens through the shared CARDDEMO-COMMAREA communication area, ensuring the user can navigate back to the transaction list after viewing details.</p>"},{"location":"backlog/user_stories/View%20Transaction%20Details.html#references","title":"References","text":"<ul> <li>COTRN00C</li> </ul>"},{"location":"backlog/user_stories/View%20Transaction%20Details.html#transaction-detail-retrieval","title":"Transaction Detail Retrieval","text":"<p>This subtask retrieves and displays detailed information about a specific transaction from the TRANSACT file. When a user enters a transaction ID, the system performs a lookup in the TRANSACT database and displays comprehensive transaction details including card number, transaction type, category, amount, description, timestamps, and merchant information. Business rules include: 1) Transaction ID is required and cannot be empty (validation enforced with error message 'Tran ID can NOT be empty...'); 2) The transaction must exist in the database (error message 'Transaction ID NOT found...' is displayed if not found); 3) The system formats and displays transaction amount with proper currency formatting (converting from internal numeric format to display format); 4) The system provides navigation options to return to previous screens (PF3), clear the current screen (PF4), or access the transaction list screen (PF5). Error handling includes specific messages for empty input, record not found conditions, and general database access errors. This component depends on the TRANSACT file for data retrieval and integrates with other components like COTRN00C (transaction list) and COMEN01C (menu screen) for navigation.</p>"},{"location":"backlog/user_stories/View%20Transaction%20Details.html#references_1","title":"References","text":"<ul> <li>COTRN01C</li> </ul>"},{"location":"copybooks/COADM02Y.html","title":"COADM02Y","text":""},{"location":"copybooks/COADM02Y.html#description","title":"Description","text":"<p>This copybook defines the structure for the CardDemo application's administration menu options, specifically focusing on user security management. It contains a data structure that holds information about four administrative functions: listing users, adding users, updating users, and deleting users. Each menu option is defined with a numeric identifier, descriptive text, and the associated program name to be called when selected. The structure is organized to allow for up to 9 menu options (though only 4 are currently defined) and includes a count field to track the actual number of options available. This copybook is likely used across multiple programs that need to display or process the administration menu within the CardDemo application.</p>"},{"location":"copybooks/COADM02Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      ******************************************************************\n      * CardDemo - Admin Menu Options\n      ******************************************************************\n      * Copyright Amazon.com, Inc. or its affiliates.                   \n      * All Rights Reserved.                                            \n      *                                                                 \n      * Licensed under the Apache License, Version 2.0 (the \"License\"). \n      * You may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at                         \n      *                                                                 \n      *    http://www.apache.org/licenses/LICENSE-2.0                   \n      *                                                                 \n      * Unless required by applicable law or agreed to in writing,      \n      * software distributed under the License is distributed on an     \n      * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n      * either express or implied. See the License for the specific     \n      * language governing permissions and limitations under the License\n      ****************************************************************** \n       01 CARDDEMO-ADMIN-MENU-OPTIONS.\n         05 CDEMO-ADMIN-OPT-COUNT           PIC 9(02) VALUE 4.\n\n         05 CDEMO-ADMIN-OPTIONS-DATA.\n\n           10 FILLER                        PIC 9(02) VALUE 1.\n           10 FILLER                        PIC X(35) VALUE\n               'User List (Security)               '.\n           10 FILLER                        PIC X(08) VALUE 'COUSR00C'.\n\n           10 FILLER                        PIC 9(02) VALUE 2.\n           10 FILLER                        PIC X(35) VALUE\n               'User Add (Security)                '.\n           10 FILLER                        PIC X(08) VALUE 'COUSR01C'.\n\n           10 FILLER                        PIC 9(02) VALUE 3.\n           10 FILLER                        PIC X(35) VALUE\n               'User Update (Security)             '.\n           10 FILLER                        PIC X(08) VALUE 'COUSR02C'.\n\n           10 FILLER                        PIC 9(02) VALUE 4.\n           10 FILLER                        PIC X(35) VALUE\n               'User Delete (Security)             '.\n           10 FILLER                        PIC X(08) VALUE 'COUSR03C'.\n\n         05 CDEMO-ADMIN-OPTIONS REDEFINES CDEMO-ADMIN-OPTIONS-DATA.\n           10 CDEMO-ADMIN-OPT OCCURS 9 TIMES.\n             15 CDEMO-ADMIN-OPT-NUM           PIC 9(02).\n             15 CDEMO-ADMIN-OPT-NAME          PIC X(35).\n             15 CDEMO-ADMIN-OPT-PGMNAME       PIC X(08).\n      *\n      * Ver: CardDemo_v1.0-26-g42273c1-79 Date: 2022-07-20 16:59:12 CDT\n      *\n</code></pre>"},{"location":"copybooks/COCOM01Y.html","title":"COCOM01Y","text":""},{"location":"copybooks/COCOM01Y.html#description","title":"Description","text":"<p>This copybook defines the communication area (COMMAREA) structure used for data exchange between programs in the CardDemo application. It contains several key sections: general information for tracking program flow and user context, customer identification and personal details, account information, card details, and interface tracking data. The structure includes fields for transaction IDs, program names, user identification with role classification (admin or user), program context flags, and core business data elements like customer ID, account status, and card number. This standardized data structure facilitates consistent information passing throughout the CardDemo application's program-to-program communication.</p>"},{"location":"copybooks/COCOM01Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      ******************************************************************\n      * Communication area for CardDemo application programs\n      ******************************************************************\n      * Copyright Amazon.com, Inc. or its affiliates.                   \n      * All Rights Reserved.                                            \n      *                                                                 \n      * Licensed under the Apache License, Version 2.0 (the \"License\"). \n      * You may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at                         \n      *                                                                 \n      *    http://www.apache.org/licenses/LICENSE-2.0                   \n      *                                                                 \n      * Unless required by applicable law or agreed to in writing,      \n      * software distributed under the License is distributed on an     \n      * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n      * either express or implied. See the License for the specific     \n      * language governing permissions and limitations under the License\n      ****************************************************************** \n       01 CARDDEMO-COMMAREA.\n          05 CDEMO-GENERAL-INFO.\n             10 CDEMO-FROM-TRANID             PIC X(04).\n             10 CDEMO-FROM-PROGRAM            PIC X(08).\n             10 CDEMO-TO-TRANID               PIC X(04).\n             10 CDEMO-TO-PROGRAM              PIC X(08).\n             10 CDEMO-USER-ID                 PIC X(08).\n             10 CDEMO-USER-TYPE               PIC X(01).\n                88 CDEMO-USRTYP-ADMIN         VALUE 'A'.\n                88 CDEMO-USRTYP-USER          VALUE 'U'.\n             10 CDEMO-PGM-CONTEXT             PIC 9(01).\n                88 CDEMO-PGM-ENTER            VALUE 0.\n                88 CDEMO-PGM-REENTER          VALUE 1.\n          05 CDEMO-CUSTOMER-INFO.\n             10 CDEMO-CUST-ID                 PIC 9(09).\n             10 CDEMO-CUST-FNAME              PIC X(25).\n             10 CDEMO-CUST-MNAME              PIC X(25).\n             10 CDEMO-CUST-LNAME              PIC X(25).\n          05 CDEMO-ACCOUNT-INFO.\n             10 CDEMO-ACCT-ID                 PIC 9(11).\n             10 CDEMO-ACCT-STATUS             PIC X(01).\n          05 CDEMO-CARD-INFO.\n             10 CDEMO-CARD-NUM                PIC 9(16).\n          05 CDEMO-MORE-INFO.\n             10  CDEMO-LAST-MAP               PIC X(7).\n             10  CDEMO-LAST-MAPSET            PIC X(7).\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:57 CDT\n      *\n</code></pre>"},{"location":"copybooks/COMEN02Y.html","title":"COMEN02Y","text":""},{"location":"copybooks/COMEN02Y.html#description","title":"Description","text":"<p>This copybook defines the menu structure for the CardDemo application's admin interface. It contains a data structure that holds 10 menu options, each with a number, description, program name, and user type indicator. The menu options provide access to various card management functions including account viewing and updating, credit card operations, transaction management, reporting, and bill payment. The structure is designed to be easily referenced by programs that need to display or process the admin menu, with a redefined area that allows accessing each option as an array element.</p>"},{"location":"copybooks/COMEN02Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      ******************************************************************\n      * CardDemo - Admin Menu Options\n      ******************************************************************\n      * Copyright Amazon.com, Inc. or its affiliates.                   \n      * All Rights Reserved.                                            \n      *                                                                 \n      * Licensed under the Apache License, Version 2.0 (the \"License\"). \n      * You may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at                         \n      *                                                                 \n      *    http://www.apache.org/licenses/LICENSE-2.0                   \n      *                                                                 \n      * Unless required by applicable law or agreed to in writing,      \n      * software distributed under the License is distributed on an     \n      * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n      * either express or implied. See the License for the specific     \n      * language governing permissions and limitations under the License\n      ****************************************************************** \n       01 CARDDEMO-MAIN-MENU-OPTIONS.\n\n         05 CDEMO-MENU-OPT-COUNT           PIC 9(02) VALUE 10.\n\n         05 CDEMO-MENU-OPTIONS-DATA.\n\n           10 FILLER                       PIC 9(02) VALUE 1.\n           10 FILLER                       PIC X(35) VALUE\n               'Account View                       '.\n           10 FILLER                       PIC X(08) VALUE 'COACTVWC'.\n           10 FILLER                       PIC X(01) VALUE 'U'.\n\n           10 FILLER                       PIC 9(02) VALUE 2.\n           10 FILLER                       PIC X(35) VALUE\n               'Account Update                     '.\n           10 FILLER                       PIC X(08) VALUE 'COACTUPC'.\n           10 FILLER                       PIC X(01) VALUE 'U'.\n\n           10 FILLER                       PIC 9(02) VALUE 3.\n           10 FILLER                       PIC X(35) VALUE\n               'Credit Card List                   '.\n           10 FILLER                       PIC X(08) VALUE 'COCRDLIC'.\n           10 FILLER                       PIC X(01) VALUE 'U'.\n\n           10 FILLER                       PIC 9(02) VALUE 4.\n           10 FILLER                       PIC X(35) VALUE\n               'Credit Card View                   '.\n           10 FILLER                       PIC X(08) VALUE 'COCRDSLC'.\n           10 FILLER                       PIC X(01) VALUE 'U'.\n\n           10 FILLER                       PIC 9(02) VALUE 5.\n           10 FILLER                       PIC X(35) VALUE\n               'Credit Card Update                 '.\n           10 FILLER                       PIC X(08) VALUE 'COCRDUPC'.\n           10 FILLER                       PIC X(01) VALUE 'U'.\n\n           10 FILLER                       PIC 9(02) VALUE 6.\n           10 FILLER                       PIC X(35) VALUE\n               'Transaction List                   '.\n           10 FILLER                       PIC X(08) VALUE 'COTRN00C'.\n           10 FILLER                       PIC X(01) VALUE 'U'.\n\n           10 FILLER                       PIC 9(02) VALUE 7.\n           10 FILLER                       PIC X(35) VALUE\n               'Transaction View                   '.\n           10 FILLER                       PIC X(08) VALUE 'COTRN01C'.\n           10 FILLER                       PIC X(01) VALUE 'U'.\n\n           10 FILLER                        PIC 9(02) VALUE 8.\n           10 FILLER                       PIC X(35) VALUE\n      *        'Transaction Add (Admin Only)       '.\n               'Transaction Add                    '.\n           10 FILLER                       PIC X(08) VALUE 'COTRN02C'.\n           10 FILLER                       PIC X(01) VALUE 'U'.\n\n           10 FILLER                       PIC 9(02) VALUE 9.\n           10 FILLER                       PIC X(35) VALUE\n               'Transaction Reports                '.\n           10 FILLER                       PIC X(08) VALUE 'CORPT00C'.\n           10 FILLER                       PIC X(01) VALUE 'U'.\n\n           10 FILLER                       PIC 9(02) VALUE 10.\n           10 FILLER                       PIC X(35) VALUE\n               'Bill Payment                       '.\n           10 FILLER                       PIC X(08) VALUE 'COBIL00C'.\n           10 FILLER                       PIC X(01) VALUE 'U'.\n\n\n         05 CDEMO-MENU-OPTIONS REDEFINES CDEMO-MENU-OPTIONS-DATA.\n           10 CDEMO-MENU-OPT OCCURS 12 TIMES.\n             15 CDEMO-MENU-OPT-NUM           PIC 9(02).\n             15 CDEMO-MENU-OPT-NAME          PIC X(35).\n             15 CDEMO-MENU-OPT-PGMNAME       PIC X(08).\n             15 CDEMO-MENU-OPT-USRTYPE       PIC X(01).\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT\n      *\n</code></pre>"},{"location":"copybooks/COTTL01Y.html","title":"COTTL01Y","text":""},{"location":"copybooks/COTTL01Y.html#description","title":"Description","text":"<p>This copybook defines the screen title elements used in the CardDemo application for AWS Mainframe Modernization. It contains three 40-character fields that make up the application's header display: a main title identifying it as an AWS Mainframe Modernization application, a secondary title showing \"CardDemo\" (with a commented-out alternative that would have shown \"Credit Card Demo Application (CCDA)\"), and a thank you message displayed to users. This copybook is likely included in various screens throughout the application to maintain consistent header formatting and branding.</p>"},{"location":"copybooks/COTTL01Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      ******************************************************************\n      * Copyright Amazon.com, Inc. or its affiliates.                   \n      * All Rights Reserved.                                            \n      *                                                                 \n      * Licensed under the Apache License, Version 2.0 (the \"License\"). \n      * You may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at                         \n      *                                                                 \n      *    http://www.apache.org/licenses/LICENSE-2.0                   \n      *                                                                 \n      * Unless required by applicable law or agreed to in writing,      \n      * software distributed under the License is distributed on an     \n      * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n      * either express or implied. See the License for the specific     \n      * language governing permissions and limitations under the License\n      ****************************************************************** \n       01 CCDA-SCREEN-TITLE.\n         05 CCDA-TITLE01    PIC X(40) VALUE\n            '      AWS Mainframe Modernization       '.\n         05 CCDA-TITLE02    PIC X(40) VALUE\n      *     '  Credit Card Demo Application (CCDA)   '.\n            '              CardDemo                  '.\n         05 CCDA-THANK-YOU  PIC X(40) VALUE\n            'Thank you for using CCDA application... '.\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT\n      *\n</code></pre>"},{"location":"copybooks/CSDAT01Y.html","title":"CSDAT01Y","text":""},{"location":"copybooks/CSDAT01Y.html#description","title":"Description","text":"<p>This copybook defines a comprehensive date and time data structure used throughout the CardDemo application. It provides multiple formats for representing date and time information, including numeric components, formatted display strings, and timestamp formats. The structure includes fields for year, month, day, hours, minutes, seconds, and milliseconds, with both individual components and combined representations. The copybook also includes redefinitions to allow accessing date and time values as numeric fields. This standardized date-time structure enables consistent handling of temporal data across the CardDemo application, supporting various formatting needs for display, calculations, and database operations.</p>"},{"location":"copybooks/CSDAT01Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      ******************************************************************\n      * Copyright Amazon.com, Inc. or its affiliates.                   \n      * All Rights Reserved.                                            \n      *                                                                 \n      * Licensed under the Apache License, Version 2.0 (the \"License\"). \n      * You may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at                         \n      *                                                                 \n      *    http://www.apache.org/licenses/LICENSE-2.0                   \n      *                                                                 \n      * Unless required by applicable law or agreed to in writing,      \n      * software distributed under the License is distributed on an     \n      * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n      * either express or implied. See the License for the specific     \n      * language governing permissions and limitations under the License\n      ****************************************************************** \n       01 WS-DATE-TIME.\n         05 WS-CURDATE-DATA.\n           10  WS-CURDATE.\n             15  WS-CURDATE-YEAR         PIC 9(04).\n             15  WS-CURDATE-MONTH        PIC 9(02).\n             15  WS-CURDATE-DAY          PIC 9(02).\n           10 WS-CURDATE-N REDEFINES WS-CURDATE PIC 9(08).\n           10  WS-CURTIME.\n             15  WS-CURTIME-HOURS        PIC 9(02).\n             15  WS-CURTIME-MINUTE       PIC 9(02).\n             15  WS-CURTIME-SECOND       PIC 9(02).\n             15  WS-CURTIME-MILSEC       PIC 9(02).\n           10 WS-CURTIME-N REDEFINES WS-CURTIME PIC 9(08).\n         05 WS-CURDATE-MM-DD-YY.\n           10  WS-CURDATE-MM             PIC 9(02).\n           10  FILLER                    PIC X(01) VALUE '/'.\n           10  WS-CURDATE-DD             PIC 9(02).\n           10  FILLER                    PIC X(01) VALUE '/'.\n           10  WS-CURDATE-YY             PIC 9(02).\n         05 WS-CURTIME-HH-MM-SS.\n           10  WS-CURTIME-HH             PIC 9(02).\n           10  FILLER                    PIC X(01) VALUE ':'.\n           10  WS-CURTIME-MM             PIC 9(02).\n           10  FILLER                    PIC X(01) VALUE ':'.\n           10  WS-CURTIME-SS             PIC 9(02).\n         05 WS-TIMESTAMP.\n           10  WS-TIMESTAMP-DT-YYYY      PIC 9(04).\n           10  FILLER                    PIC X(01) VALUE '-'.\n           10  WS-TIMESTAMP-DT-MM        PIC 9(02).\n           10  FILLER                    PIC X(01) VALUE '-'.\n           10  WS-TIMESTAMP-DT-DD        PIC 9(02).\n           10  FILLER                    PIC X(01) VALUE ' '.\n           10  WS-TIMESTAMP-TM-HH        PIC 9(02).\n           10  FILLER                    PIC X(01) VALUE ':'.\n           10  WS-TIMESTAMP-TM-MM        PIC 9(02).\n           10  FILLER                    PIC X(01) VALUE ':'.\n           10  WS-TIMESTAMP-TM-SS        PIC 9(02).\n           10  FILLER                    PIC X(01) VALUE '.'.\n           10  WS-TIMESTAMP-TM-MS6       PIC 9(06).\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT\n      *\n</code></pre>"},{"location":"copybooks/CSLKPCDY.html","title":"CSLKPCDY","text":""},{"location":"copybooks/CSLKPCDY.html#description","title":"Description","text":"<p>This copybook serves as a lookup code repository for validating various geographic codes in North America. It contains three main validation structures:</p> <ol> <li> <p>North American phone area codes - Defines a field WS-US-PHONE-AREA-CODE-TO-EDIT with condition names that validate telephone area codes. It includes both standard area codes sourced from the North American Numbering Plan Administrator (NANPA) and easily recognizable patterns (like 222, 333, etc.).</p> </li> <li> <p>US state codes - Defines US-STATE-CODE-TO-EDIT with a condition name VALID-US-STATE-CODE that validates standard two-letter state and territory codes (like AL, CA, NY).</p> </li> <li> <p>State-ZIP code combinations - Defines US-STATE-ZIPCODE-TO-EDIT which validates combinations of state codes with the first two digits of ZIP codes, ensuring geographic consistency between states and their associated postal codes.</p> </li> </ol> <p>The copybook is designed to be included in programs that need to validate geographic data entry, particularly for customer information processing in the CardDemo application.</p>"},{"location":"copybooks/CSLKPCDY.html#copybook-code","title":"Copybook Code","text":"<pre><code>      ******************************************************************\n      *Lookup code repository \n      *       1) North america phone area codes\n      *       2) United States - state codes \n      *       3) United States - state + first 2 of zip   \n      *\n      ******************************************************************\n      * Copyright Amazon.com, Inc. or its affiliates.                   \n      * All Rights Reserved.                                            \n      *                                                                 \n      * Licensed under the Apache License, Version 2.0 (the \"License\"). \n      * You may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at                         \n      *                                                                 \n      *    http://www.apache.org/licenses/LICENSE-2.0                   \n      *                                                                 \n      * Unless required by applicable law or agreed to in writing,      \n      * software distributed under the License is distributed on an     \n      * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n      * either express or implied. See the License for the specific     \n      * language governing permissions and limitations under the License\n      ****************************************************************** \n\n       01 WS-US-PHONE-AREA-CODE-TO-EDIT PIC XXX.\n      ******************************************************************\n      *North America Phone area codes List obtained from North America \n      *Numbering Plan Administrator *nanpa\n      *https://nationalnanpa.com/nanp1/npa_report.csv\n      ******************************************************************\n          88 VALID-PHONE-AREA-CODE VALUES '201',                 \n                                    '202',\n                                    '203',\n                                    '204',\n                                    '205',\n                                    '206',\n                                    '207',\n                                    '208',\n                                    '209',\n                                    '210',\n                                    '212',\n                                    '213',\n                                    '214',\n                                    '215',\n                                    '216',\n                                    '217',\n                                    '218',\n                                    '219',\n                                    '220',\n                                    '223',\n                                    '224',\n                                    '225',\n                                    '226',\n                                    '228',\n                                    '229',\n                                    '231',\n                                    '234',\n                                    '236',\n                                    '239',\n                                    '240',\n                                    '242',\n                                    '246',\n                                    '248',\n                                    '249',\n                                    '250',\n                                    '251',\n                                    '252',\n                                    '253',\n                                    '254',\n                                    '256',\n                                    '260',\n                                    '262',\n                                    '264',\n                                    '267',\n                                    '268',\n                                    '269',\n                                    '270',\n                                    '272',\n                                    '276',\n                                    '279',\n                                    '281',\n                                    '284',\n                                    '289',\n                                    '301',\n                                    '302',\n                                    '303',\n                                    '304',\n                                    '305',\n                                    '306',\n                                    '307',\n                                    '308',\n                                    '309',\n                                    '310',\n                                    '312',\n                                    '313',\n                                    '314',\n                                    '315',\n                                    '316',\n                                    '317',\n                                    '318',\n                                    '319',\n                                    '320',\n                                    '321',\n                                    '323',\n                                    '325',\n                                    '326',\n                                    '330',\n                                    '331',\n                                    '332',\n                                    '334',\n                                    '336',\n                                    '337',\n                                    '339',\n                                    '340',\n                                    '341',\n                                    '343',\n                                    '345',\n                                    '346',\n                                    '347',\n                                    '351',\n                                    '352',\n                                    '360',\n                                    '361',\n                                    '364',\n                                    '365',\n                                    '367',\n                                    '368',\n                                    '380',\n                                    '385',\n                                    '386',\n                                    '401',\n                                    '402',\n                                    '403',\n                                    '404',\n                                    '405',\n                                    '406',\n                                    '407',\n                                    '408',\n                                    '409',\n                                    '410',\n                                    '412',\n                                    '413',\n                                    '414',\n                                    '415',\n                                    '416',\n                                    '417',\n                                    '418',\n                                    '419',\n                                    '423',\n                                    '424',\n                                    '425',\n                                    '430',\n                                    '431',\n                                    '432',\n                                    '434',\n                                    '435',\n                                    '437',\n                                    '438',\n                                    '440',\n                                    '441',\n                                    '442',\n                                    '443',\n                                    '445',\n                                    '447',\n                                    '448',\n                                    '450',\n                                    '458',\n                                    '463',\n                                    '464',\n                                    '469',\n                                    '470',\n                                    '473',\n                                    '474',\n                                    '475',\n                                    '478',\n                                    '479',\n                                    '480',\n                                    '484',\n                                    '501',\n                                    '502',\n                                    '503',\n                                    '504',\n                                    '505',\n                                    '506',\n                                    '507',\n                                    '508',\n                                    '509',\n                                    '510',\n                                    '512',\n                                    '513',\n                                    '514',\n                                    '515',\n                                    '516',\n                                    '517',\n                                    '518',\n                                    '519',\n                                    '520',\n                                    '530',\n                                    '531',\n                                    '534',\n                                    '539',\n                                    '540',\n                                    '541',\n                                    '548',\n                                    '551',\n                                    '559',\n                                    '561',\n                                    '562',\n                                    '563',\n                                    '564',\n                                    '567',\n                                    '570',\n                                    '571',\n                                    '572',\n                                    '573',\n                                    '574',\n                                    '575',\n                                    '579',\n                                    '580',\n                                    '581',\n                                    '582',\n                                    '585',\n                                    '586',\n                                    '587',\n                                    '601',\n                                    '602',\n                                    '603',\n                                    '604',\n                                    '605',\n                                    '606',\n                                    '607',\n                                    '608',\n                                    '609',\n                                    '610',\n                                    '612',\n                                    '613',\n                                    '614',\n                                    '615',\n                                    '616',\n                                    '617',\n                                    '618',\n                                    '619',\n                                    '620',\n                                    '623',\n                                    '626',\n                                    '628',\n                                    '629',\n                                    '630',\n                                    '631',\n                                    '636',\n                                    '639',\n                                    '640',\n                                    '641',\n                                    '646',\n                                    '647',\n                                    '649',\n                                    '650',\n                                    '651',\n                                    '656',\n                                    '657',\n                                    '658',\n                                    '659',\n                                    '660',\n                                    '661',\n                                    '662',\n                                    '664',\n                                    '667',\n                                    '669',\n                                    '670',\n                                    '671',\n                                    '672',\n                                    '678',\n                                    '680',\n                                    '681',\n                                    '682',\n                                    '683',\n                                    '684',\n                                    '689',\n                                    '701',\n                                    '702',\n                                    '703',\n                                    '704',\n                                    '705',\n                                    '706',\n                                    '707',\n                                    '708',\n                                    '709',\n                                    '712',\n                                    '713',\n                                    '714',\n                                    '715',\n                                    '716',\n                                    '717',\n                                    '718',\n                                    '719',\n                                    '720',\n                                    '721',\n                                    '724',\n                                    '725',\n                                    '726',\n                                    '727',\n                                    '731',\n                                    '732',\n                                    '734',\n                                    '737',\n                                    '740',\n                                    '742',\n                                    '743',\n                                    '747',\n                                    '753',\n                                    '754',\n                                    '757',\n                                    '758',\n                                    '760',\n                                    '762',\n                                    '763',\n                                    '765',\n                                    '767',\n                                    '769',\n                                    '770',\n                                    '771',\n                                    '772',\n                                    '773',\n                                    '774',\n                                    '775',\n                                    '778',\n                                    '779',\n                                    '780',\n                                    '781',\n                                    '782',\n                                    '784',\n                                    '785',\n                                    '786',\n                                    '787',\n                                    '801',\n                                    '802',\n                                    '803',\n                                    '804',\n                                    '805',\n                                    '806',\n                                    '807',\n                                    '808',\n                                    '809',\n                                    '810',\n                                    '812',\n                                    '813',\n                                    '814',\n                                    '815',\n                                    '816',\n                                    '817',\n                                    '818',\n                                    '819',\n                                    '820',\n                                    '825',\n                                    '826',\n                                    '828',\n                                    '829',\n                                    '830',\n                                    '831',\n                                    '832',\n                                    '838',\n                                    '839',\n                                    '840',\n                                    '843',\n                                    '845',\n                                    '847',\n                                    '848',\n                                    '849',\n                                    '850',\n                                    '854',\n                                    '856',\n                                    '857',\n                                    '858',\n                                    '859',\n                                    '860',\n                                    '862',\n                                    '863',\n                                    '864',\n                                    '865',\n                                    '867',\n                                    '868',\n                                    '869',\n                                    '870',\n                                    '872',\n                                    '873',\n                                    '876',\n                                    '878',\n                                    '901',\n                                    '902',\n                                    '903',\n                                    '904',\n                                    '905',\n                                    '906',\n                                    '907',\n                                    '908',\n                                    '909',\n                                    '910',\n                                    '912',\n                                    '913',\n                                    '914',\n                                    '915',\n                                    '916',\n                                    '917',\n                                    '918',\n                                    '919',\n                                    '920',\n                                    '925',\n                                    '928',\n                                    '929',\n                                    '930',\n                                    '931',\n                                    '934',\n                                    '936',\n                                    '937',\n                                    '938',\n                                    '939',\n                                    '940',\n                                    '941',\n                                    '943',\n                                    '945',\n                                    '947',\n                                    '948',\n                                    '949',\n                                    '951',\n                                    '952',\n                                    '954',\n                                    '956',\n                                    '959',\n                                    '970',\n                                    '971',\n                                    '972',\n                                    '973',\n                                    '978',\n                                    '979',\n                                    '980',\n                                    '983',\n                                    '984',\n                                    '985',\n                                    '986',\n                                    '989',\n      *Easily recognizable codes begin here.\n                                     '200',\n                                     '211',\n                                     '222',\n                                     '233',\n                                     '244',\n                                     '255',\n                                     '266',\n                                     '277',\n                                     '288',\n                                     '299',\n                                     '300',\n                                     '311',\n                                     '322',\n                                     '333',\n                                     '344',\n                                     '355',\n                                     '366',\n                                     '377',\n                                     '388',\n                                     '399',\n                                     '400',\n                                     '411',\n                                     '422',\n                                     '433',\n                                     '444',\n                                     '455',\n                                     '466',\n                                     '477',\n                                     '488',\n                                     '499',\n                                     '500',\n                                     '511',\n                                     '522',\n                                     '533',\n                                     '544',\n                                     '555',\n                                     '566',\n                                     '577',\n                                     '588',\n                                     '599',\n                                     '600',\n                                     '611',\n                                     '622',\n                                     '633',\n                                     '644',\n                                     '655',\n                                     '666',\n                                     '677',\n                                     '688',\n                                     '699',\n                                     '700',\n                                     '711',\n                                     '722',\n                                     '733',\n                                     '744',\n                                     '755',\n                                     '766',\n                                     '777',\n                                     '788',\n                                     '799',\n                                     '800',\n                                     '811',\n                                     '822',\n                                     '833',\n                                     '844',\n                                     '855',\n                                     '866',\n                                     '877',\n                                     '888',\n                                     '899',\n                                     '900',\n                                     '911',\n                                     '922',\n                                     '933',\n                                     '944',\n                                     '955',\n                                     '966',\n                                     '977',\n                                     '988',\n                                     '999'.\n          88 VALID-GENERAL-PURP-CODE VALUES '201',        \n                                    '202',\n                                    '203',\n                                    '204',\n                                    '205',\n                                    '206',\n                                    '207',\n                                    '208',\n                                    '209',\n                                    '210',\n                                    '212',\n                                    '213',\n                                    '214',\n                                    '215',\n                                    '216',\n                                    '217',\n                                    '218',\n                                    '219',\n                                    '220',\n                                    '223',\n                                    '224',\n                                    '225',\n                                    '226',\n                                    '228',\n                                    '229',\n                                    '231',\n                                    '234',\n                                    '236',\n                                    '239',\n                                    '240',\n                                    '242',\n                                    '246',\n                                    '248',\n                                    '249',\n                                    '250',\n                                    '251',\n                                    '252',\n                                    '253',\n                                    '254',\n                                    '256',\n                                    '260',\n                                    '262',\n                                    '264',\n                                    '267',\n                                    '268',\n                                    '269',\n                                    '270',\n                                    '272',\n                                    '276',\n                                    '279',\n                                    '281',\n                                    '284',\n                                    '289',\n                                    '301',\n                                    '302',\n                                    '303',\n                                    '304',\n                                    '305',\n                                    '306',\n                                    '307',\n                                    '308',\n                                    '309',\n                                    '310',\n                                    '312',\n                                    '313',\n                                    '314',\n                                    '315',\n                                    '316',\n                                    '317',\n                                    '318',\n                                    '319',\n                                    '320',\n                                    '321',\n                                    '323',\n                                    '325',\n                                    '326',\n                                    '330',\n                                    '331',\n                                    '332',\n                                    '334',\n                                    '336',\n                                    '337',\n                                    '339',\n                                    '340',\n                                    '341',\n                                    '343',\n                                    '345',\n                                    '346',\n                                    '347',\n                                    '351',\n                                    '352',\n                                    '360',\n                                    '361',\n                                    '364',\n                                    '365',\n                                    '367',\n                                    '368',\n                                    '380',\n                                    '385',\n                                    '386',\n                                    '401',\n                                    '402',\n                                    '403',\n                                    '404',\n                                    '405',\n                                    '406',\n                                    '407',\n                                    '408',\n                                    '409',\n                                    '410',\n                                    '412',\n                                    '413',\n                                    '414',\n                                    '415',\n                                    '416',\n                                    '417',\n                                    '418',\n                                    '419',\n                                    '423',\n                                    '424',\n                                    '425',\n                                    '430',\n                                    '431',\n                                    '432',\n                                    '434',\n                                    '435',\n                                    '437',\n                                    '438',\n                                    '440',\n                                    '441',\n                                    '442',\n                                    '443',\n                                    '445',\n                                    '447',\n                                    '448',\n                                    '450',\n                                    '458',\n                                    '463',\n                                    '464',\n                                    '469',\n                                    '470',\n                                    '473',\n                                    '474',\n                                    '475',\n                                    '478',\n                                    '479',\n                                    '480',\n                                    '484',\n                                    '501',\n                                    '502',\n                                    '503',\n                                    '504',\n                                    '505',\n                                    '506',\n                                    '507',\n                                    '508',\n                                    '509',\n                                    '510',\n                                    '512',\n                                    '513',\n                                    '514',\n                                    '515',\n                                    '516',\n                                    '517',\n                                    '518',\n                                    '519',\n                                    '520',\n                                    '530',\n                                    '531',\n                                    '534',\n                                    '539',\n                                    '540',\n                                    '541',\n                                    '548',\n                                    '551',\n                                    '559',\n                                    '561',\n                                    '562',\n                                    '563',\n                                    '564',\n                                    '567',\n                                    '570',\n                                    '571',\n                                    '572',\n                                    '573',\n                                    '574',\n                                    '575',\n                                    '579',\n                                    '580',\n                                    '581',\n                                    '582',\n                                    '585',\n                                    '586',\n                                    '587',\n                                    '601',\n                                    '602',\n                                    '603',\n                                    '604',\n                                    '605',\n                                    '606',\n                                    '607',\n                                    '608',\n                                    '609',\n                                    '610',\n                                    '612',\n                                    '613',\n                                    '614',\n                                    '615',\n                                    '616',\n                                    '617',\n                                    '618',\n                                    '619',\n                                    '620',\n                                    '623',\n                                    '626',\n                                    '628',\n                                    '629',\n                                    '630',\n                                    '631',\n                                    '636',\n                                    '639',\n                                    '640',\n                                    '641',\n                                    '646',\n                                    '647',\n                                    '649',\n                                    '650',\n                                    '651',\n                                    '656',\n                                    '657',\n                                    '658',\n                                    '659',\n                                    '660',\n                                    '661',\n                                    '662',\n                                    '664',\n                                    '667',\n                                    '669',\n                                    '670',\n                                    '671',\n                                    '672',\n                                    '678',\n                                    '680',\n                                    '681',\n                                    '682',\n                                    '683',\n                                    '684',\n                                    '689',\n                                    '701',\n                                    '702',\n                                    '703',\n                                    '704',\n                                    '705',\n                                    '706',\n                                    '707',\n                                    '708',\n                                    '709',\n                                    '712',\n                                    '713',\n                                    '714',\n                                    '715',\n                                    '716',\n                                    '717',\n                                    '718',\n                                    '719',\n                                    '720',\n                                    '721',\n                                    '724',\n                                    '725',\n                                    '726',\n                                    '727',\n                                    '731',\n                                    '732',\n                                    '734',\n                                    '737',\n                                    '740',\n                                    '742',\n                                    '743',\n                                    '747',\n                                    '753',\n                                    '754',\n                                    '757',\n                                    '758',\n                                    '760',\n                                    '762',\n                                    '763',\n                                    '765',\n                                    '767',\n                                    '769',\n                                    '770',\n                                    '771',\n                                    '772',\n                                    '773',\n                                    '774',\n                                    '775',\n                                    '778',\n                                    '779',\n                                    '780',\n                                    '781',\n                                    '782',\n                                    '784',\n                                    '785',\n                                    '786',\n                                    '787',\n                                    '801',\n                                    '802',\n                                    '803',\n                                    '804',\n                                    '805',\n                                    '806',\n                                    '807',\n                                    '808',\n                                    '809',\n                                    '810',\n                                    '812',\n                                    '813',\n                                    '814',\n                                    '815',\n                                    '816',\n                                    '817',\n                                    '818',\n                                    '819',\n                                    '820',\n                                    '825',\n                                    '826',\n                                    '828',\n                                    '829',\n                                    '830',\n                                    '831',\n                                    '832',\n                                    '838',\n                                    '839',\n                                    '840',\n                                    '843',\n                                    '845',\n                                    '847',\n                                    '848',\n                                    '849',\n                                    '850',\n                                    '854',\n                                    '856',\n                                    '857',\n                                    '858',\n                                    '859',\n                                    '860',\n                                    '862',\n                                    '863',\n                                    '864',\n                                    '865',\n                                    '867',\n                                    '868',\n                                    '869',\n                                    '870',\n                                    '872',\n                                    '873',\n                                    '876',\n                                    '878',\n                                    '901',\n                                    '902',\n                                    '903',\n                                    '904',\n                                    '905',\n                                    '906',\n                                    '907',\n                                    '908',\n                                    '909',\n                                    '910',\n                                    '912',\n                                    '913',\n                                    '914',\n                                    '915',\n                                    '916',\n                                    '917',\n                                    '918',\n                                    '919',\n                                    '920',\n                                    '925',\n                                    '928',\n                                    '929',\n                                    '930',\n                                    '931',\n                                    '934',\n                                    '936',\n                                    '937',\n                                    '938',\n                                    '939',\n                                    '940',\n                                    '941',\n                                    '943',\n                                    '945',\n                                    '947',\n                                    '948',\n                                    '949',\n                                    '951',\n                                    '952',\n                                    '954',\n                                    '956',\n                                    '959',\n                                    '970',\n                                    '971',\n                                    '972',\n                                    '973',\n                                    '978',\n                                    '979',\n                                    '980',\n                                    '983',\n                                    '984',\n                                    '985',\n                                    '986',\n                                    '989'.\n          88 VALID-EASY-RECOG-AREA-CODE VALUES  '200',\n                                     '211',\n                                     '222',\n                                     '233',\n                                     '244',\n                                     '255',\n                                     '266',\n                                     '277',\n                                     '288',\n                                     '299',\n                                     '300',\n                                     '311',\n                                     '322',\n                                     '333',\n                                     '344',\n                                     '355',\n                                     '366',\n                                     '377',\n                                     '388',\n                                     '399',\n                                     '400',\n                                     '411',\n                                     '422',\n                                     '433',\n                                     '444',\n                                     '455',\n                                     '466',\n                                     '477',\n                                     '488',\n                                     '499',\n                                     '500',\n                                     '511',\n                                     '522',\n                                     '533',\n                                     '544',\n                                     '555',\n                                     '566',\n                                     '577',\n                                     '588',\n                                     '599',\n                                     '600',\n                                     '611',\n                                     '622',\n                                     '633',\n                                     '644',\n                                     '655',\n                                     '666',\n                                     '677',\n                                     '688',\n                                     '699',\n                                     '700',\n                                     '711',\n                                     '722',\n                                     '733',\n                                     '744',\n                                     '755',\n                                     '766',\n                                     '777',\n                                     '788',\n                                     '799',\n                                     '800',\n                                     '811',\n                                     '822',\n                                     '833',\n                                     '844',\n                                     '855',\n                                     '866',\n                                     '877',\n                                     '888',\n                                     '899',\n                                     '900',\n                                     '911',\n                                     '922',\n                                     '933',\n                                     '944',\n                                     '955',\n                                     '966',\n                                     '977',\n                                     '988',\n                                     '999'.\n      *Search list of valid Phone area codes\n       01 US-STATE-CODE-TO-EDIT  PIC X(2).\n          88 VALID-US-STATE-CODE VALUES \n                                    'AL',\n                                    'AK',\n                                    'AZ',\n                                    'AR',\n                                    'CA',\n                                    'CO',\n                                    'CT',\n                                    'DE',\n                                    'FL',\n                                    'GA',\n                                    'HI',\n                                    'ID',\n                                    'IL',\n                                    'IN',\n                                    'IA',\n                                    'KS',\n                                    'KY',\n                                    'LA',\n                                    'ME',\n                                    'MD',\n                                    'MA',\n                                    'MI',\n                                    'MN',\n                                    'MS',\n                                    'MO',\n                                    'MT',\n                                    'NE',\n                                    'NV',\n                                    'NH',\n                                    'NJ',\n                                    'NM',\n                                    'NY',\n                                    'NC',\n                                    'ND',\n                                    'OH',\n                                    'OK',\n                                    'OR',\n                                    'PA',\n                                    'RI',\n                                    'SC',\n                                    'SD',\n                                    'TN',\n                                    'TX',\n                                    'UT',\n                                    'VT',\n                                    'VA',\n                                    'WA',\n                                    'WV',\n                                    'WI',\n                                    'WY',\n                                    'DC',\n                                    'AS',\n                                    'GU',\n                                    'MP',\n                                    'PR',\n                                    'VI'.\n      *State Zip Code Combinations\n       01 US-STATE-ZIPCODE-TO-EDIT.\n          02 US-STATE-AND-FIRST-ZIP2 PIC X(4).\n             88 VALID-US-STATE-ZIP-CD2-COMBO VALUES\n                                    'AA34',\n                                    'AE90',\n                                    'AE91',\n                                    'AE92',\n                                    'AE93',\n                                    'AE94',\n                                    'AE95',\n                                    'AE96',\n                                    'AE97',\n                                    'AE98',\n                                    'AK99',\n                                    'AL35',\n                                    'AL36',\n                                    'AP96',\n                                    'AR71',\n                                    'AR72',\n                                    'AS96',\n                                    'AZ85',\n                                    'AZ86',\n                                    'CA90',\n                                    'CA91',\n                                    'CA92',\n                                    'CA93',\n                                    'CA94',\n                                    'CA95',\n                                    'CA96',\n                                    'CO80',\n                                    'CO81',\n                                    'CT60',\n                                    'CT61',\n                                    'CT62',\n                                    'CT63',\n                                    'CT64',\n                                    'CT65',\n                                    'CT66',\n                                    'CT67',\n                                    'CT68',\n                                    'CT69',\n                                    'DC20',\n                                    'DC56',\n                                    'DC88',\n                                    'DE19',\n                                    'FL32',\n                                    'FL33',\n                                    'FL34',\n                                    'FM96',\n                                    'GA30',\n                                    'GA31',\n                                    'GA39',\n                                    'GU96',\n                                    'HI96',\n                                    'IA50',\n                                    'IA51',\n                                    'IA52',\n                                    'ID83',\n                                    'IL60',\n                                    'IL61',\n                                    'IL62',\n                                    'IN46',\n                                    'IN47',\n                                    'KS66',\n                                    'KS67',\n                                    'KY40',\n                                    'KY41',\n                                    'KY42',\n                                    'LA70',\n                                    'LA71',\n                                    'MA10',\n                                    'MA11',\n                                    'MA12',\n                                    'MA13',\n                                    'MA14',\n                                    'MA15',\n                                    'MA16',\n                                    'MA17',\n                                    'MA18',\n                                    'MA19',\n                                    'MA20',\n                                    'MA21',\n                                    'MA22',\n                                    'MA23',\n                                    'MA24',\n                                    'MA25',\n                                    'MA26',\n                                    'MA27',\n                                    'MA55',\n                                    'MD20',\n                                    'MD21',\n                                    'ME39',\n                                    'ME40',\n                                    'ME41',\n                                    'ME42',\n                                    'ME43',\n                                    'ME44',\n                                    'ME45',\n                                    'ME46',\n                                    'ME47',\n                                    'ME48',\n                                    'ME49',\n                                    'MH96',\n                                    'MI48',\n                                    'MI49',\n                                    'MN55',\n                                    'MN56',\n                                    'MO63',\n                                    'MO64',\n                                    'MO65',\n                                    'MO72',\n                                    'MP96',\n                                    'MS38',\n                                    'MS39',\n                                    'MT59',\n                                    'NC27',\n                                    'NC28',\n                                    'ND58',\n                                    'NE68',\n                                    'NE69',\n                                    'NH30',\n                                    'NH31',\n                                    'NH32',\n                                    'NH33',\n                                    'NH34',\n                                    'NH35',\n                                    'NH36',\n                                    'NH37',\n                                    'NH38',\n                                    'NJ70',\n                                    'NJ71',\n                                    'NJ72',\n                                    'NJ73',\n                                    'NJ74',\n                                    'NJ75',\n                                    'NJ76',\n                                    'NJ77',\n                                    'NJ78',\n                                    'NJ79',\n                                    'NJ80',\n                                    'NJ81',\n                                    'NJ82',\n                                    'NJ83',\n                                    'NJ84',\n                                    'NJ85',\n                                    'NJ86',\n                                    'NJ87',\n                                    'NJ88',\n                                    'NJ89',\n                                    'NM87',\n                                    'NM88',\n                                    'NV88',\n                                    'NV89',\n                                    'NY50',\n                                    'NY54',\n                                    'NY63',\n                                    'NY10',\n                                    'NY11',\n                                    'NY12',\n                                    'NY13',\n                                    'NY14',\n                                    'OH43',\n                                    'OH44',\n                                    'OH45',\n                                    'OK73',\n                                    'OK74',\n                                    'OR97',\n                                    'PA15',\n                                    'PA16',\n                                    'PA17',\n                                    'PA18',\n                                    'PA19',\n                                    'PR60',\n                                    'PR61',\n                                    'PR62',\n                                    'PR63',\n                                    'PR64',\n                                    'PR65',\n                                    'PR66',\n                                    'PR67',\n                                    'PR68',\n                                    'PR69',\n                                    'PR70',\n                                    'PR71',\n                                    'PR72',\n                                    'PR73',\n                                    'PR74',\n                                    'PR75',\n                                    'PR76',\n                                    'PR77',\n                                    'PR78',\n                                    'PR79',\n                                    'PR90',\n                                    'PR91',\n                                    'PR92',\n                                    'PR93',\n                                    'PR94',\n                                    'PR95',\n                                    'PR96',\n                                    'PR97',\n                                    'PR98',\n                                    'PW96',\n                                    'RI28',\n                                    'RI29',\n                                    'SC29',\n                                    'SD57',\n                                    'TN37',\n                                    'TN38',\n                                    'TX73',\n                                    'TX75',\n                                    'TX76',\n                                    'TX77',\n                                    'TX78',\n                                    'TX79',\n                                    'TX88',\n                                    'UT84',\n                                    'VA20',\n                                    'VA22',\n                                    'VA23',\n                                    'VA24',\n                                    'VI80',\n                                    'VI82',\n                                    'VI83',\n                                    'VI84',\n                                    'VI85',\n                                    'VT50',\n                                    'VT51',\n                                    'VT52',\n                                    'VT53',\n                                    'VT54',\n                                    'VT56',\n                                    'VT57',\n                                    'VT58',\n                                    'VT59',\n                                    'WA98',\n                                    'WA99',\n                                    'WI53',\n                                    'WI54',\n                                    'WV24',\n                                    'WV25',\n                                    'WV26',\n                                    'WY82',\n                                    'WY83'.\n          02 LAST-3-OF-ZIP           PIC X(3).\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:57 CDT\n      *\n</code></pre>"},{"location":"copybooks/CSMSG01Y.html","title":"CSMSG01Y","text":""},{"location":"copybooks/CSMSG01Y.html#description","title":"Description","text":"<p>This copybook defines a set of common message constants used throughout the CardDemo application. It contains predefined text messages for standard user interactions, including a thank you message and an invalid key notification. These standardized messages help maintain consistency in user communication across different components of the CardDemo application.</p>"},{"location":"copybooks/CSMSG01Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      ******************************************************************\n      * Copyright Amazon.com, Inc. or its affiliates.                   \n      * All Rights Reserved.                                            \n      *                                                                 \n      * Licensed under the Apache License, Version 2.0 (the \"License\"). \n      * You may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at                         \n      *                                                                 \n      *    http://www.apache.org/licenses/LICENSE-2.0                   \n      *                                                                 \n      * Unless required by applicable law or agreed to in writing,      \n      * software distributed under the License is distributed on an     \n      * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n      * either express or implied. See the License for the specific     \n      * language governing permissions and limitations under the License\n      ****************************************************************** \n       01 CCDA-COMMON-MESSAGES.\n         05 CCDA-MSG-THANK-YOU         PIC X(50) VALUE\n              'Thank you for using CardDemo application...      '.\n         05 CCDA-MSG-INVALID-KEY       PIC X(50) VALUE\n              'Invalid key pressed. Please see below...         '.\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT\n      *\n</code></pre>"},{"location":"copybooks/CSMSG02Y.html","title":"CSMSG02Y","text":""},{"location":"copybooks/CSMSG02Y.html#description","title":"Description","text":"<p>This copybook defines data structures used for handling application abends (abnormal terminations) in the CardDemo application. It contains the ABEND-DATA group item with four fields: ABEND-CODE to store the four-character abend code, ABEND-CULPRIT to identify the program or component that caused the abend, ABEND-REASON to provide a detailed explanation of the error condition, and ABEND-MSG for storing a more comprehensive error message. This shared structure enables consistent error handling and reporting across programs that include this copybook.</p>"},{"location":"copybooks/CSMSG02Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>000700*****************************************************************\n000800* CABENDD.CPY                                                   *\n000900*---------------------------------------------------------------*\n001000* Work areas for abend routine                                  *\n      ******************************************************************\n      * Copyright Amazon.com, Inc. or its affiliates.                   \n      * All Rights Reserved.                                            \n      *                                                                 \n      * Licensed under the Apache License, Version 2.0 (the \"License\"). \n      * You may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at                         \n      *                                                                 \n      *    http://www.apache.org/licenses/LICENSE-2.0                   \n      *                                                                 \n      * Unless required by applicable law or agreed to in writing,      \n      * software distributed under the License is distributed on an     \n      * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n      * either express or implied. See the License for the specific     \n      * language governing permissions and limitations under the License\n      ****************************************************************** \n001200 01  ABEND-DATA.\n001300   05  ABEND-CODE                            PIC X(4)\n001400       VALUE SPACES.\n001500   05  ABEND-CULPRIT                         PIC X(8)\n001600       VALUE SPACES.\n001700   05  ABEND-REASON                          PIC X(50)\n001800       VALUE SPACES.\n001900   05  ABEND-MSG                             PIC X(72)\n002000       VALUE SPACES.\n\n\n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT\n      *\n</code></pre>"},{"location":"copybooks/CSSETATY.html","title":"CSSETATY","text":""},{"location":"copybooks/CSSETATY.html#description","title":"Description","text":"<p>This copybook contains a reusable code snippet for handling field validation and error highlighting in a CICS screen interface. It sets visual attributes for fields that fail validation by changing the color to red and marking blank fields with an asterisk (*) when the program is being re-entered. This standardized error handling approach is likely used across multiple screens in the CardDemo application to provide consistent user feedback for input validation errors.</p>"},{"location":"copybooks/CSSETATY.html#copybook-code","title":"Copybook Code","text":"<pre><code>      ******************************************************************\n      * Copyright Amazon.com, Inc. or its affiliates.                   \n      * All Rights Reserved.                                            \n      *                                                                 \n      * Licensed under the Apache License, Version 2.0 (the \"License\"). \n      * You may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at                         \n      *                                                                 \n      *    http://www.apache.org/licenses/LICENSE-2.0                   \n      *                                                                 \n      * Unless required by applicable law or agreed to in writing,      \n      * software distributed under the License is distributed on an     \n      * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n      * either express or implied. See the License for the specific     \n      * language governing permissions and limitations under the License\n      ****************************************************************** \n      *    Set (TESTVAR1) to red if in error and * if blankACSHLIM\n           IF (FLG-(TESTVAR1)-NOT-OK                                 \n           OR  FLG-(TESTVAR1)-BLANK)                                    \n           AND CDEMO-PGM-REENTER                                        \n               MOVE DFHRED             TO \n                    (SCRNVAR2)C OF (MAPNAME3)O\n               IF  FLG-(TESTVAR1)-BLANK                                 \n                   MOVE '*'            TO \n                    (SCRNVAR2)O OF (MAPNAME3)O\n               END-IF                                                   \n           END-IF \n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:58 CDT\n      *\n</code></pre>"},{"location":"copybooks/CSSTRPFY.html","title":"CSSTRPFY","text":""},{"location":"copybooks/CSSTRPFY.html#description","title":"Description","text":"<p>This copybook provides a standardized mechanism for mapping CICS Attention Identifier (AID) keys to program function keys in the CardDemo application's common area. It contains a reusable EVALUATE statement that translates the EIBAID value (which indicates which key the user pressed) into corresponding CCARD-AID flags in a shared data structure. The copybook handles all standard CICS keys including ENTER, CLEAR, PA1, PA2, and PF1-PF24 (with PF13-PF24 mapped to their PF1-PF12 equivalents). This shared code ensures consistent keyboard handling across multiple programs in the CardDemo application and simplifies terminal interaction processing.</p>"},{"location":"copybooks/CSSTRPFY.html#copybook-code","title":"Copybook Code","text":"<pre><code>      ******************************************************************\n      * Copyright Amazon.com, Inc. or its affiliates.                   \n      * All Rights Reserved.                                            \n      *                                                                 \n      * Licensed under the Apache License, Version 2.0 (the \"License\"). \n      * You may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at                         \n      *                                                                 \n      *    http://www.apache.org/licenses/LICENSE-2.0                   \n      *                                                                 \n      * Unless required by applicable law or agreed to in writing,      \n      * software distributed under the License is distributed on an     \n      * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n      * either express or implied. See the License for the specific     \n      * language governing permissions and limitations under the License\n      ****************************************************************** \n       YYYY-STORE-PFKEY.                                                        \n      *****************************************************************         \n      * Map AID to PFKey in COMMON Area                                         \n      *****************************************************************         \n           EVALUATE TRUE                                                        \n             WHEN EIBAID IS EQUAL TO DFHENTER                                   \n               SET CCARD-AID-ENTER TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHCLEAR                                   \n               SET CCARD-AID-CLEAR TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPA1                                     \n               SET CCARD-AID-PA1  TO TRUE                                       \n             WHEN EIBAID IS EQUAL TO DFHPA2                                     \n               SET CCARD-AID-PA2  TO TRUE                                       \n             WHEN EIBAID IS EQUAL TO DFHPF1                                     \n               SET CCARD-AID-PFK01 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF2                                     \n               SET CCARD-AID-PFK02 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF3                                     \n               SET CCARD-AID-PFK03 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF4                                     \n               SET CCARD-AID-PFK04 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF5                                     \n               SET CCARD-AID-PFK05 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF6                                     \n               SET CCARD-AID-PFK06 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF7                                     \n               SET CCARD-AID-PFK07 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF8                                     \n               SET CCARD-AID-PFK08 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF9                                     \n               SET CCARD-AID-PFK09 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF10                                    \n               SET CCARD-AID-PFK10 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF11                                    \n               SET CCARD-AID-PFK11 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF12                                    \n               SET CCARD-AID-PFK12 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF13                                    \n               SET CCARD-AID-PFK01 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF14                                    \n               SET CCARD-AID-PFK02 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF15                                    \n               SET CCARD-AID-PFK03 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF16                                    \n               SET CCARD-AID-PFK04 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF17                                    \n               SET CCARD-AID-PFK05 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF18                                    \n               SET CCARD-AID-PFK06 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF19                                    \n               SET CCARD-AID-PFK07 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF20                                    \n               SET CCARD-AID-PFK08 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF21                                    \n               SET CCARD-AID-PFK09 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF22                                    \n               SET CCARD-AID-PFK10 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF23                                    \n               SET CCARD-AID-PFK11 TO TRUE                                      \n             WHEN EIBAID IS EQUAL TO DFHPF24                                    \n               SET CCARD-AID-PFK12 TO TRUE                                      \n           END-EVALUATE                                                         \n           .                                                                    \n       YYYY-STORE-PFKEY-EXIT.                                                   \n           EXIT                                                                 \n           .                                                                    \n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT\n      *\n</code></pre>"},{"location":"copybooks/CSUSR01Y.html","title":"CSUSR01Y","text":""},{"location":"copybooks/CSUSR01Y.html#description","title":"Description","text":"<p>This copybook defines the security user data structure used in the CardDemo application for AWS mainframe migration. It contains fields for storing user authentication and identification information, including user ID, first name, last name, password, user type, and a filler field. This structure is likely used across multiple programs within the application for user management, authentication, and access control operations.</p>"},{"location":"copybooks/CSUSR01Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      ******************************************************************\n      * Copyright Amazon.com, Inc. or its affiliates.                   \n      * All Rights Reserved.                                            \n      *                                                                 \n      * Licensed under the Apache License, Version 2.0 (the \"License\"). \n      * You may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at                         \n      *                                                                 \n      *    http://www.apache.org/licenses/LICENSE-2.0                   \n      *                                                                 \n      * Unless required by applicable law or agreed to in writing,      \n      * software distributed under the License is distributed on an     \n      * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n      * either express or implied. See the License for the specific     \n      * language governing permissions and limitations under the License\n      ****************************************************************** \n       01 SEC-USER-DATA.\n         05 SEC-USR-ID                 PIC X(08).\n         05 SEC-USR-FNAME              PIC X(20).\n         05 SEC-USR-LNAME              PIC X(20).\n         05 SEC-USR-PWD                PIC X(08).\n         05 SEC-USR-TYPE               PIC X(01).\n         05 SEC-USR-FILLER             PIC X(23).\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT\n      *\n</code></pre>"},{"location":"copybooks/CSUTLDPY.html","title":"CSUTLDPY","text":""},{"location":"copybooks/CSUTLDPY.html#description","title":"Description","text":"<p>This copybook provides a comprehensive set of date validation procedures for COBOL programs within the CardDemo application. It contains reusable paragraphs for validating dates in CCYYMMDD format (century, year, month, day). The validation includes checks for:</p> <ol> <li>Year and century validation (EDIT-YEAR-CCYY) - ensures years are numeric and have valid century values (19xx or 20xx)</li> <li>Month validation (EDIT-MONTH) - verifies months are numeric and between 1-12</li> <li>Day validation (EDIT-DAY) - confirms days are numeric and within valid ranges (1-31)</li> <li>Date consistency checks (EDIT-DAY-MONTH-YEAR) - handles special cases like:</li> <li>30/31 days validation based on month</li> <li>February-specific validations (28/29 days)</li> <li>Leap year calculations</li> </ol> <p>The copybook also includes additional validation using Language Environment services (EDIT-DATE-LE) as a final verification step, and a special date of birth validation (EDIT-DATE-OF-BIRTH) that ensures dates aren't in the future.</p> <p>The code uses flags and error messages to communicate validation results back to the calling program, with customizable error messages that include the field name being validated.</p>"},{"location":"copybooks/CSUTLDPY.html#copybook-code","title":"Copybook Code","text":"<pre><code>      ******************************************************************\n      *Procedure Division Copybook for DATE related code\n      ******************************************************************\n      *Date validation paragraph for reuse and hopefully not misuse\n      *Accompanying WORKING Storage is CSUTLDTR\n      ******************************************************************\n      * ***  PERFORM EDIT-DATE-CCYYMMDD\n      *         THRU EDIT-DATE-CCYYMMDD-EXIT\n      *         to validate CCYYMMDD dates\n      *      Reusable paras\n      *      a) EDIT-YEAR-CCYY\n      *      b) EDIT-MONTH\n      *      c) EDIT-DAY\n      *      d) EDIT-DATE-OF-BIRTH\n      *      e) EDIT-DATE-OF-BIRTH\n      ******************************************************************\n\n       EDIT-DATE-CCYYMMDD.\n           SET WS-EDIT-DATE-IS-INVALID   TO TRUE\n           .\n\n      ******************************************************************\n      *Check for valid year and century\n      ******************************************************************\n       EDIT-YEAR-CCYY.\n\n           SET FLG-YEAR-NOT-OK             TO TRUE\n\n      *    Not supplied\n           IF WS-EDIT-DATE-CCYY            EQUAL LOW-VALUES\n           OR WS-EDIT-DATE-CCYY            EQUAL SPACES\n              SET INPUT-ERROR              TO TRUE\n              SET  FLG-YEAR-BLANK          TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' : Year must be supplied.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n              END-IF\n      *       Intentional violation of structured programming norms\n              GO TO EDIT-YEAR-CCYY-EXIT\n           ELSE\n              CONTINUE\n           END-IF\n\n      *    Not numeric\n           IF WS-EDIT-DATE-CCYY            IS NOT NUMERIC\n              SET INPUT-ERROR              TO TRUE\n              SET  FLG-YEAR-NOT-OK         TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' must be 4 digit number.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n              END-IF\n              GO TO EDIT-YEAR-CCYY-EXIT\n           ELSE\n              CONTINUE\n           END-IF\n\n      ******************************************************************\n      *    Century not reasonable\n      ******************************************************************\n      *  Not having learnt our lesson from history and Y2K\n      *  And being unable to imagine COBOL in the 2100s\n      *  We code only 19 and 20 as valid century values\n      ******************************************************************\n           IF THIS-CENTURY\n           OR LAST-CENTURY\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR              TO TRUE\n              SET  FLG-YEAR-NOT-OK         TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' : Century is not valid.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n              END-IF\n              GO TO EDIT-YEAR-CCYY-EXIT\n           END-IF\n\n           SET FLG-YEAR-ISVALID            TO TRUE\n           .\n       EDIT-YEAR-CCYY-EXIT.\n           EXIT\n           .\n       EDIT-MONTH.\n           SET FLG-MONTH-NOT-OK            TO TRUE\n\n           IF WS-EDIT-DATE-MM              EQUAL LOW-VALUES\n           OR WS-EDIT-DATE-MM              EQUAL SPACES\n              SET INPUT-ERROR              TO TRUE\n              SET  FLG-MONTH-BLANK         TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' : Month must be supplied.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n              END-IF\n              GO TO EDIT-MONTH-EXIT\n           ELSE\n              CONTINUE\n           END-IF\n\n      *    Month not reasonable\n           IF WS-VALID-MONTH\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR              TO TRUE\n              SET  FLG-MONTH-NOT-OK        TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': Month must be a number between 1 and 12.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n              END-IF\n              GO TO EDIT-MONTH-EXIT\n           END-IF\n\n           IF FUNCTION TEST-NUMVAL (WS-EDIT-DATE-MM) = 0\n              COMPUTE WS-EDIT-DATE-MM-N\n                          = FUNCTION NUMVAL (WS-EDIT-DATE-MM)\n              END-COMPUTE\n           ELSE\n              SET INPUT-ERROR              TO TRUE\n              SET  FLG-MONTH-NOT-OK        TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ': Month must be a number between 1 and 12.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n              END-IF\n              GO TO EDIT-MONTH-EXIT\n           END-IF\n\n           SET FLG-MONTH-ISVALID           TO TRUE\n           .\n       EDIT-MONTH-EXIT.\n           EXIT\n           .\n\n\n       EDIT-DAY.\n\n           SET FLG-DAY-ISVALID             TO TRUE\n\n           IF WS-EDIT-DATE-DD              EQUAL LOW-VALUES\n           OR WS-EDIT-DATE-DD              EQUAL SPACES\n              SET INPUT-ERROR              TO TRUE\n              SET  FLG-DAY-BLANK           TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ' : Day must be supplied.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n              END-IF\n              GO TO EDIT-DAY-EXIT\n           ELSE\n              CONTINUE\n           END-IF\n\n           IF FUNCTION TEST-NUMVAL (WS-EDIT-DATE-DD) = 0\n              COMPUTE WS-EDIT-DATE-DD-N\n                          = FUNCTION NUMVAL (WS-EDIT-DATE-DD)\n              END-COMPUTE\n           ELSE\n              SET INPUT-ERROR              TO TRUE\n              SET  FLG-DAY-NOT-OK          TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ':day must be a number between 1 and 31.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n              END-IF\n              GO TO EDIT-DAY-EXIT\n           END-IF\n\n           IF WS-VALID-DAY\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR              TO TRUE\n              SET FLG-DAY-NOT-OK          TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ':day must be a number between 1 and 31.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n              END-IF\n              GO TO EDIT-DAY-EXIT\n           END-IF\n           .\n\n           SET FLG-DAY-ISVALID           TO TRUE\n           .\n       EDIT-DAY-EXIT.\n           EXIT\n           .\n\n       EDIT-DAY-MONTH-YEAR.\n      ******************************************************************\n      *    Checking for any other combinations\n      ******************************************************************\n           IF  NOT WS-31-DAY-MONTH\n           AND WS-DAY-31\n              SET INPUT-ERROR              TO TRUE\n              SET FLG-DAY-NOT-OK           TO TRUE\n              SET FLG-MONTH-NOT-OK         TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ':Cannot have 31 days in this month.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n              END-IF\n              GO TO EDIT-DATE-CCYYMMDD-EXIT\n           END-IF\n\n           IF  WS-FEBRUARY\n           AND WS-DAY-30\n              SET INPUT-ERROR              TO TRUE\n              SET FLG-DAY-NOT-OK           TO TRUE\n              SET FLG-MONTH-NOT-OK         TO TRUE\n              IF WS-RETURN-MSG-OFF\n                 STRING\n                   FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ':Cannot have 30 days in this month.'\n                   DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n              END-IF\n              GO TO EDIT-DATE-CCYYMMDD-EXIT\n           END-IF\n\n           IF  WS-FEBRUARY\n           AND WS-DAY-29\n               IF WS-EDIT-DATE-YY-N = 0\n                  MOVE 400                TO  WS-DIV-BY\n               ELSE\n                  MOVE 4                  TO  WS-DIV-BY\n               END-IF\n\n               DIVIDE WS-EDIT-DATE-CCYY-N\n                   BY WS-DIV-BY\n               GIVING WS-DIVIDEND\n               REMAINDER WS-REMAINDER\n\n               IF WS-REMAINDER = ZEROES\n                  CONTINUE\n               ELSE\n                  SET INPUT-ERROR          TO TRUE\n                  SET FLG-DAY-NOT-OK       TO TRUE\n                  SET FLG-MONTH-NOT-OK     TO TRUE\n                  SET FLG-YEAR-NOT-OK      TO TRUE\n                  IF WS-RETURN-MSG-OFF\n                  STRING\n                    FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                   ':Not a leap year.Cannot have 29 days in this month.'\n                    DELIMITED BY SIZE\n                   INTO WS-RETURN-MSG\n                  END-IF\n                  GO TO EDIT-DATE-CCYYMMDD-EXIT\n               END-IF\n           END-IF\n\n           IF WS-EDIT-DATE-IS-VALID\n              CONTINUE\n           ELSE\n              GO TO EDIT-DATE-CCYYMMDD-EXIT\n           END-IF\n           .\n       EDIT-DAY-MONTH-YEAR-EXIT.\n           EXIT\n           .\n\n       EDIT-DATE-LE.\n      ******************************************************************\n      *    In case some one managed to enter a bad date that passsed all\n      *    the edits above ......\n      *                  Use LE Services to verify the supplied date\n      ******************************************************************\n           INITIALIZE WS-DATE-VALIDATION-RESULT\n           MOVE 'YYYYMMDD'                   TO WS-DATE-FORMAT\n\n005100     CALL 'CSUTLDTC'\n           USING WS-EDIT-DATE-CCYYMMDD\n               , WS-DATE-FORMAT\n               , WS-DATE-VALIDATION-RESULT\n\n           IF WS-SEVERITY-N = 0\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR                TO TRUE\n              SET FLG-DAY-NOT-OK             TO TRUE\n              SET FLG-MONTH-NOT-OK           TO TRUE\n              SET FLG-YEAR-NOT-OK            TO TRUE\n              IF WS-RETURN-MSG-OFF\n              STRING\n                FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                ' validation error Sev code: '\n                WS-SEVERITY\n                ' Message code: '\n                WS-MSG-NO\n                DELIMITED BY SIZE\n               INTO WS-RETURN-MSG\n              END-IF\n              GO TO EDIT-DATE-LE-EXIT\n           END-IF\n\n           IF NOT INPUT-ERROR\n              SET FLG-DAY-ISVALID           TO TRUE\n           END-IF\n           .\n\n       EDIT-DATE-LE-EXIT.\n           EXIT\n           .\n      *    If we got here all edits were cleared\n           SET WS-EDIT-DATE-IS-VALID        TO TRUE\n           .\n       EDIT-DATE-CCYYMMDD-EXIT.\n           EXIT\n           .\n\n      ******************************************************************\n      *Date of Birth Reasonableness check\n      ******************************************************************\n      *  At the time of writing this program\n      *  Time travel was not possible.\n      *  Date of birth in the future is not acceptable\n      ******************************************************************\n      *\n       EDIT-DATE-OF-BIRTH.\n\n           MOVE FUNCTION CURRENT-DATE TO WS-CURRENT-DATE-YYYYMMDD\n\n           COMPUTE WS-EDIT-DATE-BINARY =\n               FUNCTION INTEGER-OF-DATE (WS-EDIT-DATE-CCYYMMDD-N)\n           COMPUTE WS-CURRENT-DATE-BINARY =\n               FUNCTION INTEGER-OF-DATE (WS-CURRENT-DATE-YYYYMMDD-N)\n\n           IF WS-CURRENT-DATE-BINARY &gt; WS-EDIT-DATE-BINARY\n      *    IF FUNCTION FIND-DURATION(FUNCTION CURRENT-DATE\n      *                             ,WS-EDIT-DATE-CCYYMMDD)\n      *                             ,DAYS) &gt; 0\n              CONTINUE\n           ELSE\n              SET INPUT-ERROR                TO TRUE\n              SET FLG-DAY-NOT-OK             TO TRUE\n              SET FLG-MONTH-NOT-OK           TO TRUE\n              SET FLG-YEAR-NOT-OK            TO TRUE\n              IF WS-RETURN-MSG-OFF\n              STRING\n                FUNCTION TRIM(WS-EDIT-VARIABLE-NAME)\n                ':cannot be in the future '\n                DELIMITED BY SIZE\n               INTO WS-RETURN-MSG\n              END-IF\n              GO TO EDIT-DATE-OF-BIRTH-EXIT\n           END-IF\n           .\n       EDIT-DATE-OF-BIRTH-EXIT.\n           EXIT\n           .\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT\n      *\n</code></pre>"},{"location":"copybooks/CSUTLDWY.html","title":"CSUTLDWY","text":""},{"location":"copybooks/CSUTLDWY.html#description","title":"Description","text":"<p>This copybook defines data structures for date handling and validation in the CardDemo application. It includes fields for storing and manipulating dates in CCYYMMDD format (century, year, month, day), with various numeric redefinitions to facilitate date processing. The structure contains condition names (88-level items) for validating date components such as valid months, days, and special cases like leap year considerations. It also includes fields for current date storage, date validation flags to track validation status, and a comprehensive date validation result structure that captures severity, message codes, test dates, and format information. This copybook serves as a central repository for date-related working storage definitions that can be included in programs requiring date manipulation and validation functionality.</p>"},{"location":"copybooks/CSUTLDWY.html#copybook-code","title":"Copybook Code","text":"<pre><code>      ******************************************************************\n      *Working Storage Copybook for DATE related code\n      ******************************************************************\n           10 WS-EDIT-DATE-CCYYMMDD.\n              20 WS-EDIT-DATE-CCYY.\n                 25 WS-EDIT-DATE-CC                PIC X(2).\n                 25 WS-EDIT-DATE-CC-N REDEFINES    WS-EDIT-DATE-CC\n                                                   PIC 9(2).\n                    88 THIS-CENTURY                VALUE 20.\n                    88 LAST-CENTURY                VALUE 19.\n                 25 WS-EDIT-DATE-YY                PIC X(2).\n                 25 WS-EDIT-DATE-YY-N REDEFINES    WS-EDIT-DATE-YY\n                                                   PIC 9(2).\n              20 WS-EDIT-DATE-CCYY-N  REDEFINES\n                 WS-EDIT-DATE-CCYY                 PIC 9(4).\n              20 WS-EDIT-DATE-MM                   PIC X(2).\n              20 WS-EDIT-DATE-MM-N REDEFINES WS-EDIT-DATE-MM\n                                                   PIC 9(2).\n                 88 WS-VALID-MONTH                 VALUES\n                                                   1 THROUGH 12.\n                 88 WS-31-DAY-MONTH                VALUES\n                                                   1, 3, 5, 7,\n                                                   8, 10, 12.\n                 88 WS-FEBRUARY                    VALUE 2.\n              20 WS-EDIT-DATE-DD                   PIC X(2).\n              20 WS-EDIT-DATE-DD-N REDEFINES WS-EDIT-DATE-DD\n                                                   PIC 9(2).\n                 88 WS-VALID-DAY                   VALUES\n                                                   1 THROUGH 31.\n                 88 WS-DAY-31                      VALUE 31.\n                 88 WS-DAY-30                      VALUE 30.\n                 88 WS-DAY-29                      VALUE 29.\n                 88 WS-VALID-FEB-DAY               VALUES\n                                                   1 THROUGH 28.\n           10 WS-EDIT-DATE-CCYYMMDD-N REDEFINES\n              WS-EDIT-DATE-CCYYMMDD                PIC 9(8).\n           10 WS-EDIT-DATE-BINARY                  PIC S9(9) BINARY.\n           10 WS-CURRENT-DATE.\n              20 WS-CURRENT-DATE-YYYYMMDD          PIC X(8).\n              20 WS-CURRENT-DATE-YYYYMMDD-N REDEFINES\n                 WS-CURRENT-DATE-YYYYMMDD          PIC 9(8).\n              20 WS-CURRENT-DATE-BINARY            PIC S9(9) BINARY.\n           10 WS-EDIT-DATE-FLGS.\n               88 WS-EDIT-DATE-IS-VALID            VALUE LOW-VALUES.\n               88 WS-EDIT-DATE-IS-INVALID          VALUE '000'.\n               20 WS-EDIT-YEAR-FLG                 PIC X(01).\n                  88 FLG-YEAR-ISVALID              VALUE LOW-VALUES.\n                  88 FLG-YEAR-NOT-OK               VALUE '0'.\n                  88 FLG-YEAR-BLANK                VALUE 'B'.\n               20 WS-EDIT-MONTH                    PIC X(01).\n                  88 FLG-MONTH-ISVALID             VALUE LOW-VALUES.\n                  88 FLG-MONTH-NOT-OK              VALUE '0'.\n                  88 FLG-MONTH-BLANK               VALUE 'B'.\n               20 WS-EDIT-DAY                      PIC X(01).\n                  88 FLG-DAY-ISVALID               VALUE LOW-VALUES.\n                  88 FLG-DAY-NOT-OK                VALUE '0'.\n                  88 FLG-DAY-BLANK                 VALUE 'B'.\n          10 WS-DATE-FORMAT                        PIC X(08)\n                                                   VALUE 'YYYYMMDD'.\n          10 WS-DATE-VALIDATION-RESULT .\n               20 WS-SEVERITY                      PIC X(04).\n               20 WS-SEVERITY-N                    REDEFINES\n                  WS-SEVERITY                      PIC 9(4).\n               20 FILLER                           PIC X(11)\n                                                   VALUE 'Mesg Code:'.\n               20 WS-MSG-NO                        PIC X(04).\n               20 WS-MSG-NO-N                      REDEFINES\n                  WS-MSG-NO                        Pic 9(4).\n               20 FILLER                           PIC X(01)\n                                                   VALUE SPACE.\n               20 WS-RESULT                        PIC X(15).\n               20 FILLER                           PIC X(01)\n                                                   VALUE SPACE.\n               20 FILLER                           PIC X(09)\n                                                   VALUE 'TstDate:'.\n               20 WS-DATE                          PIC X(10).\n               20 FILLER                           PIC X(01)\n                                                   VALUE SPACE.\n               20 FILLER                           PIC X(10)\n                                                   VALUE 'Mask used:' .\n               20 WS-DATE-FMT                      PIC X(10).\n               20 FILLER                           PIC X(01)\n                                                   VALUE SPACE.\n               20 FILLER                           PIC X(03)\n                                                   VALUE SPACES.\n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT\n      *\n</code></pre>"},{"location":"copybooks/CUSTREC.html","title":"CUSTREC","text":""},{"location":"copybooks/CUSTREC.html#description","title":"Description","text":"<p>This copybook defines the data structure for a Customer entity with a record length of 500 bytes. It contains comprehensive customer information including personal identification (customer ID, SSN, government ID), contact details (name, address, phone numbers), financial information (EFT account ID, FICO credit score), and status indicators (primary cardholder indicator). The structure is designed to store complete customer profiles for the CardDemo application, which is used to showcase AWS and partner technologies for mainframe migration and modernization scenarios. The fields are organized logically to represent customer demographic and account relationship data needed for credit card processing operations.</p>"},{"location":"copybooks/CUSTREC.html#copybook-code","title":"Copybook Code","text":"<pre><code>      *****************************************************************\n      *    Data-structure for Customer entity (RECLN 500)\n      *****************************************************************\n       01  CUSTOMER-RECORD.\n           05  CUST-ID                                 PIC 9(09).\n             05  CUST-FIRST-NAME                         PIC X(25).\n             05  CUST-MIDDLE-NAME                        PIC X(25).\n             05  CUST-LAST-NAME                          PIC X(25).\n             05  CUST-ADDR-LINE-1                        PIC X(50).\n             05  CUST-ADDR-LINE-2                        PIC X(50).\n             05  CUST-ADDR-LINE-3                        PIC X(50).        \n             05  CUST-ADDR-STATE-CD                      PIC X(02).\n             05  CUST-ADDR-COUNTRY-CD                    PIC X(03).\n             05  CUST-ADDR-ZIP                           PIC X(10).\n             05  CUST-PHONE-NUM-1                        PIC X(15).\n             05  CUST-PHONE-NUM-2                        PIC X(15).\n             05  CUST-SSN                                PIC 9(09).\n             05  CUST-GOVT-ISSUED-ID                     PIC X(20).\n             05  CUST-DOB-YYYYMMDD                       PIC X(10).\n             05  CUST-EFT-ACCOUNT-ID                     PIC X(10).\n             05  CUST-PRI-CARD-HOLDER-IND                PIC X(01).\n             05  CUST-FICO-CREDIT-SCORE                  PIC 9(03).\n             05  FILLER                                  PIC X(168).      \n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT\n      *\n</code></pre>"},{"location":"copybooks/CVACT01Y.html","title":"CVACT01Y","text":""},{"location":"copybooks/CVACT01Y.html#description","title":"Description","text":"<p>This copybook defines the data structure for an account entity with a record length of 300 bytes. It contains essential account information fields including account identification, status, financial limits, balances, and important dates. Key fields include the account ID, active status indicator, current balance, credit limits (both regular and cash), various date fields (open, expiration, and reissue dates), cycle credits and debits, ZIP code, and a group identifier. This structure is likely used across multiple programs in the CardDemoAWS application for consistent account data representation and processing.</p>"},{"location":"copybooks/CVACT01Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      *****************************************************************\n      *    Data-structure for  account entity (RECLN 300)\n      *****************************************************************\n       01  ACCOUNT-RECORD.\n           05  ACCT-ID                           PIC 9(11).\n           05  ACCT-ACTIVE-STATUS                PIC X(01).\n           05  ACCT-CURR-BAL                     PIC S9(10)V99.\n           05  ACCT-CREDIT-LIMIT                 PIC S9(10)V99.\n           05  ACCT-CASH-CREDIT-LIMIT            PIC S9(10)V99.\n           05  ACCT-OPEN-DATE                    PIC X(10).\n           05  ACCT-EXPIRAION-DATE               PIC X(10). \n           05  ACCT-REISSUE-DATE                 PIC X(10).\n           05  ACCT-CURR-CYC-CREDIT              PIC S9(10)V99.\n           05  ACCT-CURR-CYC-DEBIT               PIC S9(10)V99.\n           05  ACCT-ADDR-ZIP                     PIC X(10).\n           05  ACCT-GROUP-ID                     PIC X(10).\n           05  FILLER                            PIC X(178).      \n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT\n      *\n</code></pre>"},{"location":"copybooks/CVACT02Y.html","title":"CVACT02Y","text":""},{"location":"copybooks/CVACT02Y.html#description","title":"Description","text":"<p>This copybook defines the data structure for a card entity with a record length of 150 bytes. It contains essential credit/debit card information fields including the card number, associated account ID, CVV code, embossed name, expiration date, and active status indicator. The structure allows for standardized card data representation across the CardDemo application, which is used to showcase AWS and partner technologies for mainframe migration scenarios. The remaining 59 bytes are reserved as filler space for potential future expansion of the card record structure.</p>"},{"location":"copybooks/CVACT02Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      *****************************************************************\n      *    Data-structure for card entity (RECLN 150)\n      *****************************************************************\n       01  CARD-RECORD.\n           05  CARD-NUM                          PIC X(16).\n           05  CARD-ACCT-ID                      PIC 9(11).\n           05  CARD-CVV-CD                       PIC 9(03).\n           05  CARD-EMBOSSED-NAME                PIC X(50).\n           05  CARD-EXPIRAION-DATE               PIC X(10).\n           05  CARD-ACTIVE-STATUS                PIC X(01).\n           05  FILLER                            PIC X(59).\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT\n      *\n</code></pre>"},{"location":"copybooks/CVACT03Y.html","title":"CVACT03Y","text":""},{"location":"copybooks/CVACT03Y.html#description","title":"Description","text":"<p>This copybook defines the data structure for a card cross-reference record with a record length of 50 bytes. It establishes the relationship between a payment card, customer, and account within the CardDemo application. The structure contains three key fields: a 16-character card number, a 9-digit customer ID, and an 11-digit account ID, followed by 14 bytes of unused filler space. This cross-reference structure enables the application to link card information with the appropriate customer and account records.</p>"},{"location":"copybooks/CVACT03Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      *****************************************************************         \n      *    Data-structure for card xref (RECLN 50)                              \n      *****************************************************************         \n       01 CARD-XREF-RECORD.                                                     \n           05  XREF-CARD-NUM                     PIC X(16).                     \n           05  XREF-CUST-ID                      PIC 9(09).                     \n           05  XREF-ACCT-ID                      PIC 9(11).                     \n           05  FILLER                            PIC X(14).                     \n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT\n      *\n</code></pre>"},{"location":"copybooks/CVCRD01Y.html","title":"CVCRD01Y","text":""},{"location":"copybooks/CVCRD01Y.html#description","title":"Description","text":"<p>This copybook defines a data structure for work areas used in the CardDemo credit card application. It contains fields for handling terminal interactions, program flow control, and key credit card data. The structure includes AID (Attention Identifier) keys with condition names for various keyboard functions (ENTER, CLEAR, PA keys, and PF keys), fields for managing program and map navigation, error and return message areas, and core credit card data fields including account ID, card number, and customer ID. The numeric fields have both alphanumeric and numeric representations through REDEFINES clauses, allowing for flexible data handling in the application.</p>"},{"location":"copybooks/CVCRD01Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>000100 01  CC-WORK-AREAS.                                               00010004\n000200    05 CC-WORK-AREA.                                              00020001\n000900       10 CCARD-AID                         PIC X(5).             00090001\n001000          88  CCARD-AID-ENTER                VALUE 'ENTER'.       00100001\n001100          88  CCARD-AID-CLEAR                VALUE 'CLEAR'.       00110001\n001200          88  CCARD-AID-PA1                  VALUE 'PA1  '.       00120001\n001300          88  CCARD-AID-PA2                  VALUE 'PA2  '.       00130001\n001400          88  CCARD-AID-PFK01                VALUE 'PFK01'.       00140001\n001500          88  CCARD-AID-PFK02                VALUE 'PFK02'.       00150001\n001600          88  CCARD-AID-PFK03                VALUE 'PFK03'.       00160001\n001700          88  CCARD-AID-PFK04                VALUE 'PFK04'.       00170001\n001800          88  CCARD-AID-PFK05                VALUE 'PFK05'.       00180001\n001900          88  CCARD-AID-PFK06                VALUE 'PFK06'.       00190001\n002000          88  CCARD-AID-PFK07                VALUE 'PFK07'.       00200001\n002100          88  CCARD-AID-PFK08                VALUE 'PFK08'.       00210001\n002200          88  CCARD-AID-PFK09                VALUE 'PFK09'.       00220001\n002300          88  CCARD-AID-PFK10                VALUE 'PFK10'.       00230001\n002400          88  CCARD-AID-PFK11                VALUE 'PFK11'.       00240001\n002500          88  CCARD-AID-PFK12                VALUE 'PFK12'.       00250001\n002600*      10  CCARD-LAST-PROG                  PIC X(8).             00260001\n002700       10  CCARD-NEXT-PROG                  PIC X(8).             00270001\n002800*      10  CCARD-RETURN-TO-PROG             PIC X(8).             00280001\n003300       10  CCARD-NEXT-MAPSET                PIC X(7).             00330001\n003400       10  CCARD-NEXT-MAP                   PIC X(7).             00340001\n003500*      10  CCARD-RETURN-FLAG                PIC X(1).             00350001\n003600*        88  CCARD-RETURN-FLAG-OFF          VALUE LOW-VALUES.     00360001\n003700*        88  CCARD-RETURN-FLAG-ON           VALUE '1'.            00370001\n003800       10  CCARD-ERROR-MSG                  PIC X(75).            00380001\n003900       10  CCARD-RETURN-MSG                 PIC X(75).            00390001\n004000         88  CCARD-RETURN-MSG-OFF           VALUE LOW-VALUES.     00400001\n004100*      10  CCARD-FUNCTION                   PIC X(1).             00410001\n004200*        88  CCARD-NO-VALUE                  VALUE LOW-VALUES.    00420001\n004300*        88  CCARD-GET-DATA                  VALUE '1'.           00430001\n004400       10 CC-ACCT-ID                        PIC X(11)             00440005\n004500                                            VALUE SPACES.\n             10 CC-ACCT-ID-N REDEFINES CC-ACCT-ID PIC 9(11).\n004600       10 CC-CARD-NUM                       PIC X(16)             00460005\n004700                                            VALUE SPACES.         00470005\n             10 CC-CARD-NUM-N REDEFINES CC-CARD-NUM PIC 9(16).\n004800       10 CC-CUST-ID                        PIC X(09)             00480005\n004900                                            VALUE SPACES.         00490005\n004800       10 CC-CUST-ID-N REDEFINES CC-CUST-ID PIC 9(9).             00480005\n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT\n      *\n</code></pre>"},{"location":"copybooks/CVCUS01Y.html","title":"CVCUS01Y","text":""},{"location":"copybooks/CVCUS01Y.html#description","title":"Description","text":"<p>This copybook defines the data structure for a Customer entity with a record length of 500 bytes. It contains essential customer information fields including identification (customer ID, SSN, government ID), personal details (name components, date of birth), contact information (address lines, state code, country code, ZIP code, phone numbers), financial data (EFT account ID, FICO credit score), and a primary cardholder indicator. The structure is designed to store comprehensive customer data for the CardDemo application, which demonstrates AWS and partner technologies for mainframe migration and modernization scenarios.</p>"},{"location":"copybooks/CVCUS01Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      *****************************************************************\n      *    Data-structure for Customer entity (RECLN 500)\n      *****************************************************************\n       01  CUSTOMER-RECORD.\n           05  CUST-ID                                 PIC 9(09).\n           05  CUST-FIRST-NAME                         PIC X(25).\n           05  CUST-MIDDLE-NAME                        PIC X(25).\n           05  CUST-LAST-NAME                          PIC X(25).\n           05  CUST-ADDR-LINE-1                        PIC X(50).\n           05  CUST-ADDR-LINE-2                        PIC X(50).\n           05  CUST-ADDR-LINE-3                        PIC X(50).         \n           05  CUST-ADDR-STATE-CD                      PIC X(02).\n           05  CUST-ADDR-COUNTRY-CD                    PIC X(03).\n           05  CUST-ADDR-ZIP                           PIC X(10).\n           05  CUST-PHONE-NUM-1                        PIC X(15).\n           05  CUST-PHONE-NUM-2                        PIC X(15).\n           05  CUST-SSN                                PIC 9(09).\n           05  CUST-GOVT-ISSUED-ID                     PIC X(20).\n           05  CUST-DOB-YYYY-MM-DD                     PIC X(10).\n           05  CUST-EFT-ACCOUNT-ID                     PIC X(10).\n           05  CUST-PRI-CARD-HOLDER-IND                PIC X(01).\n           05  CUST-FICO-CREDIT-SCORE                  PIC 9(03).\n           05  FILLER                                  PIC X(168).      \n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT\n      *\n</code></pre>"},{"location":"copybooks/CVTRA01Y.html","title":"CVTRA01Y","text":""},{"location":"copybooks/CVTRA01Y.html#description","title":"Description","text":"<p>This copybook defines a data structure for tracking transaction category balances. It contains a record layout with a key composed of an account ID, transaction type code, and category code, followed by a signed balance field with two decimal places. The record has a fixed length of 50 bytes, with 22 bytes of filler space reserved for potential future expansion. This structure is likely used in the CardDemo application to maintain and report on transaction balances categorized by different transaction types.</p>"},{"location":"copybooks/CVTRA01Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      *****************************************************************         \n      *    Data-structure for transaction category balance (RECLN = 50)         \n      *****************************************************************         \n       01  TRAN-CAT-BAL-RECORD.                                                 \n           05  TRAN-CAT-KEY.                                                    \n              10 TRANCAT-ACCT-ID                       PIC 9(11).               \n              10 TRANCAT-TYPE-CD                       PIC X(02).               \n              10 TRANCAT-CD                            PIC 9(04).               \n           05  TRAN-CAT-BAL                            PIC S9(09)V99.           \n           05  FILLER                                  PIC X(22).               \n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT\n      *\n</code></pre>"},{"location":"copybooks/CVTRA02Y.html","title":"CVTRA02Y","text":""},{"location":"copybooks/CVTRA02Y.html#description","title":"Description","text":"<p>This copybook defines a data structure for a disclosure group record with a fixed length of 50 bytes. It contains fields for account group identification, transaction type and category codes, and an interest rate. The structure is likely used in the CardDemo application for processing or storing transaction-related disclosure information, possibly for regulatory compliance or customer notification purposes. The key fields form a composite identifier for different types of disclosures, while the interest rate field allows for signed values with four digits before and two digits after the decimal point.</p>"},{"location":"copybooks/CVTRA02Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      *****************************************************************         \n      *    Data-structure for disclosure group (RECLN = 50)                     \n      *****************************************************************         \n       01  DIS-GROUP-RECORD.                                                    \n           05  DIS-GROUP-KEY.                                                   \n              10 DIS-ACCT-GROUP-ID                     PIC X(10).               \n              10 DIS-TRAN-TYPE-CD                      PIC X(02).               \n              10 DIS-TRAN-CAT-CD                       PIC 9(04).               \n           05  DIS-INT-RATE                            PIC S9(04)V99.           \n           05  FILLER                                  PIC X(28).               \n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT\n      *\n</code></pre>"},{"location":"copybooks/CVTRA03Y.html","title":"CVTRA03Y","text":""},{"location":"copybooks/CVTRA03Y.html#description","title":"Description","text":"<p>This copybook defines a data structure for transaction type records with a fixed length of 60 bytes. It contains fields for storing a 2-character transaction type code, a 50-character description of the transaction type, and an 8-character filler field. This structure is likely used throughout the CardDemo application to standardize the representation of transaction types and their descriptions in various programs that process card transactions.</p>"},{"location":"copybooks/CVTRA03Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      *****************************************************************         \n      *    Data-structure for transaction type (RECLN = 60)                     \n      *****************************************************************         \n       01  TRAN-TYPE-RECORD.                                                    \n           05  TRAN-TYPE                               PIC X(02).               \n           05  TRAN-TYPE-DESC                          PIC X(50).               \n           05  FILLER                                  PIC X(08).               \n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT\n      *\n</code></pre>"},{"location":"copybooks/CVTRA04Y.html","title":"CVTRA04Y","text":""},{"location":"copybooks/CVTRA04Y.html#description","title":"Description","text":"<p>This copybook defines a data structure for transaction category types with a record length of 60 bytes. It contains a key composed of a 2-character transaction type code and a 4-digit transaction category code, followed by a 50-character description field. The structure is likely used throughout the CardDemo application to categorize different types of card transactions, providing standardized transaction classification for reporting, processing, or display purposes.</p>"},{"location":"copybooks/CVTRA04Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      *****************************************************************         \n      *    Data-structure for transaction category type (RECLN = 60)            \n      *****************************************************************         \n       01  TRAN-CAT-RECORD.                                                     \n           05  TRAN-CAT-KEY.                                                    \n              10  TRAN-TYPE-CD                         PIC X(02).               \n              10  TRAN-CAT-CD                          PIC 9(04).               \n           05  TRAN-CAT-TYPE-DESC                      PIC X(50).               \n           05  FILLER                                  PIC X(04).               \n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:01 CDT\n      *\n</code></pre>"},{"location":"copybooks/CVTRA05Y.html","title":"CVTRA05Y","text":""},{"location":"copybooks/CVTRA05Y.html#description","title":"Description","text":"<p>This copybook defines the data structure for transaction records with a record length of 350 bytes. It contains fields for storing transaction details including identification, type, amount, merchant information, and timestamps. Key fields include transaction ID, type code, category code, amount, merchant details (ID, name, city, ZIP), card number, and timestamps for both transaction origin and processing. This structure is likely used throughout the CardDemo application for processing and storing credit card transaction data in various programs that handle transaction processing, reporting, or analysis.</p>"},{"location":"copybooks/CVTRA05Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      *****************************************************************         \n      *    Data-structure for TRANsaction record (RECLN = 350)                  \n      *****************************************************************         \n       01  TRAN-RECORD.                                                         \n           05  TRAN-ID                                 PIC X(16).               \n           05  TRAN-TYPE-CD                            PIC X(02).               \n           05  TRAN-CAT-CD                             PIC 9(04).               \n           05  TRAN-SOURCE                             PIC X(10).               \n           05  TRAN-DESC                               PIC X(100).              \n           05  TRAN-AMT                                PIC S9(09)V99.           \n           05  TRAN-MERCHANT-ID                        PIC 9(09).               \n           05  TRAN-MERCHANT-NAME                      PIC X(50).               \n           05  TRAN-MERCHANT-CITY                      PIC X(50).               \n           05  TRAN-MERCHANT-ZIP                       PIC X(10).               \n           05  TRAN-CARD-NUM                           PIC X(16).               \n           05  TRAN-ORIG-TS                            PIC X(26).               \n           05  TRAN-PROC-TS                            PIC X(26).               \n           05  FILLER                                  PIC X(20).               \n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:01 CDT\n      *\n</code></pre>"},{"location":"copybooks/CVTRA06Y.html","title":"CVTRA06Y","text":""},{"location":"copybooks/CVTRA06Y.html#description","title":"Description","text":"<p>This copybook defines the data structure for a daily transaction record (DALYTRAN-RECORD) with a record length of 350 bytes. It captures comprehensive transaction information for card payments including transaction identification, categorization, financial details, merchant information, and timestamps. Key fields include the transaction ID, type code, category code, amount, merchant details (ID, name, city, ZIP), card number, and both origination and processing timestamps. This structure is likely used across multiple programs in the CardDemo application for processing, storing, and reporting on card transactions.</p>"},{"location":"copybooks/CVTRA06Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      *****************************************************************         \n      *    Data-structure for DALYTRANsaction record (RECLN = 350)              \n      *****************************************************************         \n       01  DALYTRAN-RECORD.                                                     \n           05  DALYTRAN-ID                             PIC X(16).               \n           05  DALYTRAN-TYPE-CD                        PIC X(02).               \n           05  DALYTRAN-CAT-CD                         PIC 9(04).               \n           05  DALYTRAN-SOURCE                         PIC X(10).               \n           05  DALYTRAN-DESC                           PIC X(100).              \n           05  DALYTRAN-AMT                            PIC S9(09)V99.           \n           05  DALYTRAN-MERCHANT-ID                    PIC 9(09).               \n           05  DALYTRAN-MERCHANT-NAME                  PIC X(50).               \n           05  DALYTRAN-MERCHANT-CITY                  PIC X(50).               \n           05  DALYTRAN-MERCHANT-ZIP                   PIC X(10).               \n           05  DALYTRAN-CARD-NUM                       PIC X(16).               \n           05  DALYTRAN-ORIG-TS                        PIC X(26).               \n           05  DALYTRAN-PROC-TS                        PIC X(26).               \n           05  FILLER                                  PIC X(20).       \n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:01 CDT\n      *\n</code></pre>"},{"location":"copybooks/CVTRA07Y.html","title":"CVTRA07Y","text":""},{"location":"copybooks/CVTRA07Y.html#description","title":"Description","text":"<p>This copybook defines data structures used for generating a daily transaction report in the CardDemo application. It contains layout definitions for report headers, transaction detail lines, and summary totals. The structure includes fields for transaction IDs, account IDs, transaction types with descriptions, category codes with descriptions, transaction sources, and monetary amounts. The copybook also defines header lines for column titles and page formatting, as well as specialized structures for displaying page totals, account totals, and grand totals with proper formatting for currency values. These structures would be used by programs that generate transaction reports to ensure consistent formatting and presentation of financial data.</p>"},{"location":"copybooks/CVTRA07Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>      *****************************************************************         \n      *    Reporting data structure for transaction report                      \n      *****************************************************************         \n       01  REPORT-NAME-HEADER.                                                  \n           05  REPT-SHORT-NAME                  PIC X(38) VALUE                 \n           'DALYREPT'.                                                          \n           05  REPT-LONG-NAME                   PIC X(41) VALUE                 \n           'Daily Transaction Report'.                                          \n           05  REPT-DATE-HEADER                 PIC X(12) VALUE                 \n           'Date Range: '.                                                      \n           05  REPT-START-DATE                  PIC X(10) VALUE SPACES.         \n           05  FILLER                           PIC X(04) VALUE ' to '.         \n           05  REPT-END-DATE                    PIC X(10) VALUE SPACES.         \n\n       01  TRANSACTION-DETAIL-REPORT.                                           \n           05  TRAN-REPORT-TRANS-ID             PIC X(16).                      \n           05  FILLER                           PIC X(01) VALUE SPACES.         \n           05  TRAN-REPORT-ACCOUNT-ID           PIC X(11).                      \n           05  FILLER                           PIC X(01) VALUE SPACES.         \n           05  TRAN-REPORT-TYPE-CD              PIC X(02).                      \n           05  FILLER                           PIC X(01) VALUE '-'.            \n           05  TRAN-REPORT-TYPE-DESC            PIC X(15).                      \n           05  FILLER                           PIC X(01) VALUE SPACES.         \n           05  TRAN-REPORT-CAT-CD               PIC 9(04).                      \n           05  FILLER                           PIC X(01) VALUE '-'.            \n           05  TRAN-REPORT-CAT-DESC             PIC X(29).                      \n           05  FILLER                           PIC X(01) VALUE SPACES.         \n           05  TRAN-REPORT-SOURCE               PIC X(10).                      \n           05  FILLER                           PIC X(04) VALUE SPACES.         \n           05  TRAN-REPORT-AMT                  PIC -ZZZ,ZZZ,ZZZ.ZZ.            \n           05  FILLER                           PIC X(02) VALUE SPACES.         \n\n       01  TRANSACTION-HEADER-1.                                                \n           05  FILLER                           PIC X(17) VALUE                 \n           'Transaction ID'.                                                    \n           05  FILLER                           PIC X(12) VALUE                 \n           'Account ID'.                                                        \n           05  FILLER                           PIC X(19) VALUE                 \n           'Transaction Type'.                                                  \n           05  FILLER                           PIC X(35) VALUE                 \n           'Tran Category'.                                                     \n           05  FILLER                           PIC X(14) VALUE                 \n           'Tran Source'.                                                       \n           05  FILLER                           PIC X VALUE SPACES.             \n           05  FILLER                           PIC X(16) VALUE                 \n           '        Amount'.                                                    \n\n       01  TRANSACTION-HEADER-2  PIC X(133) VALUE ALL '-'.                      \n\n       01  REPORT-PAGE-TOTALS.                                                  \n           05  FILLER                           PIC X(11) VALUE                 \n           'Page Total'.                                                        \n           05  FILLER                           PIC X(86) VALUE ALL '.'.        \n           05  REPT-PAGE-TOTAL                  PIC +ZZZ,ZZZ,ZZZ.ZZ.            \n\n       01  REPORT-ACCOUNT-TOTALS.                                               \n           05  FILLER                           PIC X(13) VALUE                 \n           'Account Total'.                                                     \n           05  FILLER                           PIC X(84) VALUE ALL '.'.        \n           05  REPT-ACCOUNT-TOTAL               PIC +ZZZ,ZZZ,ZZZ.ZZ.            \n\n       01  REPORT-GRAND-TOTALS.                                                 \n           05  FILLER                           PIC X(11) VALUE                 \n           'Grand Total'.                                                       \n           05  FILLER                           PIC X(86) VALUE ALL '.'.        \n           05  REPT-GRAND-TOTAL                 PIC +ZZZ,ZZZ,ZZZ.ZZ.            \n\n\n\n\n      *\n      * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:01 CDT\n      *\n</code></pre>"},{"location":"copybooks/UNUSED1Y.html","title":"UNUSED1Y","text":""},{"location":"copybooks/UNUSED1Y.html#description","title":"Description","text":"<p>This copybook defines a data structure named UNUSED-DATA that appears to be a placeholder or legacy structure not actively used in the current application. It contains fields for storing user identification information including an ID, first name, last name, password, user type, and filler space. The structure is likely maintained for compatibility with older code or for potential future use within the CardDemo application. The comment at the bottom indicates the version control information for the CardDemo project.</p>"},{"location":"copybooks/UNUSED1Y.html#copybook-code","title":"Copybook Code","text":"<pre><code>       01 UNUSED-DATA.\n         05 UNUSED-ID                 PIC X(08).\n         05 UNUSED-FNAME              PIC X(20).\n         05 UNUSED-LNAME              PIC X(20).\n         05 UNUSED-PWD                PIC X(08).\n         05 UNUSED-TYPE               PIC X(01).\n         05 UNUSED-FILLER             PIC X(23).\n      *\n      * Ver: CardDemo_v1.0-56-gd8e5ebf-109 Date: 2022-08-19 17:55:18 CDT\n      *\n</code></pre>"},{"location":"jobs/ACCTFILE.html","title":"ACCTFILE","text":""},{"location":"jobs/ACCTFILE.html#description","title":"Description","text":"<p>This JCL job manages the Account Data VSAM file for the CardDemo application. It performs three main operations in sequence: first deleting any existing Account Data VSAM file (STEP05), then defining a new VSAM key-sequenced dataset with specific parameters including 11-byte keys and 300-byte fixed-length records (STEP10), and finally populating the newly created VSAM file by copying data from a flat file source (STEP15). The job includes error handling to prevent failures if the initial delete operation finds no existing file to delete.</p>"},{"location":"jobs/ACCTFILE.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/ACCTFILE.html#jcl-code","title":"JCL Code","text":"<pre><code>//ACCTFILE JOB 'Delete define Account Data',CLASS=A,MSGCLASS=0,                 \n// NOTIFY=&amp;SYSUID                         \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************            \n//* *******************************************************************         \n//* DELETE ACCOUNT VSAM FILE IF ONE ALREADY EXISTS                              \n//* *******************************************************************         \n//STEP05 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DELETE AWS.M2.CARDDEMO.ACCTDATA.VSAM.KSDS -                                  \n          CLUSTER                                                               \n   IF MAXCC LE 08 THEN SET MAXCC = 0                                            \n/*                                                                              \n//*                                                                             \n//* *******************************************************************         \n//* DEFINE ACCOUNT VSAM FILE                                                    \n//* *******************************************************************         \n//STEP10 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DEFINE CLUSTER (NAME(AWS.M2.CARDDEMO.ACCTDATA.VSAM.KSDS) -                   \n          CYLINDERS(1 5) -                                                      \n          VOLUMES(AWSHJ1 -                                                      \n          ) -                                                                   \n          KEYS(11 0) -                                                          \n          RECORDSIZE(300 300) -                                                 \n          SHAREOPTIONS(2 3) -                                                   \n          ERASE -                                                               \n          INDEXED -                                                             \n          ) -                                                                   \n          DATA (NAME(AWS.M2.CARDDEMO.ACCTDATA.VSAM.KSDS.DATA) -                 \n          ) -                                                                   \n          INDEX (NAME(AWS.M2.CARDDEMO.ACCTDATA.VSAM.KSDS.INDEX) -               \n          )                                                                     \n/*                                                                              \n//* *******************************************************************         \n//* COPY DATA FROM FLAT FILE TO VSAM FILE                                       \n//* *******************************************************************         \n//STEP15 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//ACCTDATA DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.ACCTDATA.PS                                      \n//ACCTVSAM DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.ACCTDATA.VSAM.KSDS                               \n//SYSIN    DD   *                                                               \n   REPRO INFILE(ACCTDATA) OUTFILE(ACCTVSAM)                                     \n/*                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:04 CDT\n//*\n</code></pre>"},{"location":"jobs/BATCMP.html","title":"BATCMP","text":""},{"location":"jobs/BATCMP.html#description","title":"Description","text":"<p>This JCL job compiles a batch COBOL program for the CardDemo application. It serves as a template where users need to replace \"BATCHPGM\" with their actual program name throughout the job. The job utilizes a predefined procedure called BUILDBAT from the AWS.M2.CARDDEMO.PRC.UTIL library to perform the compilation. It includes configuration parameters for the high-level qualifier (HLQ) and member name, making it reusable for different batch programs within the CardDemo environment. The job is designed to support AWS and partner technology for mainframe migration and modernization use-cases.</p>"},{"location":"jobs/BATCMP.html#jcl-code","title":"JCL Code","text":"<pre><code>//CNJBATMP JOB 'Compile Batch COBOL Program',CLASS=A,MSGCLASS=H,        \n//             MSGLEVEL=(1,1),REGION=0M,NOTIFY=&amp;SYSUID,TIME=1440\n//*********************************************************************         \n//*  change BATCHPGM to your program name everywhere                            \n//*-----&gt;   C BATCHPGM xyz all &lt;--------                                        \n//*********************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//*********************************************************************    \n//****  Sample Batch COBOL Compile JCL                           ******         \n//****  Check with your Administrator for                        ******         \n//****  JCL suitable to your environment                         ******\n//*********************************************************************    \n//*  change BATCHPGM to your program name everywhere                            \n//*-----&gt;   C BATCHPGM xyz all &lt;--------                                        \n//*********************************************************************         \n//****  COMPILE BATCH COBOL PROGRAM                              ******         \n//*********************************************************************         \n//*  Set Parms for this compile:                                                \n//*********************************************************************         \n//   SET MEMNAME=BATCHPGM                                                       \n//   SET HLQ=AWS.M2                                                             \n//*********************************************************************         \n//*  Add proclib reference                                                      \n//*********************************************************************         \n//CCLIBS  JCLLIB ORDER=&amp;HLQ..CARDDEMO.PRC.UTIL                                  \n//*********************************************************************         \n//*  compile the COBOL code:                                                    \n//*********************************************************************         \n//BATCMP       EXEC BUILDBAT,MEM=&amp;MEMNAME,HLQ=&amp;HLQ                              \n</code></pre>"},{"location":"jobs/BMSCMP.html","title":"BMSCMP","text":""},{"location":"jobs/BMSCMP.html#description","title":"Description","text":"<p>This JCL job compiles a BMS (Basic Mapping Support) map for CICS applications within the CardDemo AWS mainframe migration showcase project. It performs a two-step process: first compiling the BMS map to generate the necessary copybook and load modules, then issuing a CICS NEWCOPY command to make the updated map immediately available in the running CICS region. The job uses a custom procedure (BUILDBMS) stored in the project's procedure library and includes parameters for customization, allowing users to specify their high-level qualifier and map name. The job is designed to be reusable by replacing \"CICSMAP\" with the actual map name needed for compilation.</p>"},{"location":"jobs/BMSCMP.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>SDSF</code></li> </ul>"},{"location":"jobs/BMSCMP.html#jcl-code","title":"JCL Code","text":"<pre><code>//CBLDBMS  JOB 'Compile BMS Map',CLASS=A,MSGCLASS=H,        \n//             MSGLEVEL=(1,1),REGION=0M,NOTIFY=&amp;SYSUID,TIME=1440\n//*********************************************************************\n//*  Change CICSMAP to your map name everywhere\n//*-----&gt;   C CICSMAP xyz all &lt;--------\n//*  set    HLQ      to your high level qualifier\n//*********************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//*********************************************************************    \n//****  Sample Assembler BMS Compile JCL                         ******         \n//****  Check with your Administrator for                        ******         \n//****  JCL suitable to your environment                         ******\n//*********************************************************************\n//****  Compile CICS BMS to generate Copybook                    ******\n//*********************************************************************\n//*  ---------------------------\n//*  Set Parms for this compile:\n//*  ---------------------------\n//   SET HLQ=AWS.M2\n//*\n//*********************************************************************\n//*  Add Proclib Reference\n//*********************************************************************\n//CCLIBS  JCLLIB ORDER=&amp;HLQ..CARDDEMO.PRC.UTIL\n//STEP1 EXEC BUILDBMS,MAPNAME=CICSMAP,HLQ=&amp;HLQ\n//*********************************************************************\n//****  CICS commands in batch to Execute NEWCOPY                ******\n//*********************************************************************\n//SDSF1 EXEC PGM=SDSF\n//ISFOUT DD SYSOUT=*\n//CMDOUT DD SYSOUT=*\n//ISFIN  DD *\n /MODIFY CICSAWSA,'CEMT SET PROG(CICSMAP) NEWCOPY'\n/*\n</code></pre>"},{"location":"jobs/CARDFILE.html","title":"CARDFILE","text":""},{"location":"jobs/CARDFILE.html#description","title":"Description","text":"<p>This JCL job manages the VSAM files used for card data in the CardDemo application. It performs a complete refresh of the card data by first closing the files in the CICS region, deleting existing VSAM files, defining a new KSDS cluster, loading data from a flat file, creating an alternate index on the account ID field, building the path relationship, and finally reopening the files in CICS. The job ensures proper file access during maintenance by coordinating with the CICS region through SDSF commands. The alternate index provides secondary access to card records by account ID, supporting efficient lookups by this field in addition to the primary key.</p>"},{"location":"jobs/CARDFILE.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>SDSF</code></li> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/CARDFILE.html#jcl-code","title":"JCL Code","text":"<pre><code>//CARDFILE JOB 'Delete define card data',CLASS=A,MSGCLASS=0,\n// NOTIFY=&amp;SYSUID              \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************       \n//*********************************************************************         \n//* Close files in CICS region                                                  \n//*********************************************************************         \n//CLCIFIL EXEC PGM=SDSF                                                         \n//ISFOUT DD SYSOUT=*                                                            \n//CMDOUT DD SYSOUT=*                                                            \n//ISFIN  DD *                                                                   \n /F CICSAWSA,'CEMT SET FIL(CARDDAT ) CLO'                                       \n /F CICSAWSA,'CEMT SET FIL(CARDAIX ) CLO'                                       \n/*                                                                              \n//*                                                                             \n//* *******************************************************************         \n//* DELETE CARD DATA VSAM FILE IF ONE ALREADY EXISTS                            \n//* *******************************************************************         \n//STEP05 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DELETE AWS.M2.CARDDEMO.CARDDATA.VSAM.KSDS -                                  \n          CLUSTER                                                               \n   IF MAXCC LE 08 THEN SET MAXCC = 0                                            \n   DELETE AWS.M2.CARDDEMO.CARDDATA.VSAM.AIX -                                   \n          ALTERNATEINDEX                                                        \n   IF MAXCC LE 08 THEN SET MAXCC = 0                                            \n/*                                                                              \n//*                                                                             \n//* *******************************************************************         \n//* DEFINE CARD DATA VSAM FILE                                                  \n//* *******************************************************************         \n//STEP10 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DEFINE CLUSTER (NAME(AWS.M2.CARDDEMO.CARDDATA.VSAM.KSDS) -                   \n          CYLINDERS(1 5) -                                                      \n          VOLUMES(AWSHJ1 -                                                      \n          ) -                                                                   \n          KEYS(16 0) -                                                          \n          RECORDSIZE(150 150) -                                                 \n          SHAREOPTIONS(2 3) -                                                   \n          ERASE -                                                               \n          INDEXED -                                                             \n          ) -                                                                   \n          DATA (NAME(AWS.M2.CARDDEMO.CARDDATA.VSAM.KSDS.DATA) -                 \n          ) -                                                                   \n          INDEX (NAME(AWS.M2.CARDDEMO.CARDDATA.VSAM.KSDS.INDEX) -               \n          )                                                                     \n/*                                                                              \n//* *******************************************************************         \n//* COPY DATA FROM FLAT FILE TO VSAM FILE                                       \n//* *******************************************************************         \n//STEP15 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//CARDDATA DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.CARDDATA.PS                                      \n//CARDVSAM DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.CARDDATA.VSAM.KSDS                               \n//SYSIN    DD   *                                                               \n   REPRO INFILE(CARDDATA) OUTFILE(CARDVSAM)                                     \n/*                                                                              \n//*-------------------------------------------------------------------*         \n//* CREATE ALTERNATE INDEX ON ACCT ID                                           \n//*-------------------------------------------------------------------*         \n//STEP40  EXEC PGM=IDCAMS                                                       \n//SYSPRINT DD  SYSOUT=*                                                         \n//SYSIN    DD  *                                                                \n   DEFINE ALTERNATEINDEX (NAME(AWS.M2.CARDDEMO.CARDDATA.VSAM.AIX)-              \n   RELATE(AWS.M2.CARDDEMO.CARDDATA.VSAM.KSDS)                    -              \n   KEYS(11 16)                                                   -              \n   NONUNIQUEKEY                                                  -              \n   UPGRADE                                                       -              \n   RECORDSIZE(150,150)                                           -              \n   VOLUMES(AWSHJ1)                                               -              \n   CYLINDERS(5,1))                                               -              \n   DATA (NAME(AWS.M2.CARDDEMO.CARDDATA.VSAM.AIX.DATA))           -              \n   INDEX (NAME(AWS.M2.CARDDEMO.CARDDATA.VSAM.AIX.INDEX))                        \n/*                                                                              \n//*-------------------------------------------------------------------*         \n//* DEFINE PATH IS USED TO RELATE THE ALTERNATE INDEX TO BASE CLUSTER           \n//*-------------------------------------------------------------------*         \n//STEP50  EXEC PGM=IDCAMS                                                       \n//SYSPRINT DD  SYSOUT=*                                                         \n//SYSIN    DD  *                                                                \n  DEFINE PATH                                           -                       \n   (NAME(AWS.M2.CARDDEMO.CARDDATA.VSAM.AIX.PATH)        -                       \n    PATHENTRY(AWS.M2.CARDDEMO.CARDDATA.VSAM.AIX))                               \n/*                                                                              \n//*------------------------------------------------------------------           \n//* BUILD ALTERNATE INDEX CLUSTER                                               \n//*-------------------------------------------------------------------*         \n//STEP60  EXEC PGM=IDCAMS                                                       \n//SYSPRINT DD  SYSOUT=*                                                         \n//SYSIN    DD  *                                                                \n   BLDINDEX                                                      -              \n   INDATASET(AWS.M2.CARDDEMO.CARDDATA.VSAM.KSDS)                 -              \n   OUTDATASET(AWS.M2.CARDDEMO.CARDDATA.VSAM.AIX)                                \n/*                                                                              \n//*                                                                             \n//*********************************************************************         \n//* Open files in CICS region                                                   \n//*********************************************************************         \n//OPCIFIL EXEC PGM=SDSF                                                         \n//ISFOUT DD SYSOUT=*                                                            \n//CMDOUT DD SYSOUT=*                                                            \n//ISFIN  DD *                                                                   \n /F CICSAWSA,'CEMT SET FIL(CARDDAT ) OPE'                                       \n /F CICSAWSA,'CEMT SET FIL(CARDAIX ) OPE'                                       \n/*                                                                              \n//                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:04 CDT\n//*\n</code></pre>"},{"location":"jobs/CBADMCDJ.html","title":"CBADMCDJ","text":""},{"location":"jobs/CBADMCDJ.html#description","title":"Description","text":"<p>This JCL job creates CICS resources required for the CardDemo application. It executes the DFHCSDUP utility to define various CICS resources in the CARDDEMO group, including a library definition pointing to the application's load library, multiple mapsets for different screens (login, account management, card operations, transactions, bill pay, and admin functions), program definitions with their associated descriptions, and transaction definitions that link to specific programs. The job is designed to set up the complete CICS environment needed for the CardDemo application to function, with resources organized to support various credit card management operations.</p>"},{"location":"jobs/CBADMCDJ.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>DFHCSDUP</code></li> </ul>"},{"location":"jobs/CBADMCDJ.html#jcl-code","title":"JCL Code","text":"<pre><code>//CBADMCDJ JOB (COBOL),'AWSCODR',CLASS=A,MSGCLASS=H,MSGLEVEL=(1,1),\n//         NOTIFY=&amp;SYSUID,TIME=1440\n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************\n//*********************************************************************\n//****  Create Resources for Card Demo application               ******\n//*********************************************************************\n//*  ---------------------------\n//*  SET PARMS FOR THIS JOB:\n//*  ---------------------------\n//   SET HLQ=AWS.M2.CARDDEMO\n//*\n//STEP1   EXEC PGM=DFHCSDUP,REGION=0M,\n//          PARM='CSD(READWRITE),PAGESIZE(60),NOCOMPAT'\n//STEPLIB  DD  DSN=OEM.CICSTS.V05R06M0.CICS.SDFHLOAD,DISP=SHR\n//DFHCSD   DD  UNIT=SYSDA,DISP=SHR,DSN=OEM.CICSTS.DFHCSD\n//OUTDD    DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *,SYMBOLS=JCLONLY\n*/********************************************************************/\n*/*  CARDDEMO CICS DEFINITIONS                                       */\n*/********************************************************************/\n* NOTE: INSTALL GROUP(CARDDEMO) - CEDA IN G(CARDDEMO)                *\n*     IF YOU ARE RERUNNING THIS, UNCOMMENT THE DELETE COMMAND. *\n*\n* START CARDDEMO RESOURCES:\n*\n* DELETE GROUP(CARDDEMO)\n\n  DEFINE LIBRARY(COM2DOLL) GROUP(CARDDEMO)\n                DSNAME01(&amp;HLQ..LOADLIB)\n\n* DEFINE TDQUEUE(CSSD) GROUP(CARDDEMO) TYPE(INTRA)\n* DEFINE TDQUEUE(IRDC) GROUP(CARDDEMO) TYPE(INTRA)\n\n  DEFINE MAPSET(COSGN00M)   GROUP(CARDDEMO)\n         DESCRIPTION(LOGIN SCREEN)\n\n  DEFINE MAPSET(COSGN00M)   GROUP(CARDDEMO)\n         DESCRIPTION(LOGIN SCREEN)\n\n  DEFINE MAPSET(COACT00S)   GROUP(CARDDEMO)\n         DESCRIPTION(ACCOUNT MENU)\n  DEFINE MAPSET(COACTVWS)   GROUP(CARDDEMO)\n         DESCRIPTION(VIEW ACCOUNT)\n  DEFINE MAPSET(COACTUPS)   GROUP(CARDDEMO)\n         DESCRIPTION(UPDATE ACCOUNT)\n  DEFINE MAPSET(COACTDES)   GROUP(CARDDEMO)\n         DESCRIPTION(DEACTIVATE ACCOUNT)\n\n  DEFINE MAPSET(COACT00S)   GROUP(CARDDEMO)\n         DESCRIPTION(CARD MENU)\n  DEFINE MAPSET(COACTVWS)   GROUP(CARDDEMO)\n         DESCRIPTION(VIEW CARD)\n  DEFINE MAPSET(COACTUPS)   GROUP(CARDDEMO)\n         DESCRIPTION(UPDATE CARD)\n  DEFINE MAPSET(COACTDES)   GROUP(CARDDEMO)\n         DESCRIPTION(DEACTIVATE CARD)\n\n  DEFINE MAPSET(COTRN00S)   GROUP(CARDDEMO)\n         DESCRIPTION(TRANSACTION)\n  DEFINE MAPSET(COTRNVWS)   GROUP(CARDDEMO)\n         DESCRIPTION(TRANSACTION REPORT)\n  DEFINE MAPSET(COTRNVDS)   GROUP(CARDDEMO)\n         DESCRIPTION(TRANSACTION DETAILS)\n  DEFINE MAPSET(COTRNATS)   GROUP(CARDDEMO)\n         DESCRIPTION(ADD TRANSACTIONS)\n\n  DEFINE MAPSET(COBIL00S)   GROUP(CARDDEMO)\n         DESCRIPTION(BILL PAY SETUP)\n\n  DEFINE MAPSET(COADM00S)   GROUP(CARDDEMO)\n         DESCRIPTION(ADMIN MENU)\n\n  DEFINE MAPSET(COTSTP1S)   GROUP(CARDDEMO)\n         DESCRIPTION(PGM1 TEST)\n  DEFINE MAPSET(COTSTP2S)   GROUP(CARDDEMO)\n         DESCRIPTION(PGM2 TEST)\n  DEFINE MAPSET(COTSTP3S)   GROUP(CARDDEMO)\n         DESCRIPTION(PGM3 TEST)\n  DEFINE MAPSET(COTSTP4S)   GROUP(CARDDEMO)\n         DESCRIPTION(PGM4 TEST)\n\n  DEFINE PROGRAM(COSGN00C) GROUP(CARDDEMO) DA(ANY) TRANSID(CC00)\n         DESCRIPTION(LOGIN)\n\n  DEFINE PROGRAM(COACT00C) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(ACCOUNT MAIN MENU)\n  DEFINE PROGRAM(COACTVWC) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(VIEW ACCOUNT)\n  DEFINE PROGRAM(COACTUPC) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(UPDATE ACCOUNT)\n  DEFINE PROGRAM(COACTDEC) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(DEACTIVATE ACCOUNT)\n\n  DEFINE PROGRAM(COACT00C) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(CARD MENU)\n  DEFINE PROGRAM(COACTVWC) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(VIEW CARD)\n  DEFINE PROGRAM(COACTUPC) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(UPDATE CARD)\n  DEFINE PROGRAM(COACTDEC) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(DEACTIVATE CARD)\n  DEFINE PROGRAM(COTRN00C) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(TRANSACTION)\n  DEFINE PROGRAM(COTRNVWC) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(TRANSACTION REPORT)\n  DEFINE PROGRAM(COTRNVDC) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(TRANSACTION DETAILS)\n  DEFINE PROGRAM(COTRNATC) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(ADD TRANSACTIONS)\n\n  DEFINE PROGRAM(COBIL00C) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(BILL PAY)\n\n  DEFINE PROGRAM(COADM00C) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(ADMIN MENU)\n         TRANSID(CCAD)\n\n  DEFINE PROGRAM(COTSTP1C) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(PGM1 TEST)\n         TRANSID(CCT1)\n  DEFINE PROGRAM(COTSTP2C) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(PGM2 TEST)\n         TRANSID(CCT2)\n  DEFINE PROGRAM(COTSTP3C) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(PGM1 TEST)\n         TRANSID(CCT3)\n  DEFINE PROGRAM(COTSTP4C) GROUP(CARDDEMO) DA(ANY)\n         DESCRIPTION(PGM4 TEST)\n         TRANSID(CCT4)\n\n  DEFINE TRANSACTION(CCDM) GROUP(CARDDEMO)\n                PROGRAM(COADM00C) TASKDATAL(ANY)\n\n  DEFINE TRANSACTION(CCT1) GROUP(CARDDEMO)\n                PROGRAM(COTSTP1C) TASKDATAL(ANY)\n  DEFINE TRANSACTION(CCT2) GROUP(CARDDEMO)\n                PROGRAM(COTSTP2C) TASKDATAL(ANY)\n  DEFINE TRANSACTION(CCT3) GROUP(CARDDEMO)\n                PROGRAM(COTSTP3C) TASKDATAL(ANY)\n  DEFINE TRANSACTION(CCT4) GROUP(CARDDEMO)\n                PROGRAM(COTSTP4C) TASKDATAL(ANY)\n\n  LIST   GROUP(CARDDEMO)\n*\n* END CARDDEMO RESOURCES\n*\n/*\n//\n//*\n//* Ver: CardDemo_v1.0-70-g193b394-123 Date: 2022-08-22 17:02:44 CDT\n//*\n</code></pre>"},{"location":"jobs/CICCMP.html","title":"CICCMP","text":""},{"location":"jobs/CICCMP.html#description","title":"Description","text":"<p>This JCL job compiles a CICS COBOL program and performs a NEWCOPY operation to refresh the program in the CICS environment. It uses a predefined procedure (BUILDONL) from a procedure library to handle the compilation process. After successful compilation, it executes SDSF to issue a CEMT command that instructs the CICS region (CICSAWSA) to load a fresh copy of the program. The job includes placeholders for customization, requiring users to replace \"CICSPGMN\" with their actual program name and set the appropriate high-level qualifier (HLQ) for their environment. This job is part of the CardDemo application used for AWS mainframe migration demonstrations.</p>"},{"location":"jobs/CICCMP.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>SDSF</code></li> </ul>"},{"location":"jobs/CICCMP.html#jcl-code","title":"JCL Code","text":"<pre><code>//CICCMP  JOB 'Compile CICS Program',CLASS=A,MSGCLASS=H,        \n//             MSGLEVEL=(1,1),REGION=0M,NOTIFY=&amp;SYSUID,TIME=1440\n//********************************************************************* \n//*  change CICSPGMN to your program name everywhere                            \n//*-----&gt;   C CICSPGMN xyz all &lt;--------                                        \n//*  set    HLQ      to your high level qualifier                              \n//*********************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//*********************************************************************    \n//****  Sample CICS COBOL Compile JCL                            ******         \n//****  Check with your Administrator for                        ******         \n//****  JCL suitable to your environment                         ******\n//*********************************************************************         \n//****  Compile CICS COBOL program                               ******         \n//****  After compiling the related maps                         ****** \n//*********************************************************************         \n//*  Set Parms for this compile:                                                \n//*********************************************************************         \n//   SET HLQ=AWS.M2                                                             \n//   SET MEMNAME=CICSPGMN                                                       \n//*********************************************************************         \n//*  Add proclib reference                                                      \n//*********************************************************************         \n//CCLIBS  JCLLIB ORDER=&amp;HLQ..CARDDEMO.PRC.UTIL                                  \n//*********************************************************************         \n//*  compile the COBOL code:                                                    \n//*********************************************************************         \n//CICSCMP      EXEC BUILDONL,MEM=&amp;MEMNAME,HLQ=&amp;HLQ                              \n//*********************************************************************         \n//****  CICS commands in batch to perform NEWCOPY                ******         \n//*********************************************************************         \n//NEWCOPY EXEC PGM=SDSF,COND=(4,LT)                                             \n//ISFOUT DD SYSOUT=*                                                            \n//CMDOUT DD SYSOUT=*                                                            \n//ISFIN  DD *                                                                   \n /MODIFY CICSAWSA,'CEMT SET PROG(CICSPGMN) NEWCOPY'                             \n/*                                                                              \n</code></pre>"},{"location":"jobs/CLOSEFIL.html","title":"CLOSEFIL","text":""},{"location":"jobs/CLOSEFIL.html#description","title":"Description","text":"<p>This JCL job is designed to close specific files in the CICSAWSA CICS region. It uses the SDSF program to issue CEMT commands that close five critical files used by the CardDemo application: TRANSACT, CCXREF, ACCTDAT, CXACAIX, and USRSEC. This job would typically be run during maintenance windows or before backup operations to ensure data integrity by properly closing the files in the CICS environment.</p>"},{"location":"jobs/CLOSEFIL.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>SDSF</code></li> </ul>"},{"location":"jobs/CLOSEFIL.html#jcl-code","title":"JCL Code","text":"<pre><code>//CLOSEFIL JOB 'Close files in CICS',CLASS=A,MSGCLASS=0,\n// NOTIFY=&amp;SYSUID\n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************\n//*********************************************************************         \n//* Close files in CICS region                                                  \n//*********************************************************************         \n//CLCIFIL EXEC PGM=SDSF                                                         \n//ISFOUT DD SYSOUT=*                                                            \n//CMDOUT DD SYSOUT=*                                                            \n//ISFIN  DD *                                                                   \n /F CICSAWSA,'CEMT SET FIL(TRANSACT ) CLO'                                      \n /F CICSAWSA,'CEMT SET FIL(CCXREF ) CLO'                                        \n /F CICSAWSA,'CEMT SET FIL(ACCTDAT ) CLO'                                       \n /F CICSAWSA,'CEMT SET FIL(CXACAIX ) CLO'                                       \n /F CICSAWSA,'CEMT SET FIL(USRSEC ) CLO'                                       \n/*      \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:05 CDT\n//*\n</code></pre>"},{"location":"jobs/COMBTRAN.html","title":"COMBTRAN","text":""},{"location":"jobs/COMBTRAN.html#description","title":"Description","text":"<p>This JCL job combines transaction records from two sources and loads them into a transaction master file. It first merges and sorts transactions from the regular transaction backup file and system-generated transactions, sorting them by transaction ID in ascending order. The sorted output is stored in a new generation of the combined transaction dataset. In the second step, the job uses IDCAMS REPRO to load these combined transactions into a VSAM KSDS file that serves as the transaction master. This job is part of the CardDemo application's transaction processing workflow, ensuring that both user-initiated and system-generated transactions are properly consolidated and made available for further processing.</p>"},{"location":"jobs/COMBTRAN.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>SORT</code></li> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/COMBTRAN.html#jcl-code","title":"JCL Code","text":"<pre><code>//COMBTRAN JOB 'COMBINE TRANSACTIONS',CLASS=A,MSGCLASS=0,                  \n//  NOTIFY=&amp;SYSUID    \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************\n//* *******************************************************************         \n//* Sort current transaction file and system generated transactions\n//* *******************************************************************         \n//STEP05R  EXEC PGM=SORT                                                        \n//SORTIN   DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.TRANSACT.BKUP(0)                                \n//         DD DISP=SHR,\n//         DSN=AWS.M2.CARDDEMO.SYSTRAN(0)                                \n//SYMNAMES DD *                                                                 \nTRAN-ID,1,16,CH                                                         \n//SYSIN    DD *                                                                 \n SORT FIELDS=(TRAN-ID,A)                                                  \n/*                                                                              \n//SYSOUT   DD SYSOUT=*                                                          \n//SORTOUT  DD DISP=(NEW,CATLG,DELETE),                                          \n//         UNIT=SYSDA,                                                          \n//         DCB=(*.SORTIN),                                                      \n//         SPACE=(CYL,(1,1),RLSE),                                              \n//         DSN=AWS.M2.CARDDEMO.TRANSACT.COMBINED(+1)                            \n//* *******************************************************************         \n//* Load combined file to transaction master\n//* *******************************************************************         \n//STEP10 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//TRANSACT DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.TRANSACT.COMBINED(+1)                            \n//TRANVSAM DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS                               \n//SYSIN    DD   *                                                               \n   REPRO INFILE(TRANSACT) OUTFILE(TRANVSAM)                                     \n/*                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:05 CDT\n//*\n</code></pre>"},{"location":"jobs/CUSTFILE.html","title":"CUSTFILE","text":""},{"location":"jobs/CUSTFILE.html#description","title":"Description","text":"<p>This JCL job creates and initializes the customer data VSAM file for the CardDemo application. The job follows a complete lifecycle process by first closing any existing file connections in CICS, deleting any existing customer file, defining a new VSAM key-sequenced dataset with a 9-byte key, and then populating it with data from a flat file source. After completion, it reopens the file in the CICS region for application use. The VSAM file is configured with specific allocation parameters (1 primary and 5 secondary cylinders) and fixed-length 500-byte records, making it accessible to the CardDemo application's customer data processing functions.</p>"},{"location":"jobs/CUSTFILE.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>SDSF</code></li> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/CUSTFILE.html#jcl-code","title":"JCL Code","text":"<pre><code>//CUSTFILE JOB 'DEFINE CUSTOMER FILE',CLASS=A,MSGCLASS=0,                       \n//  NOTIFY=&amp;SYSUID      \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************            \n//*********************************************************************         \n//* Close files in CICS region                                                  \n//*********************************************************************         \n//CLCIFIL EXEC PGM=SDSF                                                         \n//ISFOUT DD SYSOUT=*                                                            \n//CMDOUT DD SYSOUT=*                                                            \n//ISFIN  DD *                                                                   \n /F CICSAWSA,'CEMT SET FIL(CUSTDAT ) CLO'                                       \n/*                                                                              \n//*                                                                             \n//* *******************************************************************         \n//* DELETE CUSTOMER VSAM FILE IF ONE ALREADY EXISTS                             \n//* *******************************************************************         \n//STEP05 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DELETE AWS.M2.CARDDEMO.CUSTDATA.VSAM.KSDS -                                  \n          CLUSTER                                                               \n   IF MAXCC LE 08 THEN SET MAXCC = 0                                            \n/*                                                                              \n//*                                                                             \n//* *******************************************************************         \n//* DEFINE CUSTOMER VSAM FILE                                                   \n//* *******************************************************************         \n//STEP10 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DEFINE CLUSTER (NAME(AWS.M2.CARDDEMO.CUSTDATA.VSAM.KSDS) -                   \n          CYLINDERS(1 5) -                                                      \n          VOLUMES(AWSHJ1 -                                                      \n          ) -                                                                   \n          KEYS(9 0) -                                                           \n          RECORDSIZE(500 500) -                                                 \n          SHAREOPTIONS(2 3) -                                                   \n          ERASE -                                                               \n          INDEXED -                                                             \n          ) -                                                                   \n          DATA (NAME(AWS.M2.CARDDEMO.CUSTDATA.VSAM.KSDS.DATA) -                 \n          ) -                                                                   \n          INDEX (NAME(AWS.M2.CARDDEMO.CUSTDATA.VSAM.KSDS.INDEX) -               \n          )                                                                     \n/*                                                                              \n//* *******************************************************************         \n//* COPY DATA FROM FLAT FILE TO VSAM FILE                                       \n//* *******************************************************************         \n//STEP15 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//CUSTDATA DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.CUSTDATA.PS                                      \n//CUSTVSAM DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.CUSTDATA.VSAM.KSDS                               \n//SYSIN    DD   *                                                               \n   REPRO INFILE(CUSTDATA) OUTFILE(CUSTVSAM)                                     \n/*                                                                              \n//*********************************************************************         \n//* Open files in CICS region                                                   \n//*********************************************************************         \n//OPCIFIL EXEC PGM=SDSF                                                         \n//ISFOUT DD SYSOUT=*                                                            \n//CMDOUT DD SYSOUT=*                                                            \n//ISFIN  DD *                                                                   \n /F CICSAWSA,'CEMT SET FIL(CUSTDAT ) OPE'                                       \n/*                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:05 CDT\n//*\n</code></pre>"},{"location":"jobs/DALYREJS.html","title":"DALYREJS","text":""},{"location":"jobs/DALYREJS.html#description","title":"Description","text":"<p>This JCL job defines a Generation Data Group (GDG) for daily rejection records in the CardDemo application. It creates a GDG named AWS.M2.CARDDEMO.DALYREJS with a limit of 5 generations, meaning the system will maintain up to 5 historical versions of the dataset. The SCRATCH parameter indicates that expired generations will be automatically deleted. This GDG is likely used to store daily transaction rejection records that need to be maintained for a limited historical period for analysis or reporting purposes.</p>"},{"location":"jobs/DALYREJS.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/DALYREJS.html#jcl-code","title":"JCL Code","text":"<pre><code>//DALYREJS JOB 'DEF GDG FOR REJS',CLASS=A,MSGCLASS=0,NOTIFY=&amp;SYSUID     \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************        \n//* *******************************************************************         \n//* DELETE TRANSACATION MASTER VSAM FILE IF ONE ALREADY EXISTS                  \n//* *******************************************************************         \n//STEP05 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DEFINE GENERATIONDATAGROUP -                                                 \n   (NAME(AWS.M2.CARDDEMO.DALYREJS) -                                            \n    LIMIT(5) -                                                                  \n    SCRATCH -                                                                   \n   )                                                                            \n/*                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:05 CDT\n//*\n</code></pre>"},{"location":"jobs/DEFCUST.html","title":"DEFCUST","text":""},{"location":"jobs/DEFCUST.html#description","title":"Description","text":"<p>This JCL job defines a VSAM customer data file for the CardDemo application. It first attempts to delete any existing customer data cluster (AWS.CCDA.CUSTDATA.CLUSTER) using IDCAMS, then creates a new indexed VSAM cluster named AWS.CUSTDATA.CLUSTER with specific parameters: 1 primary and 5 secondary cylinders of space allocation, a 10-byte key starting at position 0, fixed 500-byte records, and share options of (1,4). The job creates both data and index components with corresponding names. This file is likely used to store customer information for the CardDemo application's various mainframe modernization demonstration scenarios.</p>"},{"location":"jobs/DEFCUST.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/DEFCUST.html#jcl-code","title":"JCL Code","text":"<pre><code>//DEFCUST JOB 'Define Customer Data File',CLASS=A,MSGCLASS=0,\n// NOTIFY=&amp;SYSUID\n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************\n//* *******************************************************************\n//* DELETE CUSTOMER VSAM FILE IF ONE ALREADY EXISTS\n//* *******************************************************************\n//STEP05 EXEC PGM=IDCAMS\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n   DELETE AWS.CCDA.CUSTDATA.CLUSTER -\n          CLUSTER                     \n/*\n//*\n//* *******************************************************************\n//* DELETE CUSTOMER VSAM FILE IF ONE ALREADY EXISTS\n//* *******************************************************************\n//STEP05 EXEC PGM=IDCAMS\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n   DEFINE CLUSTER (NAME(AWS.CUSTDATA.CLUSTER) - \n          CYLINDERS(1 5) -                      \n          KEYS(10 0) -                          \n          RECORDSIZE(500 500) -                 \n          SHAREOPTIONS(1 4) -                   \n          ERASE -                               \n          INDEXED -                             \n          ) -                                        \n          DATA (NAME(AWS.CUSTDATA.CLUSTER.DATA) -    \n          ) -                                        \n          INDEX (NAME(AWS.CUSTDATA.CLUSTER.INDEX) -  \n          )                                             \n/*\n</code></pre>"},{"location":"jobs/DEFGDGB.html","title":"DEFGDGB","text":""},{"location":"jobs/DEFGDGB.html#description","title":"Description","text":"<p>This job defines Generation Data Group (GDG) bases required by the CardDemo application. It executes the IDCAMS utility to create six GDG bases with a limit of 5 generations each and the SCRATCH option enabled (which automatically removes entries when they exceed the limit). The defined GDGs are used for various data management purposes within the CardDemo system, including transaction backups, daily transactions, transaction reports, account balance backups, system transactions, and combined transaction data. Error handling is implemented to continue processing even if a GDG already exists (by resetting the condition code when LASTCC=12).</p>"},{"location":"jobs/DEFGDGB.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/DEFGDGB.html#jcl-code","title":"JCL Code","text":"<pre><code>//DEFGDGB JOB 'DEF GDG BASES',CLASS=A,MSGCLASS=0,NOTIFY=&amp;SYSUID      \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************           \n//* *******************************************************************         \n//*  DEFINE GDG BASES NEEDED BY CARDDEMO PROJECT                                \n//* *******************************************************************         \n//STEP05 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DEFINE GENERATIONDATAGROUP -                                                 \n   (NAME(AWS.M2.CARDDEMO.TRANSACT.BKUP) -                                       \n    LIMIT(5) -                                                                  \n    SCRATCH -                                                                   \n   )                                                                            \n   IF LASTCC=12 THEN SET MAXCC=0                                                \n   DEFINE GENERATIONDATAGROUP -                                                 \n   (NAME(AWS.M2.CARDDEMO.TRANSACT.DALY) -                                       \n    LIMIT(5) -                                                                  \n    SCRATCH -                                                                   \n   )                                                                            \n   IF LASTCC=12 THEN SET MAXCC=0                                                \n   DEFINE GENERATIONDATAGROUP -                                                 \n   (NAME(AWS.M2.CARDDEMO.TRANREPT) -                                            \n    LIMIT(5) -                                                                  \n    SCRATCH -                                                                   \n   )                                                                            \n   IF LASTCC=12 THEN SET MAXCC=0                                                \n   DEFINE GENERATIONDATAGROUP -                                                 \n   (NAME(AWS.M2.CARDDEMO.TCATBALF.BKUP) -                                       \n    LIMIT(5) -                                                                  \n    SCRATCH -                                                                   \n   )                                                                            \n   IF LASTCC=12 THEN SET MAXCC=0                                                \n   DEFINE GENERATIONDATAGROUP -                                                 \n   (NAME(AWS.M2.CARDDEMO.SYSTRAN) -                                             \n    LIMIT(5) -                                                                  \n    SCRATCH -                                                                   \n   )                                                                            \n   IF LASTCC=12 THEN SET MAXCC=0                                                \n   DEFINE GENERATIONDATAGROUP -                                                 \n   (NAME(AWS.M2.CARDDEMO.TRANSACT.COMBINED) -                                   \n    LIMIT(5) -                                                                  \n    SCRATCH -                                                                   \n   )                                                                            \n   IF LASTCC=12 THEN SET MAXCC=0                                                \n/*                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:05 CDT\n//*\n</code></pre>"},{"location":"jobs/DISCGRP.html","title":"DISCGRP","text":""},{"location":"jobs/DISCGRP.html#description","title":"Description","text":"<p>This JCL job creates and populates a VSAM KSDS file for storing disclosure group information in the CardDemo application. The job executes in three steps: first deleting any existing disclosure group VSAM file (STEP05), then defining a new VSAM KSDS file with a 16-byte key and 50-byte fixed-length records (STEP10), and finally copying data from a flat file to the newly created VSAM file (STEP15). The disclosure group file is likely used to store categorization or grouping information related to card disclosures within the CardDemo application's business logic.</p>"},{"location":"jobs/DISCGRP.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/DISCGRP.html#jcl-code","title":"JCL Code","text":"<pre><code>//DISCGRP JOB 'DEFINE DISCLOSURE GROUP FILE',CLASS=A,MSGCLASS=0,                \n//  NOTIFY=&amp;SYSUID                                                \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************            \n//* *******************************************************************         \n//* DELETE DISCLOSURE GROUP VSAM FILE IF ONE ALREADY EXISTS                     \n//* *******************************************************************         \n//STEP05 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DELETE AWS.M2.CARDDEMO.DISCGRP.VSAM.KSDS -                                   \n          CLUSTER                                                               \n   SET    MAXCC = 0                                                             \n/*                                                                              \n//*                                                                             \n//* *******************************************************************         \n//* DEFINE DISCLOSURE GROUP VSAM FILE                                           \n//* *******************************************************************         \n//STEP10 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DEFINE CLUSTER (NAME(AWS.M2.CARDDEMO.DISCGRP.VSAM.KSDS) -                    \n          CYLINDERS(1 5) -                                                      \n          VOLUMES(AWSHJ1 -                                                      \n          ) -                                                                   \n          KEYS(16 0) -                                                          \n          RECORDSIZE(50 50) -                                                   \n          SHAREOPTIONS(2 3) -                                                   \n          ERASE -                                                               \n          INDEXED -                                                             \n          ) -                                                                   \n          DATA (NAME(AWS.M2.CARDDEMO.DISCGRP.VSAM.KSDS.DATA) -                  \n          ) -                                                                   \n          INDEX (NAME(AWS.M2.CARDDEMO.DISCGRP.VSAM.KSDS.INDEX) -                \n          )                                                                     \n/*                                                                              \n//* *******************************************************************         \n//* COPY DATA FROM FLAT FILE TO VSAM FILE                                       \n//* *******************************************************************         \n//STEP15 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//DISCGRP DD DISP=SHR,                                                          \n//         DSN=AWS.M2.CARDDEMO.DISCGRP.PS                                       \n//DISCVSAM DD DISP=OLD,                                                         \n//         DSN=AWS.M2.CARDDEMO.DISCGRP.VSAM.KSDS                                \n//SYSIN    DD   *                                                               \n   REPRO INFILE(DISCGRP) OUTFILE(DISCVSAM)                                      \n/*                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:06 CDT\n//*\n</code></pre>"},{"location":"jobs/DUSRSECJ.html","title":"DUSRSECJ","text":""},{"location":"jobs/DUSRSECJ.html#description","title":"Description","text":"<p>This JCL job creates and populates a user security file for the CardDemo application. It follows a three-step process: first removing any existing physical sequential file, then creating a new one with predefined user credentials (including admin and regular user accounts with their respective passwords), and finally converting this data into a VSAM KSDS file for application use. The job defines both administrator accounts (ADMIN001-ADMIN005) and regular user accounts (USER0001-USER0005) with their respective names and password types. The VSAM file is configured with an 8-byte key at position 0 and fixed-length 80-byte records, providing the security data structure needed by the CardDemo application for user authentication and authorization.</p>"},{"location":"jobs/DUSRSECJ.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>IDCAMS</code></li> <li><code>IEFBR14</code></li> <li><code>IEBGENER</code></li> </ul>"},{"location":"jobs/DUSRSECJ.html#jcl-code","title":"JCL Code","text":"<pre><code>//DUSRSECJ JOB 'DEF USRSEC FILE',REGION=8M,CLASS=A,\n//      MSGCLASS=H,NOTIFY=&amp;SYSUID\n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************\n//*-------------------------------------------------------------------*\n//* PRE DELETE STEP\n//*-------------------------------------------------------------------*\n//*\n//PREDEL  EXEC PGM=IEFBR14\n//*\n//DD01     DD DSN=AWS.M2.CARDDEMO.USRSEC.PS,\n//            DISP=(MOD,DELETE,DELETE)\n//*\n//*-------------------------------------------------------------------*\n//* CREATE USER SECURITY FILE (PS) FROM IN-STREAM DATA\n//*-------------------------------------------------------------------*\n//*\n//STEP01  EXEC PGM=IEBGENER\n//*\n//SYSUT1   DD *\nADMIN001MARGARET            GOLD                PASSWORDA\nADMIN002RUSSELL             RUSSELL             PASSWORDA\nADMIN003RAYMOND             WHITMORE            PASSWORDA\nADMIN004EMMANUEL            CASGRAIN            PASSWORDA\nADMIN005GRANVILLE           LACHAPELLE          PASSWORDA\nUSER0001LAWRENCE            THOMAS              PASSWORDU\nUSER0002AJITH               KUMAR               PASSWORDU\nUSER0003LAURITZ             ALME                PASSWORDU\nUSER0004AVERARDO            MAZZI               PASSWORDU\nUSER0005LEE                 TING                PASSWORDU\n/*\n//SYSUT2   DD DSN=AWS.M2.CARDDEMO.USRSEC.PS,\n//            DISP=(NEW,CATLG,DELETE),\n//            DCB=(LRECL=80,RECFM=FB,DSORG=PS,BLKSIZE=0),\n//            UNIT=SYSDA,SPACE=(TRK,(10,5),RLSE)\n//*\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DUMMY\n//*\n//*-------------------------------------------------------------------*\n//* DEFINE VSAM FILE FOR USER SECURITY\n//*-------------------------------------------------------------------*\n//*\n//STEP02  EXEC PGM=IDCAMS\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n DELETE                  AWS.M2.CARDDEMO.USRSEC.VSAM.KSDS\n SET       MAXCC = 0\n DEFINE    CLUSTER (NAME(AWS.M2.CARDDEMO.USRSEC.VSAM.KSDS)    -\n                    KEYS(8,0)                                 -\n                    RECORDSIZE(80,80)                         -\n                    REUSE                                     -\n                    INDEXED                                   -\n                    TRACKS(45,15)                             -\n                    FREESPACE(10,15)                          -\n                    CISZ(8192))                               -\n           DATA    (NAME(AWS.M2.CARDDEMO.USRSEC.VSAM.KSDS.DAT)) -\n           INDEX   (NAME(AWS.M2.CARDDEMO.USRSEC.VSAM.KSDS.IDX))\n/*\n//*\n//*-------------------------------------------------------------------*\n//* COPY USER SECURITY DATA FROM PS TO VSAM FILE\n//*-------------------------------------------------------------------*\n//*\n//STEP03  EXEC PGM=IDCAMS\n//*\n//IN       DD  DSN=AWS.M2.CARDDEMO.USRSEC.PS,DISP=SHR\n//OUT      DD  DSN=AWS.M2.CARDDEMO.USRSEC.VSAM.KSDS,DISP=SHR\n//SYSOUT   DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n  REPRO INFILE(IN) OUTFILE(OUT)\n/*\n//\n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:06 CDT\n//*\n</code></pre>"},{"location":"jobs/INTCALC.html","title":"INTCALC","text":""},{"location":"jobs/INTCALC.html#description","title":"Description","text":"<p>This job calculates interest and fees for card transactions. It executes program CBACT04C with a date parameter (2022071800) and processes transaction balance data from VSAM files. The job reads from multiple input files including transaction balances (TCATBALF), card cross-references (XREFFILE and XREFFIL1), account data (ACCTFILE), and discount groups (DISCGRP). It generates transaction output that is stored in a new generation of the SYSTRAN dataset. This job is part of the CardDemo application which demonstrates AWS mainframe migration capabilities.</p>"},{"location":"jobs/INTCALC.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>CBACT04C</code></li> </ul>"},{"location":"jobs/INTCALC.html#jcl-code","title":"JCL Code","text":"<pre><code>//INTCALC JOB 'INTEREST CALCULATOR',CLASS=A,MSGCLASS=0,\n//   NOTIFY=&amp;SYSUID           \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************\n//* *******************************************************************         \n//* Process transaction balance file and compute interest and fees.\n//* *******************************************************************         \n//STEP15 EXEC PGM=CBACT04C,PARM='2022071800'                                    \n//STEPLIB  DD DISP=SHR,                                                         \n//            DSN=AWS.M2.CARDDEMO.LOADLIB                                       \n//SYSPRINT DD SYSOUT=*                                                          \n//SYSOUT   DD SYSOUT=*       \n//TCATBALF DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.TCATBALF.VSAM.KSDS      \n//XREFFILE DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.CARDXREF.VSAM.KSDS    \n//XREFFIL1 DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.CARDXREF.VSAM.AIX.PATH    \n//ACCTFILE DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.ACCTDATA.VSAM.KSDS                               \n//DISCGRP  DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.DISCGRP.VSAM.KSDS                                \n//TRANSACT DD DISP=(NEW,CATLG,DELETE),                                          \n//         UNIT=SYSDA,                                                          \n//         DCB=(RECFM=F,LRECL=350,BLKSIZE=0),                                   \n//         SPACE=(CYL,(1,1),RLSE),                                              \n//         DSN=AWS.M2.CARDDEMO.SYSTRAN(+1)           \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:06 CDT\n//*\n</code></pre>"},{"location":"jobs/OPENFIL.html","title":"OPENFIL","text":""},{"location":"jobs/OPENFIL.html#description","title":"Description","text":"<p>This JCL job opens critical files required by the CardDemo application in the CICS region. It executes the SDSF program to issue CEMT commands that set various files to OPEN status in the CICSAWSA region. The job opens five essential files: TRANSACT (transaction data), CCXREF (cross-reference data), ACCTDAT (account data), CXACAIX (account index), and USRSEC (user security information). This is a maintenance job that ensures the necessary files are available for the CardDemo application to function properly within the CICS environment.</p>"},{"location":"jobs/OPENFIL.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>SDSF</code></li> </ul>"},{"location":"jobs/OPENFIL.html#jcl-code","title":"JCL Code","text":"<pre><code>//OEPNFIL JOB 'Open files in CICS',CLASS=A,MSGCLASS=0,\n// NOTIFY=&amp;SYSUID\n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************\n//*********************************************************************         \n//* Open files in CICS region                                                  \n//*********************************************************************         \n//OPCIFIL EXEC PGM=SDSF                                                         \n//ISFOUT DD SYSOUT=*                                                            \n//CMDOUT DD SYSOUT=*                                                            \n//ISFIN  DD *                                                                   \n /F CICSAWSA,'CEMT SET FIL(TRANSACT ) OPE'                                      \n /F CICSAWSA,'CEMT SET FIL(CCXREF ) OPE'                                        \n /F CICSAWSA,'CEMT SET FIL(ACCTDAT ) OPE'                                       \n /F CICSAWSA,'CEMT SET FIL(CXACAIX ) OPE'                                       \n /F CICSAWSA,'CEMT SET FIL(USRSEC ) OPE'                                       \n/*      \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:06 CDT\n//*\n</code></pre>"},{"location":"jobs/POSTTRAN.html","title":"POSTTRAN","text":""},{"location":"jobs/POSTTRAN.html#description","title":"Description","text":"<p>This JCL job processes daily credit card transactions for the CardDemo application. It executes program CBTRN02C which reads daily transaction data, updates the transaction master VSAM file, and creates transaction category balances. The job accesses multiple key files including transaction records, card cross-reference data, account information, and transaction category balances. It also generates a rejection file for any transactions that cannot be processed. This job represents a critical daily batch process within the credit card processing workflow of the CardDemo application.</p>"},{"location":"jobs/POSTTRAN.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>CBTRN02C</code></li> </ul>"},{"location":"jobs/POSTTRAN.html#jcl-code","title":"JCL Code","text":"<pre><code>//POSTTRAN JOB 'POSTTRAN',CLASS=A,MSGCLASS=0,                                   \n// NOTIFY=&amp;SYSUID           \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************            \n//* *******************************************************************         \n//* Process and load daily transaction file and create transaction              \n//* category balance and update transaction master vsam                         \n//* *******************************************************************         \n//STEP15 EXEC PGM=CBTRN02C                                                      \n//STEPLIB  DD DISP=SHR,                                                         \n//            DSN=AWS.M2.CARDDEMO.LOADLIB                                       \n//SYSPRINT DD SYSOUT=*                                                          \n//SYSOUT   DD SYSOUT=*                                                          \n//TRANFILE DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS                               \n//DALYTRAN DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.DALYTRAN.PS                                      \n//XREFFILE DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.CARDXREF.VSAM.KSDS                               \n//DALYREJS DD DISP=(NEW,CATLG,DELETE),                                          \n//         UNIT=SYSDA,                                                          \n//         DCB=(RECFM=F,LRECL=430,BLKSIZE=0),                                   \n//         SPACE=(CYL,(1,1),RLSE),                                              \n//         DSN=AWS.M2.CARDDEMO.DALYREJS(+1)                                     \n//ACCTFILE DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.ACCTDATA.VSAM.KSDS                               \n//TCATBALF DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.TCATBALF.VSAM.KSDS                               \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:06 CDT\n//*\n</code></pre>"},{"location":"jobs/PRTCATBL.html","title":"PRTCATBL","text":""},{"location":"jobs/PRTCATBL.html#description","title":"Description","text":"<p>This JCL job extracts and formats transaction category balance data from the CardDemo application. It first deletes any existing report file, then executes a processing procedure to unload data from a VSAM KSDS file to a backup dataset. The job then uses SORT to filter and organize the transaction category balances by account ID, transaction type code, and category code. The output is formatted with appropriate decimal editing for balance amounts and written to a report file. This job is part of the CardDemo application's reporting functionality, providing visibility into transaction category balances across accounts.</p>"},{"location":"jobs/PRTCATBL.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>IEFBR14</code></li> <li><code>SORT</code></li> </ul>"},{"location":"jobs/PRTCATBL.html#jcl-code","title":"JCL Code","text":"<pre><code>//PRTCATBL JOB 'Print Trasaction Category Balance File',                        \n// CLASS=A,MSGCLASS=0,NOTIFY=&amp;SYSUID           \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************            \n//JOBLIB JCLLIB ORDER=('AWS.M2.CARDDEMO.PROC')                                  \n//*\n//DELDEF   EXEC PGM=IEFBR14\n//THEFILE  DD DISP=(MOD,DELETE),\n//         UNIT=SYSDA,\n//         SPACE=(TRK,(1,1),RLSE),\n//         DSN=AWS.M2.CARDDEMO.TCATBALF.REPT\n//* ********************************************************`***********        \n//* Unload the processed transaction category balance file                      \n//* *******************************************************************         \n//STEP05R EXEC PROC=REPROC,                                                     \n// CNTLLIB=AWS.M2.CARDDEMO.CNTL                                                 \n//*                                                                             \n//PRC001.FILEIN  DD DISP=SHR,                                                   \n//        DSN=AWS.M2.CARDDEMO.TCATBALF.VSAM.KSDS                                \n//*                                                                             \n//PRC001.FILEOUT DD DISP=(NEW,CATLG,DELETE),                                    \n//        UNIT=SYSDA,                                                           \n//        DCB=(LRECL=50,RECFM=FB,BLKSIZE=0),                                   \n//        SPACE=(CYL,(1,1),RLSE),                                               \n//        DSN=AWS.M2.CARDDEMO.TCATBALF.BKUP(+1)                                 \n//* *******************************************************************         \n//* Filter the TCATBALFions for a the parm date and sort by card num            \n//* *******************************************************************         \n//STEP10R  EXEC PGM=SORT                                                        \n//SORTIN   DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.TCATBALF.BKUP(+1)                                \n//SYMNAMES DD *                                                                 \nTRANCAT-ACCT-ID,1,11,ZD                                                         \nTRANCAT-TYPE-CD,12,2,CH                                                         \nTRANCAT-CD,14,4,ZD\nTRAN-CAT-BAL,18,11,ZD\n//SYSIN    DD *                                                                 \n SORT FIELDS=(TRANCAT-ACCT-ID,A,TRANCAT-TYPE-CD,A,TRANCAT-CD,A)                 \n OUTREC FIELDS=(TRANCAT-ACCT-ID,X,\n     TRANCAT-TYPE-CD,X,\n     TRANCAT-CD,X,\n     TRAN-CAT-BAL,EDIT=(TTTTTTTTT.TT),9X)\n/*                                                                              \n//SYSOUT   DD SYSOUT=*                                                          \n//SORTOUT  DD DISP=(NEW,CATLG,DELETE),                                          \n//         UNIT=SYSDA,                                                          \n//         DCB=(LRECL=40,RECFM=FB,BLKSIZE=0),                                   \n//         SPACE=(CYL,(1,1),RLSE),                                              \n//         DSN=AWS.M2.CARDDEMO.TCATBALF.REPT                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:06 CDT\n//*\n</code></pre>"},{"location":"jobs/READACCT.html","title":"READACCT","text":""},{"location":"jobs/READACCT.html#description","title":"Description","text":"<p>This JCL job executes program CBACT01C which reads data from the Account Master VSAM file in the CardDemo application. The job consists of a single step (STEP05) that accesses the VSAM KSDS dataset containing account information. It's designed to support AWS mainframe migration testing by demonstrating data access patterns for account information within the CardDemo application. Output from the program execution is directed to standard system output destinations.</p>"},{"location":"jobs/READACCT.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>CBACT01C</code></li> </ul>"},{"location":"jobs/READACCT.html#jcl-code","title":"JCL Code","text":"<pre><code>//READACCT JOB 'Read account Data',CLASS=A,MSGCLASS=0,\n// NOTIFY=&amp;SYSUID\n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************\n//* *******************************************************************         \n//* RUN THE PROGRAM THAT READS THE ACCOUNT MASTER VSAM FILE                     \n//* *******************************************************************         \n//STEP05 EXEC PGM=CBACT01C                                                      \n//STEPLIB  DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.LOADLIB                                          \n//ACCTFILE DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.ACCTDATA.VSAM.KSDS                               \n//SYSOUT   DD SYSOUT=*                                                          \n//SYSPRINT DD SYSOUT=*                                                          \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:07 CDT\n//*\n</code></pre>"},{"location":"jobs/READCARD.html","title":"READCARD","text":""},{"location":"jobs/READCARD.html#description","title":"Description","text":"<p>This JCL job executes program CBACT02C which reads and processes data from the Card Master VSAM file. The job is part of the CardDemo application used for AWS mainframe migration demonstrations. It accesses the VSAM KSDS dataset containing card data and directs output to standard system output destinations. The job serves as a demonstration of basic file reading operations within the CardDemo application, likely used to showcase data access patterns during migration assessment or testing scenarios.</p>"},{"location":"jobs/READCARD.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>CBACT02C</code></li> </ul>"},{"location":"jobs/READCARD.html#jcl-code","title":"JCL Code","text":"<pre><code>//READCARD JOB 'READCARD',CLASS=A,MSGCLASS=0,                                   \n// NOTIFY=&amp;SYSUID                \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************            \n//* *******************************************************************         \n//* RUN THE PROGRAM THAT READS THE CARD MASTER VSAM FILE                        \n//* *******************************************************************         \n//STEP05 EXEC PGM=CBACT02C                                                      \n//STEPLIB  DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.LOADLIB                                          \n//CARDFILE DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.CARDDATA.VSAM.KSDS                               \n//SYSOUT   DD SYSOUT=*                                                          \n//SYSPRINT DD SYSOUT=*                                                          \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:07 CDT\n//*\n</code></pre>"},{"location":"jobs/READCUST.html","title":"READCUST","text":""},{"location":"jobs/READCUST.html#description","title":"Description","text":"<p>This JCL job executes program CBCUS01C which reads data from the customer master VSAM file. The job is part of the CardDemo application used for AWS mainframe migration demonstrations. It allocates the necessary datasets including the customer data KSDS file and standard output destinations. The job serves as a utility to access and potentially report on customer information stored in the VSAM file, supporting the application's data access capabilities.</p>"},{"location":"jobs/READCUST.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>CBCUS01C</code></li> </ul>"},{"location":"jobs/READCUST.html#jcl-code","title":"JCL Code","text":"<pre><code>//READCUST JOB 'Read Customer Data file',CLASS=A,MSGCLASS=0,\n// NOTIFY=&amp;SYUID\n//* *******************************************************************\n//* RUN THE PROGRAM THAT READS THE CUSTOMER MASTER VSAM FILE\n//* *******************************************************************\n//STEP05 EXEC PGM=CBCUS01C\n//STEPLIB  DD DISP=SHR,\n//         DSN=AWS.M2.CARDDEMO.LOADLIB\n//CUSTFILE DD DISP=SHR,\n//         DSN=AWS.M2.CARDDEMO.CUSTDATA.VSAM.KSDS\n//SYSOUT   DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:07 CDT\n//*\n</code></pre>"},{"location":"jobs/READXREF.html","title":"READXREF","text":""},{"location":"jobs/READXREF.html#description","title":"Description","text":"<p>This JCL job executes program CBACT03C to read and process the CardDemo cross-reference VSAM file. The job accesses the KSDS VSAM file containing card cross-reference data (AWS.M2.CARDDEMO.CARDXREF.VSAM.KSDS) and directs output to SYSOUT. As part of the CardDemo AWS application, this job likely supports functionality related to card account relationships or mappings between different identifiers in the system.</p>"},{"location":"jobs/READXREF.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>CBACT03C</code></li> </ul>"},{"location":"jobs/READXREF.html#jcl-code","title":"JCL Code","text":"<pre><code>//READXREF JOB 'Read Cross Ref file',CLASS=A,MSGCLASS=0,\n// NOTIFY=&amp;SYSUID\n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************\n//* *******************************************************************         \n//* RUN THE PROGRAM THAT READS THE XREF MASTER VSAM FILE                        \n//* *******************************************************************         \n//STEP05 EXEC PGM=CBACT03C                                                      \n//STEPLIB  DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.LOADLIB                                          \n//XREFFILE DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.CARDXREF.VSAM.KSDS                               \n//SYSOUT   DD SYSOUT=*                                                          \n//SYSPRINT DD SYSOUT=*                                                          \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:07 CDT\n//*\n</code></pre>"},{"location":"jobs/REPTFILE.html","title":"REPTFILE","text":""},{"location":"jobs/REPTFILE.html#description","title":"Description","text":"<p>This JCL job defines a Generation Data Group (GDG) for storing transaction reports in the CardDemo application. The job creates a GDG named AWS.M2.CARDDEMO.TRANREPT with a limit of 10 generations, meaning it will maintain up to 10 historical versions of the report file. The GDG structure allows the application to manage multiple iterations of transaction reports while automatically handling version control and retention policies.</p>"},{"location":"jobs/REPTFILE.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/REPTFILE.html#jcl-code","title":"JCL Code","text":"<pre><code>//REPTFILE JOB 'DEF GDG FOR REPORT FILE',                                       \n// CLASS=A,MSGCLASS=0,NOTIFY=&amp;SYSUID      \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************            \n//* *******************************************************************         \n//* DELETE TRANSACATION MASTER VSAM FILE IF ONE ALREADY EXISTS                  \n//* *******************************************************************         \n//STEP05 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DEFINE GENERATIONDATAGROUP -                                                 \n   (NAME(AWS.M2.CARDDEMO.TRANREPT) -                                            \n    LIMIT(10) -                                                                 \n   )                                                                            \n/*                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:07 CDT\n//*\n</code></pre>"},{"location":"jobs/TCATBALF.html","title":"TCATBALF","text":""},{"location":"jobs/TCATBALF.html#description","title":"Description","text":"<p>This JCL job creates and populates the Transaction Category Balance VSAM file for the CardDemo application. The job executes in three steps: first deleting any existing VSAM file with the same name (STEP05), then defining a new VSAM Key Sequenced Data Set with 17-byte keys and 50-byte fixed-length records (STEP10), and finally copying data from a flat file source into the newly created VSAM file (STEP15). The VSAM file is configured with primary allocation of 1 cylinder and secondary allocation of 5 cylinders on volume AWSHJ1, with appropriate sharing options for concurrent access.</p>"},{"location":"jobs/TCATBALF.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/TCATBALF.html#jcl-code","title":"JCL Code","text":"<pre><code>//TCATBALF JOB 'DEFINE TRANCAT BAL',CLASS=A,MSGCLASS=0,                         \n// NOTIFY=&amp;SYSUID          \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************            \n//* *******************************************************************         \n//* DELETE TRANSACTION CATEGORY BALANCE VSAM FILE IF ONE ALREADY EXISTS         \n//* *******************************************************************         \n//STEP05 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DELETE AWS.M2.CARDDEMO.TCATBALF.VSAM.KSDS -                                  \n          CLUSTER                                                               \n   SET    MAXCC = 0                                                             \n/*                                                                              \n//*                                                                             \n//* *******************************************************************         \n//* DEFINE TRANSACTION CATEGORY BALANCE VSAM FILE                               \n//* *******************************************************************         \n//STEP10 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DEFINE CLUSTER (NAME(AWS.M2.CARDDEMO.TCATBALF.VSAM.KSDS) -                   \n          CYLINDERS(1 5) -                                                      \n          VOLUMES(AWSHJ1 -                                                      \n          ) -                                                                   \n          KEYS(17 0) -                                                          \n          RECORDSIZE(50 50) -                                                   \n          SHAREOPTIONS(2 3) -                                                   \n          ERASE -                                                               \n          INDEXED -                                                             \n          ) -                                                                   \n          DATA (NAME(AWS.M2.CARDDEMO.TCATBALF.VSAM.KSDS.DATA) -                 \n          ) -                                                                   \n          INDEX (NAME(AWS.M2.CARDDEMO.TCATBALF.VSAM.KSDS.INDEX) -               \n          )                                                                     \n/*                                                                              \n//* *******************************************************************         \n//* COPY DATA FROM FLAT FILE TO VSAM FILE                                       \n//* *******************************************************************         \n//STEP15 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//TCATBAL DD DISP=SHR,                                                          \n//         DSN=AWS.M2.CARDDEMO.TCATBALF.PS                                      \n//TCATBALV DD DISP=OLD,                                                         \n//         DSN=AWS.M2.CARDDEMO.TCATBALF.VSAM.KSDS                               \n//SYSIN    DD   *                                                               \n   REPRO INFILE(TCATBAL) OUTFILE(TCATBALV)                                      \n/*                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:07 CDT\n//*\n</code></pre>"},{"location":"jobs/TRANBKP.html","title":"TRANBKP","text":""},{"location":"jobs/TRANBKP.html#description","title":"Description","text":"<p>This JCL job performs a backup and reset operation for the transaction master file in the CardDemo application. It first backs up the current transaction data from the VSAM KSDS file to a sequential backup dataset with a generation number, then deletes and redefines the transaction master VSAM file with its associated alternate index. The job consists of three main steps: STEP05R uses a custom REPROC procedure to copy the transaction data to a backup file, STEP05 deletes the existing VSAM cluster and alternate index, and STEP10 redefines the empty transaction master VSAM file with specific allocation parameters. This job is likely run periodically to archive processed transactions and reset the transaction master file for new processing cycles.</p>"},{"location":"jobs/TRANBKP.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/TRANBKP.html#jcl-code","title":"JCL Code","text":"<pre><code>//TRANBKP JOB 'REPRO and Delete Transaction Master',CLASS=A,MSGCLASS=0,         \n//  NOTIFY=&amp;SYSUID                    \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************\n//JOBLIB JCLLIB ORDER=('AWS.M2.CARDDEMO.PROC')                                  \n//* *******************************************************************        \n//* Repro the processed transaction file                                       \n//* *******************************************************************         \n//STEP05R EXEC PROC=REPROC,                                                     \n// CNTLLIB=AWS.M2.CARDDEMO.CNTL                                                 \n//*                                                                             \n//PRC001.FILEIN  DD DISP=SHR,                                                   \n//        DSN=AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS                                \n//*                                                                             \n//PRC001.FILEOUT DD DISP=(NEW,CATLG,DELETE),                                    \n//        UNIT=SYSDA,                                                           \n//        DCB=(LRECL=350,RECFM=FB,BLKSIZE=0),                                   \n//        SPACE=(CYL,(1,1),RLSE),                                               \n//        DSN=AWS.M2.CARDDEMO.TRANSACT.BKUP(+1)                                 \n//* *******************************************************************         \n//* DELETE TRANSACATION MASTER VSAM FILE IF ONE ALREADY EXISTS                  \n//* *******************************************************************         \n//STEP05 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DELETE AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS -                                  \n          CLUSTER                                                               \n   IF MAXCC LE 08 THEN SET MAXCC = 0                                            \n   DELETE AWS.M2.CARDDEMO.TRANSACT.VSAM.AIX -                                   \n          ALTERNATEINDEX                                                        \n   IF MAXCC LE 08 THEN SET MAXCC = 0                                            \n/*                                                                              \n//*                                                                             \n//* *******************************************************************         \n//* DEFINE TRANSACATION MASTER VSAM FILE                                        \n//* *******************************************************************         \n//STEP10 EXEC PGM=IDCAMS,COND=(4,LT)                                            \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DEFINE CLUSTER (NAME(AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS) -                   \n          CYLINDERS(1 5) -                                                      \n          VOLUMES(AWSHJ1 -                                                      \n          ) -                                                                   \n          KEYS(16 0) -                                                          \n          RECORDSIZE(350 350) -                                                 \n          SHAREOPTIONS(2 3) -                                 \n          ERASE -                                                               \n          INDEXED -                                                             \n          ) -                                                                   \n          DATA (NAME(AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS.DATA) -                 \n          ) -                                                                   \n          INDEX (NAME(AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS.INDEX) -               \n          )                                                                     \n/*                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:08 CDT\n//*\n</code></pre>"},{"location":"jobs/TRANCATG.html","title":"TRANCATG","text":""},{"location":"jobs/TRANCATG.html#description","title":"Description","text":"<p>This JCL job creates and populates a VSAM KSDS file for transaction category types in the CardDemo application. The job executes in three steps: first deleting any existing transaction category VSAM file (STEP05), then defining a new VSAM KSDS file with a 6-byte key and 60-byte fixed-length records (STEP10), and finally copying data from a flat file into the newly created VSAM file (STEP15). The VSAM file is named AWS.M2.CARDDEMO.TRANCATG.VSAM.KSDS and is allocated with primary space of 1 cylinder and secondary space of 5 cylinders on volume AWSHJ1.</p>"},{"location":"jobs/TRANCATG.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/TRANCATG.html#jcl-code","title":"JCL Code","text":"<pre><code>//TRANCATG JOB 'DEFINE TRAN CATEGORY',                                          \n// CLASS=A,MSGCLASS=0,NOTIFY=&amp;SYSUID          \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************            \n//* *******************************************************************         \n//* DELETE TRANSACTION CATEGORY TYPE VSAM FILE IF ONE ALREADY EXISTS            \n//* *******************************************************************         \n//STEP05 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DELETE AWS.M2.CARDDEMO.TRANCATG.VSAM.KSDS -                                  \n          CLUSTER                                                               \n   SET    MAXCC = 0                                                             \n/*                                                                              \n//*                                                                             \n//* *******************************************************************         \n//* DEFINE TRANSACTION CATEGORY TYPE VSAM FILE                                  \n//* *******************************************************************         \n//STEP10 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DEFINE CLUSTER (NAME(AWS.M2.CARDDEMO.TRANCATG.VSAM.KSDS) -                   \n          CYLINDERS(1 5) -                                                      \n          VOLUMES(AWSHJ1 -                                                      \n          ) -                                                                   \n          KEYS(6 0) -                                                           \n          RECORDSIZE(60 60) -                                                   \n          SHAREOPTIONS(2 3) -                                                   \n          ERASE -                                                               \n          INDEXED -                                                             \n          ) -                                                                   \n          DATA (NAME(AWS.M2.CARDDEMO.TRANCATG.VSAM.KSDS.DATA) -                 \n          ) -                                                                   \n          INDEX (NAME(AWS.M2.CARDDEMO.TRANCATG.VSAM.KSDS.INDEX) -               \n          )                                                                     \n/*                                                                              \n//* *******************************************************************         \n//* COPY DATA FROM FLAT FILE TO VSAM FILE                                       \n//* *******************************************************************         \n//STEP15 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//TRANCATG DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.TRANCATG.PS                                      \n//TCATVSAM DD DISP=OLD,                                                         \n//         DSN=AWS.M2.CARDDEMO.TRANCATG.VSAM.KSDS                               \n//SYSIN    DD   *                                                               \n   REPRO INFILE(TRANCATG) OUTFILE(TCATVSAM)                                     \n/*                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:08 CDT\n//*\n</code></pre>"},{"location":"jobs/TRANFILE.html","title":"TRANFILE","text":""},{"location":"jobs/TRANFILE.html#description","title":"Description","text":"<p>This JCL job creates and initializes the Transaction Master VSAM file for the CardDemo application. The job performs several sequential operations: first closing any existing file connections in the CICS region, then deleting any existing Transaction Master files, defining a new VSAM key-sequenced dataset, loading initial transaction data from a flat file, creating an alternate index based on processed timestamp, defining a path relationship, and building the alternate index. The job concludes by reopening the files in the CICS region for application use. The alternate index provides a secondary access method to transaction records based on their timestamp, supporting time-based queries while maintaining the primary key access method.</p>"},{"location":"jobs/TRANFILE.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>SDSF</code></li> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/TRANFILE.html#jcl-code","title":"JCL Code","text":"<pre><code>//TRANFILE JOB 'DEFINE TRANSACTION MASTER',CLASS=A,MSGCLASS=0,                  \n//  NOTIFY=&amp;SYSUID     \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************            \n//*********************************************************************         \n//* Close files in CICS region                                                  \n//*********************************************************************         \n//CLCIFIL EXEC PGM=SDSF                                                         \n//ISFOUT DD SYSOUT=*                                                            \n//CMDOUT DD SYSOUT=*                                                            \n//ISFIN  DD *                                                                   \n /F CICSAWSA,'CEMT SET FIL(TRANSACT ) CLO'                                      \n /F CICSAWSA,'CEMT SET FIL(CXACAIX ) CLO'                                       \n/*                                                                              \n//* *******************************************************************         \n//* DELETE TRANSACATION MASTER VSAM FILE IF ONE ALREADY EXISTS                  \n//* *******************************************************************         \n//STEP05 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DELETE AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS -                                  \n          CLUSTER                                                               \n   IF MAXCC LE 08 THEN SET MAXCC = 0                                            \n   DELETE AWS.M2.CARDDEMO.TRANSACT.VSAM.AIX -                                   \n          ALTERNATEINDEX                                                        \n   IF MAXCC LE 08 THEN SET MAXCC = 0                                            \n/*                                                                              \n//*                                                                             \n//* *******************************************************************         \n//* DEFINE TRANSACATION MASTER VSAM FILE                                        \n//* *******************************************************************         \n//STEP10 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DEFINE CLUSTER (NAME(AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS) -                   \n          CYLINDERS(1 5) -                                                      \n          VOLUMES(AWSHJ1 -                                                      \n          ) -                                                                   \n          KEYS(16 0) -                                                          \n          RECORDSIZE(350 350) -                                                 \n          SHAREOPTIONS(2 3) -                                                   \n          ERASE -                                                               \n          INDEXED -                                                             \n          ) -                                                                   \n          DATA (NAME(AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS.DATA) -                 \n          ) -                                                                   \n          INDEX (NAME(AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS.INDEX) -               \n          )                                                                     \n/*                                                                              \n//* *******************************************************************         \n//* COPY DATA FROM FLAT FILE TO VSAM FILE                                       \n//* *******************************************************************         \n//STEP15 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//TRANSACT DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.DALYTRAN.PS.INIT                                 \n//TRANVSAM DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS                               \n//SYSIN    DD   *                                                               \n   REPRO INFILE(TRANSACT) OUTFILE(TRANVSAM)                                     \n/*                                                                              \n//*-------------------------------------------------------------------*         \n//* CREATE ALTERNATE INDEX ON PROCESSED TIMESTAMP                               \n//*-------------------------------------------------------------------*         \n//STEP20  EXEC PGM=IDCAMS                                                       \n//SYSPRINT DD  SYSOUT=*                                                         \n//SYSIN    DD  *                                                                \n   DEFINE ALTERNATEINDEX (NAME(AWS.M2.CARDDEMO.TRANSACT.VSAM.AIX)-              \n   RELATE(AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS)                    -              \n   KEYS(26 304)                                                  -              \n   NONUNIQUEKEY                                                  -              \n   UPGRADE                                                       -              \n   RECORDSIZE(350,350)                                           -              \n   VOLUMES(AWSHJ1)                                               -              \n   CYLINDERS(5,1))                                               -              \n   DATA (NAME(AWS.M2.CARDDEMO.TRANSACT.VSAM.AIX.DATA))           -              \n   INDEX (NAME(AWS.M2.CARDDEMO.TRANSACT.VSAM.AIX.INDEX))                        \n/*                                                                              \n//*-------------------------------------------------------------------*         \n//* DEFINE PATH IS USED TO RELATE THE ALTERNATE INDEX TO BASE CLUSTER           \n//*-------------------------------------------------------------------*         \n//STEP25  EXEC PGM=IDCAMS                                                       \n//SYSPRINT DD  SYSOUT=*                                                         \n//SYSIN    DD  *                                                                \n  DEFINE PATH                                           -                       \n   (NAME(AWS.M2.CARDDEMO.TRANSACT.VSAM.AIX.PATH)        -                       \n    PATHENTRY(AWS.M2.CARDDEMO.TRANSACT.VSAM.AIX))                               \n/*                                                                              \n//*------------------------------------------------------------------           \n//* BUILD ALTERNATE INDEX CLUSTER                                               \n//*-------------------------------------------------------------------*         \n//STEP30  EXEC PGM=IDCAMS                                                       \n//SYSPRINT DD  SYSOUT=*                                                         \n//SYSIN    DD  *                                                                \n   BLDINDEX                                                      -              \n   INDATASET(AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS)                 -              \n   OUTDATASET(AWS.M2.CARDDEMO.TRANSACT.VSAM.AIX)                                \n/*                                                                              \n//*********************************************************************         \n//* Opem files in CICS region                                                   \n//*********************************************************************         \n//OPCIFIL EXEC PGM=SDSF                                                         \n//ISFOUT DD SYSOUT=*                                                            \n//CMDOUT DD SYSOUT=*                                                            \n//ISFIN  DD *                                                                   \n /F CICSAWSA,'CEMT SET FIL(TRANSACT ) OPE'                                      \n /F CICSAWSA,'CEMT SET FIL(CXACAIX ) OPE'                                       \n/*                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:08 CDT\n//*\n</code></pre>"},{"location":"jobs/TRANIDX.html","title":"TRANIDX","text":""},{"location":"jobs/TRANIDX.html#description","title":"Description","text":"<p>This JCL job creates and builds an Alternate Index (AIX) for the CardDemo transaction master file. The job consists of three steps that define and implement a secondary access path to the transaction data based on a timestamp field. The AIX allows the application to efficiently retrieve transaction records in chronological order without requiring the base VSAM file to be physically sorted by timestamp. The job defines the AIX structure with non-unique keys, establishes a path relationship to the base cluster, and then builds the index using the existing transaction data. This secondary access method enhances the application's ability to process transactions based on their timestamp while maintaining the primary organization of the data.</p>"},{"location":"jobs/TRANIDX.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/TRANIDX.html#jcl-code","title":"JCL Code","text":"<pre><code>//TRANIDX JOB 'Define AIX on Transaction Master',CLASS=A,MSGCLASS=0,         \n//  NOTIFY=&amp;SYSUID       \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************      \n//*-------------------------------------------------------------------*         \n//* CREATE ALTERNATE INDEX ON PROCESSED TIMESTAMP                               \n//*-------------------------------------------------------------------*         \n//STEP20  EXEC PGM=IDCAMS                                                       \n//SYSPRINT DD  SYSOUT=*                                                         \n//SYSIN    DD  *                                                                \n   DEFINE ALTERNATEINDEX (NAME(AWS.M2.CARDDEMO.TRANSACT.VSAM.AIX)-              \n   RELATE(AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS)                    -              \n   KEYS(26 304)                                                  -             \n   NONUNIQUEKEY                                                  -              \n   UPGRADE                                                       -              \n   RECORDSIZE(350,350)                                           -              \n   VOLUMES(AWSHJ1)                                               -              \n   CYLINDERS(5,1))                                               -              \n   DATA (NAME(AWS.M2.CARDDEMO.TRANSACT.VSAM.AIX.DATA))           -              \n   INDEX (NAME(AWS.M2.CARDDEMO.TRANSACT.VSAM.AIX.INDEX))                        \n/*                                                                              \n//*-------------------------------------------------------------------*         \n//* DEFINE PATH IS USED TO RELATE THE ALTERNATE INDEX TO BASE CLUSTER           \n//*-------------------------------------------------------------------*         \n//STEP25  EXEC PGM=IDCAMS                                                       \n//SYSPRINT DD  SYSOUT=*                                                         \n//SYSIN    DD  *                                                                \n  DEFINE PATH                                           -                       \n   (NAME(AWS.M2.CARDDEMO.TRANSACT.VSAM.AIX.PATH)        -                       \n    PATHENTRY(AWS.M2.CARDDEMO.TRANSACT.VSAM.AIX))                               \n/*                                                                              \n//*------------------------------------------------------------------           \n//* BUILD ALTERNATE INDEX CLUSTER                                               \n//*-------------------------------------------------------------------*         \n//STEP30  EXEC PGM=IDCAMS                                                       \n//SYSPRINT DD  SYSOUT=*                                                         \n//SYSIN    DD  *                                                                \n   BLDINDEX                                                      -              \n   INDATASET(AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS)                 -              \n   OUTDATASET(AWS.M2.CARDDEMO.TRANSACT.VSAM.AIX)                                \n/*  \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:08 CDT\n//*\n</code></pre>"},{"location":"jobs/TRANREPT.html","title":"TRANREPT","text":""},{"location":"jobs/TRANREPT.html#description","title":"Description","text":"<p>This JCL job generates a transaction report for the CardDemo application. It executes in three main steps: first, it unloads processed transaction data from a VSAM KSDS file to a sequential backup file; second, it filters transactions based on a specified date range (January 1, 2022 to July 6, 2022) and sorts them by card number; finally, it runs the CBTRN03C program to produce a formatted transaction report. The job accesses multiple reference files including card cross-reference data, transaction types, and transaction categories to enrich the report information. The resulting report is stored in the AWS.M2.CARDDEMO.TRANREPT dataset with standard report formatting (133-byte fixed-block records).</p>"},{"location":"jobs/TRANREPT.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>SORT</code></li> <li><code>CBTRN03C</code></li> </ul>"},{"location":"jobs/TRANREPT.html#jcl-code","title":"JCL Code","text":"<pre><code>//TRANREPT JOB 'TRANSACTION REPORT',                                            \n// CLASS=A,MSGCLASS=0,NOTIFY=&amp;SYSUID              \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************            \n//JOBLIB JCLLIB ORDER=('AWS.M2.CARDDEMO.PROC')                                  \n//* ********************************************************`***********        \n//* Unload the processed transaction file                                       \n//* *******************************************************************         \n//STEP05R EXEC PROC=REPROC,                                                     \n// CNTLLIB=AWS.M2.CARDDEMO.CNTL                                                 \n//*                                                                             \n//PRC001.FILEIN  DD DISP=SHR,                                                   \n//        DSN=AWS.M2.CARDDEMO.TRANSACT.VSAM.KSDS                                \n//*                                                                             \n//PRC001.FILEOUT DD DISP=(NEW,CATLG,DELETE),                                    \n//        UNIT=SYSDA,                                                           \n//        DCB=(LRECL=350,RECFM=FB,BLKSIZE=0),                                   \n//        SPACE=(CYL,(1,1),RLSE),                                               \n//        DSN=AWS.M2.CARDDEMO.TRANSACT.BKUP(+1)                                 \n//* *******************************************************************         \n//* Filter the transactions for a the parm date and sort by card num            \n//* *******************************************************************         \n//STEP05R  EXEC PGM=SORT                                                        \n//SORTIN   DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.TRANSACT.BKUP(+1)                                \n//SYMNAMES DD *                                                                 \nTRAN-CARD-NUM,263,16,ZD                                                         \nTRAN-PROC-DT,305,10,CH                                                          \nPARM-START-DATE,C'2022-01-01'                                      //Date       \nPARM-END-DATE,C'2022-07-06'                                        //Date       \n//SYSIN    DD *                                                                 \n SORT FIELDS=(TRAN-CARD-NUM,A)                                                  \n INCLUDE COND=(TRAN-PROC-DT,GE,PARM-START-DATE,AND,                             \n         TRAN-PROC-DT,LE,PARM-END-DATE)                                         \n/*                                                                              \n//SYSOUT   DD SYSOUT=*                                                          \n//SORTOUT  DD DISP=(NEW,CATLG,DELETE),                                          \n//         UNIT=SYSDA,                                                          \n//         DCB=(*.SORTIN),                                                      \n//         SPACE=(CYL,(1,1),RLSE),                                              \n//         DSN=AWS.M2.CARDDEMO.TRANSACT.DALY(+1)                                \n//* *******************************************************************         \n//* Produce a formatted report for processed transactions                       \n//* *******************************************************************         \n//STEP10R EXEC PGM=CBTRN03C                                                     \n//STEPLIB  DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.LOADLIB                                          \n//SYSOUT   DD SYSOUT=*                                                          \n//SYSPRINT DD SYSOUT=*                                                          \n//* Input files                                                                 \n//TRANFILE DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.TRANSACT.DALY(+1)                                \n//CARDXREF DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.CARDXREF.VSAM.KSDS                               \n//TRANTYPE DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.TRANTYPE.VSAM.KSDS                               \n//TRANCATG DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.TRANCATG.VSAM.KSDS                               \n//DATEPARM DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.DATEPARM                                         \n//* Output files                                                                \n//TRANREPT DD DISP=(NEW,CATLG,DELETE),                                          \n//         UNIT=SYSDA,                                                          \n//         DCB=(LRECL=133,RECFM=FB,BLKSIZE=0),                                  \n//         SPACE=(CYL,(1,1),RLSE),                                              \n//         DSN=AWS.M2.CARDDEMO.TRANREPT(+1)                                     \n//                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:08 CDT\n//*\n</code></pre>"},{"location":"jobs/TRANTYPE.html","title":"TRANTYPE","text":""},{"location":"jobs/TRANTYPE.html#description","title":"Description","text":"<p>This JCL job creates and populates a VSAM KSDS file for transaction types in the CardDemo application. The job executes in three steps: first deleting any existing transaction type file (STEP05), then defining a new VSAM KSDS file with a 2-byte key and 60-byte fixed-length records (STEP10), and finally copying data from a flat file into the newly created VSAM file (STEP15). The transaction type file (AWS.M2.CARDDEMO.TRANTYPE.VSAM.KSDS) likely stores reference data for transaction type codes used throughout the CardDemo application.</p>"},{"location":"jobs/TRANTYPE.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/TRANTYPE.html#jcl-code","title":"JCL Code","text":"<pre><code>//TRANTYPE JOB 'DEFINE TRAN TYPE',                                              \n// CLASS=A,MSGCLASS=0,NOTIFY=&amp;SYSUID           \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************            \n//* *******************************************************************         \n//* DELETE TRANSACATION TYPE VSAM FILE IF ONE ALREADY EXISTS                    \n//* *******************************************************************         \n//STEP05 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DELETE AWS.M2.CARDDEMO.TRANTYPE.VSAM.KSDS -                                  \n          CLUSTER                                                               \n   SET    MAXCC = 0                                                             \n/*                                                                              \n//*                                                                             \n//* *******************************************************************         \n//* DEFINE TRANSACATION TYPE VSAM FILE                                          \n//* *******************************************************************         \n//STEP10 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DEFINE CLUSTER (NAME(AWS.M2.CARDDEMO.TRANTYPE.VSAM.KSDS) -                   \n          CYLINDERS(1 5) -                                                      \n          VOLUMES(AWSHJ1 -                                                      \n          ) -                                                                   \n          KEYS(2 0) -                                                           \n          RECORDSIZE(60 60) -                                                   \n          SHAREOPTIONS(1 4) -                                                   \n          ERASE -                                                               \n          INDEXED -                                                             \n          ) -                                                                   \n          DATA (NAME(AWS.M2.CARDDEMO.TRANTYPE.VSAM.KSDS.DATA) -                 \n          ) -                                                                   \n          INDEX (NAME(AWS.M2.CARDDEMO.TRANTYPE.VSAM.KSDS.INDEX) -               \n          )                                                                     \n/*                                                                              \n//* *******************************************************************         \n//* COPY DATA FROM FLAT FILE TO VSAM FILE                                       \n//* *******************************************************************         \n//STEP15 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//TRANTYPE DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.TRANTYPE.PS                                      \n//TTYPVSAM DD DISP=OLD,                                                         \n//         DSN=AWS.M2.CARDDEMO.TRANTYPE.VSAM.KSDS                               \n//SYSIN    DD   *                                                               \n   REPRO INFILE(TRANTYPE) OUTFILE(TTYPVSAM)                                     \n/*                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:08 CDT\n//*\n</code></pre>"},{"location":"jobs/XREFFILE.html","title":"XREFFILE","text":""},{"location":"jobs/XREFFILE.html#description","title":"Description","text":"<p>This JCL job creates and configures a VSAM key-sequenced dataset (KSDS) for the CardDemo application's card cross-reference functionality. The job executes in multiple steps: first deleting any existing VSAM files and alternate indexes, then defining a new KSDS with specified parameters (50-byte records with a 16-byte key), populating it with data from a flat file, and finally creating an alternate index based on account ID (11-byte key starting at position 25). The job also defines a path to relate the alternate index to the base cluster and builds the alternate index. This VSAM file likely serves as a cross-reference between card numbers and account information, allowing the CardDemo application to access records through either key.</p>"},{"location":"jobs/XREFFILE.html#referenced-programs","title":"Referenced Programs","text":"<ul> <li><code>IDCAMS</code></li> </ul>"},{"location":"jobs/XREFFILE.html#jcl-code","title":"JCL Code","text":"<pre><code>//XREFFILE JOB 'Delete define cross ref file',CLASS=A,MSGCLASS=0,\n// NOTIFY=&amp;SYSUID    \n//******************************************************************\n//* Copyright Amazon.com, Inc. or its affiliates.                   \n//* All Rights Reserved.                                            \n//*                                                                 \n//* Licensed under the Apache License, Version 2.0 (the \"License\"). \n//* You may not use this file except in compliance with the License.\n//* You may obtain a copy of the License at                         \n//*                                                                 \n//*    http://www.apache.org/licenses/LICENSE-2.0                   \n//*                                                                 \n//* Unless required by applicable law or agreed to in writing,      \n//* software distributed under the License is distributed on an     \n//* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,    \n//* either express or implied. See the License for the specific     \n//* language governing permissions and limitations under the License\n//******************************************************************            \n//* *******************************************************************         \n//* DELETE CARD XREF VSAM FILE IF ONE ALREADY EXISTS                            \n//* *******************************************************************         \n//STEP05 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DELETE AWS.M2.CARDDEMO.CARDXREF.VSAM.KSDS -                                  \n          CLUSTER                                                               \n   IF MAXCC LE 08 THEN SET MAXCC = 0                                            \n   DELETE  AWS.M2.CARDDEMO.CARDXREF.VSAM.AIX  -                                 \n          ALTERNATEINDEX                                                        \n   IF MAXCC LE 08 THEN SET MAXCC = 0                                            \n/*                                                                              \n//*                                                                             \n//* *******************************************************************         \n//* DEFINE CARD XREF VSAM FILE                                                  \n//* *******************************************************************         \n//STEP10 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//SYSIN    DD   *                                                               \n   DEFINE CLUSTER (NAME(AWS.M2.CARDDEMO.CARDXREF.VSAM.KSDS) -                   \n          CYLINDERS(1 5) -                                                      \n          VOLUMES(AWSHJ1 -                                                      \n          ) -                                                                   \n          KEYS(16 0) -                                                          \n          RECORDSIZE(50 50) -                                                   \n          SHAREOPTIONS(2 3) -                                                   \n          ERASE -                                                               \n          INDEXED -                                                             \n          ) -                                                                   \n          DATA (NAME(AWS.M2.CARDDEMO.CARDXREF.VSAM.KSDS.DATA) -                 \n          ) -                                                                   \n          INDEX (NAME(AWS.M2.CARDDEMO.CARDXREF.VSAM.KSDS.INDEX) -               \n          )                                                                     \n/*                                                                              \n//* *******************************************************************         \n//* COPY DATA FROM FLAT FILE TO VSAM FILE                                       \n//* *******************************************************************         \n//STEP15 EXEC PGM=IDCAMS                                                        \n//SYSPRINT DD   SYSOUT=*                                                        \n//XREFDATA DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.CARDXREF.PS                                      \n//XREFVSAM DD DISP=SHR,                                                         \n//         DSN=AWS.M2.CARDDEMO.CARDXREF.VSAM.KSDS                               \n//SYSIN    DD   *                                                               \n   REPRO INFILE(XREFDATA) OUTFILE(XREFVSAM)                                     \n/*                                                                              \n//*********************************************************************         \n//* CREATE ALTERNATE INDEX ON ACCT ID                                           \n//*********************************************************************         \n//STEP20  EXEC PGM=IDCAMS                                                       \n//SYSPRINT DD  SYSOUT=*                                                         \n//SYSIN    DD  *                                                                \n   DEFINE ALTERNATEINDEX (NAME(AWS.M2.CARDDEMO.CARDXREF.VSAM.AIX)-              \n   RELATE(AWS.M2.CARDDEMO.CARDXREF.VSAM.KSDS)                    -              \n   KEYS(11,25)                                                   -              \n   NONUNIQUEKEY                                                  -              \n   UPGRADE                                                       -              \n   RECORDSIZE(50,50)                                             -              \n   FREESPACE(10,20)                                              -              \n   VOLUMES(AWSHJ1)                                               -              \n   CYLINDERS(5,1))                                               -              \n   DATA (NAME(AWS.M2.CARDDEMO.CARDXREF.VSAM.AIX.DATA))           -              \n   INDEX (NAME(AWS.M2.CARDDEMO.CARDXREF.VSAM.AIX.INDEX))                        \n/*                                                                              \n//*********************************************************************         \n//* DEFINE PATH IS USED TO RELATE THE ALTERNATE INDEX TO BASE CLUSTER           \n//*********************************************************************         \n//STEP25  EXEC PGM=IDCAMS                                                       \n//SYSPRINT DD  SYSOUT=*                                                         \n//SYSIN    DD  *                                                                \n  DEFINE PATH                                           -                       \n   (NAME(AWS.M2.CARDDEMO.CARDXREF.VSAM.AIX.PATH)        -                       \n    PATHENTRY(AWS.M2.CARDDEMO.CARDXREF.VSAM.AIX))                               \n/*                                                                              \n//*********************************************************************         \n//* BUILD ALTERNATE INDEX CLUSTER                                               \n//*********************************************************************         \n//STEP30  EXEC PGM=IDCAMS                                                       \n//SYSPRINT DD  SYSOUT=*                                                         \n//SYSIN    DD  *                                                                \n   BLDINDEX                                                      -              \n   INDATASET(AWS.M2.CARDDEMO.CARDXREF.VSAM.KSDS)                 -              \n   OUTDATASET(AWS.M2.CARDDEMO.CARDXREF.VSAM.AIX)                                \n/*                                                                              \n//*\n//* Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:23:09 CDT\n//*\n</code></pre>"}]}